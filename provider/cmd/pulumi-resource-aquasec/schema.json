{
    "name": "aquasec",
    "displayName": "Aquasec",
    "description": "A Pulumi package for creating and managing Aquasec cloud resources.",
    "keywords": [
        "pulumi",
        "aquasec",
        "category/utility"
    ],
    "homepage": "https://www.pulumi.com",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`aquasec` Terraform Provider](https://github.com/aquasecurity/terraform-provider-aquasec).",
    "repository": "https://github.com/pulumiverse/pulumi-aquasec",
    "pluginDownloadURL": "github://api.github.com/pulumiverse/pulumi-aquasec",
    "publisher": "Pulumiverse",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "compatibility": "tfbridge20",
            "namespaces": null,
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "rootNamespace": "Pulumiverse"
        },
        "go": {
            "generateExtraInputTypes": true,
            "generateResourceContainerTypes": true,
            "importBasePath": "github.com/pulumiverse/pulumi-aquasec/sdk/go/aquasec"
        },
        "java": {
            "basePackage": "com.pulumiverse"
        },
        "nodejs": {
            "compatibility": "tfbridge20",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "disableUnionOutputTypes": true,
            "packageDescription": "A Pulumi package for creating and managing Aquasec cloud resources.",
            "packageName": "@pulumiverse/aquasec",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/aquasecurity/terraform-provider-aquasec)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-aquasec` repo](https://github.com/pulumiverse/pulumi-aquasec/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-aquasec` repo](https://github.com/aquasecurity/terraform-provider-aquasec/issues).",
            "typescriptVersion": ""
        },
        "python": {
            "compatibility": "tfbridge20",
            "packageName": "pulumiverse_aquasec",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/aquasecurity/terraform-provider-aquasec)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-aquasec` repo](https://github.com/pulumiverse/pulumi-aquasec/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-aquasec` repo](https://github.com/aquasecurity/terraform-provider-aquasec/issues).",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            }
        }
    },
    "config": {
        "variables": {
            "aquaUrl": {
                "type": "string",
                "description": "This is the base URL of your Aqua instance. Can alternatively be sourced from the `AQUA_URL` environment variable.\n"
            },
            "caCertificatePath": {
                "type": "string",
                "description": "This is the file path for server CA certificates if they are not available on the host OS. Can alternatively be sourced\nfrom the `AQUA_CA_CERT_PATH` environment variable.\n"
            },
            "configPath": {
                "type": "string",
                "description": "This is the file path for Aqua provider configuration. The default configuration path is `~/.aqua/tf.config`. Can\nalternatively be sourced from the `AQUA_CONFIG` environment variable.\n"
            },
            "password": {
                "type": "string",
                "description": "This is the password that should be used to make the connection. Can alternatively be sourced from the `AQUA_PASSWORD`\nenvironment variable.\n",
                "secret": true
            },
            "username": {
                "type": "string",
                "description": "This is the user id that should be used to make the connection. Can alternatively be sourced from the `AQUA_USER`\nenvironment variable.\n",
                "secret": true
            },
            "verifyTls": {
                "type": "boolean",
                "description": "If true, server tls certificates will be verified by the client before making a connection. Defaults to true. Can\nalternatively be sourced from the `AQUA_TLS_VERIFY` environment variable.\n"
            }
        }
    },
    "types": {
        "aquasec:index/AcknowledgeIssue:AcknowledgeIssue": {
            "properties": {
                "author": {
                    "type": "string",
                    "description": "The user who acknowledged the issue.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "date": {
                    "type": "string",
                    "description": "The date and time of the acknowledgment.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dockerId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "expirationConfiguredAt": {
                    "type": "string",
                    "description": "The current dat and time when the expiration was set\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "expirationConfiguredBy": {
                    "type": "string",
                    "description": "The user who set the expiration of the issue.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "expirationDays": {
                    "type": "integer",
                    "description": "Number of days until expiration of the acknowledgement. The value must be integer from 1 to 999, inclusive.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fixVersion": {
                    "type": "string",
                    "description": "The version of the package that having a fix for the issue.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "imageName": {
                    "type": "string",
                    "description": "Only acknowledge the issue in the context of the specified image (also requires 'registry_name')\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "issueName": {
                    "type": "string",
                    "description": "The name of the security issue (the CVE or security advisory for vulnerabilities, name of malware or type of sensitive data)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "issueType": {
                    "type": "string",
                    "description": "The type of the security issue (either 'vulnerability', 'sensitive_data' or 'malware')\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "os": {
                    "type": "string",
                    "description": "When the resource_type is 'package', the operating system is required (e.g., 'ubuntu', 'alpine').\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "osVersion": {
                    "type": "string",
                    "description": "When the resource_type is 'package', the operating system version is required.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "permission": {
                    "type": "string",
                    "description": "The permissions of the user who acknowledged the issue.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "registryName": {
                    "type": "string",
                    "description": "Only acknowledge the issue in the context of the specified repository (also requires 'registry_name').\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceCpe": {
                    "type": "string",
                    "description": "The CPE of the resource as listed in the issue by the Aqua API. This is required for resources of type 'executable'. For packages and files, the next parameters can be specified instead.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceFormat": {
                    "type": "string",
                    "description": "The format of the resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceHash": {
                    "type": "string",
                    "description": "When the resource_type is 'file', the hash of the file is required\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceName": {
                    "type": "string",
                    "description": "When the resource_type is 'package', the name of the package is required.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourcePath": {
                    "type": "string",
                    "description": "The path of the resource. This is required for resources of type 'file' and 'executable'.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceType": {
                    "type": "string",
                    "description": "The type of the resource where the issue was detected (either 'package', 'file' or 'executable')\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceVersion": {
                    "type": "string",
                    "description": "When the resource_type is 'package', the version of the package is required\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "issueName",
                "issueType",
                "resourceType"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "author",
                        "date",
                        "expirationConfiguredAt",
                        "expirationConfiguredBy",
                        "issueName",
                        "issueType",
                        "permission",
                        "resourceType"
                    ]
                }
            }
        },
        "aquasec:index/ApplicationScopeCategory:ApplicationScopeCategory": {
            "properties": {
                "artifacts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/ApplicationScopeCategoryArtifact:ApplicationScopeCategoryArtifact"
                    },
                    "description": "An artifact is an application. It can be an image (for a container, not a CF application); a serverless function; or a Tanzu Application Service (TAS) droplet.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "entityScopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/ApplicationScopeCategoryEntityScope:ApplicationScopeCategoryEntityScope"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "infrastructures": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/ApplicationScopeCategoryInfrastructure:ApplicationScopeCategoryInfrastructure"
                    },
                    "description": "An infrastructure resource is an element of a computing environment on which a workload is orchestrated and run. It can be a host (VM) or a Kubernetes cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "workloads": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/ApplicationScopeCategoryWorkload:ApplicationScopeCategoryWorkload"
                    },
                    "description": "A workload is a running container. It can run in a Kubernetes cluster, on a VM (no orchestrator), or under Tanzu Application Service (TAS).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "entityScopes"
                    ]
                }
            }
        },
        "aquasec:index/ApplicationScopeCategoryArtifact:ApplicationScopeCategoryArtifact": {
            "properties": {
                "cfs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/ApplicationScopeCategoryArtifactCf:ApplicationScopeCategoryArtifactCf"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "functions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/ApplicationScopeCategoryArtifactFunction:ApplicationScopeCategoryArtifactFunction"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "images": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/ApplicationScopeCategoryArtifactImage:ApplicationScopeCategoryArtifactImage"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aquasec:index/ApplicationScopeCategoryArtifactCf:ApplicationScopeCategoryArtifactCf": {
            "properties": {
                "expression": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/ApplicationScopeCategoryArtifactCfVariable:ApplicationScopeCategoryArtifactCfVariable"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aquasec:index/ApplicationScopeCategoryArtifactCfVariable:ApplicationScopeCategoryArtifactCfVariable": {
            "properties": {
                "attribute": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aquasec:index/ApplicationScopeCategoryArtifactFunction:ApplicationScopeCategoryArtifactFunction": {
            "properties": {
                "expression": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/ApplicationScopeCategoryArtifactFunctionVariable:ApplicationScopeCategoryArtifactFunctionVariable"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aquasec:index/ApplicationScopeCategoryArtifactFunctionVariable:ApplicationScopeCategoryArtifactFunctionVariable": {
            "properties": {
                "attribute": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aquasec:index/ApplicationScopeCategoryArtifactImage:ApplicationScopeCategoryArtifactImage": {
            "properties": {
                "expression": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/ApplicationScopeCategoryArtifactImageVariable:ApplicationScopeCategoryArtifactImageVariable"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aquasec:index/ApplicationScopeCategoryArtifactImageVariable:ApplicationScopeCategoryArtifactImageVariable": {
            "properties": {
                "attribute": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aquasec:index/ApplicationScopeCategoryEntityScope:ApplicationScopeCategoryEntityScope": {
            "properties": {
                "expression": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/ApplicationScopeCategoryEntityScopeVariable:ApplicationScopeCategoryEntityScopeVariable"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "expression",
                        "variables"
                    ]
                }
            }
        },
        "aquasec:index/ApplicationScopeCategoryEntityScopeVariable:ApplicationScopeCategoryEntityScopeVariable": {
            "properties": {
                "attribute": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "attribute",
                        "value"
                    ]
                }
            }
        },
        "aquasec:index/ApplicationScopeCategoryInfrastructure:ApplicationScopeCategoryInfrastructure": {
            "properties": {
                "kubernetes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/ApplicationScopeCategoryInfrastructureKubernete:ApplicationScopeCategoryInfrastructureKubernete"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "os": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/ApplicationScopeCategoryInfrastructureO:ApplicationScopeCategoryInfrastructureO"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aquasec:index/ApplicationScopeCategoryInfrastructureKubernete:ApplicationScopeCategoryInfrastructureKubernete": {
            "properties": {
                "expression": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/ApplicationScopeCategoryInfrastructureKuberneteVariable:ApplicationScopeCategoryInfrastructureKuberneteVariable"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aquasec:index/ApplicationScopeCategoryInfrastructureKuberneteVariable:ApplicationScopeCategoryInfrastructureKuberneteVariable": {
            "properties": {
                "attribute": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aquasec:index/ApplicationScopeCategoryInfrastructureO:ApplicationScopeCategoryInfrastructureO": {
            "properties": {
                "expression": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/ApplicationScopeCategoryInfrastructureOVariable:ApplicationScopeCategoryInfrastructureOVariable"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aquasec:index/ApplicationScopeCategoryInfrastructureOVariable:ApplicationScopeCategoryInfrastructureOVariable": {
            "properties": {
                "attribute": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aquasec:index/ApplicationScopeCategoryWorkload:ApplicationScopeCategoryWorkload": {
            "properties": {
                "cfs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/ApplicationScopeCategoryWorkloadCf:ApplicationScopeCategoryWorkloadCf"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kubernetes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/ApplicationScopeCategoryWorkloadKubernete:ApplicationScopeCategoryWorkloadKubernete"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "os": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/ApplicationScopeCategoryWorkloadO:ApplicationScopeCategoryWorkloadO"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aquasec:index/ApplicationScopeCategoryWorkloadCf:ApplicationScopeCategoryWorkloadCf": {
            "properties": {
                "expression": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/ApplicationScopeCategoryWorkloadCfVariable:ApplicationScopeCategoryWorkloadCfVariable"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aquasec:index/ApplicationScopeCategoryWorkloadCfVariable:ApplicationScopeCategoryWorkloadCfVariable": {
            "properties": {
                "attribute": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aquasec:index/ApplicationScopeCategoryWorkloadKubernete:ApplicationScopeCategoryWorkloadKubernete": {
            "properties": {
                "expression": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/ApplicationScopeCategoryWorkloadKuberneteVariable:ApplicationScopeCategoryWorkloadKuberneteVariable"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aquasec:index/ApplicationScopeCategoryWorkloadKuberneteVariable:ApplicationScopeCategoryWorkloadKuberneteVariable": {
            "properties": {
                "attribute": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aquasec:index/ApplicationScopeCategoryWorkloadO:ApplicationScopeCategoryWorkloadO": {
            "properties": {
                "expression": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/ApplicationScopeCategoryWorkloadOVariable:ApplicationScopeCategoryWorkloadOVariable"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aquasec:index/ApplicationScopeCategoryWorkloadOVariable:ApplicationScopeCategoryWorkloadOVariable": {
            "properties": {
                "attribute": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aquasec:index/ContainerRuntimePolicyFileIntegrityMonitoring:ContainerRuntimePolicyFileIntegrityMonitoring": {
            "properties": {
                "excludedPaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of paths to be excluded from being monitored.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "excludedProcesses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of processes to be excluded from being monitored.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "excludedUsers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of users to be excluded from being monitored.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "monitorAttributes": {
                    "type": "boolean",
                    "description": "If true, add attributes operations will be monitored.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "monitorCreate": {
                    "type": "boolean",
                    "description": "If true, create operations will be monitored.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "monitorDelete": {
                    "type": "boolean",
                    "description": "If true, deletion operations will be monitored.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "monitorModify": {
                    "type": "boolean",
                    "description": "If true, modification operations will be monitored.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "monitorRead": {
                    "type": "boolean",
                    "description": "If true, read operations will be monitored.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "monitoredPaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of paths to be monitored.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "monitoredProcesses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of processes to be monitored.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "monitoredUsers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of users to be monitored.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aquasec:index/ContainerRuntimePolicyMalwareScanOptions:ContainerRuntimePolicyMalwareScanOptions": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "Set Action, Defaults to 'Alert' when empty\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Defines if enabled or not\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "excludeDirectories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of registry paths to be excluded from being protected.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "excludeProcesses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of registry processes to be excluded from being protected.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aquasec:index/ContainerRuntimePolicyScopeVariable:ContainerRuntimePolicyScopeVariable": {
            "properties": {
                "attribute": {
                    "type": "string",
                    "description": "Class of supported scope.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name assigned to the attribute.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "Value assigned to the attribute.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "attribute",
                "value"
            ]
        },
        "aquasec:index/EnforcerGroupsCommand:EnforcerGroupsCommand": {
            "properties": {
                "default": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kubernetes": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "swarm": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "windows": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "kubernetes",
                        "swarm",
                        "windows"
                    ]
                }
            }
        },
        "aquasec:index/EnforcerGroupsOrchestrator:EnforcerGroupsOrchestrator": {
            "properties": {
                "master": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "namespace": {
                    "type": "string",
                    "description": "May be specified for these orchestrators: Kubernetes, Kubernetes GKE, VMware Tanzu Kubernetes Grid Integrated Edition (PKS).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceAccount": {
                    "type": "string",
                    "description": "May be specified for these orchestrators: Kubernetes, Kubernetes GKE, OpenShift, VMware Tanzu Kubernetes Grid Integrated Edition (PKS).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Enforcer Type.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aquasec:index/FirewallPolicyInboundNetwork:FirewallPolicyInboundNetwork": {
            "properties": {
                "allow": {
                    "type": "boolean",
                    "description": "Indicates whether the specified resources are allowed to pass in data or requests.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "portRange": {
                    "type": "string",
                    "description": "Range of ports affected by firewall.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resource": {
                    "type": "string",
                    "description": "Information of the resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceType": {
                    "type": "string",
                    "description": "Type of the resource\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "allow",
                "portRange",
                "resourceType"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "allow",
                        "portRange",
                        "resource",
                        "resourceType"
                    ]
                }
            }
        },
        "aquasec:index/FirewallPolicyOutboundNetwork:FirewallPolicyOutboundNetwork": {
            "properties": {
                "allow": {
                    "type": "boolean",
                    "description": "Indicates whether the specified resources are allowed to receive data or requests.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "portRange": {
                    "type": "string",
                    "description": "Range of ports affected by firewall.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resource": {
                    "type": "string",
                    "description": "Information of the resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceType": {
                    "type": "string",
                    "description": "Type of the resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "allow",
                "portRange",
                "resourceType"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "allow",
                        "portRange",
                        "resource",
                        "resourceType"
                    ]
                }
            }
        },
        "aquasec:index/FunctionAssurancePolicyAutoScanTime:FunctionAssurancePolicyAutoScanTime": {
            "properties": {
                "iteration": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "iterationType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "time": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "weekDays": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "iteration",
                        "weekDays"
                    ]
                }
            }
        },
        "aquasec:index/FunctionAssurancePolicyCustomCheck:FunctionAssurancePolicyCustomCheck": {
            "properties": {
                "author": {
                    "type": "string",
                    "description": "Name of user account that created the policy.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "engine": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lastModified": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "path": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "readOnly": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scriptId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "severity": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "snippet": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aquasec:index/FunctionAssurancePolicyForbiddenLabel:FunctionAssurancePolicyForbiddenLabel": {
            "properties": {
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aquasec:index/FunctionAssurancePolicyPackagesBlackList:FunctionAssurancePolicyPackagesBlackList": {
            "properties": {
                "arch": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "display": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "epoch": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "format": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "license": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "release": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "version": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "versionRange": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aquasec:index/FunctionAssurancePolicyPackagesWhiteList:FunctionAssurancePolicyPackagesWhiteList": {
            "properties": {
                "arch": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "display": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "epoch": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "format": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "license": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "release": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "version": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "versionRange": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aquasec:index/FunctionAssurancePolicyRequiredLabel:FunctionAssurancePolicyRequiredLabel": {
            "properties": {
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aquasec:index/FunctionAssurancePolicyScope:FunctionAssurancePolicyScope": {
            "properties": {
                "expression": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/FunctionAssurancePolicyScopeVariable:FunctionAssurancePolicyScopeVariable"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "expression"
                    ]
                }
            }
        },
        "aquasec:index/FunctionAssurancePolicyScopeVariable:FunctionAssurancePolicyScopeVariable": {
            "properties": {
                "attribute": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "attribute",
                        "value"
                    ]
                }
            }
        },
        "aquasec:index/FunctionAssurancePolicyTrustedBaseImage:FunctionAssurancePolicyTrustedBaseImage": {
            "properties": {
                "imagename": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "registry": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aquasec:index/FunctionRuntimePolicyScopeVariable:FunctionRuntimePolicyScopeVariable": {
            "properties": {
                "attribute": {
                    "type": "string",
                    "description": "Class of supported scope.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name assigned to the attribute.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "Value assigned to the attribute.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "attribute",
                "value"
            ]
        },
        "aquasec:index/HostAssurancePolicyAutoScanTime:HostAssurancePolicyAutoScanTime": {
            "properties": {
                "iteration": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "iterationType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "time": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "weekDays": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "iteration",
                        "weekDays"
                    ]
                }
            }
        },
        "aquasec:index/HostAssurancePolicyCustomCheck:HostAssurancePolicyCustomCheck": {
            "properties": {
                "author": {
                    "type": "string",
                    "description": "Name of user account that created the policy.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "engine": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lastModified": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "path": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "readOnly": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scriptId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "severity": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "snippet": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aquasec:index/HostAssurancePolicyForbiddenLabel:HostAssurancePolicyForbiddenLabel": {
            "properties": {
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aquasec:index/HostAssurancePolicyPackagesBlackList:HostAssurancePolicyPackagesBlackList": {
            "properties": {
                "arch": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "display": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "epoch": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "format": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "license": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "release": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "version": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "versionRange": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aquasec:index/HostAssurancePolicyPackagesWhiteList:HostAssurancePolicyPackagesWhiteList": {
            "properties": {
                "arch": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "display": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "epoch": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "format": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "license": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "release": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "version": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "versionRange": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aquasec:index/HostAssurancePolicyRequiredLabel:HostAssurancePolicyRequiredLabel": {
            "properties": {
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aquasec:index/HostAssurancePolicyScope:HostAssurancePolicyScope": {
            "properties": {
                "expression": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/HostAssurancePolicyScopeVariable:HostAssurancePolicyScopeVariable"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "expression"
                    ]
                }
            }
        },
        "aquasec:index/HostAssurancePolicyScopeVariable:HostAssurancePolicyScopeVariable": {
            "properties": {
                "attribute": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "attribute",
                        "value"
                    ]
                }
            }
        },
        "aquasec:index/HostAssurancePolicyTrustedBaseImage:HostAssurancePolicyTrustedBaseImage": {
            "properties": {
                "imagename": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "registry": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aquasec:index/HostRuntimePolicyFileIntegrityMonitoring:HostRuntimePolicyFileIntegrityMonitoring": {
            "properties": {
                "excludedPaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of paths to be excluded from being monitored.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "excludedProcesses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of processes to be excluded from being monitored.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "excludedUsers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of users to be excluded from being monitored.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "monitorAttributes": {
                    "type": "boolean",
                    "description": "If true, add attributes operations will be monitored.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "monitorCreate": {
                    "type": "boolean",
                    "description": "If true, create operations will be monitored.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "monitorDelete": {
                    "type": "boolean",
                    "description": "If true, deletion operations will be monitored.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "monitorModify": {
                    "type": "boolean",
                    "description": "If true, modification operations will be monitored.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "monitorRead": {
                    "type": "boolean",
                    "description": "If true, read operations will be monitored.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "monitoredPaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of paths to be monitored.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "monitoredProcesses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of processes to be monitored.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "monitoredUsers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of users to be monitored.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aquasec:index/HostRuntimePolicyMalwareScanOptions:HostRuntimePolicyMalwareScanOptions": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "Set Action, Defaults to 'Alert' when empty\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Defines if enabled or not\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "excludeDirectories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of registry paths to be excluded from being protected.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "excludeProcesses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of registry processes to be excluded from being protected.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aquasec:index/HostRuntimePolicyScopeVariable:HostRuntimePolicyScopeVariable": {
            "properties": {
                "attribute": {
                    "type": "string",
                    "description": "Class of supported scope.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name assigned to the attribute.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "Value assigned to the attribute.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "attribute",
                "value"
            ]
        },
        "aquasec:index/HostRuntimePolicyWindowsRegistryMonitoring:HostRuntimePolicyWindowsRegistryMonitoring": {
            "properties": {
                "excludedPaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of paths to be excluded from being monitored.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "excludedProcesses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of registry processes to be excluded from being monitored.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "excludedUsers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of registry users to be excluded from being monitored.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "monitorAttributes": {
                    "type": "boolean",
                    "description": "If true, add attributes operations will be monitored.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "monitorCreate": {
                    "type": "boolean",
                    "description": "If true, create operations will be monitored.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "monitorDelete": {
                    "type": "boolean",
                    "description": "If true, deletion operations will be monitored.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "monitorModify": {
                    "type": "boolean",
                    "description": "If true, modification operations will be monitored.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "monitorRead": {
                    "type": "boolean",
                    "description": "If true, read operations will be monitored.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "monitoredPaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of paths to be monitored.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "monitoredProcesses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of registry processes to be monitored.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "monitoredUsers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of registry users to be monitored.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aquasec:index/HostRuntimePolicyWindowsRegistryProtection:HostRuntimePolicyWindowsRegistryProtection": {
            "properties": {
                "excludedPaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of registry paths to be excluded from being protected.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "excludedProcesses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of registry processes to be excluded from being protected.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "excludedUsers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of registry paths to be users from being protected.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protectedPaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of registry paths to be protected.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protectedProcesses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of registry processes to be protected.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protectedUsers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of registry users to be protected.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aquasec:index/ImageAssuranceChecksPerformed:ImageAssuranceChecksPerformed": {
            "properties": {
                "assuranceType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "blocking": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "control": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dtaSkipped": {
                    "type": "boolean",
                    "description": "If DTA was skipped.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dtaSkippedReason": {
                    "type": "string",
                    "description": "The reason why DTA was skipped.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "failed": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "policyName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "assuranceType",
                        "blocking",
                        "control",
                        "dtaSkipped",
                        "dtaSkippedReason",
                        "failed",
                        "policyName"
                    ]
                }
            }
        },
        "aquasec:index/ImageAssurancePolicyAutoScanTime:ImageAssurancePolicyAutoScanTime": {
            "properties": {
                "iteration": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "iterationType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "time": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "weekDays": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "iteration",
                        "weekDays"
                    ]
                }
            }
        },
        "aquasec:index/ImageAssurancePolicyCustomCheck:ImageAssurancePolicyCustomCheck": {
            "properties": {
                "author": {
                    "type": "string",
                    "description": "Name of user account that created the policy.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "engine": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lastModified": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "path": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "readOnly": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scriptId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "severity": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "snippet": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aquasec:index/ImageAssurancePolicyForbiddenLabel:ImageAssurancePolicyForbiddenLabel": {
            "properties": {
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aquasec:index/ImageAssurancePolicyPackagesBlackList:ImageAssurancePolicyPackagesBlackList": {
            "properties": {
                "arch": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "display": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "epoch": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "format": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "license": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "release": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "version": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "versionRange": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aquasec:index/ImageAssurancePolicyPackagesWhiteList:ImageAssurancePolicyPackagesWhiteList": {
            "properties": {
                "arch": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "display": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "epoch": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "format": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "license": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "release": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "version": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "versionRange": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aquasec:index/ImageAssurancePolicyRequiredLabel:ImageAssurancePolicyRequiredLabel": {
            "properties": {
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aquasec:index/ImageAssurancePolicyScope:ImageAssurancePolicyScope": {
            "properties": {
                "expression": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/ImageAssurancePolicyScopeVariable:ImageAssurancePolicyScopeVariable"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "expression"
                    ]
                }
            }
        },
        "aquasec:index/ImageAssurancePolicyScopeVariable:ImageAssurancePolicyScopeVariable": {
            "properties": {
                "attribute": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "attribute",
                        "value"
                    ]
                }
            }
        },
        "aquasec:index/ImageAssurancePolicyTrustedBaseImage:ImageAssurancePolicyTrustedBaseImage": {
            "properties": {
                "imagename": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "registry": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aquasec:index/ImageHistory:ImageHistory": {
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "The image creation comment.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "created": {
                    "type": "string",
                    "description": "The date and time when the image was registered.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createdBy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of this resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "size": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "comment",
                        "created",
                        "createdBy",
                        "id",
                        "size"
                    ]
                }
            }
        },
        "aquasec:index/ImageVulnerability:ImageVulnerability": {
            "properties": {
                "ackAuthor": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ackComment": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ackExpirationConfiguredAt": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ackExpirationConfiguredBy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ackExpirationDays": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ackScope": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "acknowledgeDate": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ancestorPkg": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "aquaScore": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "aquaScoreClassification": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "aquaScoringSystem": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "aquaSeverity": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "aquaSeverityClassification": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "aquaVectors": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "auditEventsCount": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "blockEventsCount": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "classification": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "digest": {
                    "type": "string",
                    "description": "The content digest of the image.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "exploitReference": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "exploitType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "firstFoundDate": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fixVersion": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "imageName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lastFoundDate": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "modificationDate": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the image.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nvdCvss2Score": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nvdCvss2Vectors": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nvdCvss3Score": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nvdCvss3Severity": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nvdCvss3Vectors": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nvdSeverity": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nvdUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "os": {
                    "type": "string",
                    "description": "The operating system detected in the image\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "osVersion": {
                    "type": "string",
                    "description": "The version of the OS detected in the image.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "permission": {
                    "type": "string",
                    "description": "Permission of the image.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "publishDate": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "registry": {
                    "type": "string",
                    "description": "The name of the registry where the image is stored.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "repository": {
                    "type": "string",
                    "description": "The name of the image's repository.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceArchitecture": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceCpe": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceFormat": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceHash": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceLicenses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourcePath": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceVersion": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "severityClassification": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "solution": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "temporalVector": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vPatchAppliedBy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vPatchAppliedOn": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vPatchEnforcedBy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vPatchEnforcedOn": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vPatchPolicyEnforce": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vPatchPolicyName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vPatchRevertedBy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vPatchRevertedOn": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vPatchStatus": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vendorCvss2Score": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vendorCvss2Vectors": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vendorSeverity": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vendorStatement": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vendorUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "ackAuthor",
                        "ackComment",
                        "ackExpirationConfiguredAt",
                        "ackExpirationConfiguredBy",
                        "ackExpirationDays",
                        "ackScope",
                        "acknowledgeDate",
                        "ancestorPkg",
                        "aquaScore",
                        "aquaScoreClassification",
                        "aquaScoringSystem",
                        "aquaSeverity",
                        "aquaSeverityClassification",
                        "aquaVectors",
                        "auditEventsCount",
                        "blockEventsCount",
                        "classification",
                        "description",
                        "digest",
                        "exploitReference",
                        "exploitType",
                        "firstFoundDate",
                        "fixVersion",
                        "imageName",
                        "lastFoundDate",
                        "modificationDate",
                        "name",
                        "nvdCvss2Score",
                        "nvdCvss2Vectors",
                        "nvdCvss3Score",
                        "nvdCvss3Severity",
                        "nvdCvss3Vectors",
                        "nvdSeverity",
                        "nvdUrl",
                        "os",
                        "osVersion",
                        "permission",
                        "publishDate",
                        "registry",
                        "repository",
                        "resourceArchitecture",
                        "resourceCpe",
                        "resourceFormat",
                        "resourceHash",
                        "resourceLicenses",
                        "resourceName",
                        "resourcePath",
                        "resourceType",
                        "resourceVersion",
                        "severityClassification",
                        "solution",
                        "temporalVector",
                        "vPatchAppliedBy",
                        "vPatchAppliedOn",
                        "vPatchEnforcedBy",
                        "vPatchEnforcedOn",
                        "vPatchPolicyEnforce",
                        "vPatchPolicyName",
                        "vPatchRevertedBy",
                        "vPatchRevertedOn",
                        "vPatchStatus",
                        "vendorCvss2Score",
                        "vendorCvss2Vectors",
                        "vendorSeverity",
                        "vendorStatement",
                        "vendorUrl"
                    ]
                }
            }
        },
        "aquasec:index/IntegrationRegistryOption:IntegrationRegistryOption": {
            "properties": {
                "option": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aquasec:index/KubernetesAssurancePolicyAutoScanTime:KubernetesAssurancePolicyAutoScanTime": {
            "properties": {
                "iteration": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "iterationType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "time": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "weekDays": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "iteration",
                        "weekDays"
                    ]
                }
            }
        },
        "aquasec:index/KubernetesAssurancePolicyCustomCheck:KubernetesAssurancePolicyCustomCheck": {
            "properties": {
                "author": {
                    "type": "string",
                    "description": "Name of user account that created the policy.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "engine": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lastModified": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "path": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "readOnly": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scriptId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "severity": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "snippet": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aquasec:index/KubernetesAssurancePolicyForbiddenLabel:KubernetesAssurancePolicyForbiddenLabel": {
            "properties": {
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aquasec:index/KubernetesAssurancePolicyPackagesBlackList:KubernetesAssurancePolicyPackagesBlackList": {
            "properties": {
                "arch": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "display": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "epoch": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "format": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "license": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "release": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "version": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "versionRange": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aquasec:index/KubernetesAssurancePolicyPackagesWhiteList:KubernetesAssurancePolicyPackagesWhiteList": {
            "properties": {
                "arch": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "display": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "epoch": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "format": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "license": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "release": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "version": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "versionRange": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aquasec:index/KubernetesAssurancePolicyRequiredLabel:KubernetesAssurancePolicyRequiredLabel": {
            "properties": {
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aquasec:index/KubernetesAssurancePolicyScope:KubernetesAssurancePolicyScope": {
            "properties": {
                "expression": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/KubernetesAssurancePolicyScopeVariable:KubernetesAssurancePolicyScopeVariable"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "expression"
                    ]
                }
            }
        },
        "aquasec:index/KubernetesAssurancePolicyScopeVariable:KubernetesAssurancePolicyScopeVariable": {
            "properties": {
                "attribute": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "attribute",
                        "value"
                    ]
                }
            }
        },
        "aquasec:index/KubernetesAssurancePolicyTrustedBaseImage:KubernetesAssurancePolicyTrustedBaseImage": {
            "properties": {
                "imagename": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "registry": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aquasec:index/RoleMappingLdap:RoleMappingLdap": {
            "properties": {
                "roleMapping": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Role Mapping is used to define the IdP role that the user will assume in Aqua\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "roleMapping"
            ]
        },
        "aquasec:index/RoleMappingOauth2:RoleMappingOauth2": {
            "properties": {
                "roleMapping": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Role Mapping is used to define the IdP role that the user will assume in Aqua\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "roleMapping"
            ]
        },
        "aquasec:index/RoleMappingOpenid:RoleMappingOpenid": {
            "properties": {
                "roleMapping": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Role Mapping is used to define the IdP role that the user will assume in Aqua\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "roleMapping"
            ]
        },
        "aquasec:index/RoleMappingSaml:RoleMappingSaml": {
            "properties": {
                "roleMapping": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Role Mapping is used to define the IdP role that the user will assume in Aqua\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "roleMapping"
            ]
        },
        "aquasec:index/ServiceScopeVariable:ServiceScopeVariable": {
            "properties": {
                "attribute": {
                    "type": "string",
                    "description": "Class of supported scope.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name assigned to the attribute.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "Value assigned to the attribute.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aquasec:index/UserSaasGroup:UserSaasGroup": {
            "properties": {
                "groupAdmin": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aquasec:index/UserSaasLogin:UserSaasLogin": {
            "properties": {
                "created": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "The ID of this resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userId": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "created",
                        "id",
                        "ipAddress",
                        "userId"
                    ]
                }
            }
        },
        "aquasec:index/getAcknowledgesAcknowledge:getAcknowledgesAcknowledge": {
            "properties": {
                "author": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "comment": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "date": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dockerId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "expirationConfiguredAt": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "expirationConfiguredBy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "expirationDays": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fixVersion": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "imageName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "issueName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "issueType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "os": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "osVersion": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "permission": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "registryName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceCpe": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceFormat": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceHash": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourcePath": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceVersion": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "author",
                "comment",
                "date",
                "dockerId",
                "expirationConfiguredAt",
                "expirationConfiguredBy",
                "expirationDays",
                "fixVersion",
                "imageName",
                "issueName",
                "issueType",
                "os",
                "osVersion",
                "permission",
                "registryName",
                "resourceCpe",
                "resourceFormat",
                "resourceHash",
                "resourceName",
                "resourcePath",
                "resourceType",
                "resourceVersion"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aquasec:index/getApplicationScopeCategory:getApplicationScopeCategory": {
            "properties": {
                "artifacts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/getApplicationScopeCategoryArtifact:getApplicationScopeCategoryArtifact"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "entityScopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/getApplicationScopeCategoryEntityScope:getApplicationScopeCategoryEntityScope"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "infrastructures": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/getApplicationScopeCategoryInfrastructure:getApplicationScopeCategoryInfrastructure"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "workloads": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/getApplicationScopeCategoryWorkload:getApplicationScopeCategoryWorkload"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aquasec:index/getApplicationScopeCategoryArtifact:getApplicationScopeCategoryArtifact": {
            "properties": {
                "cfs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/getApplicationScopeCategoryArtifactCf:getApplicationScopeCategoryArtifactCf"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "functions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/getApplicationScopeCategoryArtifactFunction:getApplicationScopeCategoryArtifactFunction"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "images": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/getApplicationScopeCategoryArtifactImage:getApplicationScopeCategoryArtifactImage"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aquasec:index/getApplicationScopeCategoryArtifactCf:getApplicationScopeCategoryArtifactCf": {
            "properties": {
                "expression": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/getApplicationScopeCategoryArtifactCfVariable:getApplicationScopeCategoryArtifactCfVariable"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "expression"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aquasec:index/getApplicationScopeCategoryArtifactCfVariable:getApplicationScopeCategoryArtifactCfVariable": {
            "properties": {
                "attribute": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "attribute"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aquasec:index/getApplicationScopeCategoryArtifactFunction:getApplicationScopeCategoryArtifactFunction": {
            "properties": {
                "expression": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/getApplicationScopeCategoryArtifactFunctionVariable:getApplicationScopeCategoryArtifactFunctionVariable"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "expression"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aquasec:index/getApplicationScopeCategoryArtifactFunctionVariable:getApplicationScopeCategoryArtifactFunctionVariable": {
            "properties": {
                "attribute": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "attribute"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aquasec:index/getApplicationScopeCategoryArtifactImage:getApplicationScopeCategoryArtifactImage": {
            "properties": {
                "expression": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/getApplicationScopeCategoryArtifactImageVariable:getApplicationScopeCategoryArtifactImageVariable"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "expression"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aquasec:index/getApplicationScopeCategoryArtifactImageVariable:getApplicationScopeCategoryArtifactImageVariable": {
            "properties": {
                "attribute": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aquasec:index/getApplicationScopeCategoryEntityScope:getApplicationScopeCategoryEntityScope": {
            "properties": {
                "expression": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/getApplicationScopeCategoryEntityScopeVariable:getApplicationScopeCategoryEntityScopeVariable"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "expression"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aquasec:index/getApplicationScopeCategoryEntityScopeVariable:getApplicationScopeCategoryEntityScopeVariable": {
            "properties": {
                "attribute": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "attribute",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aquasec:index/getApplicationScopeCategoryInfrastructure:getApplicationScopeCategoryInfrastructure": {
            "properties": {
                "kubernetes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/getApplicationScopeCategoryInfrastructureKubernete:getApplicationScopeCategoryInfrastructureKubernete"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "os": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/getApplicationScopeCategoryInfrastructureO:getApplicationScopeCategoryInfrastructureO"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aquasec:index/getApplicationScopeCategoryInfrastructureKubernete:getApplicationScopeCategoryInfrastructureKubernete": {
            "properties": {
                "expression": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/getApplicationScopeCategoryInfrastructureKuberneteVariable:getApplicationScopeCategoryInfrastructureKuberneteVariable"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "expression"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aquasec:index/getApplicationScopeCategoryInfrastructureKuberneteVariable:getApplicationScopeCategoryInfrastructureKuberneteVariable": {
            "properties": {
                "attribute": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "attribute"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aquasec:index/getApplicationScopeCategoryInfrastructureO:getApplicationScopeCategoryInfrastructureO": {
            "properties": {
                "expression": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/getApplicationScopeCategoryInfrastructureOVariable:getApplicationScopeCategoryInfrastructureOVariable"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "expression"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aquasec:index/getApplicationScopeCategoryInfrastructureOVariable:getApplicationScopeCategoryInfrastructureOVariable": {
            "properties": {
                "attribute": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "attribute"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aquasec:index/getApplicationScopeCategoryWorkload:getApplicationScopeCategoryWorkload": {
            "properties": {
                "cfs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/getApplicationScopeCategoryWorkloadCf:getApplicationScopeCategoryWorkloadCf"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kubernetes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/getApplicationScopeCategoryWorkloadKubernete:getApplicationScopeCategoryWorkloadKubernete"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "os": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/getApplicationScopeCategoryWorkloadO:getApplicationScopeCategoryWorkloadO"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "aquasec:index/getApplicationScopeCategoryWorkloadCf:getApplicationScopeCategoryWorkloadCf": {
            "properties": {
                "expression": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/getApplicationScopeCategoryWorkloadCfVariable:getApplicationScopeCategoryWorkloadCfVariable"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "expression"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aquasec:index/getApplicationScopeCategoryWorkloadCfVariable:getApplicationScopeCategoryWorkloadCfVariable": {
            "properties": {
                "attribute": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "attribute"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aquasec:index/getApplicationScopeCategoryWorkloadKubernete:getApplicationScopeCategoryWorkloadKubernete": {
            "properties": {
                "expression": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/getApplicationScopeCategoryWorkloadKuberneteVariable:getApplicationScopeCategoryWorkloadKuberneteVariable"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "expression"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aquasec:index/getApplicationScopeCategoryWorkloadKuberneteVariable:getApplicationScopeCategoryWorkloadKuberneteVariable": {
            "properties": {
                "attribute": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "attribute"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aquasec:index/getApplicationScopeCategoryWorkloadO:getApplicationScopeCategoryWorkloadO": {
            "properties": {
                "expression": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/getApplicationScopeCategoryWorkloadOVariable:getApplicationScopeCategoryWorkloadOVariable"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "expression"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aquasec:index/getApplicationScopeCategoryWorkloadOVariable:getApplicationScopeCategoryWorkloadOVariable": {
            "properties": {
                "attribute": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "attribute"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aquasec:index/getAquaLabelsAquaLabel:getAquaLabelsAquaLabel": {
            "properties": {
                "author": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "created": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "author",
                "created",
                "description",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aquasec:index/getContainerRuntimePolicyFileIntegrityMonitoring:getContainerRuntimePolicyFileIntegrityMonitoring": {
            "properties": {
                "excludedPaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "excludedProcesses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "excludedUsers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "monitorAttributes": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "monitorCreate": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "monitorDelete": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "monitorModify": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "monitorRead": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "monitoredPaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "monitoredProcesses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "monitoredUsers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "excludedPaths",
                "excludedProcesses",
                "excludedUsers",
                "monitorAttributes",
                "monitorCreate",
                "monitorDelete",
                "monitorModify",
                "monitorRead",
                "monitoredPaths",
                "monitoredProcesses",
                "monitoredUsers"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aquasec:index/getContainerRuntimePolicyMalwareScanOption:getContainerRuntimePolicyMalwareScanOption": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "Set Action, Defaults to 'Alert' when empty\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Defines if enabled or not\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "excludeDirectories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of registry paths to be excluded from being protected.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "excludeProcesses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of registry processes to be excluded from being protected.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "action",
                "enabled",
                "excludeDirectories",
                "excludeProcesses"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aquasec:index/getContainerRuntimePolicyScopeVariable:getContainerRuntimePolicyScopeVariable": {
            "properties": {
                "attribute": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the container runtime policy\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "attribute",
                "name",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aquasec:index/getEnforcerGroupsCommand:getEnforcerGroupsCommand": {
            "properties": {
                "default": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kubernetes": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "swarm": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "windows": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "default",
                "kubernetes",
                "swarm",
                "windows"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aquasec:index/getEnforcerGroupsOrchestrator:getEnforcerGroupsOrchestrator": {
            "properties": {
                "master": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "namespace": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceAccount": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Enforcer Type.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "master",
                "namespace",
                "serviceAccount",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aquasec:index/getFirewallPolicyInboundNetwork:getFirewallPolicyInboundNetwork": {
            "properties": {
                "allow": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "portRange": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resource": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "allow",
                "portRange",
                "resource",
                "resourceType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aquasec:index/getFirewallPolicyOutboundNetwork:getFirewallPolicyOutboundNetwork": {
            "properties": {
                "allow": {
                    "type": "boolean",
                    "description": "Indicates whether the specified resources are allowed to receive data or requests.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "portRange": {
                    "type": "string",
                    "description": "Range of ports affected by firewall.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resource": {
                    "type": "string",
                    "description": "Information of the resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceType": {
                    "type": "string",
                    "description": "Type of the resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "allow",
                "portRange",
                "resource",
                "resourceType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aquasec:index/getFunctionAssurancePolicyAutoScanTime:getFunctionAssurancePolicyAutoScanTime": {
            "properties": {
                "iteration": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "iterationType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "time": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "weekDays": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "iteration",
                "iterationType",
                "time",
                "weekDays"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aquasec:index/getFunctionAssurancePolicyCustomCheck:getFunctionAssurancePolicyCustomCheck": {
            "properties": {
                "author": {
                    "type": "string",
                    "description": "Name of user account that created the policy.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "engine": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lastModified": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "path": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "readOnly": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scriptId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "severity": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "snippet": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "author",
                "description",
                "engine",
                "lastModified",
                "name",
                "path",
                "readOnly",
                "scriptId",
                "severity",
                "snippet"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aquasec:index/getFunctionAssurancePolicyForbiddenLabel:getFunctionAssurancePolicyForbiddenLabel": {
            "properties": {
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aquasec:index/getFunctionAssurancePolicyPackagesBlackList:getFunctionAssurancePolicyPackagesBlackList": {
            "properties": {
                "arch": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "display": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "epoch": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "format": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "license": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "release": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "version": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "versionRange": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "arch",
                "display",
                "epoch",
                "format",
                "license",
                "name",
                "release",
                "version",
                "versionRange"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aquasec:index/getFunctionAssurancePolicyPackagesWhiteList:getFunctionAssurancePolicyPackagesWhiteList": {
            "properties": {
                "arch": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "display": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "epoch": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "format": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "license": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "release": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "version": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "versionRange": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "arch",
                "display",
                "epoch",
                "format",
                "license",
                "name",
                "release",
                "version",
                "versionRange"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aquasec:index/getFunctionAssurancePolicyRequiredLabel:getFunctionAssurancePolicyRequiredLabel": {
            "properties": {
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aquasec:index/getFunctionAssurancePolicyScope:getFunctionAssurancePolicyScope": {
            "properties": {
                "expression": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/getFunctionAssurancePolicyScopeVariable:getFunctionAssurancePolicyScopeVariable"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "expression"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aquasec:index/getFunctionAssurancePolicyScopeVariable:getFunctionAssurancePolicyScopeVariable": {
            "properties": {
                "attribute": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "attribute",
                "name",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aquasec:index/getFunctionAssurancePolicyTrustedBaseImage:getFunctionAssurancePolicyTrustedBaseImage": {
            "properties": {
                "imagename": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "registry": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "imagename",
                "registry"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aquasec:index/getFunctionRuntimePolicyScopeVariable:getFunctionRuntimePolicyScopeVariable": {
            "properties": {
                "attribute": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the function runtime policy\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "attribute",
                "name",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aquasec:index/getGatewaysGateway:getGatewaysGateway": {
            "properties": {
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "grpcAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hostname": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of this resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logicalname": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "publicAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "version": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "description",
                "grpcAddress",
                "hostname",
                "id",
                "logicalname",
                "publicAddress",
                "status",
                "version"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aquasec:index/getGroupsGroup:getGroupsGroup": {
            "properties": {
                "created": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "groupId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "created",
                "groupId",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aquasec:index/getHostAssurancePolicyAutoScanTime:getHostAssurancePolicyAutoScanTime": {
            "properties": {
                "iteration": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "iterationType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "time": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "weekDays": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "iteration",
                "iterationType",
                "time",
                "weekDays"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aquasec:index/getHostAssurancePolicyCustomCheck:getHostAssurancePolicyCustomCheck": {
            "properties": {
                "author": {
                    "type": "string",
                    "description": "Name of user account that created the policy.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "engine": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lastModified": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "path": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "readOnly": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scriptId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "severity": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "snippet": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "author",
                "description",
                "engine",
                "lastModified",
                "name",
                "path",
                "readOnly",
                "scriptId",
                "severity",
                "snippet"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aquasec:index/getHostAssurancePolicyForbiddenLabel:getHostAssurancePolicyForbiddenLabel": {
            "properties": {
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aquasec:index/getHostAssurancePolicyPackagesBlackList:getHostAssurancePolicyPackagesBlackList": {
            "properties": {
                "arch": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "display": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "epoch": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "format": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "license": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "release": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "version": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "versionRange": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "arch",
                "display",
                "epoch",
                "format",
                "license",
                "name",
                "release",
                "version",
                "versionRange"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aquasec:index/getHostAssurancePolicyPackagesWhiteList:getHostAssurancePolicyPackagesWhiteList": {
            "properties": {
                "arch": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "display": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "epoch": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "format": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "license": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "release": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "version": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "versionRange": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "arch",
                "display",
                "epoch",
                "format",
                "license",
                "name",
                "release",
                "version",
                "versionRange"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aquasec:index/getHostAssurancePolicyRequiredLabel:getHostAssurancePolicyRequiredLabel": {
            "properties": {
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aquasec:index/getHostAssurancePolicyScope:getHostAssurancePolicyScope": {
            "properties": {
                "expression": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/getHostAssurancePolicyScopeVariable:getHostAssurancePolicyScopeVariable"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "expression"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aquasec:index/getHostAssurancePolicyScopeVariable:getHostAssurancePolicyScopeVariable": {
            "properties": {
                "attribute": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "attribute",
                "name",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aquasec:index/getHostAssurancePolicyTrustedBaseImage:getHostAssurancePolicyTrustedBaseImage": {
            "properties": {
                "imagename": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "registry": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "imagename",
                "registry"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aquasec:index/getHostRuntimePolicyFileIntegrityMonitoring:getHostRuntimePolicyFileIntegrityMonitoring": {
            "properties": {
                "excludedPaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "excludedProcesses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "excludedUsers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "monitorAttributes": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "monitorCreate": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "monitorDelete": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "monitorModify": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "monitorRead": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "monitoredPaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "monitoredProcesses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "monitoredUsers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "excludedPaths",
                "excludedProcesses",
                "excludedUsers",
                "monitorAttributes",
                "monitorCreate",
                "monitorDelete",
                "monitorModify",
                "monitorRead",
                "monitoredPaths",
                "monitoredProcesses",
                "monitoredUsers"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aquasec:index/getHostRuntimePolicyMalwareScanOption:getHostRuntimePolicyMalwareScanOption": {
            "properties": {
                "action": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Indicates if the runtime policy is enabled or not.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "excludeProcesses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "includeDirectories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "action",
                "enabled",
                "excludeProcesses",
                "includeDirectories"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aquasec:index/getHostRuntimePolicyScopeVariable:getHostRuntimePolicyScopeVariable": {
            "properties": {
                "attribute": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the host runtime policy\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "attribute",
                "name",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aquasec:index/getHostRuntimePolicyWindowsRegistryMonitoring:getHostRuntimePolicyWindowsRegistryMonitoring": {
            "properties": {
                "excludedPaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "excludedProcesses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "excludedUsers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "monitorAttributes": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "monitorCreate": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "monitorDelete": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "monitorModify": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "monitorRead": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "monitoredPaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "monitoredProcesses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "monitoredUsers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "excludedPaths",
                "excludedProcesses",
                "excludedUsers",
                "monitorAttributes",
                "monitorCreate",
                "monitorDelete",
                "monitorModify",
                "monitorRead",
                "monitoredPaths",
                "monitoredProcesses",
                "monitoredUsers"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aquasec:index/getHostRuntimePolicyWindowsRegistryProtection:getHostRuntimePolicyWindowsRegistryProtection": {
            "properties": {
                "excludedPaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "excludedProcesses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "excludedUsers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protectedPaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protectedProcesses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protectedUsers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "excludedPaths",
                "excludedProcesses",
                "excludedUsers",
                "protectedPaths",
                "protectedProcesses",
                "protectedUsers"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aquasec:index/getImageAssuranceChecksPerformed:getImageAssuranceChecksPerformed": {
            "properties": {
                "assuranceType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "blocking": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "control": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dtaSkipped": {
                    "type": "boolean",
                    "description": "If DTA was skipped.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dtaSkippedReason": {
                    "type": "string",
                    "description": "The reason why DTA was skipped.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "failed": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "policyName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "assuranceType",
                "blocking",
                "control",
                "dtaSkipped",
                "dtaSkippedReason",
                "failed",
                "policyName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aquasec:index/getImageAssurancePolicyAutoScanTime:getImageAssurancePolicyAutoScanTime": {
            "properties": {
                "iteration": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "iterationType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "time": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "weekDays": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "iteration",
                "iterationType",
                "time",
                "weekDays"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aquasec:index/getImageAssurancePolicyCustomCheck:getImageAssurancePolicyCustomCheck": {
            "properties": {
                "author": {
                    "type": "string",
                    "description": "Name of user account that created the policy.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "engine": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lastModified": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "path": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "readOnly": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scriptId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "severity": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "snippet": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "author",
                "description",
                "engine",
                "lastModified",
                "name",
                "path",
                "readOnly",
                "scriptId",
                "severity",
                "snippet"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aquasec:index/getImageAssurancePolicyForbiddenLabel:getImageAssurancePolicyForbiddenLabel": {
            "properties": {
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aquasec:index/getImageAssurancePolicyPackagesBlackList:getImageAssurancePolicyPackagesBlackList": {
            "properties": {
                "arch": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "display": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "epoch": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "format": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "license": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "release": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "version": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "versionRange": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "arch",
                "display",
                "epoch",
                "format",
                "license",
                "name",
                "release",
                "version",
                "versionRange"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aquasec:index/getImageAssurancePolicyPackagesWhiteList:getImageAssurancePolicyPackagesWhiteList": {
            "properties": {
                "arch": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "display": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "epoch": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "format": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "license": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "release": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "version": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "versionRange": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "arch",
                "display",
                "epoch",
                "format",
                "license",
                "name",
                "release",
                "version",
                "versionRange"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aquasec:index/getImageAssurancePolicyRequiredLabel:getImageAssurancePolicyRequiredLabel": {
            "properties": {
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aquasec:index/getImageAssurancePolicyScope:getImageAssurancePolicyScope": {
            "properties": {
                "expression": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/getImageAssurancePolicyScopeVariable:getImageAssurancePolicyScopeVariable"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "expression"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aquasec:index/getImageAssurancePolicyScopeVariable:getImageAssurancePolicyScopeVariable": {
            "properties": {
                "attribute": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "attribute",
                "name",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aquasec:index/getImageAssurancePolicyTrustedBaseImage:getImageAssurancePolicyTrustedBaseImage": {
            "properties": {
                "imagename": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "registry": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "imagename",
                "registry"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aquasec:index/getImageHistory:getImageHistory": {
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "The image creation comment.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "created": {
                    "type": "string",
                    "description": "The date and time when the image was registered.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createdBy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of this resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "size": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "comment",
                "created",
                "createdBy",
                "id",
                "size"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aquasec:index/getImageVulnerability:getImageVulnerability": {
            "properties": {
                "ackAuthor": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ackComment": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ackExpirationConfiguredAt": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ackExpirationConfiguredBy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ackExpirationDays": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ackScope": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "acknowledgeDate": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ancestorPkg": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "aquaScore": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "aquaScoreClassification": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "aquaScoringSystem": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "aquaSeverity": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "aquaSeverityClassification": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "aquaVectors": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "auditEventsCount": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "blockEventsCount": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "classification": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "digest": {
                    "type": "string",
                    "description": "The content digest of the image.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "exploitReference": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "exploitType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "firstFoundDate": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fixVersion": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "imageName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lastFoundDate": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "modificationDate": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the image.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nvdCvss2Score": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nvdCvss2Vectors": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nvdCvss3Score": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nvdCvss3Severity": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nvdCvss3Vectors": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nvdSeverity": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nvdUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "os": {
                    "type": "string",
                    "description": "The operating system detected in the image\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "osVersion": {
                    "type": "string",
                    "description": "The version of the OS detected in the image.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "permission": {
                    "type": "string",
                    "description": "Permission of the image.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "publishDate": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "registry": {
                    "type": "string",
                    "description": "The name of the registry where the image is stored.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "repository": {
                    "type": "string",
                    "description": "The name of the image's repository.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceArchitecture": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceCpe": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceFormat": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceHash": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceLicenses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourcePath": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceVersion": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "severityClassification": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "solution": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "temporalVector": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vPatchAppliedBy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vPatchAppliedOn": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vPatchEnforcedBy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vPatchEnforcedOn": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vPatchPolicyEnforce": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vPatchPolicyName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vPatchRevertedBy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vPatchRevertedOn": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vPatchStatus": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vendorCvss2Score": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vendorCvss2Vectors": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vendorSeverity": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vendorStatement": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vendorUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ackAuthor",
                "ackComment",
                "ackExpirationConfiguredAt",
                "ackExpirationConfiguredBy",
                "ackExpirationDays",
                "ackScope",
                "acknowledgeDate",
                "ancestorPkg",
                "aquaScore",
                "aquaScoreClassification",
                "aquaScoringSystem",
                "aquaSeverity",
                "aquaSeverityClassification",
                "aquaVectors",
                "auditEventsCount",
                "blockEventsCount",
                "classification",
                "description",
                "digest",
                "exploitReference",
                "exploitType",
                "firstFoundDate",
                "fixVersion",
                "imageName",
                "lastFoundDate",
                "modificationDate",
                "name",
                "nvdCvss2Score",
                "nvdCvss2Vectors",
                "nvdCvss3Score",
                "nvdCvss3Severity",
                "nvdCvss3Vectors",
                "nvdSeverity",
                "nvdUrl",
                "os",
                "osVersion",
                "permission",
                "publishDate",
                "registry",
                "repository",
                "resourceArchitecture",
                "resourceCpe",
                "resourceFormat",
                "resourceHash",
                "resourceLicenses",
                "resourceName",
                "resourcePath",
                "resourceType",
                "resourceVersion",
                "severityClassification",
                "solution",
                "temporalVector",
                "vPatchAppliedBy",
                "vPatchAppliedOn",
                "vPatchEnforcedBy",
                "vPatchEnforcedOn",
                "vPatchPolicyEnforce",
                "vPatchPolicyName",
                "vPatchRevertedBy",
                "vPatchRevertedOn",
                "vPatchStatus",
                "vendorCvss2Score",
                "vendorCvss2Vectors",
                "vendorSeverity",
                "vendorStatement",
                "vendorUrl"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aquasec:index/getKubernetesAssurancePolicyAutoScanTime:getKubernetesAssurancePolicyAutoScanTime": {
            "properties": {
                "iteration": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "iterationType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "time": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "weekDays": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "iteration",
                "iterationType",
                "time",
                "weekDays"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aquasec:index/getKubernetesAssurancePolicyCustomCheck:getKubernetesAssurancePolicyCustomCheck": {
            "properties": {
                "author": {
                    "type": "string",
                    "description": "Name of user account that created the policy.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "engine": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lastModified": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "path": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "readOnly": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scriptId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "severity": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "snippet": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "author",
                "description",
                "engine",
                "lastModified",
                "name",
                "path",
                "readOnly",
                "scriptId",
                "severity",
                "snippet"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aquasec:index/getKubernetesAssurancePolicyForbiddenLabel:getKubernetesAssurancePolicyForbiddenLabel": {
            "properties": {
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aquasec:index/getKubernetesAssurancePolicyPackagesBlackList:getKubernetesAssurancePolicyPackagesBlackList": {
            "properties": {
                "arch": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "display": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "epoch": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "format": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "license": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "release": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "version": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "versionRange": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "arch",
                "display",
                "epoch",
                "format",
                "license",
                "name",
                "release",
                "version",
                "versionRange"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aquasec:index/getKubernetesAssurancePolicyPackagesWhiteList:getKubernetesAssurancePolicyPackagesWhiteList": {
            "properties": {
                "arch": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "display": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "epoch": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "format": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "license": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "release": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "version": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "versionRange": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "arch",
                "display",
                "epoch",
                "format",
                "license",
                "name",
                "release",
                "version",
                "versionRange"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aquasec:index/getKubernetesAssurancePolicyRequiredLabel:getKubernetesAssurancePolicyRequiredLabel": {
            "properties": {
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aquasec:index/getKubernetesAssurancePolicyScope:getKubernetesAssurancePolicyScope": {
            "properties": {
                "expression": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/getKubernetesAssurancePolicyScopeVariable:getKubernetesAssurancePolicyScopeVariable"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "expression"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aquasec:index/getKubernetesAssurancePolicyScopeVariable:getKubernetesAssurancePolicyScopeVariable": {
            "properties": {
                "attribute": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "attribute",
                "name",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aquasec:index/getKubernetesAssurancePolicyTrustedBaseImage:getKubernetesAssurancePolicyTrustedBaseImage": {
            "properties": {
                "imagename": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "registry": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "imagename",
                "registry"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aquasec:index/getNotificationsEmail:getNotificationsEmail": {
            "properties": {
                "author": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "The ID of this resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lastUpdated": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "properties": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "template": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "author",
                "id",
                "lastUpdated",
                "name",
                "properties",
                "template",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aquasec:index/getNotificationsJira:getNotificationsJira": {
            "properties": {
                "author": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "The ID of this resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lastUpdated": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "properties": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "template": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "author",
                "id",
                "lastUpdated",
                "name",
                "properties",
                "template",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aquasec:index/getNotificationsServicenow:getNotificationsServicenow": {
            "properties": {
                "author": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "The ID of this resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lastUpdated": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "properties": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "template": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "author",
                "id",
                "lastUpdated",
                "name",
                "properties",
                "template",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aquasec:index/getNotificationsSlack:getNotificationsSlack": {
            "properties": {
                "author": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "The ID of this resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lastUpdated": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "properties": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "template": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "author",
                "id",
                "lastUpdated",
                "name",
                "properties",
                "template",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aquasec:index/getNotificationsSplunk:getNotificationsSplunk": {
            "properties": {
                "author": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "The ID of this resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lastUpdated": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "properties": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "template": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "author",
                "id",
                "lastUpdated",
                "name",
                "properties",
                "template",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aquasec:index/getNotificationsTeam:getNotificationsTeam": {
            "properties": {
                "author": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "The ID of this resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lastUpdated": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "properties": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "template": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "author",
                "id",
                "lastUpdated",
                "name",
                "properties",
                "template",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aquasec:index/getNotificationsWebhook:getNotificationsWebhook": {
            "properties": {
                "author": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "The ID of this resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lastUpdated": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "properties": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "template": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "author",
                "id",
                "lastUpdated",
                "name",
                "properties",
                "template",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aquasec:index/getPermissionsSetsPermissionsSet:getPermissionsSetsPermissionsSet": {
            "properties": {
                "actions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "author": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isSuper": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uiAccess": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updatedAt": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "actions",
                "author",
                "description",
                "isSuper",
                "name",
                "uiAccess",
                "updatedAt"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aquasec:index/getRolesMappingLdap:getRolesMappingLdap": {
            "properties": {
                "roleMapping": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "roleMapping"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aquasec:index/getRolesMappingOauth2:getRolesMappingOauth2": {
            "properties": {
                "roleMapping": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "roleMapping"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aquasec:index/getRolesMappingOpenid:getRolesMappingOpenid": {
            "properties": {
                "roleMapping": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "roleMapping"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aquasec:index/getRolesMappingSaasRolesMapping:getRolesMappingSaasRolesMapping": {
            "properties": {
                "accountId": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "created": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cspRole": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "The ID of this resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "samlGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accountId",
                "created",
                "cspRole",
                "id",
                "samlGroups"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aquasec:index/getRolesMappingSaml:getRolesMappingSaml": {
            "properties": {
                "roleMapping": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "roleMapping"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aquasec:index/getRolesRole:getRolesRole": {
            "properties": {
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "permission": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updatedAt": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "description",
                "name",
                "permission",
                "scopes",
                "updatedAt"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aquasec:index/getServiceScopeVariable:getServiceScopeVariable": {
            "properties": {
                "attribute": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the service. It is recommended not to use whitespace characters in the name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "attribute",
                "name",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aquasec:index/getUsersSaasUser:getUsersSaasUser": {
            "properties": {
                "accountAdmin": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "confirmed": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "created": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cspRoles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dashboard": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "email": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "groups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/getUsersSaasUserGroup:getUsersSaasUserGroup"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logins": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/getUsersSaasUserLogin:getUsersSaasUserLogin"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "multiaccount": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "passwordReset": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "provider": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sendAnnouncements": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sendNewPlugins": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sendNewRisks": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sendScanResults": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accountAdmin",
                "confirmed",
                "created",
                "cspRoles",
                "dashboard",
                "email",
                "groups",
                "logins",
                "multiaccount",
                "passwordReset",
                "provider",
                "sendAnnouncements",
                "sendNewPlugins",
                "sendNewRisks",
                "sendScanResults",
                "userId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aquasec:index/getUsersSaasUserGroup:getUsersSaasUserGroup": {
            "properties": {
                "created": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "The ID of this resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "created",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aquasec:index/getUsersSaasUserLogin:getUsersSaasUserLogin": {
            "properties": {
                "created": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "The ID of this resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userId": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "created",
                "id",
                "ipAddress",
                "userId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "aquasec:index/getUsersUser:getUsersUser": {
            "properties": {
                "email": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "firstTime": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isSuper": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "plan": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "role": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uiAccess": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "email",
                "firstTime",
                "isSuper",
                "name",
                "plan",
                "role",
                "roles",
                "type",
                "uiAccess",
                "userId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the aquasec package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "aquaUrl": {
                "type": "string",
                "description": "This is the base URL of your Aqua instance. Can alternatively be sourced from the `AQUA_URL` environment variable.\n"
            },
            "caCertificatePath": {
                "type": "string",
                "description": "This is the file path for server CA certificates if they are not available on the host OS. Can alternatively be sourced\nfrom the `AQUA_CA_CERT_PATH` environment variable.\n"
            },
            "configPath": {
                "type": "string",
                "description": "This is the file path for Aqua provider configuration. The default configuration path is `~/.aqua/tf.config`. Can\nalternatively be sourced from the `AQUA_CONFIG` environment variable.\n"
            },
            "password": {
                "type": "string",
                "description": "This is the password that should be used to make the connection. Can alternatively be sourced from the `AQUA_PASSWORD`\nenvironment variable.\n",
                "secret": true
            },
            "username": {
                "type": "string",
                "description": "This is the user id that should be used to make the connection. Can alternatively be sourced from the `AQUA_USER`\nenvironment variable.\n",
                "secret": true
            },
            "verifyTls": {
                "type": "boolean",
                "description": "If true, server tls certificates will be verified by the client before making a connection. Defaults to true. Can\nalternatively be sourced from the `AQUA_TLS_VERIFY` environment variable.\n"
            }
        },
        "inputProperties": {
            "aquaUrl": {
                "type": "string",
                "description": "This is the base URL of your Aqua instance. Can alternatively be sourced from the `AQUA_URL` environment variable.\n"
            },
            "caCertificatePath": {
                "type": "string",
                "description": "This is the file path for server CA certificates if they are not available on the host OS. Can alternatively be sourced\nfrom the `AQUA_CA_CERT_PATH` environment variable.\n"
            },
            "configPath": {
                "type": "string",
                "description": "This is the file path for Aqua provider configuration. The default configuration path is `~/.aqua/tf.config`. Can\nalternatively be sourced from the `AQUA_CONFIG` environment variable.\n"
            },
            "password": {
                "type": "string",
                "description": "This is the password that should be used to make the connection. Can alternatively be sourced from the `AQUA_PASSWORD`\nenvironment variable.\n",
                "secret": true
            },
            "username": {
                "type": "string",
                "description": "This is the user id that should be used to make the connection. Can alternatively be sourced from the `AQUA_USER`\nenvironment variable.\n",
                "secret": true
            },
            "verifyTls": {
                "type": "boolean",
                "description": "If true, server tls certificates will be verified by the client before making a connection. Defaults to true. Can\nalternatively be sourced from the `AQUA_TLS_VERIFY` environment variable.\n"
            }
        }
    },
    "resources": {
        "aquasec:index/acknowledge:Acknowledge": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aquasec from \"@pulumiverse/aquasec\";\n\nconst acknowledge = new aquasec.Acknowledge(\"acknowledge\", {\n    comment: \"comment\",\n    issues: [\n        {\n            dockerId: \"\",\n            imageName: \"image:latest\",\n            issueName: \"CVE-2022-1271\",\n            issueType: \"vulnerability\",\n            registryName: \"registry\",\n            resourceCpe: \"cpe:/a:gnu:gzip:1.10\",\n            resourceName: \"gzip\",\n            resourcePath: \"/usr/bin/gzip\",\n            resourceType: \"executable\",\n            resourceVersion: \"1.10\",\n        },\n        {\n            dockerId: \"docker-id\",\n            imageName: \"image-name\",\n            issueName: \"ALAS2-2021-1722\",\n            issueType: \"vulnerability\",\n            registryName: \"registry-name\",\n            resourceCpe: \"pkg:/amzn:2:nss-softokn:3.44.0-8.amzn2\",\n            resourceName: \"nss-softokn\",\n            resourcePath: \"\",\n            resourceType: \"package\",\n            resourceVersion: \"3.44.0-8.amzn2\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumiverse_aquasec as aquasec\n\nacknowledge = aquasec.Acknowledge(\"acknowledge\",\n    comment=\"comment\",\n    issues=[\n        aquasec.AcknowledgeIssueArgs(\n            docker_id=\"\",\n            image_name=\"image:latest\",\n            issue_name=\"CVE-2022-1271\",\n            issue_type=\"vulnerability\",\n            registry_name=\"registry\",\n            resource_cpe=\"cpe:/a:gnu:gzip:1.10\",\n            resource_name=\"gzip\",\n            resource_path=\"/usr/bin/gzip\",\n            resource_type=\"executable\",\n            resource_version=\"1.10\",\n        ),\n        aquasec.AcknowledgeIssueArgs(\n            docker_id=\"docker-id\",\n            image_name=\"image-name\",\n            issue_name=\"ALAS2-2021-1722\",\n            issue_type=\"vulnerability\",\n            registry_name=\"registry-name\",\n            resource_cpe=\"pkg:/amzn:2:nss-softokn:3.44.0-8.amzn2\",\n            resource_name=\"nss-softokn\",\n            resource_path=\"\",\n            resource_type=\"package\",\n            resource_version=\"3.44.0-8.amzn2\",\n        ),\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Aquasec = Pulumiverse.Aquasec;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var acknowledge = new Aquasec.Acknowledge(\"acknowledge\", new()\n    {\n        Comment = \"comment\",\n        Issues = new[]\n        {\n            new Aquasec.Inputs.AcknowledgeIssueArgs\n            {\n                DockerId = \"\",\n                ImageName = \"image:latest\",\n                IssueName = \"CVE-2022-1271\",\n                IssueType = \"vulnerability\",\n                RegistryName = \"registry\",\n                ResourceCpe = \"cpe:/a:gnu:gzip:1.10\",\n                ResourceName = \"gzip\",\n                ResourcePath = \"/usr/bin/gzip\",\n                ResourceType = \"executable\",\n                ResourceVersion = \"1.10\",\n            },\n            new Aquasec.Inputs.AcknowledgeIssueArgs\n            {\n                DockerId = \"docker-id\",\n                ImageName = \"image-name\",\n                IssueName = \"ALAS2-2021-1722\",\n                IssueType = \"vulnerability\",\n                RegistryName = \"registry-name\",\n                ResourceCpe = \"pkg:/amzn:2:nss-softokn:3.44.0-8.amzn2\",\n                ResourceName = \"nss-softokn\",\n                ResourcePath = \"\",\n                ResourceType = \"package\",\n                ResourceVersion = \"3.44.0-8.amzn2\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-aquasec/sdk/go/aquasec\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := aquasec.NewAcknowledge(ctx, \"acknowledge\", \u0026aquasec.AcknowledgeArgs{\n\t\t\tComment: pulumi.String(\"comment\"),\n\t\t\tIssues: aquasec.AcknowledgeIssueArray{\n\t\t\t\t\u0026aquasec.AcknowledgeIssueArgs{\n\t\t\t\t\tDockerId:        pulumi.String(\"\"),\n\t\t\t\t\tImageName:       pulumi.String(\"image:latest\"),\n\t\t\t\t\tIssueName:       pulumi.String(\"CVE-2022-1271\"),\n\t\t\t\t\tIssueType:       pulumi.String(\"vulnerability\"),\n\t\t\t\t\tRegistryName:    pulumi.String(\"registry\"),\n\t\t\t\t\tResourceCpe:     pulumi.String(\"cpe:/a:gnu:gzip:1.10\"),\n\t\t\t\t\tResourceName:    pulumi.String(\"gzip\"),\n\t\t\t\t\tResourcePath:    pulumi.String(\"/usr/bin/gzip\"),\n\t\t\t\t\tResourceType:    pulumi.String(\"executable\"),\n\t\t\t\t\tResourceVersion: pulumi.String(\"1.10\"),\n\t\t\t\t},\n\t\t\t\t\u0026aquasec.AcknowledgeIssueArgs{\n\t\t\t\t\tDockerId:        pulumi.String(\"docker-id\"),\n\t\t\t\t\tImageName:       pulumi.String(\"image-name\"),\n\t\t\t\t\tIssueName:       pulumi.String(\"ALAS2-2021-1722\"),\n\t\t\t\t\tIssueType:       pulumi.String(\"vulnerability\"),\n\t\t\t\t\tRegistryName:    pulumi.String(\"registry-name\"),\n\t\t\t\t\tResourceCpe:     pulumi.String(\"pkg:/amzn:2:nss-softokn:3.44.0-8.amzn2\"),\n\t\t\t\t\tResourceName:    pulumi.String(\"nss-softokn\"),\n\t\t\t\t\tResourcePath:    pulumi.String(\"\"),\n\t\t\t\t\tResourceType:    pulumi.String(\"package\"),\n\t\t\t\t\tResourceVersion: pulumi.String(\"3.44.0-8.amzn2\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aquasec.Acknowledge;\nimport com.pulumi.aquasec.AcknowledgeArgs;\nimport com.pulumi.aquasec.inputs.AcknowledgeIssueArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var acknowledge = new Acknowledge(\"acknowledge\", AcknowledgeArgs.builder()        \n            .comment(\"comment\")\n            .issues(            \n                AcknowledgeIssueArgs.builder()\n                    .dockerId(\"\")\n                    .imageName(\"image:latest\")\n                    .issueName(\"CVE-2022-1271\")\n                    .issueType(\"vulnerability\")\n                    .registryName(\"registry\")\n                    .resourceCpe(\"cpe:/a:gnu:gzip:1.10\")\n                    .resourceName(\"gzip\")\n                    .resourcePath(\"/usr/bin/gzip\")\n                    .resourceType(\"executable\")\n                    .resourceVersion(\"1.10\")\n                    .build(),\n                AcknowledgeIssueArgs.builder()\n                    .dockerId(\"docker-id\")\n                    .imageName(\"image-name\")\n                    .issueName(\"ALAS2-2021-1722\")\n                    .issueType(\"vulnerability\")\n                    .registryName(\"registry-name\")\n                    .resourceCpe(\"pkg:/amzn:2:nss-softokn:3.44.0-8.amzn2\")\n                    .resourceName(\"nss-softokn\")\n                    .resourcePath(\"\")\n                    .resourceType(\"package\")\n                    .resourceVersion(\"3.44.0-8.amzn2\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  acknowledge:\n    type: aquasec:Acknowledge\n    properties:\n      comment: comment\n      issues:\n        - dockerId:\n          imageName: image:latest\n          issueName: CVE-2022-1271\n          issueType: vulnerability\n          registryName: registry\n          resourceCpe: cpe:/a:gnu:gzip:1.10\n          resourceName: gzip\n          resourcePath: /usr/bin/gzip\n          resourceType: executable\n          resourceVersion: '1.10'\n        - dockerId: docker-id\n          imageName: image-name\n          issueName: ALAS2-2021-1722\n          issueType: vulnerability\n          registryName: registry-name\n          resourceCpe: pkg:/amzn:2:nss-softokn:3.44.0-8.amzn2\n          resourceName: nss-softokn\n          resourcePath:\n          resourceType: package\n          resourceVersion: 3.44.0-8.amzn2\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "A comment describing the reason for the acknowledgment\n"
                },
                "issues": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/AcknowledgeIssue:AcknowledgeIssue"
                    },
                    "description": "A list of existing security acknowledges.\n"
                }
            },
            "required": [
                "comment",
                "issues"
            ],
            "inputProperties": {
                "comment": {
                    "type": "string",
                    "description": "A comment describing the reason for the acknowledgment\n"
                },
                "issues": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/AcknowledgeIssue:AcknowledgeIssue"
                    },
                    "description": "A list of existing security acknowledges.\n"
                }
            },
            "requiredInputs": [
                "comment",
                "issues"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Acknowledge resources.\n",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "A comment describing the reason for the acknowledgment\n"
                    },
                    "issues": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/AcknowledgeIssue:AcknowledgeIssue"
                        },
                        "description": "A list of existing security acknowledges.\n"
                    }
                },
                "type": "object"
            }
        },
        "aquasec:index/applicationScope:ApplicationScope": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aquasec.ApplicationScope;\nimport com.pulumi.aquasec.ApplicationScopeArgs;\nimport com.pulumi.aquasec.inputs.ApplicationScopeCategoryArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var terraformiap = new ApplicationScope(\"terraformiap\", ApplicationScopeArgs.builder()        \n            .categories(ApplicationScopeCategoryArgs.builder()\n                .artifacts(ApplicationScopeCategoryArtifactArgs.builder()\n                    .image(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                    .build())\n                .infrastructures(ApplicationScopeCategoryInfrastructureArgs.builder()\n                    .kubernetes(ApplicationScopeCategoryInfrastructureKuberneteArgs.builder()\n                        .expression(\"v1\")\n                        .variables(ApplicationScopeCategoryInfrastructureKuberneteVariableArgs.builder()\n                            .attribute(\"kubernetes.cluster\")\n                            .value(\"aqua\")\n                            .build())\n                        .build())\n                    .build())\n                .workloads(ApplicationScopeCategoryWorkloadArgs.builder()\n                    .kubernetes(ApplicationScopeCategoryWorkloadKuberneteArgs.builder()\n                        .expression(\"v1 \u0026\u0026 v2\")\n                        .variables(                        \n                            ApplicationScopeCategoryWorkloadKuberneteVariableArgs.builder()\n                                .attribute(\"kubernetes.cluster\")\n                                .value(\"aqua\")\n                                .build(),\n                            ApplicationScopeCategoryWorkloadKuberneteVariableArgs.builder()\n                                .attribute(\"kubernetes.namespace\")\n                                .value(\"aqua\")\n                                .build())\n                        .build())\n                    .build())\n                .build())\n            .description(\"test123\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  terraformiap:\n    type: aquasec:ApplicationScope\n    properties:\n      # Categories is a nested block of artifacts, workloads and infrastructure\n      categories:\n        - artifacts:\n            - image:\n                - expression: v1 \u0026\u0026 v2\n                  variables:\n                    - attribute: aqua.registry\n                      value: test-registry\n                    - attribute: image.repo\n                      value: nginx\n          infrastructures:\n            - kubernetes:\n                - expression: v1\n                  variables:\n                    - attribute: kubernetes.cluster\n                      value: aqua\n          workloads:\n            - kubernetes:\n                - expression: v1 \u0026\u0026 v2\n                  variables:\n                    - attribute: kubernetes.cluster\n                      value: aqua\n                    - attribute: kubernetes.namespace\n                      value: aqua\n      description: test123\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "author": {
                    "type": "string",
                    "description": "Username of the account that created the service.\n"
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/ApplicationScopeCategory:ApplicationScopeCategory"
                    },
                    "description": "Artifacts (of applications) / Workloads (containers) / Infrastructure (elements).\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the application scope.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of an application scope.\n"
                },
                "ownerEmail": {
                    "type": "string",
                    "description": "Name of an application scope.\n"
                }
            },
            "required": [
                "author",
                "categories",
                "name"
            ],
            "inputProperties": {
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/ApplicationScopeCategory:ApplicationScopeCategory"
                    },
                    "description": "Artifacts (of applications) / Workloads (containers) / Infrastructure (elements).\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the application scope.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of an application scope.\n",
                    "willReplaceOnChanges": true
                },
                "ownerEmail": {
                    "type": "string",
                    "description": "Name of an application scope.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ApplicationScope resources.\n",
                "properties": {
                    "author": {
                        "type": "string",
                        "description": "Username of the account that created the service.\n"
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/ApplicationScopeCategory:ApplicationScopeCategory"
                        },
                        "description": "Artifacts (of applications) / Workloads (containers) / Infrastructure (elements).\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the application scope.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of an application scope.\n",
                        "willReplaceOnChanges": true
                    },
                    "ownerEmail": {
                        "type": "string",
                        "description": "Name of an application scope.\n"
                    }
                },
                "type": "object"
            }
        },
        "aquasec:index/aquaLabel:AquaLabel": {
            "properties": {
                "author": {
                    "type": "string",
                    "description": "The name of the user who created the Aqua label.\n"
                },
                "created": {
                    "type": "string",
                    "description": "The creation date of the Aqua label.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Aqua label description.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Aqua label name.\n"
                }
            },
            "required": [
                "author",
                "created",
                "name"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Aqua label description.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Aqua label name.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AquaLabel resources.\n",
                "properties": {
                    "author": {
                        "type": "string",
                        "description": "The name of the user who created the Aqua label.\n"
                    },
                    "created": {
                        "type": "string",
                        "description": "The creation date of the Aqua label.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Aqua label description.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Aqua label name.\n"
                    }
                },
                "type": "object"
            }
        },
        "aquasec:index/containerRuntimePolicy:ContainerRuntimePolicy": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aquasec from \"@pulumiverse/aquasec\";\n\nconst containerRuntimePolicy = new aquasec.ContainerRuntimePolicy(\"containerRuntimePolicy\", {\n    allowedExecutables: [\n        \"exe\",\n        \"bin\",\n    ],\n    allowedRegistries: [\n        \"registry1\",\n        \"registry2\",\n    ],\n    applicationScopes: [\"Global\"],\n    auditAllNetworkActivity: true,\n    auditAllProcessesActivity: true,\n    auditFullCommandArguments: true,\n    blockAccessHostNetwork: true,\n    blockAddingCapabilities: true,\n    blockContainerExec: true,\n    blockCryptocurrencyMining: true,\n    blockFilelessExec: true,\n    blockLowPortBinding: true,\n    blockNonCompliantImages: true,\n    blockNonCompliantWorkloads: true,\n    blockNonK8sContainers: true,\n    blockPrivilegedContainers: true,\n    blockReverseShell: true,\n    blockRootUser: true,\n    blockUnregisteredImages: true,\n    blockUseIpcNamespace: true,\n    blockUsePidNamespace: true,\n    blockUseUserNamespace: true,\n    blockUseUtsNamespace: true,\n    blockedCapabilities: [\n        \"AUDIT_CONTROL\",\n        \"AUDIT_WRITE\",\n    ],\n    blockedExecutables: [\n        \"exe1\",\n        \"exe2\",\n    ],\n    blockedFiles: [\n        \"test1\",\n        \"test2\",\n    ],\n    blockedInboundPorts: [\n        \"80\",\n        \"8080\",\n    ],\n    blockedOutboundPorts: [\n        \"90\",\n        \"9090\",\n    ],\n    blockedPackages: [\n        \"pkg\",\n        \"pkg2\",\n    ],\n    blockedVolumes: [\n        \"blocked\",\n        \"vol\",\n    ],\n    containerExecAllowedProcesses: [\n        \"proc1\",\n        \"proc2\",\n    ],\n    description: \"container_runtime_policy\",\n    enableDriftPrevention: true,\n    enableForkGuard: true,\n    enableIpReputationSecurity: true,\n    enablePortScanDetection: true,\n    enabled: true,\n    enforce: false,\n    exceptionalReadonlyFilesAndDirectories: [\n        \"readonly2\",\n        \"/dir2/\",\n    ],\n    fileIntegrityMonitoring: {\n        excludedPaths: [\"expaths\"],\n        excludedProcesses: [\"exprocess\"],\n        excludedUsers: [\"expuser\"],\n        monitorAttributes: true,\n        monitorCreate: true,\n        monitorDelete: true,\n        monitorModify: true,\n        monitorRead: true,\n        monitoredPaths: [\"paths\"],\n        monitoredProcesses: [\"process\"],\n        monitoredUsers: [\"user\"],\n    },\n    forkGuardProcessLimit: 13,\n    limitNewPrivileges: true,\n    malwareScanOptions: {\n        action: \"alert\",\n        enabled: true,\n    },\n    monitorSystemTimeChanges: true,\n    readonlyFilesAndDirectories: [\n        \"readonly\",\n        \"/dir/\",\n    ],\n    reverseShellAllowedIps: [\n        \"ip1\",\n        \"ip2\",\n    ],\n    reverseShellAllowedProcesses: [\n        \"proc1\",\n        \"proc2\",\n    ],\n    scopeExpression: \"v1 || v2\",\n    scopeVariables: [\n        {\n            attribute: \"kubernetes.cluster\",\n            value: \"default\",\n        },\n        {\n            attribute: \"kubernetes.label\",\n            name: \"app\",\n            value: \"aqua\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumiverse_aquasec as aquasec\n\ncontainer_runtime_policy = aquasec.ContainerRuntimePolicy(\"containerRuntimePolicy\",\n    allowed_executables=[\n        \"exe\",\n        \"bin\",\n    ],\n    allowed_registries=[\n        \"registry1\",\n        \"registry2\",\n    ],\n    application_scopes=[\"Global\"],\n    audit_all_network_activity=True,\n    audit_all_processes_activity=True,\n    audit_full_command_arguments=True,\n    block_access_host_network=True,\n    block_adding_capabilities=True,\n    block_container_exec=True,\n    block_cryptocurrency_mining=True,\n    block_fileless_exec=True,\n    block_low_port_binding=True,\n    block_non_compliant_images=True,\n    block_non_compliant_workloads=True,\n    block_non_k8s_containers=True,\n    block_privileged_containers=True,\n    block_reverse_shell=True,\n    block_root_user=True,\n    block_unregistered_images=True,\n    block_use_ipc_namespace=True,\n    block_use_pid_namespace=True,\n    block_use_user_namespace=True,\n    block_use_uts_namespace=True,\n    blocked_capabilities=[\n        \"AUDIT_CONTROL\",\n        \"AUDIT_WRITE\",\n    ],\n    blocked_executables=[\n        \"exe1\",\n        \"exe2\",\n    ],\n    blocked_files=[\n        \"test1\",\n        \"test2\",\n    ],\n    blocked_inbound_ports=[\n        \"80\",\n        \"8080\",\n    ],\n    blocked_outbound_ports=[\n        \"90\",\n        \"9090\",\n    ],\n    blocked_packages=[\n        \"pkg\",\n        \"pkg2\",\n    ],\n    blocked_volumes=[\n        \"blocked\",\n        \"vol\",\n    ],\n    container_exec_allowed_processes=[\n        \"proc1\",\n        \"proc2\",\n    ],\n    description=\"container_runtime_policy\",\n    enable_drift_prevention=True,\n    enable_fork_guard=True,\n    enable_ip_reputation_security=True,\n    enable_port_scan_detection=True,\n    enabled=True,\n    enforce=False,\n    exceptional_readonly_files_and_directories=[\n        \"readonly2\",\n        \"/dir2/\",\n    ],\n    file_integrity_monitoring=aquasec.ContainerRuntimePolicyFileIntegrityMonitoringArgs(\n        excluded_paths=[\"expaths\"],\n        excluded_processes=[\"exprocess\"],\n        excluded_users=[\"expuser\"],\n        monitor_attributes=True,\n        monitor_create=True,\n        monitor_delete=True,\n        monitor_modify=True,\n        monitor_read=True,\n        monitored_paths=[\"paths\"],\n        monitored_processes=[\"process\"],\n        monitored_users=[\"user\"],\n    ),\n    fork_guard_process_limit=13,\n    limit_new_privileges=True,\n    malware_scan_options=aquasec.ContainerRuntimePolicyMalwareScanOptionsArgs(\n        action=\"alert\",\n        enabled=True,\n    ),\n    monitor_system_time_changes=True,\n    readonly_files_and_directories=[\n        \"readonly\",\n        \"/dir/\",\n    ],\n    reverse_shell_allowed_ips=[\n        \"ip1\",\n        \"ip2\",\n    ],\n    reverse_shell_allowed_processes=[\n        \"proc1\",\n        \"proc2\",\n    ],\n    scope_expression=\"v1 || v2\",\n    scope_variables=[\n        aquasec.ContainerRuntimePolicyScopeVariableArgs(\n            attribute=\"kubernetes.cluster\",\n            value=\"default\",\n        ),\n        aquasec.ContainerRuntimePolicyScopeVariableArgs(\n            attribute=\"kubernetes.label\",\n            name=\"app\",\n            value=\"aqua\",\n        ),\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Aquasec = Pulumiverse.Aquasec;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var containerRuntimePolicy = new Aquasec.ContainerRuntimePolicy(\"containerRuntimePolicy\", new()\n    {\n        AllowedExecutables = new[]\n        {\n            \"exe\",\n            \"bin\",\n        },\n        AllowedRegistries = new[]\n        {\n            \"registry1\",\n            \"registry2\",\n        },\n        ApplicationScopes = new[]\n        {\n            \"Global\",\n        },\n        AuditAllNetworkActivity = true,\n        AuditAllProcessesActivity = true,\n        AuditFullCommandArguments = true,\n        BlockAccessHostNetwork = true,\n        BlockAddingCapabilities = true,\n        BlockContainerExec = true,\n        BlockCryptocurrencyMining = true,\n        BlockFilelessExec = true,\n        BlockLowPortBinding = true,\n        BlockNonCompliantImages = true,\n        BlockNonCompliantWorkloads = true,\n        BlockNonK8sContainers = true,\n        BlockPrivilegedContainers = true,\n        BlockReverseShell = true,\n        BlockRootUser = true,\n        BlockUnregisteredImages = true,\n        BlockUseIpcNamespace = true,\n        BlockUsePidNamespace = true,\n        BlockUseUserNamespace = true,\n        BlockUseUtsNamespace = true,\n        BlockedCapabilities = new[]\n        {\n            \"AUDIT_CONTROL\",\n            \"AUDIT_WRITE\",\n        },\n        BlockedExecutables = new[]\n        {\n            \"exe1\",\n            \"exe2\",\n        },\n        BlockedFiles = new[]\n        {\n            \"test1\",\n            \"test2\",\n        },\n        BlockedInboundPorts = new[]\n        {\n            \"80\",\n            \"8080\",\n        },\n        BlockedOutboundPorts = new[]\n        {\n            \"90\",\n            \"9090\",\n        },\n        BlockedPackages = new[]\n        {\n            \"pkg\",\n            \"pkg2\",\n        },\n        BlockedVolumes = new[]\n        {\n            \"blocked\",\n            \"vol\",\n        },\n        ContainerExecAllowedProcesses = new[]\n        {\n            \"proc1\",\n            \"proc2\",\n        },\n        Description = \"container_runtime_policy\",\n        EnableDriftPrevention = true,\n        EnableForkGuard = true,\n        EnableIpReputationSecurity = true,\n        EnablePortScanDetection = true,\n        Enabled = true,\n        Enforce = false,\n        ExceptionalReadonlyFilesAndDirectories = new[]\n        {\n            \"readonly2\",\n            \"/dir2/\",\n        },\n        FileIntegrityMonitoring = new Aquasec.Inputs.ContainerRuntimePolicyFileIntegrityMonitoringArgs\n        {\n            ExcludedPaths = new[]\n            {\n                \"expaths\",\n            },\n            ExcludedProcesses = new[]\n            {\n                \"exprocess\",\n            },\n            ExcludedUsers = new[]\n            {\n                \"expuser\",\n            },\n            MonitorAttributes = true,\n            MonitorCreate = true,\n            MonitorDelete = true,\n            MonitorModify = true,\n            MonitorRead = true,\n            MonitoredPaths = new[]\n            {\n                \"paths\",\n            },\n            MonitoredProcesses = new[]\n            {\n                \"process\",\n            },\n            MonitoredUsers = new[]\n            {\n                \"user\",\n            },\n        },\n        ForkGuardProcessLimit = 13,\n        LimitNewPrivileges = true,\n        MalwareScanOptions = new Aquasec.Inputs.ContainerRuntimePolicyMalwareScanOptionsArgs\n        {\n            Action = \"alert\",\n            Enabled = true,\n        },\n        MonitorSystemTimeChanges = true,\n        ReadonlyFilesAndDirectories = new[]\n        {\n            \"readonly\",\n            \"/dir/\",\n        },\n        ReverseShellAllowedIps = new[]\n        {\n            \"ip1\",\n            \"ip2\",\n        },\n        ReverseShellAllowedProcesses = new[]\n        {\n            \"proc1\",\n            \"proc2\",\n        },\n        ScopeExpression = \"v1 || v2\",\n        ScopeVariables = new[]\n        {\n            new Aquasec.Inputs.ContainerRuntimePolicyScopeVariableArgs\n            {\n                Attribute = \"kubernetes.cluster\",\n                Value = \"default\",\n            },\n            new Aquasec.Inputs.ContainerRuntimePolicyScopeVariableArgs\n            {\n                Attribute = \"kubernetes.label\",\n                Name = \"app\",\n                Value = \"aqua\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-aquasec/sdk/go/aquasec\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := aquasec.NewContainerRuntimePolicy(ctx, \"containerRuntimePolicy\", \u0026aquasec.ContainerRuntimePolicyArgs{\n\t\t\tAllowedExecutables: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"exe\"),\n\t\t\t\tpulumi.String(\"bin\"),\n\t\t\t},\n\t\t\tAllowedRegistries: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"registry1\"),\n\t\t\t\tpulumi.String(\"registry2\"),\n\t\t\t},\n\t\t\tApplicationScopes: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"Global\"),\n\t\t\t},\n\t\t\tAuditAllNetworkActivity:    pulumi.Bool(true),\n\t\t\tAuditAllProcessesActivity:  pulumi.Bool(true),\n\t\t\tAuditFullCommandArguments:  pulumi.Bool(true),\n\t\t\tBlockAccessHostNetwork:     pulumi.Bool(true),\n\t\t\tBlockAddingCapabilities:    pulumi.Bool(true),\n\t\t\tBlockContainerExec:         pulumi.Bool(true),\n\t\t\tBlockCryptocurrencyMining:  pulumi.Bool(true),\n\t\t\tBlockFilelessExec:          pulumi.Bool(true),\n\t\t\tBlockLowPortBinding:        pulumi.Bool(true),\n\t\t\tBlockNonCompliantImages:    pulumi.Bool(true),\n\t\t\tBlockNonCompliantWorkloads: pulumi.Bool(true),\n\t\t\tBlockNonK8sContainers:      pulumi.Bool(true),\n\t\t\tBlockPrivilegedContainers:  pulumi.Bool(true),\n\t\t\tBlockReverseShell:          pulumi.Bool(true),\n\t\t\tBlockRootUser:              pulumi.Bool(true),\n\t\t\tBlockUnregisteredImages:    pulumi.Bool(true),\n\t\t\tBlockUseIpcNamespace:       pulumi.Bool(true),\n\t\t\tBlockUsePidNamespace:       pulumi.Bool(true),\n\t\t\tBlockUseUserNamespace:      pulumi.Bool(true),\n\t\t\tBlockUseUtsNamespace:       pulumi.Bool(true),\n\t\t\tBlockedCapabilities: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"AUDIT_CONTROL\"),\n\t\t\t\tpulumi.String(\"AUDIT_WRITE\"),\n\t\t\t},\n\t\t\tBlockedExecutables: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"exe1\"),\n\t\t\t\tpulumi.String(\"exe2\"),\n\t\t\t},\n\t\t\tBlockedFiles: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"test1\"),\n\t\t\t\tpulumi.String(\"test2\"),\n\t\t\t},\n\t\t\tBlockedInboundPorts: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"80\"),\n\t\t\t\tpulumi.String(\"8080\"),\n\t\t\t},\n\t\t\tBlockedOutboundPorts: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"90\"),\n\t\t\t\tpulumi.String(\"9090\"),\n\t\t\t},\n\t\t\tBlockedPackages: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"pkg\"),\n\t\t\t\tpulumi.String(\"pkg2\"),\n\t\t\t},\n\t\t\tBlockedVolumes: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"blocked\"),\n\t\t\t\tpulumi.String(\"vol\"),\n\t\t\t},\n\t\t\tContainerExecAllowedProcesses: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"proc1\"),\n\t\t\t\tpulumi.String(\"proc2\"),\n\t\t\t},\n\t\t\tDescription:                pulumi.String(\"container_runtime_policy\"),\n\t\t\tEnableDriftPrevention:      pulumi.Bool(true),\n\t\t\tEnableForkGuard:            pulumi.Bool(true),\n\t\t\tEnableIpReputationSecurity: pulumi.Bool(true),\n\t\t\tEnablePortScanDetection:    pulumi.Bool(true),\n\t\t\tEnabled:                    pulumi.Bool(true),\n\t\t\tEnforce:                    pulumi.Bool(false),\n\t\t\tExceptionalReadonlyFilesAndDirectories: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"readonly2\"),\n\t\t\t\tpulumi.String(\"/dir2/\"),\n\t\t\t},\n\t\t\tFileIntegrityMonitoring: \u0026aquasec.ContainerRuntimePolicyFileIntegrityMonitoringArgs{\n\t\t\t\tExcludedPaths: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"expaths\"),\n\t\t\t\t},\n\t\t\t\tExcludedProcesses: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"exprocess\"),\n\t\t\t\t},\n\t\t\t\tExcludedUsers: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"expuser\"),\n\t\t\t\t},\n\t\t\t\tMonitorAttributes: pulumi.Bool(true),\n\t\t\t\tMonitorCreate:     pulumi.Bool(true),\n\t\t\t\tMonitorDelete:     pulumi.Bool(true),\n\t\t\t\tMonitorModify:     pulumi.Bool(true),\n\t\t\t\tMonitorRead:       pulumi.Bool(true),\n\t\t\t\tMonitoredPaths: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"paths\"),\n\t\t\t\t},\n\t\t\t\tMonitoredProcesses: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"process\"),\n\t\t\t\t},\n\t\t\t\tMonitoredUsers: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"user\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tForkGuardProcessLimit: pulumi.Int(13),\n\t\t\tLimitNewPrivileges:    pulumi.Bool(true),\n\t\t\tMalwareScanOptions: \u0026aquasec.ContainerRuntimePolicyMalwareScanOptionsArgs{\n\t\t\t\tAction:  pulumi.String(\"alert\"),\n\t\t\t\tEnabled: pulumi.Bool(true),\n\t\t\t},\n\t\t\tMonitorSystemTimeChanges: pulumi.Bool(true),\n\t\t\tReadonlyFilesAndDirectories: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"readonly\"),\n\t\t\t\tpulumi.String(\"/dir/\"),\n\t\t\t},\n\t\t\tReverseShellAllowedIps: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"ip1\"),\n\t\t\t\tpulumi.String(\"ip2\"),\n\t\t\t},\n\t\t\tReverseShellAllowedProcesses: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"proc1\"),\n\t\t\t\tpulumi.String(\"proc2\"),\n\t\t\t},\n\t\t\tScopeExpression: pulumi.String(\"v1 || v2\"),\n\t\t\tScopeVariables: aquasec.ContainerRuntimePolicyScopeVariableArray{\n\t\t\t\t\u0026aquasec.ContainerRuntimePolicyScopeVariableArgs{\n\t\t\t\t\tAttribute: pulumi.String(\"kubernetes.cluster\"),\n\t\t\t\t\tValue:     pulumi.String(\"default\"),\n\t\t\t\t},\n\t\t\t\t\u0026aquasec.ContainerRuntimePolicyScopeVariableArgs{\n\t\t\t\t\tAttribute: pulumi.String(\"kubernetes.label\"),\n\t\t\t\t\tName:      pulumi.String(\"app\"),\n\t\t\t\t\tValue:     pulumi.String(\"aqua\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aquasec.ContainerRuntimePolicy;\nimport com.pulumi.aquasec.ContainerRuntimePolicyArgs;\nimport com.pulumi.aquasec.inputs.ContainerRuntimePolicyFileIntegrityMonitoringArgs;\nimport com.pulumi.aquasec.inputs.ContainerRuntimePolicyMalwareScanOptionsArgs;\nimport com.pulumi.aquasec.inputs.ContainerRuntimePolicyScopeVariableArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var containerRuntimePolicy = new ContainerRuntimePolicy(\"containerRuntimePolicy\", ContainerRuntimePolicyArgs.builder()        \n            .allowedExecutables(            \n                \"exe\",\n                \"bin\")\n            .allowedRegistries(            \n                \"registry1\",\n                \"registry2\")\n            .applicationScopes(\"Global\")\n            .auditAllNetworkActivity(true)\n            .auditAllProcessesActivity(true)\n            .auditFullCommandArguments(true)\n            .blockAccessHostNetwork(true)\n            .blockAddingCapabilities(true)\n            .blockContainerExec(true)\n            .blockCryptocurrencyMining(true)\n            .blockFilelessExec(true)\n            .blockLowPortBinding(true)\n            .blockNonCompliantImages(true)\n            .blockNonCompliantWorkloads(true)\n            .blockNonK8sContainers(true)\n            .blockPrivilegedContainers(true)\n            .blockReverseShell(true)\n            .blockRootUser(true)\n            .blockUnregisteredImages(true)\n            .blockUseIpcNamespace(true)\n            .blockUsePidNamespace(true)\n            .blockUseUserNamespace(true)\n            .blockUseUtsNamespace(true)\n            .blockedCapabilities(            \n                \"AUDIT_CONTROL\",\n                \"AUDIT_WRITE\")\n            .blockedExecutables(            \n                \"exe1\",\n                \"exe2\")\n            .blockedFiles(            \n                \"test1\",\n                \"test2\")\n            .blockedInboundPorts(            \n                \"80\",\n                \"8080\")\n            .blockedOutboundPorts(            \n                \"90\",\n                \"9090\")\n            .blockedPackages(            \n                \"pkg\",\n                \"pkg2\")\n            .blockedVolumes(            \n                \"blocked\",\n                \"vol\")\n            .containerExecAllowedProcesses(            \n                \"proc1\",\n                \"proc2\")\n            .description(\"container_runtime_policy\")\n            .enableDriftPrevention(true)\n            .enableForkGuard(true)\n            .enableIpReputationSecurity(true)\n            .enablePortScanDetection(true)\n            .enabled(true)\n            .enforce(false)\n            .exceptionalReadonlyFilesAndDirectories(            \n                \"readonly2\",\n                \"/dir2/\")\n            .fileIntegrityMonitoring(ContainerRuntimePolicyFileIntegrityMonitoringArgs.builder()\n                .excludedPaths(\"expaths\")\n                .excludedProcesses(\"exprocess\")\n                .excludedUsers(\"expuser\")\n                .monitorAttributes(true)\n                .monitorCreate(true)\n                .monitorDelete(true)\n                .monitorModify(true)\n                .monitorRead(true)\n                .monitoredPaths(\"paths\")\n                .monitoredProcesses(\"process\")\n                .monitoredUsers(\"user\")\n                .build())\n            .forkGuardProcessLimit(13)\n            .limitNewPrivileges(true)\n            .malwareScanOptions(ContainerRuntimePolicyMalwareScanOptionsArgs.builder()\n                .action(\"alert\")\n                .enabled(true)\n                .build())\n            .monitorSystemTimeChanges(\"true\")\n            .readonlyFilesAndDirectories(            \n                \"readonly\",\n                \"/dir/\")\n            .reverseShellAllowedIps(            \n                \"ip1\",\n                \"ip2\")\n            .reverseShellAllowedProcesses(            \n                \"proc1\",\n                \"proc2\")\n            .scopeExpression(\"v1 || v2\")\n            .scopeVariables(            \n                ContainerRuntimePolicyScopeVariableArgs.builder()\n                    .attribute(\"kubernetes.cluster\")\n                    .value(\"default\")\n                    .build(),\n                ContainerRuntimePolicyScopeVariableArgs.builder()\n                    .attribute(\"kubernetes.label\")\n                    .name(\"app\")\n                    .value(\"aqua\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  containerRuntimePolicy:\n    type: aquasec:ContainerRuntimePolicy\n    properties:\n      allowedExecutables:\n        - exe\n        - bin\n      allowedRegistries:\n        - registry1\n        - registry2\n      applicationScopes:\n        - Global\n      auditAllNetworkActivity: true\n      auditAllProcessesActivity: true\n      auditFullCommandArguments: true\n      blockAccessHostNetwork: true\n      blockAddingCapabilities: true\n      blockContainerExec: true\n      blockCryptocurrencyMining: true\n      blockFilelessExec: true\n      blockLowPortBinding: true\n      blockNonCompliantImages: true\n      blockNonCompliantWorkloads: true\n      blockNonK8sContainers: true\n      blockPrivilegedContainers: true\n      blockReverseShell: true\n      blockRootUser: true\n      blockUnregisteredImages: true\n      blockUseIpcNamespace: true\n      blockUsePidNamespace: true\n      blockUseUserNamespace: true\n      blockUseUtsNamespace: true\n      blockedCapabilities:\n        - AUDIT_CONTROL\n        - AUDIT_WRITE\n      blockedExecutables:\n        - exe1\n        - exe2\n      blockedFiles:\n        - test1\n        - test2\n      blockedInboundPorts:\n        - '80'\n        - '8080'\n      blockedOutboundPorts:\n        - '90'\n        - '9090'\n      blockedPackages:\n        - pkg\n        - pkg2\n      blockedVolumes:\n        - blocked\n        - vol\n      containerExecAllowedProcesses:\n        - proc1\n        - proc2\n      description: container_runtime_policy\n      enableDriftPrevention: true\n      enableForkGuard: true\n      enableIpReputationSecurity: true\n      enablePortScanDetection: true\n      enabled: true\n      enforce: false\n      exceptionalReadonlyFilesAndDirectories:\n        - readonly2\n        - /dir2/\n      fileIntegrityMonitoring:\n        excludedPaths:\n          - expaths\n        excludedProcesses:\n          - exprocess\n        excludedUsers:\n          - expuser\n        monitorAttributes: true\n        monitorCreate: true\n        monitorDelete: true\n        monitorModify: true\n        monitorRead: true\n        monitoredPaths:\n          - paths\n        monitoredProcesses:\n          - process\n        monitoredUsers:\n          - user\n      forkGuardProcessLimit: 13\n      limitNewPrivileges: true\n      malwareScanOptions:\n        action: alert\n        enabled: true\n      monitorSystemTimeChanges: 'true'\n      readonlyFilesAndDirectories:\n        - readonly\n        - /dir/\n      reverseShellAllowedIps:\n        - ip1\n        - ip2\n      reverseShellAllowedProcesses:\n        - proc1\n        - proc2\n      scopeExpression: v1 || v2\n      scopeVariables:\n        - attribute: kubernetes.cluster\n          value: default\n        - attribute: kubernetes.label\n          name: app\n          value: aqua\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "allowedExecutables": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of executables that are allowed for the user.\n"
                },
                "allowedRegistries": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of registries that allowed for running containers.\n"
                },
                "applicationScopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Indicates the application scope of the service.\n"
                },
                "auditAllNetworkActivity": {
                    "type": "boolean",
                    "description": "If true, all network activity will be audited.\n"
                },
                "auditAllProcessesActivity": {
                    "type": "boolean",
                    "description": "If true, all process activity will be audited.\n"
                },
                "auditFullCommandArguments": {
                    "type": "boolean",
                    "description": "If true, full command arguments will be audited.\n"
                },
                "author": {
                    "type": "string",
                    "description": "Username of the account that created the service.\n"
                },
                "blockAccessHostNetwork": {
                    "type": "boolean",
                    "description": "If true, prevent containers from running with access to host network.\n"
                },
                "blockAddingCapabilities": {
                    "type": "boolean",
                    "description": "If true, prevent containers from running with adding capabilities with `--cap-add` privilege.\n"
                },
                "blockContainerExec": {
                    "type": "boolean",
                    "description": "If true, exec into a container is prevented.\n"
                },
                "blockCryptocurrencyMining": {
                    "type": "boolean",
                    "description": "Detect and prevent communication to DNS/IP addresses known to be used for Cryptocurrency Mining\n"
                },
                "blockFilelessExec": {
                    "type": "boolean",
                    "description": "Detect and prevent running in-memory execution\n"
                },
                "blockLowPortBinding": {
                    "type": "boolean",
                    "description": "If true, prevent containers from running with the capability to bind in port lower than 1024.\n"
                },
                "blockNonCompliantImages": {
                    "type": "boolean",
                    "description": "If true, running non-compliant image in the container is prevented.\n"
                },
                "blockNonCompliantWorkloads": {
                    "type": "boolean",
                    "description": "If true, running containers in non-compliant pods is prevented.\n"
                },
                "blockNonK8sContainers": {
                    "type": "boolean",
                    "description": "If true, running non-kubernetes containers is prevented.\n"
                },
                "blockPrivilegedContainers": {
                    "type": "boolean",
                    "description": "If true, prevent containers from running with privileged container capability.\n"
                },
                "blockReverseShell": {
                    "type": "boolean",
                    "description": "If true, reverse shell is prevented.\n"
                },
                "blockRootUser": {
                    "type": "boolean",
                    "description": "If true, prevent containers from running with root user.\n"
                },
                "blockUnregisteredImages": {
                    "type": "boolean",
                    "description": "If true, running images in the container that are not registered in Aqua is prevented.\n"
                },
                "blockUseIpcNamespace": {
                    "type": "boolean",
                    "description": "If true, prevent containers from running with the privilege to use the IPC namespace.\n"
                },
                "blockUsePidNamespace": {
                    "type": "boolean",
                    "description": "If true, prevent containers from running with the privilege to use the PID namespace.\n"
                },
                "blockUseUserNamespace": {
                    "type": "boolean",
                    "description": "If true, prevent containers from running with the privilege to use the user namespace.\n"
                },
                "blockUseUtsNamespace": {
                    "type": "boolean",
                    "description": "If true, prevent containers from running with the privilege to use the UTS namespace.\n"
                },
                "blockedCapabilities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "If true, prevents containers from using specific Unix capabilities.\n"
                },
                "blockedExecutables": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of executables that are prevented from running in containers.\n"
                },
                "blockedFiles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of files that are prevented from being read, modified and executed in the containers.\n"
                },
                "blockedInboundPorts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of blocked inbound ports.\n"
                },
                "blockedOutboundPorts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of blocked outbound ports.\n"
                },
                "blockedPackages": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Prevent containers from reading, writing, or executing all files in the list of packages.\n"
                },
                "blockedVolumes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of volumes that are prevented from being mounted in the containers.\n"
                },
                "containerExecAllowedProcesses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of processes that will be allowed.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the container runtime policy\n"
                },
                "enableDriftPrevention": {
                    "type": "boolean",
                    "description": "If true, executables that are not in the original image is prevented from running.\n"
                },
                "enableForkGuard": {
                    "type": "boolean",
                    "description": "If true, fork bombs are prevented in the containers.\n"
                },
                "enableIpReputationSecurity": {
                    "type": "boolean",
                    "description": "If true, detect and prevent communication from containers to IP addresses known to have a bad reputation.\n"
                },
                "enablePortScanDetection": {
                    "type": "boolean",
                    "description": "If true, detects port scanning behavior in the container.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Indicates if the runtime policy is enabled or not.\n"
                },
                "enforce": {
                    "type": "boolean",
                    "description": "Indicates that policy should effect container execution (not just for audit).\n"
                },
                "enforceAfterDays": {
                    "type": "integer",
                    "description": "Indicates the number of days after which the runtime policy will be changed to enforce mode.\n"
                },
                "exceptionalReadonlyFilesAndDirectories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of files and directories to be excluded from the read-only list.\n"
                },
                "execLockdownWhiteLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify processes that will be allowed\n"
                },
                "fileIntegrityMonitoring": {
                    "$ref": "#/types/aquasec:index/ContainerRuntimePolicyFileIntegrityMonitoring:ContainerRuntimePolicyFileIntegrityMonitoring",
                    "description": "Configuration for file integrity monitoring.\n"
                },
                "forkGuardProcessLimit": {
                    "type": "integer",
                    "description": "Process limit for the fork guard.\n"
                },
                "limitNewPrivileges": {
                    "type": "boolean",
                    "description": "If true, prevents the container from obtaining new privileges at runtime. (only enabled in enforce mode)\n"
                },
                "malwareScanOptions": {
                    "$ref": "#/types/aquasec:index/ContainerRuntimePolicyMalwareScanOptions:ContainerRuntimePolicyMalwareScanOptions",
                    "description": "Configuration for Real-Time Malware Protection.\n"
                },
                "monitorSystemTimeChanges": {
                    "type": "boolean",
                    "description": "If true, system time changes will be monitored.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the container runtime policy\n"
                },
                "readonlyFilesAndDirectories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of files and directories to be restricted as read-only\n"
                },
                "reverseShellAllowedIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of IPs/ CIDRs that will be allowed\n"
                },
                "reverseShellAllowedProcesses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of processes that will be allowed\n"
                },
                "scopeExpression": {
                    "type": "string",
                    "description": "Logical expression of how to compute the dependency of the scope variables.\n"
                },
                "scopeVariables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/ContainerRuntimePolicyScopeVariable:ContainerRuntimePolicyScopeVariable"
                    },
                    "description": "List of scope attributes.\n"
                }
            },
            "required": [
                "applicationScopes",
                "author",
                "name",
                "scopeExpression",
                "scopeVariables"
            ],
            "inputProperties": {
                "allowedExecutables": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of executables that are allowed for the user.\n"
                },
                "allowedRegistries": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of registries that allowed for running containers.\n"
                },
                "applicationScopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Indicates the application scope of the service.\n"
                },
                "auditAllNetworkActivity": {
                    "type": "boolean",
                    "description": "If true, all network activity will be audited.\n"
                },
                "auditAllProcessesActivity": {
                    "type": "boolean",
                    "description": "If true, all process activity will be audited.\n"
                },
                "auditFullCommandArguments": {
                    "type": "boolean",
                    "description": "If true, full command arguments will be audited.\n"
                },
                "blockAccessHostNetwork": {
                    "type": "boolean",
                    "description": "If true, prevent containers from running with access to host network.\n"
                },
                "blockAddingCapabilities": {
                    "type": "boolean",
                    "description": "If true, prevent containers from running with adding capabilities with `--cap-add` privilege.\n"
                },
                "blockContainerExec": {
                    "type": "boolean",
                    "description": "If true, exec into a container is prevented.\n"
                },
                "blockCryptocurrencyMining": {
                    "type": "boolean",
                    "description": "Detect and prevent communication to DNS/IP addresses known to be used for Cryptocurrency Mining\n"
                },
                "blockFilelessExec": {
                    "type": "boolean",
                    "description": "Detect and prevent running in-memory execution\n"
                },
                "blockLowPortBinding": {
                    "type": "boolean",
                    "description": "If true, prevent containers from running with the capability to bind in port lower than 1024.\n"
                },
                "blockNonCompliantImages": {
                    "type": "boolean",
                    "description": "If true, running non-compliant image in the container is prevented.\n"
                },
                "blockNonCompliantWorkloads": {
                    "type": "boolean",
                    "description": "If true, running containers in non-compliant pods is prevented.\n"
                },
                "blockNonK8sContainers": {
                    "type": "boolean",
                    "description": "If true, running non-kubernetes containers is prevented.\n"
                },
                "blockPrivilegedContainers": {
                    "type": "boolean",
                    "description": "If true, prevent containers from running with privileged container capability.\n"
                },
                "blockReverseShell": {
                    "type": "boolean",
                    "description": "If true, reverse shell is prevented.\n"
                },
                "blockRootUser": {
                    "type": "boolean",
                    "description": "If true, prevent containers from running with root user.\n"
                },
                "blockUnregisteredImages": {
                    "type": "boolean",
                    "description": "If true, running images in the container that are not registered in Aqua is prevented.\n"
                },
                "blockUseIpcNamespace": {
                    "type": "boolean",
                    "description": "If true, prevent containers from running with the privilege to use the IPC namespace.\n"
                },
                "blockUsePidNamespace": {
                    "type": "boolean",
                    "description": "If true, prevent containers from running with the privilege to use the PID namespace.\n"
                },
                "blockUseUserNamespace": {
                    "type": "boolean",
                    "description": "If true, prevent containers from running with the privilege to use the user namespace.\n"
                },
                "blockUseUtsNamespace": {
                    "type": "boolean",
                    "description": "If true, prevent containers from running with the privilege to use the UTS namespace.\n"
                },
                "blockedCapabilities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "If true, prevents containers from using specific Unix capabilities.\n"
                },
                "blockedExecutables": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of executables that are prevented from running in containers.\n"
                },
                "blockedFiles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of files that are prevented from being read, modified and executed in the containers.\n"
                },
                "blockedInboundPorts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of blocked inbound ports.\n"
                },
                "blockedOutboundPorts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of blocked outbound ports.\n"
                },
                "blockedPackages": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Prevent containers from reading, writing, or executing all files in the list of packages.\n"
                },
                "blockedVolumes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of volumes that are prevented from being mounted in the containers.\n"
                },
                "containerExecAllowedProcesses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of processes that will be allowed.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the container runtime policy\n"
                },
                "enableDriftPrevention": {
                    "type": "boolean",
                    "description": "If true, executables that are not in the original image is prevented from running.\n"
                },
                "enableForkGuard": {
                    "type": "boolean",
                    "description": "If true, fork bombs are prevented in the containers.\n"
                },
                "enableIpReputationSecurity": {
                    "type": "boolean",
                    "description": "If true, detect and prevent communication from containers to IP addresses known to have a bad reputation.\n"
                },
                "enablePortScanDetection": {
                    "type": "boolean",
                    "description": "If true, detects port scanning behavior in the container.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Indicates if the runtime policy is enabled or not.\n"
                },
                "enforce": {
                    "type": "boolean",
                    "description": "Indicates that policy should effect container execution (not just for audit).\n"
                },
                "enforceAfterDays": {
                    "type": "integer",
                    "description": "Indicates the number of days after which the runtime policy will be changed to enforce mode.\n"
                },
                "exceptionalReadonlyFilesAndDirectories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of files and directories to be excluded from the read-only list.\n"
                },
                "execLockdownWhiteLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify processes that will be allowed\n"
                },
                "fileIntegrityMonitoring": {
                    "$ref": "#/types/aquasec:index/ContainerRuntimePolicyFileIntegrityMonitoring:ContainerRuntimePolicyFileIntegrityMonitoring",
                    "description": "Configuration for file integrity monitoring.\n"
                },
                "forkGuardProcessLimit": {
                    "type": "integer",
                    "description": "Process limit for the fork guard.\n"
                },
                "limitNewPrivileges": {
                    "type": "boolean",
                    "description": "If true, prevents the container from obtaining new privileges at runtime. (only enabled in enforce mode)\n"
                },
                "malwareScanOptions": {
                    "$ref": "#/types/aquasec:index/ContainerRuntimePolicyMalwareScanOptions:ContainerRuntimePolicyMalwareScanOptions",
                    "description": "Configuration for Real-Time Malware Protection.\n"
                },
                "monitorSystemTimeChanges": {
                    "type": "boolean",
                    "description": "If true, system time changes will be monitored.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the container runtime policy\n",
                    "willReplaceOnChanges": true
                },
                "readonlyFilesAndDirectories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of files and directories to be restricted as read-only\n"
                },
                "reverseShellAllowedIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of IPs/ CIDRs that will be allowed\n"
                },
                "reverseShellAllowedProcesses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of processes that will be allowed\n"
                },
                "scopeExpression": {
                    "type": "string",
                    "description": "Logical expression of how to compute the dependency of the scope variables.\n"
                },
                "scopeVariables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/ContainerRuntimePolicyScopeVariable:ContainerRuntimePolicyScopeVariable"
                    },
                    "description": "List of scope attributes.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ContainerRuntimePolicy resources.\n",
                "properties": {
                    "allowedExecutables": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of executables that are allowed for the user.\n"
                    },
                    "allowedRegistries": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of registries that allowed for running containers.\n"
                    },
                    "applicationScopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Indicates the application scope of the service.\n"
                    },
                    "auditAllNetworkActivity": {
                        "type": "boolean",
                        "description": "If true, all network activity will be audited.\n"
                    },
                    "auditAllProcessesActivity": {
                        "type": "boolean",
                        "description": "If true, all process activity will be audited.\n"
                    },
                    "auditFullCommandArguments": {
                        "type": "boolean",
                        "description": "If true, full command arguments will be audited.\n"
                    },
                    "author": {
                        "type": "string",
                        "description": "Username of the account that created the service.\n"
                    },
                    "blockAccessHostNetwork": {
                        "type": "boolean",
                        "description": "If true, prevent containers from running with access to host network.\n"
                    },
                    "blockAddingCapabilities": {
                        "type": "boolean",
                        "description": "If true, prevent containers from running with adding capabilities with `--cap-add` privilege.\n"
                    },
                    "blockContainerExec": {
                        "type": "boolean",
                        "description": "If true, exec into a container is prevented.\n"
                    },
                    "blockCryptocurrencyMining": {
                        "type": "boolean",
                        "description": "Detect and prevent communication to DNS/IP addresses known to be used for Cryptocurrency Mining\n"
                    },
                    "blockFilelessExec": {
                        "type": "boolean",
                        "description": "Detect and prevent running in-memory execution\n"
                    },
                    "blockLowPortBinding": {
                        "type": "boolean",
                        "description": "If true, prevent containers from running with the capability to bind in port lower than 1024.\n"
                    },
                    "blockNonCompliantImages": {
                        "type": "boolean",
                        "description": "If true, running non-compliant image in the container is prevented.\n"
                    },
                    "blockNonCompliantWorkloads": {
                        "type": "boolean",
                        "description": "If true, running containers in non-compliant pods is prevented.\n"
                    },
                    "blockNonK8sContainers": {
                        "type": "boolean",
                        "description": "If true, running non-kubernetes containers is prevented.\n"
                    },
                    "blockPrivilegedContainers": {
                        "type": "boolean",
                        "description": "If true, prevent containers from running with privileged container capability.\n"
                    },
                    "blockReverseShell": {
                        "type": "boolean",
                        "description": "If true, reverse shell is prevented.\n"
                    },
                    "blockRootUser": {
                        "type": "boolean",
                        "description": "If true, prevent containers from running with root user.\n"
                    },
                    "blockUnregisteredImages": {
                        "type": "boolean",
                        "description": "If true, running images in the container that are not registered in Aqua is prevented.\n"
                    },
                    "blockUseIpcNamespace": {
                        "type": "boolean",
                        "description": "If true, prevent containers from running with the privilege to use the IPC namespace.\n"
                    },
                    "blockUsePidNamespace": {
                        "type": "boolean",
                        "description": "If true, prevent containers from running with the privilege to use the PID namespace.\n"
                    },
                    "blockUseUserNamespace": {
                        "type": "boolean",
                        "description": "If true, prevent containers from running with the privilege to use the user namespace.\n"
                    },
                    "blockUseUtsNamespace": {
                        "type": "boolean",
                        "description": "If true, prevent containers from running with the privilege to use the UTS namespace.\n"
                    },
                    "blockedCapabilities": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "If true, prevents containers from using specific Unix capabilities.\n"
                    },
                    "blockedExecutables": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of executables that are prevented from running in containers.\n"
                    },
                    "blockedFiles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of files that are prevented from being read, modified and executed in the containers.\n"
                    },
                    "blockedInboundPorts": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of blocked inbound ports.\n"
                    },
                    "blockedOutboundPorts": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of blocked outbound ports.\n"
                    },
                    "blockedPackages": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Prevent containers from reading, writing, or executing all files in the list of packages.\n"
                    },
                    "blockedVolumes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of volumes that are prevented from being mounted in the containers.\n"
                    },
                    "containerExecAllowedProcesses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of processes that will be allowed.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the container runtime policy\n"
                    },
                    "enableDriftPrevention": {
                        "type": "boolean",
                        "description": "If true, executables that are not in the original image is prevented from running.\n"
                    },
                    "enableForkGuard": {
                        "type": "boolean",
                        "description": "If true, fork bombs are prevented in the containers.\n"
                    },
                    "enableIpReputationSecurity": {
                        "type": "boolean",
                        "description": "If true, detect and prevent communication from containers to IP addresses known to have a bad reputation.\n"
                    },
                    "enablePortScanDetection": {
                        "type": "boolean",
                        "description": "If true, detects port scanning behavior in the container.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Indicates if the runtime policy is enabled or not.\n"
                    },
                    "enforce": {
                        "type": "boolean",
                        "description": "Indicates that policy should effect container execution (not just for audit).\n"
                    },
                    "enforceAfterDays": {
                        "type": "integer",
                        "description": "Indicates the number of days after which the runtime policy will be changed to enforce mode.\n"
                    },
                    "exceptionalReadonlyFilesAndDirectories": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of files and directories to be excluded from the read-only list.\n"
                    },
                    "execLockdownWhiteLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specify processes that will be allowed\n"
                    },
                    "fileIntegrityMonitoring": {
                        "$ref": "#/types/aquasec:index/ContainerRuntimePolicyFileIntegrityMonitoring:ContainerRuntimePolicyFileIntegrityMonitoring",
                        "description": "Configuration for file integrity monitoring.\n"
                    },
                    "forkGuardProcessLimit": {
                        "type": "integer",
                        "description": "Process limit for the fork guard.\n"
                    },
                    "limitNewPrivileges": {
                        "type": "boolean",
                        "description": "If true, prevents the container from obtaining new privileges at runtime. (only enabled in enforce mode)\n"
                    },
                    "malwareScanOptions": {
                        "$ref": "#/types/aquasec:index/ContainerRuntimePolicyMalwareScanOptions:ContainerRuntimePolicyMalwareScanOptions",
                        "description": "Configuration for Real-Time Malware Protection.\n"
                    },
                    "monitorSystemTimeChanges": {
                        "type": "boolean",
                        "description": "If true, system time changes will be monitored.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the container runtime policy\n",
                        "willReplaceOnChanges": true
                    },
                    "readonlyFilesAndDirectories": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of files and directories to be restricted as read-only\n"
                    },
                    "reverseShellAllowedIps": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of IPs/ CIDRs that will be allowed\n"
                    },
                    "reverseShellAllowedProcesses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of processes that will be allowed\n"
                    },
                    "scopeExpression": {
                        "type": "string",
                        "description": "Logical expression of how to compute the dependency of the scope variables.\n"
                    },
                    "scopeVariables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/ContainerRuntimePolicyScopeVariable:ContainerRuntimePolicyScopeVariable"
                        },
                        "description": "List of scope attributes.\n"
                    }
                },
                "type": "object"
            }
        },
        "aquasec:index/enforcerGroups:EnforcerGroups": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aquasec from \"@pulumiverse/aquasec\";\n\nconst group = new aquasec.EnforcerGroups(\"group\", {\n    antivirusProtection: true,\n    containerActivityProtection: true,\n    containerAntivirusProtection: true,\n    enforce: true,\n    forensics: true,\n    groupId: \"tf-test-enforcer\",\n    hostAssurance: true,\n    hostForensics: true,\n    hostNetworkProtection: true,\n    hostProtection: true,\n    imageAssurance: true,\n    networkProtection: true,\n    orchestrators: [{}],\n    riskExplorerAutoDiscovery: true,\n    syncHostImages: true,\n    type: \"agent\",\n});\nconst group_kubeEnforcer = new aquasec.EnforcerGroups(\"group-kubeEnforcer\", {\n    admissionControl: true,\n    autoCopySecrets: true,\n    autoDiscoverConfigureRegistries: true,\n    autoDiscoveryEnabled: true,\n    autoScanDiscoveredImagesRunningContainers: true,\n    blockAdmissionControl: true,\n    enforce: true,\n    groupId: \"tf-test-kube_enforcer\",\n    kubeBenchImageName: \"registry.aquasec.com/kube-bench:v0.6.5\",\n    microEnforcerSecretsName: \"aqua-registry\",\n    orchestrators: [{\n        namespace: \"aqua\",\n        type: \"kubernetes\",\n    }],\n    type: \"kube_enforcer\",\n});\n```\n```python\nimport pulumi\nimport pulumiverse_aquasec as aquasec\n\ngroup = aquasec.EnforcerGroups(\"group\",\n    antivirus_protection=True,\n    container_activity_protection=True,\n    container_antivirus_protection=True,\n    enforce=True,\n    forensics=True,\n    group_id=\"tf-test-enforcer\",\n    host_assurance=True,\n    host_forensics=True,\n    host_network_protection=True,\n    host_protection=True,\n    image_assurance=True,\n    network_protection=True,\n    orchestrators=[aquasec.EnforcerGroupsOrchestratorArgs()],\n    risk_explorer_auto_discovery=True,\n    sync_host_images=True,\n    type=\"agent\")\ngroup_kube_enforcer = aquasec.EnforcerGroups(\"group-kubeEnforcer\",\n    admission_control=True,\n    auto_copy_secrets=True,\n    auto_discover_configure_registries=True,\n    auto_discovery_enabled=True,\n    auto_scan_discovered_images_running_containers=True,\n    block_admission_control=True,\n    enforce=True,\n    group_id=\"tf-test-kube_enforcer\",\n    kube_bench_image_name=\"registry.aquasec.com/kube-bench:v0.6.5\",\n    micro_enforcer_secrets_name=\"aqua-registry\",\n    orchestrators=[aquasec.EnforcerGroupsOrchestratorArgs(\n        namespace=\"aqua\",\n        type=\"kubernetes\",\n    )],\n    type=\"kube_enforcer\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Aquasec = Pulumiverse.Aquasec;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @group = new Aquasec.EnforcerGroups(\"group\", new()\n    {\n        AntivirusProtection = true,\n        ContainerActivityProtection = true,\n        ContainerAntivirusProtection = true,\n        Enforce = true,\n        Forensics = true,\n        GroupId = \"tf-test-enforcer\",\n        HostAssurance = true,\n        HostForensics = true,\n        HostNetworkProtection = true,\n        HostProtection = true,\n        ImageAssurance = true,\n        NetworkProtection = true,\n        Orchestrators = new[]\n        {\n            null,\n        },\n        RiskExplorerAutoDiscovery = true,\n        SyncHostImages = true,\n        Type = \"agent\",\n    });\n\n    var group_kubeEnforcer = new Aquasec.EnforcerGroups(\"group-kubeEnforcer\", new()\n    {\n        AdmissionControl = true,\n        AutoCopySecrets = true,\n        AutoDiscoverConfigureRegistries = true,\n        AutoDiscoveryEnabled = true,\n        AutoScanDiscoveredImagesRunningContainers = true,\n        BlockAdmissionControl = true,\n        Enforce = true,\n        GroupId = \"tf-test-kube_enforcer\",\n        KubeBenchImageName = \"registry.aquasec.com/kube-bench:v0.6.5\",\n        MicroEnforcerSecretsName = \"aqua-registry\",\n        Orchestrators = new[]\n        {\n            new Aquasec.Inputs.EnforcerGroupsOrchestratorArgs\n            {\n                Namespace = \"aqua\",\n                Type = \"kubernetes\",\n            },\n        },\n        Type = \"kube_enforcer\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-aquasec/sdk/go/aquasec\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := aquasec.NewEnforcerGroups(ctx, \"group\", \u0026aquasec.EnforcerGroupsArgs{\n\t\t\tAntivirusProtection:          pulumi.Bool(true),\n\t\t\tContainerActivityProtection:  pulumi.Bool(true),\n\t\t\tContainerAntivirusProtection: pulumi.Bool(true),\n\t\t\tEnforce:                      pulumi.Bool(true),\n\t\t\tForensics:                    pulumi.Bool(true),\n\t\t\tGroupId:                      pulumi.String(\"tf-test-enforcer\"),\n\t\t\tHostAssurance:                pulumi.Bool(true),\n\t\t\tHostForensics:                pulumi.Bool(true),\n\t\t\tHostNetworkProtection:        pulumi.Bool(true),\n\t\t\tHostProtection:               pulumi.Bool(true),\n\t\t\tImageAssurance:               pulumi.Bool(true),\n\t\t\tNetworkProtection:            pulumi.Bool(true),\n\t\t\tOrchestrators: aquasec.EnforcerGroupsOrchestratorArray{\n\t\t\t\tnil,\n\t\t\t},\n\t\t\tRiskExplorerAutoDiscovery: pulumi.Bool(true),\n\t\t\tSyncHostImages:            pulumi.Bool(true),\n\t\t\tType:                      pulumi.String(\"agent\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = aquasec.NewEnforcerGroups(ctx, \"group-kubeEnforcer\", \u0026aquasec.EnforcerGroupsArgs{\n\t\t\tAdmissionControl:                          pulumi.Bool(true),\n\t\t\tAutoCopySecrets:                           pulumi.Bool(true),\n\t\t\tAutoDiscoverConfigureRegistries:           pulumi.Bool(true),\n\t\t\tAutoDiscoveryEnabled:                      pulumi.Bool(true),\n\t\t\tAutoScanDiscoveredImagesRunningContainers: pulumi.Bool(true),\n\t\t\tBlockAdmissionControl:                     pulumi.Bool(true),\n\t\t\tEnforce:                                   pulumi.Bool(true),\n\t\t\tGroupId:                                   pulumi.String(\"tf-test-kube_enforcer\"),\n\t\t\tKubeBenchImageName:                        pulumi.String(\"registry.aquasec.com/kube-bench:v0.6.5\"),\n\t\t\tMicroEnforcerSecretsName:                  pulumi.String(\"aqua-registry\"),\n\t\t\tOrchestrators: aquasec.EnforcerGroupsOrchestratorArray{\n\t\t\t\t\u0026aquasec.EnforcerGroupsOrchestratorArgs{\n\t\t\t\t\tNamespace: pulumi.String(\"aqua\"),\n\t\t\t\t\tType:      pulumi.String(\"kubernetes\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tType: pulumi.String(\"kube_enforcer\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aquasec.EnforcerGroups;\nimport com.pulumi.aquasec.EnforcerGroupsArgs;\nimport com.pulumi.aquasec.inputs.EnforcerGroupsOrchestratorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var group = new EnforcerGroups(\"group\", EnforcerGroupsArgs.builder()        \n            .antivirusProtection(true)\n            .containerActivityProtection(true)\n            .containerAntivirusProtection(true)\n            .enforce(true)\n            .forensics(true)\n            .groupId(\"tf-test-enforcer\")\n            .hostAssurance(true)\n            .hostForensics(true)\n            .hostNetworkProtection(true)\n            .hostProtection(true)\n            .imageAssurance(true)\n            .networkProtection(true)\n            .orchestrators()\n            .riskExplorerAutoDiscovery(true)\n            .syncHostImages(true)\n            .type(\"agent\")\n            .build());\n\n        var group_kubeEnforcer = new EnforcerGroups(\"group-kubeEnforcer\", EnforcerGroupsArgs.builder()        \n            .admissionControl(true)\n            .autoCopySecrets(true)\n            .autoDiscoverConfigureRegistries(true)\n            .autoDiscoveryEnabled(true)\n            .autoScanDiscoveredImagesRunningContainers(true)\n            .blockAdmissionControl(true)\n            .enforce(true)\n            .groupId(\"tf-test-kube_enforcer\")\n            .kubeBenchImageName(\"registry.aquasec.com/kube-bench:v0.6.5\")\n            .microEnforcerSecretsName(\"aqua-registry\")\n            .orchestrators(EnforcerGroupsOrchestratorArgs.builder()\n                .namespace(\"aqua\")\n                .type(\"kubernetes\")\n                .build())\n            .type(\"kube_enforcer\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  group:\n    type: aquasec:EnforcerGroups\n    properties:\n      # Advanced Malware Protection (Host Protection)\n      antivirusProtection: true\n      # Runtime Controls\n      containerActivityProtection: true\n      # Advanced Malware Protection (Container Protection)\n      containerAntivirusProtection: true\n      enforce: true\n      # forensics\n      forensics: true\n      groupId: tf-test-enforcer\n      # Host Assurance\n      hostAssurance: true\n      # host_forensics\n      hostForensics: true\n      # Network Firewall (Host Protection)\n      hostNetworkProtection: true\n      # Runtime Controls\n      hostProtection: true\n      # Image Assurance\n      imageAssurance: true\n      # Network Firewall (Container Protection)\n      networkProtection: true\n      orchestrators:\n        - {}\n      # Risk Explorer\n      riskExplorerAutoDiscovery: true\n      # Host Images\n      syncHostImages: true\n      type: agent\n  group-kubeEnforcer:\n    type: aquasec:EnforcerGroups\n    properties:\n      # Enable admission control\n      admissionControl: true\n      # Auto copy these secrets to the Pod Enforcer namespace and container\n      autoCopySecrets: true\n      # Add discovered registries\n      autoDiscoverConfigureRegistries: true\n      # Enable workload discovery\n      autoDiscoveryEnabled: true\n      # Register discovered pod images\n      autoScanDiscoveredImagesRunningContainers: true\n      # Perform admission control if not connected to a gateway\n      blockAdmissionControl: true\n      enforce: true\n      groupId: tf-test-kube_enforcer\n      # Kube-bench image path\n      kubeBenchImageName: registry.aquasec.com/kube-bench:v0.6.5\n      # Secret that holds the registry credentials for the Pod Enforcer and kube-bench\n      microEnforcerSecretsName: aqua-registry\n      orchestrators:\n        - namespace: aqua\n          type: kubernetes\n      type: kube_enforcer\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "admissionControl": {
                    "type": "boolean",
                    "description": "Selecting this option will allow the KubeEnforcer to block the deployment of container images that have failed any of these Container Runtime Policy controls:\\\n\t\t\t* Block Non-Compliant Images\\\n\t\t\t* Block Non-Compliant Workloads\\\n\t\t\t* Block Unregistered Images\\\n\t\t\tThis functionality can work only when the KubeEnforcer is deployed in Enforce mode.\n"
                },
                "allowKubeEnforcerAudit": {
                    "type": "boolean",
                    "description": "Allow kube enforcer audit.\n"
                },
                "allowedApplications": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of application names to allow on the hosts. if provided, only containers of the listed applications will be allowed to run.\n"
                },
                "allowedLabels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of label names to allow on the hosts.\n"
                },
                "allowedRegistries": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of registry names to allow on the hosts.\n"
                },
                "antivirusProtection": {
                    "type": "boolean",
                    "description": "This setting is available only when you have license for `Advanced Malware Protection`. Send true to make use of the license and enable the `Real-time Malware Protection` control in the Host Runtime policies.\n"
                },
                "aquaVersion": {
                    "type": "string",
                    "description": "Aqua server version\n"
                },
                "auditAll": {
                    "type": "boolean",
                    "description": "Agent will send extra audit messages to the server for success operations from inside the container (runtime).\n"
                },
                "autoCopySecrets": {
                    "type": "boolean",
                    "description": "This option is applicable only if `Enable Pod Enforcer injection` is selected. Select this option if you want Aqua Enterprise to copy the secrets defined above to the Pod Enforcer namespace and container. Otherwise, you can choose to copy these secrets by other means.\n"
                },
                "autoDiscoverConfigureRegistries": {
                    "type": "boolean",
                    "description": "This option is available only if `Enable workload discovery` is selected. If selected, the KubeEnforcer will add previously unknown image registries from the cluster to Aqua.\n"
                },
                "autoDiscoveryEnabled": {
                    "type": "boolean",
                    "description": "When this option is selected, the KubeEnforcer will discover workloads on its cluster.\n"
                },
                "autoScanDiscoveredImagesRunningContainers": {
                    "type": "boolean",
                    "description": "This option is available only if `Enable workload discovery` is selected. If selected, the KubeEnforcer will automatically register images running as workloads (and scan the discovered images for security issues).\n"
                },
                "behavioralEngine": {
                    "type": "boolean",
                    "description": "Select Enabled to detect suspicious activity in your containers and display potential security threats in the Incidents and Audit pages.\n"
                },
                "blockAdmissionControl": {
                    "type": "boolean",
                    "description": "This applies only if both `Enable admission control` and Enforce mode are set. This additional option must be selected for admission control to work if the KubeEnforcer is not connected to any Gateway. If this option is not selected, admission control will be disabled; this will have no effect on containers already running.\n"
                },
                "commands": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/EnforcerGroupsCommand:EnforcerGroupsCommand"
                    },
                    "description": "The installation command.\n"
                },
                "connectedCount": {
                    "type": "integer",
                    "description": "Number of connected enforcers in the enforcer group.\n"
                },
                "containerActivityProtection": {
                    "type": "boolean",
                    "description": "Set `True` to apply Container Runtime Policies, Image Profiles, and Firewall Policies to containers.\n"
                },
                "containerAntivirusProtection": {
                    "type": "boolean",
                    "description": "This setting is available only when you have license for `Advanced Malware Protection`. Send true to make use of the license and enable the `Real-time Malware Protection` control in the Container Runtime policies.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description of the Aqua Enforcer group.\n"
                },
                "disconnectedCount": {
                    "type": "integer",
                    "description": "Number of disconnected enforcers in the enforcer group.\n"
                },
                "enforce": {
                    "type": "boolean",
                    "description": "Whether to enable enforce mode on the Enforcers, defaults to False.\n"
                },
                "enforcerImageName": {
                    "type": "string",
                    "description": "The specific Aqua Enforcer product image (with image tag) to be deployed.\n"
                },
                "forensics": {
                    "type": "boolean",
                    "description": "Select Enabled to send activity logs in your containers to the Aqua Server for forensics purposes.\n"
                },
                "gatewayAddress": {
                    "type": "string",
                    "description": "Gateway Address\n"
                },
                "gatewayName": {
                    "type": "string",
                    "description": "Gateway Name\n"
                },
                "gateways": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Aqua gateway IDs for the Enforcers.\n"
                },
                "groupId": {
                    "type": "string",
                    "description": "The ID of the Enforcer group.\n"
                },
                "highVulns": {
                    "type": "integer",
                    "description": "Number of high vulnerabilities in the enforcers that in this enforcer group.\n"
                },
                "hostAssurance": {
                    "type": "boolean",
                    "description": "Set `True` to enable host scanning and respective Host Assurance controls.\n"
                },
                "hostBehavioralEngine": {
                    "type": "boolean",
                    "description": "Set `True` to enable these Host Runtime Policy controls: `OS Users and Groups Allowed` and `OS Users and Groups Blocked`\n"
                },
                "hostForensics": {
                    "type": "boolean",
                    "description": "Select Enabled to send activity logs in your host to the Aqua Server for forensics purposes.\n"
                },
                "hostNetworkProtection": {
                    "type": "boolean",
                    "description": "Set `True` to apply Firewall Policies to hosts, and allow recording network maps for Aqua services. The Network Firewall setting must be disabled when deploying the Aqua Enforcer on a machine running Rocky Linux. See https://docs.aquasec.com/docs/platform-support-limitations-rocky-linux for further information\n"
                },
                "hostOs": {
                    "type": "string",
                    "description": "The OS type for the host\n"
                },
                "hostProtection": {
                    "type": "boolean",
                    "description": "Set `True` to enable all Host Runtime Policy controls except for `OS Users and Groups Allowed` and `OS Users and Groups Blocked`.\n"
                },
                "hostUserProtection": {
                    "type": "boolean",
                    "description": "Set `True` to enable these Host Runtime Policy controls: `OS Users and Groups Allowed` and `OS Users and Groups Blocked`\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The hostname\n"
                },
                "hostsCount": {
                    "type": "integer",
                    "description": "Number of enforcers in the enforcer group.\n"
                },
                "imageAssurance": {
                    "type": "boolean",
                    "description": "Set `True` to enable selected controls: Container Runtime Policy (`Block Non-Compliant Images`, `Block Unregistered Images`, and `Registries Allowed`) and Default Image Assurance Policy (`Images Blocked`).\n"
                },
                "installCommand": {
                    "type": "string",
                    "description": "Enforcer install command\n"
                },
                "kubeBenchImageName": {
                    "type": "string",
                    "description": "See https://docs.aquasec.com/docs/securing-kubernetes-applications#section-configuration-hardening, The KubeEnforcer can deploy the Aqua Security kube-bench open-source product to perform Kubernetes CIS benchmark testing of nodes.\n\t\t\tThis field specifies the path and file name of the kube-bench product image for the KubeEnforcer to deploy; it will be filled in automatically. You can optionally enter a different value.\n"
                },
                "lastUpdate": {
                    "type": "integer",
                    "description": "The last date and time the batch token was updated in UNIX time.\n"
                },
                "logicalName": {
                    "type": "string",
                    "description": "Name for the batch install record.\n"
                },
                "lowVulns": {
                    "type": "integer",
                    "description": "Number of low vulnerabilities in the enforcers that in this enforcer group.\n"
                },
                "medVulns": {
                    "type": "integer",
                    "description": "Number of medium vulnerabilities in the enforcers that in this enforcer group.\n"
                },
                "microEnforcerCertsSecretsName": {
                    "type": "string",
                    "description": "This option is applicable only if `Enable Pod Enforcer injection` is selected.\n"
                },
                "microEnforcerImageName": {
                    "type": "string",
                    "description": "This option is applicable only if `Enable Pod Enforcer injection` is selected. This field specifies the path and file name of the KubeEnforcer product image to be deployed; it will be filled in automatically. You can optionally enter a different value.\n"
                },
                "microEnforcerInjection": {
                    "type": "boolean",
                    "description": "This applies only if both `Enable admission control` and Enforce mode are set. This additional option must be selected for admission control to work if the KubeEnforcer is not connected to any Gateway. If this option is not selected, admission control will be disabled; this will have no effect on containers already running.\n"
                },
                "microEnforcerSecretsName": {
                    "type": "string",
                    "description": "You can specify the name of the secret (in the Aqua namespace) that Aqua copies into the Pod Enforcer namespace and kube-bench, allowing them access to the Pod Enforcer and kube-bench product images, respectively.\n"
                },
                "negVulns": {
                    "type": "integer",
                    "description": "Number of negligible vulnerabilities in the enforcers that in this enforcer group.\n"
                },
                "networkProtection": {
                    "type": "boolean",
                    "description": "Send true to apply Firewall Policies to containers, and allow recording network maps for Aqua services. The Network Firewall setting must be disabled when deploying the Aqua Enforcer on a machine running Rocky Linux. See https://docs.aquasec.com/docs/platform-support-limitations-rocky-linux for further information.\n"
                },
                "orchestrators": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/EnforcerGroupsOrchestrator:EnforcerGroupsOrchestrator"
                    },
                    "description": "The orchestrator for which you are creating the Enforcer group.\n"
                },
                "pasDeploymentLink": {
                    "type": "string",
                    "description": "pas deployment link\n"
                },
                "permission": {
                    "type": "string",
                    "description": "Permission Action\n"
                },
                "riskExplorerAutoDiscovery": {
                    "type": "boolean",
                    "description": "Set `True` to allow Enforcers to be discovered in the Risk Explorer.\n"
                },
                "runtimePolicyName": {
                    "type": "string",
                    "description": "Function Runtime Policy that will applay on the nano enforcer.\n"
                },
                "runtimeType": {
                    "type": "string",
                    "description": "The container runtime environment.\n"
                },
                "syncHostImages": {
                    "type": "boolean",
                    "description": "Set `True` to configure Enforcers to discover local host images. Discovered images will be listed under Images \u003e Host Images, as well as under Infrastructure (in the Images tab for applicable hosts).\n"
                },
                "syscallEnabled": {
                    "type": "boolean",
                    "description": "Set `True` will allow profiling and monitoring system calls made by running containers.\n"
                },
                "token": {
                    "type": "string",
                    "description": "The batch install token.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Enforcer Type.\n"
                },
                "userAccessControl": {
                    "type": "boolean",
                    "description": "Set `True` to apply User Access Control Policies to containers. Note that Aqua Enforcers must be deployed with the AQUA*RUNC*INTERCEPTION environment variable set to 0 in order to use User Access Control Policies.\n"
                }
            },
            "required": [
                "aquaVersion",
                "autoCopySecrets",
                "commands",
                "connectedCount",
                "disconnectedCount",
                "enforcerImageName",
                "gatewayAddress",
                "gatewayName",
                "gateways",
                "groupId",
                "highVulns",
                "hostOs",
                "hostname",
                "hostsCount",
                "installCommand",
                "kubeBenchImageName",
                "lastUpdate",
                "logicalName",
                "lowVulns",
                "medVulns",
                "microEnforcerImageName",
                "microEnforcerSecretsName",
                "negVulns",
                "orchestrators",
                "pasDeploymentLink",
                "runtimePolicyName",
                "runtimeType",
                "token",
                "type"
            ],
            "inputProperties": {
                "admissionControl": {
                    "type": "boolean",
                    "description": "Selecting this option will allow the KubeEnforcer to block the deployment of container images that have failed any of these Container Runtime Policy controls:\\\n\t\t\t* Block Non-Compliant Images\\\n\t\t\t* Block Non-Compliant Workloads\\\n\t\t\t* Block Unregistered Images\\\n\t\t\tThis functionality can work only when the KubeEnforcer is deployed in Enforce mode.\n"
                },
                "allowKubeEnforcerAudit": {
                    "type": "boolean",
                    "description": "Allow kube enforcer audit.\n"
                },
                "allowedApplications": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of application names to allow on the hosts. if provided, only containers of the listed applications will be allowed to run.\n"
                },
                "allowedLabels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of label names to allow on the hosts.\n"
                },
                "allowedRegistries": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of registry names to allow on the hosts.\n"
                },
                "antivirusProtection": {
                    "type": "boolean",
                    "description": "This setting is available only when you have license for `Advanced Malware Protection`. Send true to make use of the license and enable the `Real-time Malware Protection` control in the Host Runtime policies.\n"
                },
                "auditAll": {
                    "type": "boolean",
                    "description": "Agent will send extra audit messages to the server for success operations from inside the container (runtime).\n"
                },
                "autoCopySecrets": {
                    "type": "boolean",
                    "description": "This option is applicable only if `Enable Pod Enforcer injection` is selected. Select this option if you want Aqua Enterprise to copy the secrets defined above to the Pod Enforcer namespace and container. Otherwise, you can choose to copy these secrets by other means.\n"
                },
                "autoDiscoverConfigureRegistries": {
                    "type": "boolean",
                    "description": "This option is available only if `Enable workload discovery` is selected. If selected, the KubeEnforcer will add previously unknown image registries from the cluster to Aqua.\n"
                },
                "autoDiscoveryEnabled": {
                    "type": "boolean",
                    "description": "When this option is selected, the KubeEnforcer will discover workloads on its cluster.\n"
                },
                "autoScanDiscoveredImagesRunningContainers": {
                    "type": "boolean",
                    "description": "This option is available only if `Enable workload discovery` is selected. If selected, the KubeEnforcer will automatically register images running as workloads (and scan the discovered images for security issues).\n"
                },
                "behavioralEngine": {
                    "type": "boolean",
                    "description": "Select Enabled to detect suspicious activity in your containers and display potential security threats in the Incidents and Audit pages.\n"
                },
                "blockAdmissionControl": {
                    "type": "boolean",
                    "description": "This applies only if both `Enable admission control` and Enforce mode are set. This additional option must be selected for admission control to work if the KubeEnforcer is not connected to any Gateway. If this option is not selected, admission control will be disabled; this will have no effect on containers already running.\n"
                },
                "containerActivityProtection": {
                    "type": "boolean",
                    "description": "Set `True` to apply Container Runtime Policies, Image Profiles, and Firewall Policies to containers.\n"
                },
                "containerAntivirusProtection": {
                    "type": "boolean",
                    "description": "This setting is available only when you have license for `Advanced Malware Protection`. Send true to make use of the license and enable the `Real-time Malware Protection` control in the Container Runtime policies.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description of the Aqua Enforcer group.\n"
                },
                "enforce": {
                    "type": "boolean",
                    "description": "Whether to enable enforce mode on the Enforcers, defaults to False.\n"
                },
                "forensics": {
                    "type": "boolean",
                    "description": "Select Enabled to send activity logs in your containers to the Aqua Server for forensics purposes.\n"
                },
                "gateways": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Aqua gateway IDs for the Enforcers.\n"
                },
                "groupId": {
                    "type": "string",
                    "description": "The ID of the Enforcer group.\n",
                    "willReplaceOnChanges": true
                },
                "hostAssurance": {
                    "type": "boolean",
                    "description": "Set `True` to enable host scanning and respective Host Assurance controls.\n"
                },
                "hostBehavioralEngine": {
                    "type": "boolean",
                    "description": "Set `True` to enable these Host Runtime Policy controls: `OS Users and Groups Allowed` and `OS Users and Groups Blocked`\n"
                },
                "hostForensics": {
                    "type": "boolean",
                    "description": "Select Enabled to send activity logs in your host to the Aqua Server for forensics purposes.\n"
                },
                "hostNetworkProtection": {
                    "type": "boolean",
                    "description": "Set `True` to apply Firewall Policies to hosts, and allow recording network maps for Aqua services. The Network Firewall setting must be disabled when deploying the Aqua Enforcer on a machine running Rocky Linux. See https://docs.aquasec.com/docs/platform-support-limitations-rocky-linux for further information\n"
                },
                "hostOs": {
                    "type": "string",
                    "description": "The OS type for the host\n",
                    "willReplaceOnChanges": true
                },
                "hostProtection": {
                    "type": "boolean",
                    "description": "Set `True` to enable all Host Runtime Policy controls except for `OS Users and Groups Allowed` and `OS Users and Groups Blocked`.\n"
                },
                "hostUserProtection": {
                    "type": "boolean",
                    "description": "Set `True` to enable these Host Runtime Policy controls: `OS Users and Groups Allowed` and `OS Users and Groups Blocked`\n"
                },
                "imageAssurance": {
                    "type": "boolean",
                    "description": "Set `True` to enable selected controls: Container Runtime Policy (`Block Non-Compliant Images`, `Block Unregistered Images`, and `Registries Allowed`) and Default Image Assurance Policy (`Images Blocked`).\n"
                },
                "kubeBenchImageName": {
                    "type": "string",
                    "description": "See https://docs.aquasec.com/docs/securing-kubernetes-applications#section-configuration-hardening, The KubeEnforcer can deploy the Aqua Security kube-bench open-source product to perform Kubernetes CIS benchmark testing of nodes.\n\t\t\tThis field specifies the path and file name of the kube-bench product image for the KubeEnforcer to deploy; it will be filled in automatically. You can optionally enter a different value.\n"
                },
                "logicalName": {
                    "type": "string",
                    "description": "Name for the batch install record.\n"
                },
                "microEnforcerCertsSecretsName": {
                    "type": "string",
                    "description": "This option is applicable only if `Enable Pod Enforcer injection` is selected.\n"
                },
                "microEnforcerImageName": {
                    "type": "string",
                    "description": "This option is applicable only if `Enable Pod Enforcer injection` is selected. This field specifies the path and file name of the KubeEnforcer product image to be deployed; it will be filled in automatically. You can optionally enter a different value.\n"
                },
                "microEnforcerInjection": {
                    "type": "boolean",
                    "description": "This applies only if both `Enable admission control` and Enforce mode are set. This additional option must be selected for admission control to work if the KubeEnforcer is not connected to any Gateway. If this option is not selected, admission control will be disabled; this will have no effect on containers already running.\n"
                },
                "microEnforcerSecretsName": {
                    "type": "string",
                    "description": "You can specify the name of the secret (in the Aqua namespace) that Aqua copies into the Pod Enforcer namespace and kube-bench, allowing them access to the Pod Enforcer and kube-bench product images, respectively.\n"
                },
                "networkProtection": {
                    "type": "boolean",
                    "description": "Send true to apply Firewall Policies to containers, and allow recording network maps for Aqua services. The Network Firewall setting must be disabled when deploying the Aqua Enforcer on a machine running Rocky Linux. See https://docs.aquasec.com/docs/platform-support-limitations-rocky-linux for further information.\n"
                },
                "orchestrators": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/EnforcerGroupsOrchestrator:EnforcerGroupsOrchestrator"
                    },
                    "description": "The orchestrator for which you are creating the Enforcer group.\n"
                },
                "permission": {
                    "type": "string",
                    "description": "Permission Action\n"
                },
                "riskExplorerAutoDiscovery": {
                    "type": "boolean",
                    "description": "Set `True` to allow Enforcers to be discovered in the Risk Explorer.\n"
                },
                "runtimeType": {
                    "type": "string",
                    "description": "The container runtime environment.\n"
                },
                "syncHostImages": {
                    "type": "boolean",
                    "description": "Set `True` to configure Enforcers to discover local host images. Discovered images will be listed under Images \u003e Host Images, as well as under Infrastructure (in the Images tab for applicable hosts).\n"
                },
                "syscallEnabled": {
                    "type": "boolean",
                    "description": "Set `True` will allow profiling and monitoring system calls made by running containers.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Enforcer Type.\n",
                    "willReplaceOnChanges": true
                },
                "userAccessControl": {
                    "type": "boolean",
                    "description": "Set `True` to apply User Access Control Policies to containers. Note that Aqua Enforcers must be deployed with the AQUA*RUNC*INTERCEPTION environment variable set to 0 in order to use User Access Control Policies.\n"
                }
            },
            "requiredInputs": [
                "groupId",
                "orchestrators",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering EnforcerGroups resources.\n",
                "properties": {
                    "admissionControl": {
                        "type": "boolean",
                        "description": "Selecting this option will allow the KubeEnforcer to block the deployment of container images that have failed any of these Container Runtime Policy controls:\\\n\t\t\t* Block Non-Compliant Images\\\n\t\t\t* Block Non-Compliant Workloads\\\n\t\t\t* Block Unregistered Images\\\n\t\t\tThis functionality can work only when the KubeEnforcer is deployed in Enforce mode.\n"
                    },
                    "allowKubeEnforcerAudit": {
                        "type": "boolean",
                        "description": "Allow kube enforcer audit.\n"
                    },
                    "allowedApplications": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of application names to allow on the hosts. if provided, only containers of the listed applications will be allowed to run.\n"
                    },
                    "allowedLabels": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of label names to allow on the hosts.\n"
                    },
                    "allowedRegistries": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of registry names to allow on the hosts.\n"
                    },
                    "antivirusProtection": {
                        "type": "boolean",
                        "description": "This setting is available only when you have license for `Advanced Malware Protection`. Send true to make use of the license and enable the `Real-time Malware Protection` control in the Host Runtime policies.\n"
                    },
                    "aquaVersion": {
                        "type": "string",
                        "description": "Aqua server version\n"
                    },
                    "auditAll": {
                        "type": "boolean",
                        "description": "Agent will send extra audit messages to the server for success operations from inside the container (runtime).\n"
                    },
                    "autoCopySecrets": {
                        "type": "boolean",
                        "description": "This option is applicable only if `Enable Pod Enforcer injection` is selected. Select this option if you want Aqua Enterprise to copy the secrets defined above to the Pod Enforcer namespace and container. Otherwise, you can choose to copy these secrets by other means.\n"
                    },
                    "autoDiscoverConfigureRegistries": {
                        "type": "boolean",
                        "description": "This option is available only if `Enable workload discovery` is selected. If selected, the KubeEnforcer will add previously unknown image registries from the cluster to Aqua.\n"
                    },
                    "autoDiscoveryEnabled": {
                        "type": "boolean",
                        "description": "When this option is selected, the KubeEnforcer will discover workloads on its cluster.\n"
                    },
                    "autoScanDiscoveredImagesRunningContainers": {
                        "type": "boolean",
                        "description": "This option is available only if `Enable workload discovery` is selected. If selected, the KubeEnforcer will automatically register images running as workloads (and scan the discovered images for security issues).\n"
                    },
                    "behavioralEngine": {
                        "type": "boolean",
                        "description": "Select Enabled to detect suspicious activity in your containers and display potential security threats in the Incidents and Audit pages.\n"
                    },
                    "blockAdmissionControl": {
                        "type": "boolean",
                        "description": "This applies only if both `Enable admission control` and Enforce mode are set. This additional option must be selected for admission control to work if the KubeEnforcer is not connected to any Gateway. If this option is not selected, admission control will be disabled; this will have no effect on containers already running.\n"
                    },
                    "commands": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/EnforcerGroupsCommand:EnforcerGroupsCommand"
                        },
                        "description": "The installation command.\n"
                    },
                    "connectedCount": {
                        "type": "integer",
                        "description": "Number of connected enforcers in the enforcer group.\n"
                    },
                    "containerActivityProtection": {
                        "type": "boolean",
                        "description": "Set `True` to apply Container Runtime Policies, Image Profiles, and Firewall Policies to containers.\n"
                    },
                    "containerAntivirusProtection": {
                        "type": "boolean",
                        "description": "This setting is available only when you have license for `Advanced Malware Protection`. Send true to make use of the license and enable the `Real-time Malware Protection` control in the Container Runtime policies.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A description of the Aqua Enforcer group.\n"
                    },
                    "disconnectedCount": {
                        "type": "integer",
                        "description": "Number of disconnected enforcers in the enforcer group.\n"
                    },
                    "enforce": {
                        "type": "boolean",
                        "description": "Whether to enable enforce mode on the Enforcers, defaults to False.\n"
                    },
                    "enforcerImageName": {
                        "type": "string",
                        "description": "The specific Aqua Enforcer product image (with image tag) to be deployed.\n"
                    },
                    "forensics": {
                        "type": "boolean",
                        "description": "Select Enabled to send activity logs in your containers to the Aqua Server for forensics purposes.\n"
                    },
                    "gatewayAddress": {
                        "type": "string",
                        "description": "Gateway Address\n"
                    },
                    "gatewayName": {
                        "type": "string",
                        "description": "Gateway Name\n"
                    },
                    "gateways": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of Aqua gateway IDs for the Enforcers.\n"
                    },
                    "groupId": {
                        "type": "string",
                        "description": "The ID of the Enforcer group.\n",
                        "willReplaceOnChanges": true
                    },
                    "highVulns": {
                        "type": "integer",
                        "description": "Number of high vulnerabilities in the enforcers that in this enforcer group.\n"
                    },
                    "hostAssurance": {
                        "type": "boolean",
                        "description": "Set `True` to enable host scanning and respective Host Assurance controls.\n"
                    },
                    "hostBehavioralEngine": {
                        "type": "boolean",
                        "description": "Set `True` to enable these Host Runtime Policy controls: `OS Users and Groups Allowed` and `OS Users and Groups Blocked`\n"
                    },
                    "hostForensics": {
                        "type": "boolean",
                        "description": "Select Enabled to send activity logs in your host to the Aqua Server for forensics purposes.\n"
                    },
                    "hostNetworkProtection": {
                        "type": "boolean",
                        "description": "Set `True` to apply Firewall Policies to hosts, and allow recording network maps for Aqua services. The Network Firewall setting must be disabled when deploying the Aqua Enforcer on a machine running Rocky Linux. See https://docs.aquasec.com/docs/platform-support-limitations-rocky-linux for further information\n"
                    },
                    "hostOs": {
                        "type": "string",
                        "description": "The OS type for the host\n",
                        "willReplaceOnChanges": true
                    },
                    "hostProtection": {
                        "type": "boolean",
                        "description": "Set `True` to enable all Host Runtime Policy controls except for `OS Users and Groups Allowed` and `OS Users and Groups Blocked`.\n"
                    },
                    "hostUserProtection": {
                        "type": "boolean",
                        "description": "Set `True` to enable these Host Runtime Policy controls: `OS Users and Groups Allowed` and `OS Users and Groups Blocked`\n"
                    },
                    "hostname": {
                        "type": "string",
                        "description": "The hostname\n"
                    },
                    "hostsCount": {
                        "type": "integer",
                        "description": "Number of enforcers in the enforcer group.\n"
                    },
                    "imageAssurance": {
                        "type": "boolean",
                        "description": "Set `True` to enable selected controls: Container Runtime Policy (`Block Non-Compliant Images`, `Block Unregistered Images`, and `Registries Allowed`) and Default Image Assurance Policy (`Images Blocked`).\n"
                    },
                    "installCommand": {
                        "type": "string",
                        "description": "Enforcer install command\n"
                    },
                    "kubeBenchImageName": {
                        "type": "string",
                        "description": "See https://docs.aquasec.com/docs/securing-kubernetes-applications#section-configuration-hardening, The KubeEnforcer can deploy the Aqua Security kube-bench open-source product to perform Kubernetes CIS benchmark testing of nodes.\n\t\t\tThis field specifies the path and file name of the kube-bench product image for the KubeEnforcer to deploy; it will be filled in automatically. You can optionally enter a different value.\n"
                    },
                    "lastUpdate": {
                        "type": "integer",
                        "description": "The last date and time the batch token was updated in UNIX time.\n"
                    },
                    "logicalName": {
                        "type": "string",
                        "description": "Name for the batch install record.\n"
                    },
                    "lowVulns": {
                        "type": "integer",
                        "description": "Number of low vulnerabilities in the enforcers that in this enforcer group.\n"
                    },
                    "medVulns": {
                        "type": "integer",
                        "description": "Number of medium vulnerabilities in the enforcers that in this enforcer group.\n"
                    },
                    "microEnforcerCertsSecretsName": {
                        "type": "string",
                        "description": "This option is applicable only if `Enable Pod Enforcer injection` is selected.\n"
                    },
                    "microEnforcerImageName": {
                        "type": "string",
                        "description": "This option is applicable only if `Enable Pod Enforcer injection` is selected. This field specifies the path and file name of the KubeEnforcer product image to be deployed; it will be filled in automatically. You can optionally enter a different value.\n"
                    },
                    "microEnforcerInjection": {
                        "type": "boolean",
                        "description": "This applies only if both `Enable admission control` and Enforce mode are set. This additional option must be selected for admission control to work if the KubeEnforcer is not connected to any Gateway. If this option is not selected, admission control will be disabled; this will have no effect on containers already running.\n"
                    },
                    "microEnforcerSecretsName": {
                        "type": "string",
                        "description": "You can specify the name of the secret (in the Aqua namespace) that Aqua copies into the Pod Enforcer namespace and kube-bench, allowing them access to the Pod Enforcer and kube-bench product images, respectively.\n"
                    },
                    "negVulns": {
                        "type": "integer",
                        "description": "Number of negligible vulnerabilities in the enforcers that in this enforcer group.\n"
                    },
                    "networkProtection": {
                        "type": "boolean",
                        "description": "Send true to apply Firewall Policies to containers, and allow recording network maps for Aqua services. The Network Firewall setting must be disabled when deploying the Aqua Enforcer on a machine running Rocky Linux. See https://docs.aquasec.com/docs/platform-support-limitations-rocky-linux for further information.\n"
                    },
                    "orchestrators": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/EnforcerGroupsOrchestrator:EnforcerGroupsOrchestrator"
                        },
                        "description": "The orchestrator for which you are creating the Enforcer group.\n"
                    },
                    "pasDeploymentLink": {
                        "type": "string",
                        "description": "pas deployment link\n"
                    },
                    "permission": {
                        "type": "string",
                        "description": "Permission Action\n"
                    },
                    "riskExplorerAutoDiscovery": {
                        "type": "boolean",
                        "description": "Set `True` to allow Enforcers to be discovered in the Risk Explorer.\n"
                    },
                    "runtimePolicyName": {
                        "type": "string",
                        "description": "Function Runtime Policy that will applay on the nano enforcer.\n"
                    },
                    "runtimeType": {
                        "type": "string",
                        "description": "The container runtime environment.\n"
                    },
                    "syncHostImages": {
                        "type": "boolean",
                        "description": "Set `True` to configure Enforcers to discover local host images. Discovered images will be listed under Images \u003e Host Images, as well as under Infrastructure (in the Images tab for applicable hosts).\n"
                    },
                    "syscallEnabled": {
                        "type": "boolean",
                        "description": "Set `True` will allow profiling and monitoring system calls made by running containers.\n"
                    },
                    "token": {
                        "type": "string",
                        "description": "The batch install token.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Enforcer Type.\n",
                        "willReplaceOnChanges": true
                    },
                    "userAccessControl": {
                        "type": "boolean",
                        "description": "Set `True` to apply User Access Control Policies to containers. Note that Aqua Enforcers must be deployed with the AQUA*RUNC*INTERCEPTION environment variable set to 0 in order to use User Access Control Policies.\n"
                    }
                },
                "type": "object"
            }
        },
        "aquasec:index/firewallPolicy:FirewallPolicy": {
            "properties": {
                "author": {
                    "type": "string",
                    "description": "Username of the account that created the policy.\n"
                },
                "blockIcmpPing": {
                    "type": "boolean",
                    "description": "Indicates whether policy includes blocking incoming 'ping' requests.\n"
                },
                "blockMetadataService": {
                    "type": "boolean",
                    "description": "Indicates whether policy includes blocking metadata services of the cloud.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the Firewall Policy.\n"
                },
                "inboundNetworks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/FirewallPolicyInboundNetwork:FirewallPolicyInboundNetwork"
                    },
                    "description": "Information on network addresses that are allowed to pass in data or requests.\n"
                },
                "lastupdate": {
                    "type": "integer",
                    "description": "Timestamp of the last update in Unix time format.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the policy, no longer than 128 characters and no slash characters.\n"
                },
                "outboundNetworks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/FirewallPolicyOutboundNetwork:FirewallPolicyOutboundNetwork"
                    },
                    "description": "Information on network addresses that are allowed to receive data or requests.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Indicates the class of protection defined by the firewall.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Aqua version functionality supported\n"
                }
            },
            "required": [
                "author",
                "lastupdate",
                "name",
                "type",
                "version"
            ],
            "inputProperties": {
                "blockIcmpPing": {
                    "type": "boolean",
                    "description": "Indicates whether policy includes blocking incoming 'ping' requests.\n"
                },
                "blockMetadataService": {
                    "type": "boolean",
                    "description": "Indicates whether policy includes blocking metadata services of the cloud.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the Firewall Policy.\n"
                },
                "inboundNetworks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/FirewallPolicyInboundNetwork:FirewallPolicyInboundNetwork"
                    },
                    "description": "Information on network addresses that are allowed to pass in data or requests.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the policy, no longer than 128 characters and no slash characters.\n",
                    "willReplaceOnChanges": true
                },
                "outboundNetworks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/FirewallPolicyOutboundNetwork:FirewallPolicyOutboundNetwork"
                    },
                    "description": "Information on network addresses that are allowed to receive data or requests.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Indicates the class of protection defined by the firewall.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Aqua version functionality supported\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FirewallPolicy resources.\n",
                "properties": {
                    "author": {
                        "type": "string",
                        "description": "Username of the account that created the policy.\n"
                    },
                    "blockIcmpPing": {
                        "type": "boolean",
                        "description": "Indicates whether policy includes blocking incoming 'ping' requests.\n"
                    },
                    "blockMetadataService": {
                        "type": "boolean",
                        "description": "Indicates whether policy includes blocking metadata services of the cloud.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the Firewall Policy.\n"
                    },
                    "inboundNetworks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/FirewallPolicyInboundNetwork:FirewallPolicyInboundNetwork"
                        },
                        "description": "Information on network addresses that are allowed to pass in data or requests.\n"
                    },
                    "lastupdate": {
                        "type": "integer",
                        "description": "Timestamp of the last update in Unix time format.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the policy, no longer than 128 characters and no slash characters.\n",
                        "willReplaceOnChanges": true
                    },
                    "outboundNetworks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/FirewallPolicyOutboundNetwork:FirewallPolicyOutboundNetwork"
                        },
                        "description": "Information on network addresses that are allowed to receive data or requests.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Indicates the class of protection defined by the firewall.\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "Aqua version functionality supported\n"
                    }
                },
                "type": "object"
            }
        },
        "aquasec:index/functionAssurancePolicy:FunctionAssurancePolicy": {
            "properties": {
                "allowedImages": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of explicitly allowed images.\n"
                },
                "applicationScopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "auditOnFailure": {
                    "type": "boolean",
                    "description": "Indicates if auditing for failures.\n"
                },
                "author": {
                    "type": "string",
                    "description": "Name of user account that created the policy.\n"
                },
                "autoScanConfigured": {
                    "type": "boolean"
                },
                "autoScanEnabled": {
                    "type": "boolean"
                },
                "autoScanTimes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/FunctionAssurancePolicyAutoScanTime:FunctionAssurancePolicyAutoScanTime"
                    }
                },
                "blacklistPermissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of function's forbidden permissions.\n"
                },
                "blacklistPermissionsEnabled": {
                    "type": "boolean",
                    "description": "Indicates if blacklist permissions is relevant.\n"
                },
                "blacklistedLicenses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of blacklisted licenses.\n"
                },
                "blacklistedLicensesEnabled": {
                    "type": "boolean",
                    "description": "Lndicates if license blacklist is relevant.\n"
                },
                "blockFailed": {
                    "type": "boolean",
                    "description": "Indicates if failed images are blocked.\n"
                },
                "controlExcludeNoFix": {
                    "type": "boolean"
                },
                "customChecks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/FunctionAssurancePolicyCustomCheck:FunctionAssurancePolicyCustomCheck"
                    },
                    "description": "List of Custom user scripts for checks.\n"
                },
                "customChecksEnabled": {
                    "type": "boolean",
                    "description": "Indicates if scanning should include custom checks.\n"
                },
                "customSeverityEnabled": {
                    "type": "boolean"
                },
                "cvesBlackListEnabled": {
                    "type": "boolean",
                    "description": "Indicates if cves blacklist is relevant.\n"
                },
                "cvesBlackLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of cves blacklisted items.\n"
                },
                "cvesWhiteListEnabled": {
                    "type": "boolean",
                    "description": "Indicates if cves whitelist is relevant.\n"
                },
                "cvesWhiteLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of cves whitelisted licenses\n"
                },
                "cvssSeverity": {
                    "type": "string",
                    "description": "Identifier of the cvss severity.\n"
                },
                "cvssSeverityEnabled": {
                    "type": "boolean",
                    "description": "Indicates if the cvss severity is scanned.\n"
                },
                "cvssSeverityExcludeNoFix": {
                    "type": "boolean",
                    "description": "Indicates that policy should ignore cvss cases that do not have a known fix.\n"
                },
                "description": {
                    "type": "string"
                },
                "disallowMalware": {
                    "type": "boolean",
                    "description": "Indicates if malware should block the image.\n"
                },
                "dockerCisEnabled": {
                    "type": "boolean"
                },
                "domain": {
                    "type": "string",
                    "description": "Name of the container image.\n"
                },
                "domainName": {
                    "type": "string"
                },
                "dtaEnabled": {
                    "type": "boolean"
                },
                "dtaSeverity": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "enforce": {
                    "type": "boolean"
                },
                "enforceAfterDays": {
                    "type": "integer"
                },
                "enforceExcessivePermissions": {
                    "type": "boolean"
                },
                "exceptionalMonitoredMalwarePaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "failCicd": {
                    "type": "boolean",
                    "description": "Indicates if cicd failures will fail the image.\n"
                },
                "forbiddenLabels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/FunctionAssurancePolicyForbiddenLabel:FunctionAssurancePolicyForbiddenLabel"
                    }
                },
                "forbiddenLabelsEnabled": {
                    "type": "boolean"
                },
                "forceMicroenforcer": {
                    "type": "boolean"
                },
                "functionIntegrityEnabled": {
                    "type": "boolean"
                },
                "ignoreRecentlyPublishedVln": {
                    "type": "boolean"
                },
                "ignoreRecentlyPublishedVlnPeriod": {
                    "type": "integer"
                },
                "ignoreRiskResourcesEnabled": {
                    "type": "boolean",
                    "description": "Indicates if risk resources are ignored.\n"
                },
                "ignoredRiskResources": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of ignored risk resources.\n"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of images.\n"
                },
                "kubeCisEnabled": {
                    "type": "boolean"
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of labels.\n"
                },
                "malwareAction": {
                    "type": "string"
                },
                "maximumScore": {
                    "type": "number",
                    "description": "Value of allowed maximum score.\n"
                },
                "maximumScoreEnabled": {
                    "type": "boolean",
                    "description": "Indicates if exceeding the maximum score is scanned.\n"
                },
                "maximumScoreExcludeNoFix": {
                    "type": "boolean",
                    "description": "Indicates that policy should ignore cases that do not have a known fix.\n"
                },
                "monitoredMalwarePaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "onlyNoneRootUsers": {
                    "type": "boolean",
                    "description": "Indicates if raise a warning for images that should only be run as root.\n"
                },
                "packagesBlackListEnabled": {
                    "type": "boolean",
                    "description": "Indicates if packages blacklist is relevant.\n"
                },
                "packagesBlackLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/FunctionAssurancePolicyPackagesBlackList:FunctionAssurancePolicyPackagesBlackList"
                    },
                    "description": "List of backlisted images.\n"
                },
                "packagesWhiteListEnabled": {
                    "type": "boolean",
                    "description": "Indicates if packages whitelist is relevant.\n"
                },
                "packagesWhiteLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/FunctionAssurancePolicyPackagesWhiteList:FunctionAssurancePolicyPackagesWhiteList"
                    },
                    "description": "List of whitelisted images.\n"
                },
                "partialResultsImageFail": {
                    "type": "boolean"
                },
                "readOnly": {
                    "type": "boolean"
                },
                "registries": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of registries.\n"
                },
                "registry": {
                    "type": "string"
                },
                "requiredLabels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/FunctionAssurancePolicyRequiredLabel:FunctionAssurancePolicyRequiredLabel"
                    }
                },
                "requiredLabelsEnabled": {
                    "type": "boolean"
                },
                "scanNfsMounts": {
                    "type": "boolean"
                },
                "scanSensitiveData": {
                    "type": "boolean",
                    "description": "Indicates if scan should include sensitive data in the image.\n"
                },
                "scapEnabled": {
                    "type": "boolean",
                    "description": "Indicates if scanning should include scap.\n"
                },
                "scapFiles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of SCAP user scripts for checks.\n"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/FunctionAssurancePolicyScope:FunctionAssurancePolicyScope"
                    }
                },
                "trustedBaseImages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/FunctionAssurancePolicyTrustedBaseImage:FunctionAssurancePolicyTrustedBaseImage"
                    },
                    "description": "List of trusted images.\n"
                },
                "trustedBaseImagesEnabled": {
                    "type": "boolean",
                    "description": "Indicates if list of trusted base images is relevant.\n"
                },
                "whitelistedLicenses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of whitelisted licenses.\n"
                },
                "whitelistedLicensesEnabled": {
                    "type": "boolean",
                    "description": "Indicates if license blacklist is relevant.\n"
                }
            },
            "required": [
                "applicationScopes",
                "author",
                "autoScanTimes",
                "ignoreRecentlyPublishedVlnPeriod",
                "name",
                "scopes"
            ],
            "inputProperties": {
                "allowedImages": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of explicitly allowed images.\n"
                },
                "applicationScopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "auditOnFailure": {
                    "type": "boolean",
                    "description": "Indicates if auditing for failures.\n"
                },
                "autoScanConfigured": {
                    "type": "boolean"
                },
                "autoScanEnabled": {
                    "type": "boolean"
                },
                "autoScanTimes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/FunctionAssurancePolicyAutoScanTime:FunctionAssurancePolicyAutoScanTime"
                    }
                },
                "blacklistPermissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of function's forbidden permissions.\n"
                },
                "blacklistPermissionsEnabled": {
                    "type": "boolean",
                    "description": "Indicates if blacklist permissions is relevant.\n"
                },
                "blacklistedLicenses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of blacklisted licenses.\n"
                },
                "blacklistedLicensesEnabled": {
                    "type": "boolean",
                    "description": "Lndicates if license blacklist is relevant.\n"
                },
                "blockFailed": {
                    "type": "boolean",
                    "description": "Indicates if failed images are blocked.\n"
                },
                "controlExcludeNoFix": {
                    "type": "boolean"
                },
                "customChecks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/FunctionAssurancePolicyCustomCheck:FunctionAssurancePolicyCustomCheck"
                    },
                    "description": "List of Custom user scripts for checks.\n"
                },
                "customChecksEnabled": {
                    "type": "boolean",
                    "description": "Indicates if scanning should include custom checks.\n"
                },
                "customSeverityEnabled": {
                    "type": "boolean"
                },
                "cvesBlackListEnabled": {
                    "type": "boolean",
                    "description": "Indicates if cves blacklist is relevant.\n"
                },
                "cvesBlackLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of cves blacklisted items.\n"
                },
                "cvesWhiteListEnabled": {
                    "type": "boolean",
                    "description": "Indicates if cves whitelist is relevant.\n"
                },
                "cvesWhiteLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of cves whitelisted licenses\n"
                },
                "cvssSeverity": {
                    "type": "string",
                    "description": "Identifier of the cvss severity.\n"
                },
                "cvssSeverityEnabled": {
                    "type": "boolean",
                    "description": "Indicates if the cvss severity is scanned.\n"
                },
                "cvssSeverityExcludeNoFix": {
                    "type": "boolean",
                    "description": "Indicates that policy should ignore cvss cases that do not have a known fix.\n"
                },
                "description": {
                    "type": "string"
                },
                "disallowMalware": {
                    "type": "boolean",
                    "description": "Indicates if malware should block the image.\n"
                },
                "dockerCisEnabled": {
                    "type": "boolean"
                },
                "domain": {
                    "type": "string",
                    "description": "Name of the container image.\n"
                },
                "domainName": {
                    "type": "string"
                },
                "dtaEnabled": {
                    "type": "boolean"
                },
                "dtaSeverity": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "enforce": {
                    "type": "boolean"
                },
                "enforceAfterDays": {
                    "type": "integer"
                },
                "enforceExcessivePermissions": {
                    "type": "boolean"
                },
                "exceptionalMonitoredMalwarePaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "failCicd": {
                    "type": "boolean",
                    "description": "Indicates if cicd failures will fail the image.\n"
                },
                "forbiddenLabels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/FunctionAssurancePolicyForbiddenLabel:FunctionAssurancePolicyForbiddenLabel"
                    }
                },
                "forbiddenLabelsEnabled": {
                    "type": "boolean"
                },
                "forceMicroenforcer": {
                    "type": "boolean"
                },
                "functionIntegrityEnabled": {
                    "type": "boolean"
                },
                "ignoreRecentlyPublishedVln": {
                    "type": "boolean"
                },
                "ignoreRiskResourcesEnabled": {
                    "type": "boolean",
                    "description": "Indicates if risk resources are ignored.\n"
                },
                "ignoredRiskResources": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of ignored risk resources.\n"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of images.\n"
                },
                "kubeCisEnabled": {
                    "type": "boolean"
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of labels.\n"
                },
                "malwareAction": {
                    "type": "string"
                },
                "maximumScore": {
                    "type": "number",
                    "description": "Value of allowed maximum score.\n"
                },
                "maximumScoreEnabled": {
                    "type": "boolean",
                    "description": "Indicates if exceeding the maximum score is scanned.\n"
                },
                "maximumScoreExcludeNoFix": {
                    "type": "boolean",
                    "description": "Indicates that policy should ignore cases that do not have a known fix.\n"
                },
                "monitoredMalwarePaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "onlyNoneRootUsers": {
                    "type": "boolean",
                    "description": "Indicates if raise a warning for images that should only be run as root.\n"
                },
                "packagesBlackListEnabled": {
                    "type": "boolean",
                    "description": "Indicates if packages blacklist is relevant.\n"
                },
                "packagesBlackLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/FunctionAssurancePolicyPackagesBlackList:FunctionAssurancePolicyPackagesBlackList"
                    },
                    "description": "List of backlisted images.\n"
                },
                "packagesWhiteListEnabled": {
                    "type": "boolean",
                    "description": "Indicates if packages whitelist is relevant.\n"
                },
                "packagesWhiteLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/FunctionAssurancePolicyPackagesWhiteList:FunctionAssurancePolicyPackagesWhiteList"
                    },
                    "description": "List of whitelisted images.\n"
                },
                "partialResultsImageFail": {
                    "type": "boolean"
                },
                "readOnly": {
                    "type": "boolean"
                },
                "registries": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of registries.\n"
                },
                "registry": {
                    "type": "string"
                },
                "requiredLabels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/FunctionAssurancePolicyRequiredLabel:FunctionAssurancePolicyRequiredLabel"
                    }
                },
                "requiredLabelsEnabled": {
                    "type": "boolean"
                },
                "scanNfsMounts": {
                    "type": "boolean"
                },
                "scanSensitiveData": {
                    "type": "boolean",
                    "description": "Indicates if scan should include sensitive data in the image.\n"
                },
                "scapEnabled": {
                    "type": "boolean",
                    "description": "Indicates if scanning should include scap.\n"
                },
                "scapFiles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of SCAP user scripts for checks.\n"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/FunctionAssurancePolicyScope:FunctionAssurancePolicyScope"
                    }
                },
                "trustedBaseImages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/FunctionAssurancePolicyTrustedBaseImage:FunctionAssurancePolicyTrustedBaseImage"
                    },
                    "description": "List of trusted images.\n"
                },
                "trustedBaseImagesEnabled": {
                    "type": "boolean",
                    "description": "Indicates if list of trusted base images is relevant.\n"
                },
                "whitelistedLicenses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of whitelisted licenses.\n"
                },
                "whitelistedLicensesEnabled": {
                    "type": "boolean",
                    "description": "Indicates if license blacklist is relevant.\n"
                }
            },
            "requiredInputs": [
                "applicationScopes"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FunctionAssurancePolicy resources.\n",
                "properties": {
                    "allowedImages": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of explicitly allowed images.\n"
                    },
                    "applicationScopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "auditOnFailure": {
                        "type": "boolean",
                        "description": "Indicates if auditing for failures.\n"
                    },
                    "author": {
                        "type": "string",
                        "description": "Name of user account that created the policy.\n"
                    },
                    "autoScanConfigured": {
                        "type": "boolean"
                    },
                    "autoScanEnabled": {
                        "type": "boolean"
                    },
                    "autoScanTimes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/FunctionAssurancePolicyAutoScanTime:FunctionAssurancePolicyAutoScanTime"
                        }
                    },
                    "blacklistPermissions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of function's forbidden permissions.\n"
                    },
                    "blacklistPermissionsEnabled": {
                        "type": "boolean",
                        "description": "Indicates if blacklist permissions is relevant.\n"
                    },
                    "blacklistedLicenses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of blacklisted licenses.\n"
                    },
                    "blacklistedLicensesEnabled": {
                        "type": "boolean",
                        "description": "Lndicates if license blacklist is relevant.\n"
                    },
                    "blockFailed": {
                        "type": "boolean",
                        "description": "Indicates if failed images are blocked.\n"
                    },
                    "controlExcludeNoFix": {
                        "type": "boolean"
                    },
                    "customChecks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/FunctionAssurancePolicyCustomCheck:FunctionAssurancePolicyCustomCheck"
                        },
                        "description": "List of Custom user scripts for checks.\n"
                    },
                    "customChecksEnabled": {
                        "type": "boolean",
                        "description": "Indicates if scanning should include custom checks.\n"
                    },
                    "customSeverityEnabled": {
                        "type": "boolean"
                    },
                    "cvesBlackListEnabled": {
                        "type": "boolean",
                        "description": "Indicates if cves blacklist is relevant.\n"
                    },
                    "cvesBlackLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of cves blacklisted items.\n"
                    },
                    "cvesWhiteListEnabled": {
                        "type": "boolean",
                        "description": "Indicates if cves whitelist is relevant.\n"
                    },
                    "cvesWhiteLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of cves whitelisted licenses\n"
                    },
                    "cvssSeverity": {
                        "type": "string",
                        "description": "Identifier of the cvss severity.\n"
                    },
                    "cvssSeverityEnabled": {
                        "type": "boolean",
                        "description": "Indicates if the cvss severity is scanned.\n"
                    },
                    "cvssSeverityExcludeNoFix": {
                        "type": "boolean",
                        "description": "Indicates that policy should ignore cvss cases that do not have a known fix.\n"
                    },
                    "description": {
                        "type": "string"
                    },
                    "disallowMalware": {
                        "type": "boolean",
                        "description": "Indicates if malware should block the image.\n"
                    },
                    "dockerCisEnabled": {
                        "type": "boolean"
                    },
                    "domain": {
                        "type": "string",
                        "description": "Name of the container image.\n"
                    },
                    "domainName": {
                        "type": "string"
                    },
                    "dtaEnabled": {
                        "type": "boolean"
                    },
                    "dtaSeverity": {
                        "type": "string"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "enforce": {
                        "type": "boolean"
                    },
                    "enforceAfterDays": {
                        "type": "integer"
                    },
                    "enforceExcessivePermissions": {
                        "type": "boolean"
                    },
                    "exceptionalMonitoredMalwarePaths": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "failCicd": {
                        "type": "boolean",
                        "description": "Indicates if cicd failures will fail the image.\n"
                    },
                    "forbiddenLabels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/FunctionAssurancePolicyForbiddenLabel:FunctionAssurancePolicyForbiddenLabel"
                        }
                    },
                    "forbiddenLabelsEnabled": {
                        "type": "boolean"
                    },
                    "forceMicroenforcer": {
                        "type": "boolean"
                    },
                    "functionIntegrityEnabled": {
                        "type": "boolean"
                    },
                    "ignoreRecentlyPublishedVln": {
                        "type": "boolean"
                    },
                    "ignoreRecentlyPublishedVlnPeriod": {
                        "type": "integer"
                    },
                    "ignoreRiskResourcesEnabled": {
                        "type": "boolean",
                        "description": "Indicates if risk resources are ignored.\n"
                    },
                    "ignoredRiskResources": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of ignored risk resources.\n"
                    },
                    "images": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of images.\n"
                    },
                    "kubeCisEnabled": {
                        "type": "boolean"
                    },
                    "labels": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of labels.\n"
                    },
                    "malwareAction": {
                        "type": "string"
                    },
                    "maximumScore": {
                        "type": "number",
                        "description": "Value of allowed maximum score.\n"
                    },
                    "maximumScoreEnabled": {
                        "type": "boolean",
                        "description": "Indicates if exceeding the maximum score is scanned.\n"
                    },
                    "maximumScoreExcludeNoFix": {
                        "type": "boolean",
                        "description": "Indicates that policy should ignore cases that do not have a known fix.\n"
                    },
                    "monitoredMalwarePaths": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "onlyNoneRootUsers": {
                        "type": "boolean",
                        "description": "Indicates if raise a warning for images that should only be run as root.\n"
                    },
                    "packagesBlackListEnabled": {
                        "type": "boolean",
                        "description": "Indicates if packages blacklist is relevant.\n"
                    },
                    "packagesBlackLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/FunctionAssurancePolicyPackagesBlackList:FunctionAssurancePolicyPackagesBlackList"
                        },
                        "description": "List of backlisted images.\n"
                    },
                    "packagesWhiteListEnabled": {
                        "type": "boolean",
                        "description": "Indicates if packages whitelist is relevant.\n"
                    },
                    "packagesWhiteLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/FunctionAssurancePolicyPackagesWhiteList:FunctionAssurancePolicyPackagesWhiteList"
                        },
                        "description": "List of whitelisted images.\n"
                    },
                    "partialResultsImageFail": {
                        "type": "boolean"
                    },
                    "readOnly": {
                        "type": "boolean"
                    },
                    "registries": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of registries.\n"
                    },
                    "registry": {
                        "type": "string"
                    },
                    "requiredLabels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/FunctionAssurancePolicyRequiredLabel:FunctionAssurancePolicyRequiredLabel"
                        }
                    },
                    "requiredLabelsEnabled": {
                        "type": "boolean"
                    },
                    "scanNfsMounts": {
                        "type": "boolean"
                    },
                    "scanSensitiveData": {
                        "type": "boolean",
                        "description": "Indicates if scan should include sensitive data in the image.\n"
                    },
                    "scapEnabled": {
                        "type": "boolean",
                        "description": "Indicates if scanning should include scap.\n"
                    },
                    "scapFiles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of SCAP user scripts for checks.\n"
                    },
                    "scopes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/FunctionAssurancePolicyScope:FunctionAssurancePolicyScope"
                        }
                    },
                    "trustedBaseImages": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/FunctionAssurancePolicyTrustedBaseImage:FunctionAssurancePolicyTrustedBaseImage"
                        },
                        "description": "List of trusted images.\n"
                    },
                    "trustedBaseImagesEnabled": {
                        "type": "boolean",
                        "description": "Indicates if list of trusted base images is relevant.\n"
                    },
                    "whitelistedLicenses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of whitelisted licenses.\n"
                    },
                    "whitelistedLicensesEnabled": {
                        "type": "boolean",
                        "description": "Indicates if license blacklist is relevant.\n"
                    }
                },
                "type": "object"
            }
        },
        "aquasec:index/functionRuntimePolicy:FunctionRuntimePolicy": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aquasec from \"@pulumiverse/aquasec\";\n\nconst functionRuntimePolicy = new aquasec.FunctionRuntimePolicy(\"functionRuntimePolicy\", {\n    applicationScopes: [\"Global\"],\n    blockMaliciousExecutables: true,\n    blockMaliciousExecutablesAllowedProcesses: [\n        \"proc1\",\n        \"proc2\",\n    ],\n    blockRunningExecutablesInTmpFolder: true,\n    blockedExecutables: [\n        \"exe1\",\n        \"exe2\",\n    ],\n    description: \"function_runtime_policy\",\n    enabled: true,\n    enforce: false,\n    scopeVariables: [\n        {\n            attribute: \"kubernetes.cluster\",\n            value: \"default\",\n        },\n        {\n            attribute: \"kubernetes.label\",\n            name: \"app\",\n            value: \"aqua\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumiverse_aquasec as aquasec\n\nfunction_runtime_policy = aquasec.FunctionRuntimePolicy(\"functionRuntimePolicy\",\n    application_scopes=[\"Global\"],\n    block_malicious_executables=True,\n    block_malicious_executables_allowed_processes=[\n        \"proc1\",\n        \"proc2\",\n    ],\n    block_running_executables_in_tmp_folder=True,\n    blocked_executables=[\n        \"exe1\",\n        \"exe2\",\n    ],\n    description=\"function_runtime_policy\",\n    enabled=True,\n    enforce=False,\n    scope_variables=[\n        aquasec.FunctionRuntimePolicyScopeVariableArgs(\n            attribute=\"kubernetes.cluster\",\n            value=\"default\",\n        ),\n        aquasec.FunctionRuntimePolicyScopeVariableArgs(\n            attribute=\"kubernetes.label\",\n            name=\"app\",\n            value=\"aqua\",\n        ),\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Aquasec = Pulumiverse.Aquasec;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var functionRuntimePolicy = new Aquasec.FunctionRuntimePolicy(\"functionRuntimePolicy\", new()\n    {\n        ApplicationScopes = new[]\n        {\n            \"Global\",\n        },\n        BlockMaliciousExecutables = true,\n        BlockMaliciousExecutablesAllowedProcesses = new[]\n        {\n            \"proc1\",\n            \"proc2\",\n        },\n        BlockRunningExecutablesInTmpFolder = true,\n        BlockedExecutables = new[]\n        {\n            \"exe1\",\n            \"exe2\",\n        },\n        Description = \"function_runtime_policy\",\n        Enabled = true,\n        Enforce = false,\n        ScopeVariables = new[]\n        {\n            new Aquasec.Inputs.FunctionRuntimePolicyScopeVariableArgs\n            {\n                Attribute = \"kubernetes.cluster\",\n                Value = \"default\",\n            },\n            new Aquasec.Inputs.FunctionRuntimePolicyScopeVariableArgs\n            {\n                Attribute = \"kubernetes.label\",\n                Name = \"app\",\n                Value = \"aqua\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-aquasec/sdk/go/aquasec\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := aquasec.NewFunctionRuntimePolicy(ctx, \"functionRuntimePolicy\", \u0026aquasec.FunctionRuntimePolicyArgs{\n\t\t\tApplicationScopes: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"Global\"),\n\t\t\t},\n\t\t\tBlockMaliciousExecutables: pulumi.Bool(true),\n\t\t\tBlockMaliciousExecutablesAllowedProcesses: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"proc1\"),\n\t\t\t\tpulumi.String(\"proc2\"),\n\t\t\t},\n\t\t\tBlockRunningExecutablesInTmpFolder: pulumi.Bool(true),\n\t\t\tBlockedExecutables: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"exe1\"),\n\t\t\t\tpulumi.String(\"exe2\"),\n\t\t\t},\n\t\t\tDescription: pulumi.String(\"function_runtime_policy\"),\n\t\t\tEnabled:     pulumi.Bool(true),\n\t\t\tEnforce:     pulumi.Bool(false),\n\t\t\tScopeVariables: aquasec.FunctionRuntimePolicyScopeVariableArray{\n\t\t\t\t\u0026aquasec.FunctionRuntimePolicyScopeVariableArgs{\n\t\t\t\t\tAttribute: pulumi.String(\"kubernetes.cluster\"),\n\t\t\t\t\tValue:     pulumi.String(\"default\"),\n\t\t\t\t},\n\t\t\t\t\u0026aquasec.FunctionRuntimePolicyScopeVariableArgs{\n\t\t\t\t\tAttribute: pulumi.String(\"kubernetes.label\"),\n\t\t\t\t\tName:      pulumi.String(\"app\"),\n\t\t\t\t\tValue:     pulumi.String(\"aqua\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aquasec.FunctionRuntimePolicy;\nimport com.pulumi.aquasec.FunctionRuntimePolicyArgs;\nimport com.pulumi.aquasec.inputs.FunctionRuntimePolicyScopeVariableArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var functionRuntimePolicy = new FunctionRuntimePolicy(\"functionRuntimePolicy\", FunctionRuntimePolicyArgs.builder()        \n            .applicationScopes(\"Global\")\n            .blockMaliciousExecutables(true)\n            .blockMaliciousExecutablesAllowedProcesses(            \n                \"proc1\",\n                \"proc2\")\n            .blockRunningExecutablesInTmpFolder(true)\n            .blockedExecutables(            \n                \"exe1\",\n                \"exe2\")\n            .description(\"function_runtime_policy\")\n            .enabled(true)\n            .enforce(false)\n            .scopeVariables(            \n                FunctionRuntimePolicyScopeVariableArgs.builder()\n                    .attribute(\"kubernetes.cluster\")\n                    .value(\"default\")\n                    .build(),\n                FunctionRuntimePolicyScopeVariableArgs.builder()\n                    .attribute(\"kubernetes.label\")\n                    .name(\"app\")\n                    .value(\"aqua\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  functionRuntimePolicy:\n    type: aquasec:FunctionRuntimePolicy\n    properties:\n      applicationScopes:\n        - Global\n      blockMaliciousExecutables: true\n      blockMaliciousExecutablesAllowedProcesses:\n        - proc1\n        - proc2\n      blockRunningExecutablesInTmpFolder: true\n      blockedExecutables:\n        - exe1\n        - exe2\n      description: function_runtime_policy\n      enabled: true\n      enforce: false\n      scopeVariables:\n        - attribute: kubernetes.cluster\n          value: default\n        - attribute: kubernetes.label\n          name: app\n          value: aqua\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "applicationScopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Indicates the application scope of the service.\n"
                },
                "author": {
                    "type": "string",
                    "description": "Username of the account that created the service.\n"
                },
                "blockMaliciousExecutables": {
                    "type": "boolean",
                    "description": "If true, prevent creation of malicious executables in functions during their runtime post invocation.\n"
                },
                "blockMaliciousExecutablesAllowedProcesses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of processes that will be allowed\n"
                },
                "blockRunningExecutablesInTmpFolder": {
                    "type": "boolean",
                    "description": "If true, prevent running of executables in functions locate in /tmp folder during their runtime post invocation.\n"
                },
                "blockedExecutables": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of executables that are prevented from running in containers.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the function runtime policy\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Indicates if the runtime policy is enabled or not.\n"
                },
                "enforce": {
                    "type": "boolean",
                    "description": "Indicates that policy should effect container execution (not just for audit).\n"
                },
                "honeypotAccessKey": {
                    "type": "string",
                    "description": "Honeypot User ID (Access Key)\n"
                },
                "honeypotApplyOns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of options to apply the honeypot on (Environment Vairable, Layer, File)\n"
                },
                "honeypotSecretKey": {
                    "type": "string",
                    "description": "Honeypot User Password (Secret Key)\n",
                    "secret": true
                },
                "honeypotServerlessAppName": {
                    "type": "string",
                    "description": "Serverless application name\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the function runtime policy\n"
                },
                "scopeExpression": {
                    "type": "string",
                    "description": "Logical expression of how to compute the dependency of the scope variables.\n"
                },
                "scopeVariables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/FunctionRuntimePolicyScopeVariable:FunctionRuntimePolicyScopeVariable"
                    },
                    "description": "List of scope attributes.\n"
                }
            },
            "required": [
                "applicationScopes",
                "author",
                "name",
                "scopeExpression",
                "scopeVariables"
            ],
            "inputProperties": {
                "applicationScopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Indicates the application scope of the service.\n"
                },
                "blockMaliciousExecutables": {
                    "type": "boolean",
                    "description": "If true, prevent creation of malicious executables in functions during their runtime post invocation.\n"
                },
                "blockMaliciousExecutablesAllowedProcesses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of processes that will be allowed\n"
                },
                "blockRunningExecutablesInTmpFolder": {
                    "type": "boolean",
                    "description": "If true, prevent running of executables in functions locate in /tmp folder during their runtime post invocation.\n"
                },
                "blockedExecutables": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of executables that are prevented from running in containers.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the function runtime policy\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Indicates if the runtime policy is enabled or not.\n"
                },
                "enforce": {
                    "type": "boolean",
                    "description": "Indicates that policy should effect container execution (not just for audit).\n"
                },
                "honeypotAccessKey": {
                    "type": "string",
                    "description": "Honeypot User ID (Access Key)\n"
                },
                "honeypotApplyOns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of options to apply the honeypot on (Environment Vairable, Layer, File)\n"
                },
                "honeypotSecretKey": {
                    "type": "string",
                    "description": "Honeypot User Password (Secret Key)\n",
                    "secret": true
                },
                "honeypotServerlessAppName": {
                    "type": "string",
                    "description": "Serverless application name\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the function runtime policy\n",
                    "willReplaceOnChanges": true
                },
                "scopeExpression": {
                    "type": "string",
                    "description": "Logical expression of how to compute the dependency of the scope variables.\n"
                },
                "scopeVariables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/FunctionRuntimePolicyScopeVariable:FunctionRuntimePolicyScopeVariable"
                    },
                    "description": "List of scope attributes.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FunctionRuntimePolicy resources.\n",
                "properties": {
                    "applicationScopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Indicates the application scope of the service.\n"
                    },
                    "author": {
                        "type": "string",
                        "description": "Username of the account that created the service.\n"
                    },
                    "blockMaliciousExecutables": {
                        "type": "boolean",
                        "description": "If true, prevent creation of malicious executables in functions during their runtime post invocation.\n"
                    },
                    "blockMaliciousExecutablesAllowedProcesses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of processes that will be allowed\n"
                    },
                    "blockRunningExecutablesInTmpFolder": {
                        "type": "boolean",
                        "description": "If true, prevent running of executables in functions locate in /tmp folder during their runtime post invocation.\n"
                    },
                    "blockedExecutables": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of executables that are prevented from running in containers.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the function runtime policy\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Indicates if the runtime policy is enabled or not.\n"
                    },
                    "enforce": {
                        "type": "boolean",
                        "description": "Indicates that policy should effect container execution (not just for audit).\n"
                    },
                    "honeypotAccessKey": {
                        "type": "string",
                        "description": "Honeypot User ID (Access Key)\n"
                    },
                    "honeypotApplyOns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of options to apply the honeypot on (Environment Vairable, Layer, File)\n"
                    },
                    "honeypotSecretKey": {
                        "type": "string",
                        "description": "Honeypot User Password (Secret Key)\n",
                        "secret": true
                    },
                    "honeypotServerlessAppName": {
                        "type": "string",
                        "description": "Serverless application name\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the function runtime policy\n",
                        "willReplaceOnChanges": true
                    },
                    "scopeExpression": {
                        "type": "string",
                        "description": "Logical expression of how to compute the dependency of the scope variables.\n"
                    },
                    "scopeVariables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/FunctionRuntimePolicyScopeVariable:FunctionRuntimePolicyScopeVariable"
                        },
                        "description": "List of scope attributes.\n"
                    }
                },
                "type": "object"
            }
        },
        "aquasec:index/group:Group": {
            "description": "The `aquasec.Group` resource manages your groups within Aqua.\n\nThe Groups created must have at least one Role that is already present within Aqua.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aquasec from \"@pulumiverse/aquasec\";\n\nconst group = new aquasec.Group(\"group\", {});\n```\n```python\nimport pulumi\nimport pulumiverse_aquasec as aquasec\n\ngroup = aquasec.Group(\"group\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Aquasec = Pulumiverse.Aquasec;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @group = new Aquasec.Group(\"group\");\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-aquasec/sdk/go/aquasec\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := aquasec.NewGroup(ctx, \"group\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aquasec.Group;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var group = new Group(\"group\");\n\n    }\n}\n```\n```yaml\nresources:\n  group:\n    type: aquasec:Group\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "created": {
                    "type": "string",
                    "description": "The creation date of the group.\n"
                },
                "groupId": {
                    "type": "integer",
                    "description": "The ID of the created group.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The desired name of the group.\n"
                }
            },
            "required": [
                "created",
                "groupId",
                "name"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The desired name of the group.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Group resources.\n",
                "properties": {
                    "created": {
                        "type": "string",
                        "description": "The creation date of the group.\n"
                    },
                    "groupId": {
                        "type": "integer",
                        "description": "The ID of the created group.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The desired name of the group.\n"
                    }
                },
                "type": "object"
            }
        },
        "aquasec:index/hostAssurancePolicy:HostAssurancePolicy": {
            "properties": {
                "allowedImages": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of explicitly allowed images.\n"
                },
                "applicationScopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "auditOnFailure": {
                    "type": "boolean",
                    "description": "Indicates if auditing for failures.\n"
                },
                "author": {
                    "type": "string",
                    "description": "Name of user account that created the policy.\n"
                },
                "autoScanConfigured": {
                    "type": "boolean"
                },
                "autoScanEnabled": {
                    "type": "boolean"
                },
                "autoScanTimes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/HostAssurancePolicyAutoScanTime:HostAssurancePolicyAutoScanTime"
                    }
                },
                "blacklistPermissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of function's forbidden permissions.\n"
                },
                "blacklistPermissionsEnabled": {
                    "type": "boolean",
                    "description": "Indicates if blacklist permissions is relevant.\n"
                },
                "blacklistedLicenses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of blacklisted licenses.\n"
                },
                "blacklistedLicensesEnabled": {
                    "type": "boolean",
                    "description": "Lndicates if license blacklist is relevant.\n"
                },
                "blockFailed": {
                    "type": "boolean",
                    "description": "Indicates if failed images are blocked.\n"
                },
                "controlExcludeNoFix": {
                    "type": "boolean"
                },
                "customChecks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/HostAssurancePolicyCustomCheck:HostAssurancePolicyCustomCheck"
                    },
                    "description": "List of Custom user scripts for checks.\n"
                },
                "customChecksEnabled": {
                    "type": "boolean",
                    "description": "Indicates if scanning should include custom checks.\n"
                },
                "customSeverityEnabled": {
                    "type": "boolean"
                },
                "cvesBlackListEnabled": {
                    "type": "boolean",
                    "description": "Indicates if cves blacklist is relevant.\n"
                },
                "cvesBlackLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of cves blacklisted items.\n"
                },
                "cvesWhiteListEnabled": {
                    "type": "boolean",
                    "description": "Indicates if cves whitelist is relevant.\n"
                },
                "cvesWhiteLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of cves whitelisted licenses\n"
                },
                "cvssSeverity": {
                    "type": "string",
                    "description": "Identifier of the cvss severity.\n"
                },
                "cvssSeverityEnabled": {
                    "type": "boolean",
                    "description": "Indicates if the cvss severity is scanned.\n"
                },
                "cvssSeverityExcludeNoFix": {
                    "type": "boolean",
                    "description": "Indicates that policy should ignore cvss cases that do not have a known fix.\n"
                },
                "description": {
                    "type": "string"
                },
                "disallowMalware": {
                    "type": "boolean",
                    "description": "Indicates if malware should block the image.\n"
                },
                "dockerCisEnabled": {
                    "type": "boolean"
                },
                "domain": {
                    "type": "string",
                    "description": "Name of the container image.\n"
                },
                "domainName": {
                    "type": "string"
                },
                "dtaEnabled": {
                    "type": "boolean"
                },
                "dtaSeverity": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "enforce": {
                    "type": "boolean"
                },
                "enforceAfterDays": {
                    "type": "integer"
                },
                "enforceExcessivePermissions": {
                    "type": "boolean"
                },
                "exceptionalMonitoredMalwarePaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "failCicd": {
                    "type": "boolean",
                    "description": "Indicates if cicd failures will fail the image.\n"
                },
                "forbiddenLabels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/HostAssurancePolicyForbiddenLabel:HostAssurancePolicyForbiddenLabel"
                    }
                },
                "forbiddenLabelsEnabled": {
                    "type": "boolean"
                },
                "forceMicroenforcer": {
                    "type": "boolean"
                },
                "functionIntegrityEnabled": {
                    "type": "boolean"
                },
                "ignoreRecentlyPublishedVln": {
                    "type": "boolean"
                },
                "ignoreRecentlyPublishedVlnPeriod": {
                    "type": "integer"
                },
                "ignoreRiskResourcesEnabled": {
                    "type": "boolean",
                    "description": "Indicates if risk resources are ignored.\n"
                },
                "ignoredRiskResources": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of ignored risk resources.\n"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of images.\n"
                },
                "kubeCisEnabled": {
                    "type": "boolean"
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of labels.\n"
                },
                "malwareAction": {
                    "type": "string"
                },
                "maximumScore": {
                    "type": "number",
                    "description": "Value of allowed maximum score.\n"
                },
                "maximumScoreEnabled": {
                    "type": "boolean",
                    "description": "Indicates if exceeding the maximum score is scanned.\n"
                },
                "maximumScoreExcludeNoFix": {
                    "type": "boolean",
                    "description": "Indicates that policy should ignore cases that do not have a known fix.\n"
                },
                "monitoredMalwarePaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "onlyNoneRootUsers": {
                    "type": "boolean",
                    "description": "Indicates if raise a warning for images that should only be run as root.\n"
                },
                "packagesBlackListEnabled": {
                    "type": "boolean",
                    "description": "Indicates if packages blacklist is relevant.\n"
                },
                "packagesBlackLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/HostAssurancePolicyPackagesBlackList:HostAssurancePolicyPackagesBlackList"
                    },
                    "description": "List of backlisted images.\n"
                },
                "packagesWhiteListEnabled": {
                    "type": "boolean",
                    "description": "Indicates if packages whitelist is relevant.\n"
                },
                "packagesWhiteLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/HostAssurancePolicyPackagesWhiteList:HostAssurancePolicyPackagesWhiteList"
                    },
                    "description": "List of whitelisted images.\n"
                },
                "partialResultsImageFail": {
                    "type": "boolean"
                },
                "readOnly": {
                    "type": "boolean"
                },
                "registries": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of registries.\n"
                },
                "registry": {
                    "type": "string"
                },
                "requiredLabels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/HostAssurancePolicyRequiredLabel:HostAssurancePolicyRequiredLabel"
                    }
                },
                "requiredLabelsEnabled": {
                    "type": "boolean"
                },
                "scanNfsMounts": {
                    "type": "boolean"
                },
                "scanSensitiveData": {
                    "type": "boolean",
                    "description": "Indicates if scan should include sensitive data in the image.\n"
                },
                "scapEnabled": {
                    "type": "boolean",
                    "description": "Indicates if scanning should include scap.\n"
                },
                "scapFiles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of SCAP user scripts for checks.\n"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/HostAssurancePolicyScope:HostAssurancePolicyScope"
                    }
                },
                "trustedBaseImages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/HostAssurancePolicyTrustedBaseImage:HostAssurancePolicyTrustedBaseImage"
                    },
                    "description": "List of trusted images.\n"
                },
                "trustedBaseImagesEnabled": {
                    "type": "boolean",
                    "description": "Indicates if list of trusted base images is relevant.\n"
                },
                "whitelistedLicenses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of whitelisted licenses.\n"
                },
                "whitelistedLicensesEnabled": {
                    "type": "boolean",
                    "description": "Indicates if license blacklist is relevant.\n"
                }
            },
            "required": [
                "applicationScopes",
                "author",
                "autoScanTimes",
                "ignoreRecentlyPublishedVlnPeriod",
                "name",
                "scopes"
            ],
            "inputProperties": {
                "allowedImages": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of explicitly allowed images.\n"
                },
                "applicationScopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "auditOnFailure": {
                    "type": "boolean",
                    "description": "Indicates if auditing for failures.\n"
                },
                "autoScanConfigured": {
                    "type": "boolean"
                },
                "autoScanEnabled": {
                    "type": "boolean"
                },
                "autoScanTimes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/HostAssurancePolicyAutoScanTime:HostAssurancePolicyAutoScanTime"
                    }
                },
                "blacklistPermissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of function's forbidden permissions.\n"
                },
                "blacklistPermissionsEnabled": {
                    "type": "boolean",
                    "description": "Indicates if blacklist permissions is relevant.\n"
                },
                "blacklistedLicenses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of blacklisted licenses.\n"
                },
                "blacklistedLicensesEnabled": {
                    "type": "boolean",
                    "description": "Lndicates if license blacklist is relevant.\n"
                },
                "blockFailed": {
                    "type": "boolean",
                    "description": "Indicates if failed images are blocked.\n"
                },
                "controlExcludeNoFix": {
                    "type": "boolean"
                },
                "customChecks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/HostAssurancePolicyCustomCheck:HostAssurancePolicyCustomCheck"
                    },
                    "description": "List of Custom user scripts for checks.\n"
                },
                "customChecksEnabled": {
                    "type": "boolean",
                    "description": "Indicates if scanning should include custom checks.\n"
                },
                "customSeverityEnabled": {
                    "type": "boolean"
                },
                "cvesBlackListEnabled": {
                    "type": "boolean",
                    "description": "Indicates if cves blacklist is relevant.\n"
                },
                "cvesBlackLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of cves blacklisted items.\n"
                },
                "cvesWhiteListEnabled": {
                    "type": "boolean",
                    "description": "Indicates if cves whitelist is relevant.\n"
                },
                "cvesWhiteLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of cves whitelisted licenses\n"
                },
                "cvssSeverity": {
                    "type": "string",
                    "description": "Identifier of the cvss severity.\n"
                },
                "cvssSeverityEnabled": {
                    "type": "boolean",
                    "description": "Indicates if the cvss severity is scanned.\n"
                },
                "cvssSeverityExcludeNoFix": {
                    "type": "boolean",
                    "description": "Indicates that policy should ignore cvss cases that do not have a known fix.\n"
                },
                "description": {
                    "type": "string"
                },
                "disallowMalware": {
                    "type": "boolean",
                    "description": "Indicates if malware should block the image.\n"
                },
                "dockerCisEnabled": {
                    "type": "boolean"
                },
                "domain": {
                    "type": "string",
                    "description": "Name of the container image.\n"
                },
                "domainName": {
                    "type": "string"
                },
                "dtaEnabled": {
                    "type": "boolean"
                },
                "dtaSeverity": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "enforce": {
                    "type": "boolean"
                },
                "enforceAfterDays": {
                    "type": "integer"
                },
                "enforceExcessivePermissions": {
                    "type": "boolean"
                },
                "exceptionalMonitoredMalwarePaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "failCicd": {
                    "type": "boolean",
                    "description": "Indicates if cicd failures will fail the image.\n"
                },
                "forbiddenLabels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/HostAssurancePolicyForbiddenLabel:HostAssurancePolicyForbiddenLabel"
                    }
                },
                "forbiddenLabelsEnabled": {
                    "type": "boolean"
                },
                "forceMicroenforcer": {
                    "type": "boolean"
                },
                "functionIntegrityEnabled": {
                    "type": "boolean"
                },
                "ignoreRecentlyPublishedVln": {
                    "type": "boolean"
                },
                "ignoreRiskResourcesEnabled": {
                    "type": "boolean",
                    "description": "Indicates if risk resources are ignored.\n"
                },
                "ignoredRiskResources": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of ignored risk resources.\n"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of images.\n"
                },
                "kubeCisEnabled": {
                    "type": "boolean"
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of labels.\n"
                },
                "malwareAction": {
                    "type": "string"
                },
                "maximumScore": {
                    "type": "number",
                    "description": "Value of allowed maximum score.\n"
                },
                "maximumScoreEnabled": {
                    "type": "boolean",
                    "description": "Indicates if exceeding the maximum score is scanned.\n"
                },
                "maximumScoreExcludeNoFix": {
                    "type": "boolean",
                    "description": "Indicates that policy should ignore cases that do not have a known fix.\n"
                },
                "monitoredMalwarePaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "onlyNoneRootUsers": {
                    "type": "boolean",
                    "description": "Indicates if raise a warning for images that should only be run as root.\n"
                },
                "packagesBlackListEnabled": {
                    "type": "boolean",
                    "description": "Indicates if packages blacklist is relevant.\n"
                },
                "packagesBlackLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/HostAssurancePolicyPackagesBlackList:HostAssurancePolicyPackagesBlackList"
                    },
                    "description": "List of backlisted images.\n"
                },
                "packagesWhiteListEnabled": {
                    "type": "boolean",
                    "description": "Indicates if packages whitelist is relevant.\n"
                },
                "packagesWhiteLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/HostAssurancePolicyPackagesWhiteList:HostAssurancePolicyPackagesWhiteList"
                    },
                    "description": "List of whitelisted images.\n"
                },
                "partialResultsImageFail": {
                    "type": "boolean"
                },
                "readOnly": {
                    "type": "boolean"
                },
                "registries": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of registries.\n"
                },
                "registry": {
                    "type": "string"
                },
                "requiredLabels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/HostAssurancePolicyRequiredLabel:HostAssurancePolicyRequiredLabel"
                    }
                },
                "requiredLabelsEnabled": {
                    "type": "boolean"
                },
                "scanNfsMounts": {
                    "type": "boolean"
                },
                "scanSensitiveData": {
                    "type": "boolean",
                    "description": "Indicates if scan should include sensitive data in the image.\n"
                },
                "scapEnabled": {
                    "type": "boolean",
                    "description": "Indicates if scanning should include scap.\n"
                },
                "scapFiles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of SCAP user scripts for checks.\n"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/HostAssurancePolicyScope:HostAssurancePolicyScope"
                    }
                },
                "trustedBaseImages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/HostAssurancePolicyTrustedBaseImage:HostAssurancePolicyTrustedBaseImage"
                    },
                    "description": "List of trusted images.\n"
                },
                "trustedBaseImagesEnabled": {
                    "type": "boolean",
                    "description": "Indicates if list of trusted base images is relevant.\n"
                },
                "whitelistedLicenses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of whitelisted licenses.\n"
                },
                "whitelistedLicensesEnabled": {
                    "type": "boolean",
                    "description": "Indicates if license blacklist is relevant.\n"
                }
            },
            "requiredInputs": [
                "applicationScopes"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering HostAssurancePolicy resources.\n",
                "properties": {
                    "allowedImages": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of explicitly allowed images.\n"
                    },
                    "applicationScopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "auditOnFailure": {
                        "type": "boolean",
                        "description": "Indicates if auditing for failures.\n"
                    },
                    "author": {
                        "type": "string",
                        "description": "Name of user account that created the policy.\n"
                    },
                    "autoScanConfigured": {
                        "type": "boolean"
                    },
                    "autoScanEnabled": {
                        "type": "boolean"
                    },
                    "autoScanTimes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/HostAssurancePolicyAutoScanTime:HostAssurancePolicyAutoScanTime"
                        }
                    },
                    "blacklistPermissions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of function's forbidden permissions.\n"
                    },
                    "blacklistPermissionsEnabled": {
                        "type": "boolean",
                        "description": "Indicates if blacklist permissions is relevant.\n"
                    },
                    "blacklistedLicenses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of blacklisted licenses.\n"
                    },
                    "blacklistedLicensesEnabled": {
                        "type": "boolean",
                        "description": "Lndicates if license blacklist is relevant.\n"
                    },
                    "blockFailed": {
                        "type": "boolean",
                        "description": "Indicates if failed images are blocked.\n"
                    },
                    "controlExcludeNoFix": {
                        "type": "boolean"
                    },
                    "customChecks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/HostAssurancePolicyCustomCheck:HostAssurancePolicyCustomCheck"
                        },
                        "description": "List of Custom user scripts for checks.\n"
                    },
                    "customChecksEnabled": {
                        "type": "boolean",
                        "description": "Indicates if scanning should include custom checks.\n"
                    },
                    "customSeverityEnabled": {
                        "type": "boolean"
                    },
                    "cvesBlackListEnabled": {
                        "type": "boolean",
                        "description": "Indicates if cves blacklist is relevant.\n"
                    },
                    "cvesBlackLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of cves blacklisted items.\n"
                    },
                    "cvesWhiteListEnabled": {
                        "type": "boolean",
                        "description": "Indicates if cves whitelist is relevant.\n"
                    },
                    "cvesWhiteLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of cves whitelisted licenses\n"
                    },
                    "cvssSeverity": {
                        "type": "string",
                        "description": "Identifier of the cvss severity.\n"
                    },
                    "cvssSeverityEnabled": {
                        "type": "boolean",
                        "description": "Indicates if the cvss severity is scanned.\n"
                    },
                    "cvssSeverityExcludeNoFix": {
                        "type": "boolean",
                        "description": "Indicates that policy should ignore cvss cases that do not have a known fix.\n"
                    },
                    "description": {
                        "type": "string"
                    },
                    "disallowMalware": {
                        "type": "boolean",
                        "description": "Indicates if malware should block the image.\n"
                    },
                    "dockerCisEnabled": {
                        "type": "boolean"
                    },
                    "domain": {
                        "type": "string",
                        "description": "Name of the container image.\n"
                    },
                    "domainName": {
                        "type": "string"
                    },
                    "dtaEnabled": {
                        "type": "boolean"
                    },
                    "dtaSeverity": {
                        "type": "string"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "enforce": {
                        "type": "boolean"
                    },
                    "enforceAfterDays": {
                        "type": "integer"
                    },
                    "enforceExcessivePermissions": {
                        "type": "boolean"
                    },
                    "exceptionalMonitoredMalwarePaths": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "failCicd": {
                        "type": "boolean",
                        "description": "Indicates if cicd failures will fail the image.\n"
                    },
                    "forbiddenLabels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/HostAssurancePolicyForbiddenLabel:HostAssurancePolicyForbiddenLabel"
                        }
                    },
                    "forbiddenLabelsEnabled": {
                        "type": "boolean"
                    },
                    "forceMicroenforcer": {
                        "type": "boolean"
                    },
                    "functionIntegrityEnabled": {
                        "type": "boolean"
                    },
                    "ignoreRecentlyPublishedVln": {
                        "type": "boolean"
                    },
                    "ignoreRecentlyPublishedVlnPeriod": {
                        "type": "integer"
                    },
                    "ignoreRiskResourcesEnabled": {
                        "type": "boolean",
                        "description": "Indicates if risk resources are ignored.\n"
                    },
                    "ignoredRiskResources": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of ignored risk resources.\n"
                    },
                    "images": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of images.\n"
                    },
                    "kubeCisEnabled": {
                        "type": "boolean"
                    },
                    "labels": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of labels.\n"
                    },
                    "malwareAction": {
                        "type": "string"
                    },
                    "maximumScore": {
                        "type": "number",
                        "description": "Value of allowed maximum score.\n"
                    },
                    "maximumScoreEnabled": {
                        "type": "boolean",
                        "description": "Indicates if exceeding the maximum score is scanned.\n"
                    },
                    "maximumScoreExcludeNoFix": {
                        "type": "boolean",
                        "description": "Indicates that policy should ignore cases that do not have a known fix.\n"
                    },
                    "monitoredMalwarePaths": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "onlyNoneRootUsers": {
                        "type": "boolean",
                        "description": "Indicates if raise a warning for images that should only be run as root.\n"
                    },
                    "packagesBlackListEnabled": {
                        "type": "boolean",
                        "description": "Indicates if packages blacklist is relevant.\n"
                    },
                    "packagesBlackLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/HostAssurancePolicyPackagesBlackList:HostAssurancePolicyPackagesBlackList"
                        },
                        "description": "List of backlisted images.\n"
                    },
                    "packagesWhiteListEnabled": {
                        "type": "boolean",
                        "description": "Indicates if packages whitelist is relevant.\n"
                    },
                    "packagesWhiteLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/HostAssurancePolicyPackagesWhiteList:HostAssurancePolicyPackagesWhiteList"
                        },
                        "description": "List of whitelisted images.\n"
                    },
                    "partialResultsImageFail": {
                        "type": "boolean"
                    },
                    "readOnly": {
                        "type": "boolean"
                    },
                    "registries": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of registries.\n"
                    },
                    "registry": {
                        "type": "string"
                    },
                    "requiredLabels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/HostAssurancePolicyRequiredLabel:HostAssurancePolicyRequiredLabel"
                        }
                    },
                    "requiredLabelsEnabled": {
                        "type": "boolean"
                    },
                    "scanNfsMounts": {
                        "type": "boolean"
                    },
                    "scanSensitiveData": {
                        "type": "boolean",
                        "description": "Indicates if scan should include sensitive data in the image.\n"
                    },
                    "scapEnabled": {
                        "type": "boolean",
                        "description": "Indicates if scanning should include scap.\n"
                    },
                    "scapFiles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of SCAP user scripts for checks.\n"
                    },
                    "scopes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/HostAssurancePolicyScope:HostAssurancePolicyScope"
                        }
                    },
                    "trustedBaseImages": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/HostAssurancePolicyTrustedBaseImage:HostAssurancePolicyTrustedBaseImage"
                        },
                        "description": "List of trusted images.\n"
                    },
                    "trustedBaseImagesEnabled": {
                        "type": "boolean",
                        "description": "Indicates if list of trusted base images is relevant.\n"
                    },
                    "whitelistedLicenses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of whitelisted licenses.\n"
                    },
                    "whitelistedLicensesEnabled": {
                        "type": "boolean",
                        "description": "Indicates if license blacklist is relevant.\n"
                    }
                },
                "type": "object"
            }
        },
        "aquasec:index/hostRuntimePolicy:HostRuntimePolicy": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aquasec from \"@pulumiverse/aquasec\";\n\nconst hostRuntimePolicy = new aquasec.HostRuntimePolicy(\"hostRuntimePolicy\", {\n    applicationScopes: [\"Global\"],\n    auditAllOsUserActivity: true,\n    auditBruteForceLogin: true,\n    auditFullCommandArguments: true,\n    auditHostFailedLoginEvents: true,\n    auditHostSuccessfulLoginEvents: true,\n    auditUserAccountManagement: true,\n    blockCryptocurrencyMining: true,\n    blockedFiles: [\"blocked\"],\n    description: \"host_runtime_policy\",\n    enableIpReputationSecurity: true,\n    enabled: true,\n    enforce: false,\n    fileIntegrityMonitoring: {\n        excludedPaths: [\"expaths\"],\n        excludedProcesses: [\"exprocess\"],\n        excludedUsers: [\"expuser\"],\n        monitorAttributes: true,\n        monitorCreate: true,\n        monitorDelete: true,\n        monitorModify: true,\n        monitorRead: true,\n        monitoredPaths: [\"paths\"],\n        monitoredProcesses: [\"process\"],\n        monitoredUsers: [\"user\"],\n    },\n    monitorSystemLogIntegrity: true,\n    monitorSystemTimeChanges: true,\n    monitorWindowsServices: true,\n    osGroupsAlloweds: [\"group1\"],\n    osGroupsBlockeds: [\"group2\"],\n    osUsersAlloweds: [\"user1\"],\n    osUsersBlockeds: [\"user2\"],\n    packageBlocks: [\"package1\"],\n    portScanningDetection: true,\n    scopeVariables: [\n        {\n            attribute: \"kubernetes.cluster\",\n            value: \"default\",\n        },\n        {\n            attribute: \"kubernetes.label\",\n            name: \"app\",\n            value: \"aqua\",\n        },\n    ],\n    windowsRegistryMonitoring: {\n        excludedPaths: [\"expaths\"],\n        excludedProcesses: [\"exprocess\"],\n        excludedUsers: [\"expuser\"],\n        monitorAttributes: true,\n        monitorCreate: true,\n        monitorDelete: true,\n        monitorModify: true,\n        monitorRead: true,\n        monitoredPaths: [\"paths\"],\n        monitoredProcesses: [\"process\"],\n        monitoredUsers: [\"user\"],\n    },\n    windowsRegistryProtection: {\n        excludedPaths: [\"expaths\"],\n        excludedProcesses: [\"exprocess\"],\n        excludedUsers: [\"expuser\"],\n        protectedPaths: [\"paths\"],\n        protectedProcesses: [\"process\"],\n        protectedUsers: [\"user\"],\n    },\n});\n```\n```python\nimport pulumi\nimport pulumiverse_aquasec as aquasec\n\nhost_runtime_policy = aquasec.HostRuntimePolicy(\"hostRuntimePolicy\",\n    application_scopes=[\"Global\"],\n    audit_all_os_user_activity=True,\n    audit_brute_force_login=True,\n    audit_full_command_arguments=True,\n    audit_host_failed_login_events=True,\n    audit_host_successful_login_events=True,\n    audit_user_account_management=True,\n    block_cryptocurrency_mining=True,\n    blocked_files=[\"blocked\"],\n    description=\"host_runtime_policy\",\n    enable_ip_reputation_security=True,\n    enabled=True,\n    enforce=False,\n    file_integrity_monitoring=aquasec.HostRuntimePolicyFileIntegrityMonitoringArgs(\n        excluded_paths=[\"expaths\"],\n        excluded_processes=[\"exprocess\"],\n        excluded_users=[\"expuser\"],\n        monitor_attributes=True,\n        monitor_create=True,\n        monitor_delete=True,\n        monitor_modify=True,\n        monitor_read=True,\n        monitored_paths=[\"paths\"],\n        monitored_processes=[\"process\"],\n        monitored_users=[\"user\"],\n    ),\n    monitor_system_log_integrity=True,\n    monitor_system_time_changes=True,\n    monitor_windows_services=True,\n    os_groups_alloweds=[\"group1\"],\n    os_groups_blockeds=[\"group2\"],\n    os_users_alloweds=[\"user1\"],\n    os_users_blockeds=[\"user2\"],\n    package_blocks=[\"package1\"],\n    port_scanning_detection=True,\n    scope_variables=[\n        aquasec.HostRuntimePolicyScopeVariableArgs(\n            attribute=\"kubernetes.cluster\",\n            value=\"default\",\n        ),\n        aquasec.HostRuntimePolicyScopeVariableArgs(\n            attribute=\"kubernetes.label\",\n            name=\"app\",\n            value=\"aqua\",\n        ),\n    ],\n    windows_registry_monitoring=aquasec.HostRuntimePolicyWindowsRegistryMonitoringArgs(\n        excluded_paths=[\"expaths\"],\n        excluded_processes=[\"exprocess\"],\n        excluded_users=[\"expuser\"],\n        monitor_attributes=True,\n        monitor_create=True,\n        monitor_delete=True,\n        monitor_modify=True,\n        monitor_read=True,\n        monitored_paths=[\"paths\"],\n        monitored_processes=[\"process\"],\n        monitored_users=[\"user\"],\n    ),\n    windows_registry_protection=aquasec.HostRuntimePolicyWindowsRegistryProtectionArgs(\n        excluded_paths=[\"expaths\"],\n        excluded_processes=[\"exprocess\"],\n        excluded_users=[\"expuser\"],\n        protected_paths=[\"paths\"],\n        protected_processes=[\"process\"],\n        protected_users=[\"user\"],\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Aquasec = Pulumiverse.Aquasec;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var hostRuntimePolicy = new Aquasec.HostRuntimePolicy(\"hostRuntimePolicy\", new()\n    {\n        ApplicationScopes = new[]\n        {\n            \"Global\",\n        },\n        AuditAllOsUserActivity = true,\n        AuditBruteForceLogin = true,\n        AuditFullCommandArguments = true,\n        AuditHostFailedLoginEvents = true,\n        AuditHostSuccessfulLoginEvents = true,\n        AuditUserAccountManagement = true,\n        BlockCryptocurrencyMining = true,\n        BlockedFiles = new[]\n        {\n            \"blocked\",\n        },\n        Description = \"host_runtime_policy\",\n        EnableIpReputationSecurity = true,\n        Enabled = true,\n        Enforce = false,\n        FileIntegrityMonitoring = new Aquasec.Inputs.HostRuntimePolicyFileIntegrityMonitoringArgs\n        {\n            ExcludedPaths = new[]\n            {\n                \"expaths\",\n            },\n            ExcludedProcesses = new[]\n            {\n                \"exprocess\",\n            },\n            ExcludedUsers = new[]\n            {\n                \"expuser\",\n            },\n            MonitorAttributes = true,\n            MonitorCreate = true,\n            MonitorDelete = true,\n            MonitorModify = true,\n            MonitorRead = true,\n            MonitoredPaths = new[]\n            {\n                \"paths\",\n            },\n            MonitoredProcesses = new[]\n            {\n                \"process\",\n            },\n            MonitoredUsers = new[]\n            {\n                \"user\",\n            },\n        },\n        MonitorSystemLogIntegrity = true,\n        MonitorSystemTimeChanges = true,\n        MonitorWindowsServices = true,\n        OsGroupsAlloweds = new[]\n        {\n            \"group1\",\n        },\n        OsGroupsBlockeds = new[]\n        {\n            \"group2\",\n        },\n        OsUsersAlloweds = new[]\n        {\n            \"user1\",\n        },\n        OsUsersBlockeds = new[]\n        {\n            \"user2\",\n        },\n        PackageBlocks = new[]\n        {\n            \"package1\",\n        },\n        PortScanningDetection = true,\n        ScopeVariables = new[]\n        {\n            new Aquasec.Inputs.HostRuntimePolicyScopeVariableArgs\n            {\n                Attribute = \"kubernetes.cluster\",\n                Value = \"default\",\n            },\n            new Aquasec.Inputs.HostRuntimePolicyScopeVariableArgs\n            {\n                Attribute = \"kubernetes.label\",\n                Name = \"app\",\n                Value = \"aqua\",\n            },\n        },\n        WindowsRegistryMonitoring = new Aquasec.Inputs.HostRuntimePolicyWindowsRegistryMonitoringArgs\n        {\n            ExcludedPaths = new[]\n            {\n                \"expaths\",\n            },\n            ExcludedProcesses = new[]\n            {\n                \"exprocess\",\n            },\n            ExcludedUsers = new[]\n            {\n                \"expuser\",\n            },\n            MonitorAttributes = true,\n            MonitorCreate = true,\n            MonitorDelete = true,\n            MonitorModify = true,\n            MonitorRead = true,\n            MonitoredPaths = new[]\n            {\n                \"paths\",\n            },\n            MonitoredProcesses = new[]\n            {\n                \"process\",\n            },\n            MonitoredUsers = new[]\n            {\n                \"user\",\n            },\n        },\n        WindowsRegistryProtection = new Aquasec.Inputs.HostRuntimePolicyWindowsRegistryProtectionArgs\n        {\n            ExcludedPaths = new[]\n            {\n                \"expaths\",\n            },\n            ExcludedProcesses = new[]\n            {\n                \"exprocess\",\n            },\n            ExcludedUsers = new[]\n            {\n                \"expuser\",\n            },\n            ProtectedPaths = new[]\n            {\n                \"paths\",\n            },\n            ProtectedProcesses = new[]\n            {\n                \"process\",\n            },\n            ProtectedUsers = new[]\n            {\n                \"user\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-aquasec/sdk/go/aquasec\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := aquasec.NewHostRuntimePolicy(ctx, \"hostRuntimePolicy\", \u0026aquasec.HostRuntimePolicyArgs{\n\t\t\tApplicationScopes: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"Global\"),\n\t\t\t},\n\t\t\tAuditAllOsUserActivity:         pulumi.Bool(true),\n\t\t\tAuditBruteForceLogin:           pulumi.Bool(true),\n\t\t\tAuditFullCommandArguments:      pulumi.Bool(true),\n\t\t\tAuditHostFailedLoginEvents:     pulumi.Bool(true),\n\t\t\tAuditHostSuccessfulLoginEvents: pulumi.Bool(true),\n\t\t\tAuditUserAccountManagement:     pulumi.Bool(true),\n\t\t\tBlockCryptocurrencyMining:      pulumi.Bool(true),\n\t\t\tBlockedFiles: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"blocked\"),\n\t\t\t},\n\t\t\tDescription:                pulumi.String(\"host_runtime_policy\"),\n\t\t\tEnableIpReputationSecurity: pulumi.Bool(true),\n\t\t\tEnabled:                    pulumi.Bool(true),\n\t\t\tEnforce:                    pulumi.Bool(false),\n\t\t\tFileIntegrityMonitoring: \u0026aquasec.HostRuntimePolicyFileIntegrityMonitoringArgs{\n\t\t\t\tExcludedPaths: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"expaths\"),\n\t\t\t\t},\n\t\t\t\tExcludedProcesses: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"exprocess\"),\n\t\t\t\t},\n\t\t\t\tExcludedUsers: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"expuser\"),\n\t\t\t\t},\n\t\t\t\tMonitorAttributes: pulumi.Bool(true),\n\t\t\t\tMonitorCreate:     pulumi.Bool(true),\n\t\t\t\tMonitorDelete:     pulumi.Bool(true),\n\t\t\t\tMonitorModify:     pulumi.Bool(true),\n\t\t\t\tMonitorRead:       pulumi.Bool(true),\n\t\t\t\tMonitoredPaths: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"paths\"),\n\t\t\t\t},\n\t\t\t\tMonitoredProcesses: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"process\"),\n\t\t\t\t},\n\t\t\t\tMonitoredUsers: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"user\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tMonitorSystemLogIntegrity: pulumi.Bool(true),\n\t\t\tMonitorSystemTimeChanges:  pulumi.Bool(true),\n\t\t\tMonitorWindowsServices:    pulumi.Bool(true),\n\t\t\tOsGroupsAlloweds: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"group1\"),\n\t\t\t},\n\t\t\tOsGroupsBlockeds: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"group2\"),\n\t\t\t},\n\t\t\tOsUsersAlloweds: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"user1\"),\n\t\t\t},\n\t\t\tOsUsersBlockeds: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"user2\"),\n\t\t\t},\n\t\t\tPackageBlocks: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"package1\"),\n\t\t\t},\n\t\t\tPortScanningDetection: pulumi.Bool(true),\n\t\t\tScopeVariables: aquasec.HostRuntimePolicyScopeVariableArray{\n\t\t\t\t\u0026aquasec.HostRuntimePolicyScopeVariableArgs{\n\t\t\t\t\tAttribute: pulumi.String(\"kubernetes.cluster\"),\n\t\t\t\t\tValue:     pulumi.String(\"default\"),\n\t\t\t\t},\n\t\t\t\t\u0026aquasec.HostRuntimePolicyScopeVariableArgs{\n\t\t\t\t\tAttribute: pulumi.String(\"kubernetes.label\"),\n\t\t\t\t\tName:      pulumi.String(\"app\"),\n\t\t\t\t\tValue:     pulumi.String(\"aqua\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tWindowsRegistryMonitoring: \u0026aquasec.HostRuntimePolicyWindowsRegistryMonitoringArgs{\n\t\t\t\tExcludedPaths: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"expaths\"),\n\t\t\t\t},\n\t\t\t\tExcludedProcesses: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"exprocess\"),\n\t\t\t\t},\n\t\t\t\tExcludedUsers: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"expuser\"),\n\t\t\t\t},\n\t\t\t\tMonitorAttributes: pulumi.Bool(true),\n\t\t\t\tMonitorCreate:     pulumi.Bool(true),\n\t\t\t\tMonitorDelete:     pulumi.Bool(true),\n\t\t\t\tMonitorModify:     pulumi.Bool(true),\n\t\t\t\tMonitorRead:       pulumi.Bool(true),\n\t\t\t\tMonitoredPaths: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"paths\"),\n\t\t\t\t},\n\t\t\t\tMonitoredProcesses: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"process\"),\n\t\t\t\t},\n\t\t\t\tMonitoredUsers: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"user\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tWindowsRegistryProtection: \u0026aquasec.HostRuntimePolicyWindowsRegistryProtectionArgs{\n\t\t\t\tExcludedPaths: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"expaths\"),\n\t\t\t\t},\n\t\t\t\tExcludedProcesses: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"exprocess\"),\n\t\t\t\t},\n\t\t\t\tExcludedUsers: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"expuser\"),\n\t\t\t\t},\n\t\t\t\tProtectedPaths: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"paths\"),\n\t\t\t\t},\n\t\t\t\tProtectedProcesses: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"process\"),\n\t\t\t\t},\n\t\t\t\tProtectedUsers: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"user\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aquasec.HostRuntimePolicy;\nimport com.pulumi.aquasec.HostRuntimePolicyArgs;\nimport com.pulumi.aquasec.inputs.HostRuntimePolicyFileIntegrityMonitoringArgs;\nimport com.pulumi.aquasec.inputs.HostRuntimePolicyScopeVariableArgs;\nimport com.pulumi.aquasec.inputs.HostRuntimePolicyWindowsRegistryMonitoringArgs;\nimport com.pulumi.aquasec.inputs.HostRuntimePolicyWindowsRegistryProtectionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var hostRuntimePolicy = new HostRuntimePolicy(\"hostRuntimePolicy\", HostRuntimePolicyArgs.builder()        \n            .applicationScopes(\"Global\")\n            .auditAllOsUserActivity(true)\n            .auditBruteForceLogin(true)\n            .auditFullCommandArguments(true)\n            .auditHostFailedLoginEvents(true)\n            .auditHostSuccessfulLoginEvents(true)\n            .auditUserAccountManagement(true)\n            .blockCryptocurrencyMining(true)\n            .blockedFiles(\"blocked\")\n            .description(\"host_runtime_policy\")\n            .enableIpReputationSecurity(true)\n            .enabled(true)\n            .enforce(false)\n            .fileIntegrityMonitoring(HostRuntimePolicyFileIntegrityMonitoringArgs.builder()\n                .excludedPaths(\"expaths\")\n                .excludedProcesses(\"exprocess\")\n                .excludedUsers(\"expuser\")\n                .monitorAttributes(true)\n                .monitorCreate(true)\n                .monitorDelete(true)\n                .monitorModify(true)\n                .monitorRead(true)\n                .monitoredPaths(\"paths\")\n                .monitoredProcesses(\"process\")\n                .monitoredUsers(\"user\")\n                .build())\n            .monitorSystemLogIntegrity(true)\n            .monitorSystemTimeChanges(true)\n            .monitorWindowsServices(true)\n            .osGroupsAlloweds(\"group1\")\n            .osGroupsBlockeds(\"group2\")\n            .osUsersAlloweds(\"user1\")\n            .osUsersBlockeds(\"user2\")\n            .packageBlocks(\"package1\")\n            .portScanningDetection(true)\n            .scopeVariables(            \n                HostRuntimePolicyScopeVariableArgs.builder()\n                    .attribute(\"kubernetes.cluster\")\n                    .value(\"default\")\n                    .build(),\n                HostRuntimePolicyScopeVariableArgs.builder()\n                    .attribute(\"kubernetes.label\")\n                    .name(\"app\")\n                    .value(\"aqua\")\n                    .build())\n            .windowsRegistryMonitoring(HostRuntimePolicyWindowsRegistryMonitoringArgs.builder()\n                .excludedPaths(\"expaths\")\n                .excludedProcesses(\"exprocess\")\n                .excludedUsers(\"expuser\")\n                .monitorAttributes(true)\n                .monitorCreate(true)\n                .monitorDelete(true)\n                .monitorModify(true)\n                .monitorRead(true)\n                .monitoredPaths(\"paths\")\n                .monitoredProcesses(\"process\")\n                .monitoredUsers(\"user\")\n                .build())\n            .windowsRegistryProtection(HostRuntimePolicyWindowsRegistryProtectionArgs.builder()\n                .excludedPaths(\"expaths\")\n                .excludedProcesses(\"exprocess\")\n                .excludedUsers(\"expuser\")\n                .protectedPaths(\"paths\")\n                .protectedProcesses(\"process\")\n                .protectedUsers(\"user\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  hostRuntimePolicy:\n    type: aquasec:HostRuntimePolicy\n    properties:\n      applicationScopes:\n        - Global\n      auditAllOsUserActivity: true\n      auditBruteForceLogin: true\n      auditFullCommandArguments: true\n      auditHostFailedLoginEvents: true\n      auditHostSuccessfulLoginEvents: true\n      auditUserAccountManagement: true\n      blockCryptocurrencyMining: true\n      blockedFiles:\n        - blocked\n      description: host_runtime_policy\n      enableIpReputationSecurity: true\n      enabled: true\n      enforce: false\n      fileIntegrityMonitoring:\n        excludedPaths:\n          - expaths\n        excludedProcesses:\n          - exprocess\n        excludedUsers:\n          - expuser\n        monitorAttributes: true\n        monitorCreate: true\n        monitorDelete: true\n        monitorModify: true\n        monitorRead: true\n        monitoredPaths:\n          - paths\n        monitoredProcesses:\n          - process\n        monitoredUsers:\n          - user\n      monitorSystemLogIntegrity: true\n      monitorSystemTimeChanges: true\n      monitorWindowsServices: true\n      osGroupsAlloweds:\n        - group1\n      osGroupsBlockeds:\n        - group2\n      osUsersAlloweds:\n        - user1\n      osUsersBlockeds:\n        - user2\n      packageBlocks:\n        - package1\n      portScanningDetection: true\n      scopeVariables:\n        - attribute: kubernetes.cluster\n          value: default\n        - attribute: kubernetes.label\n          name: app\n          value: aqua\n      windowsRegistryMonitoring:\n        excludedPaths:\n          - expaths\n        excludedProcesses:\n          - exprocess\n        excludedUsers:\n          - expuser\n        monitorAttributes: true\n        monitorCreate: true\n        monitorDelete: true\n        monitorModify: true\n        monitorRead: true\n        monitoredPaths:\n          - paths\n        monitoredProcesses:\n          - process\n        monitoredUsers:\n          - user\n      windowsRegistryProtection:\n        excludedPaths:\n          - expaths\n        excludedProcesses:\n          - exprocess\n        excludedUsers:\n          - expuser\n        protectedPaths:\n          - paths\n        protectedProcesses:\n          - process\n        protectedUsers:\n          - user\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "applicationScopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Indicates the application scope of the service.\n"
                },
                "auditAllOsUserActivity": {
                    "type": "boolean",
                    "description": "If true, all process activity will be audited.\n"
                },
                "auditBruteForceLogin": {
                    "type": "boolean",
                    "description": "Detects brute force login attempts\n"
                },
                "auditFullCommandArguments": {
                    "type": "boolean",
                    "description": "If true, full command arguments will be audited.\n"
                },
                "auditHostFailedLoginEvents": {
                    "type": "boolean",
                    "description": "If true, host failed logins will be audited.\n"
                },
                "auditHostSuccessfulLoginEvents": {
                    "type": "boolean",
                    "description": "If true, host successful logins will be audited.\n"
                },
                "auditUserAccountManagement": {
                    "type": "boolean",
                    "description": "If true, account management will be audited.\n"
                },
                "author": {
                    "type": "string",
                    "description": "Username of the account that created the service.\n"
                },
                "blockCryptocurrencyMining": {
                    "type": "boolean",
                    "description": "Detect and prevent communication to DNS/IP addresses known to be used for Cryptocurrency Mining\n"
                },
                "blockedFiles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of files that are prevented from being read, modified and executed in the containers.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the host runtime policy\n"
                },
                "enableIpReputationSecurity": {
                    "type": "boolean",
                    "description": "If true, detect and prevent communication from containers to IP addresses known to have a bad reputation.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Indicates if the runtime policy is enabled or not.\n"
                },
                "enforce": {
                    "type": "boolean",
                    "description": "Indicates that policy should effect container execution (not just for audit).\n"
                },
                "enforceAfterDays": {
                    "type": "integer",
                    "description": "Indicates the number of days after which the runtime policy will be changed to enforce mode.\n"
                },
                "fileIntegrityMonitoring": {
                    "$ref": "#/types/aquasec:index/HostRuntimePolicyFileIntegrityMonitoring:HostRuntimePolicyFileIntegrityMonitoring",
                    "description": "Configuration for file integrity monitoring.\n"
                },
                "malwareScanOptions": {
                    "$ref": "#/types/aquasec:index/HostRuntimePolicyMalwareScanOptions:HostRuntimePolicyMalwareScanOptions",
                    "description": "Configuration for Real-Time Malware Protection.\n"
                },
                "monitorSystemLogIntegrity": {
                    "type": "boolean",
                    "description": "If true, system log will be monitored.\n"
                },
                "monitorSystemTimeChanges": {
                    "type": "boolean",
                    "description": "If true, system time changes will be monitored.\n"
                },
                "monitorWindowsServices": {
                    "type": "boolean",
                    "description": "If true, windows service operations will be monitored.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the host runtime policy\n"
                },
                "osGroupsAlloweds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of OS (Linux or Windows) groups that are allowed to authenticate to the host, and block authentication requests from all others. Groups can be either Linux groups or Windows AD groups.\n"
                },
                "osGroupsBlockeds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of OS (Linux or Windows) groups that are not allowed to authenticate to the host, and block authentication requests from all others. Groups can be either Linux groups or Windows AD groups.\n"
                },
                "osUsersAlloweds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of OS (Linux or Windows) users that are allowed to authenticate to the host, and block authentication requests from all others.\n"
                },
                "osUsersBlockeds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of OS (Linux or Windows) users that are not allowed to authenticate to the host, and block authentication requests from all others.\n"
                },
                "packageBlocks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of packages that are not allowed read, write or execute all files that under the packages.\n"
                },
                "portScanningDetection": {
                    "type": "boolean",
                    "description": "If true, port scanning behaviors will be audited.\n"
                },
                "scopeExpression": {
                    "type": "string",
                    "description": "Logical expression of how to compute the dependency of the scope variables.\n"
                },
                "scopeVariables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/HostRuntimePolicyScopeVariable:HostRuntimePolicyScopeVariable"
                    },
                    "description": "List of scope attributes.\n"
                },
                "windowsRegistryMonitoring": {
                    "$ref": "#/types/aquasec:index/HostRuntimePolicyWindowsRegistryMonitoring:HostRuntimePolicyWindowsRegistryMonitoring",
                    "description": "Configuration for windows registry monitoring.\n"
                },
                "windowsRegistryProtection": {
                    "$ref": "#/types/aquasec:index/HostRuntimePolicyWindowsRegistryProtection:HostRuntimePolicyWindowsRegistryProtection",
                    "description": "Configuration for windows registry protection.\n"
                }
            },
            "required": [
                "applicationScopes",
                "author",
                "name",
                "scopeExpression",
                "scopeVariables"
            ],
            "inputProperties": {
                "applicationScopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Indicates the application scope of the service.\n"
                },
                "auditAllOsUserActivity": {
                    "type": "boolean",
                    "description": "If true, all process activity will be audited.\n"
                },
                "auditBruteForceLogin": {
                    "type": "boolean",
                    "description": "Detects brute force login attempts\n"
                },
                "auditFullCommandArguments": {
                    "type": "boolean",
                    "description": "If true, full command arguments will be audited.\n"
                },
                "auditHostFailedLoginEvents": {
                    "type": "boolean",
                    "description": "If true, host failed logins will be audited.\n"
                },
                "auditHostSuccessfulLoginEvents": {
                    "type": "boolean",
                    "description": "If true, host successful logins will be audited.\n"
                },
                "auditUserAccountManagement": {
                    "type": "boolean",
                    "description": "If true, account management will be audited.\n"
                },
                "blockCryptocurrencyMining": {
                    "type": "boolean",
                    "description": "Detect and prevent communication to DNS/IP addresses known to be used for Cryptocurrency Mining\n"
                },
                "blockedFiles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of files that are prevented from being read, modified and executed in the containers.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the host runtime policy\n"
                },
                "enableIpReputationSecurity": {
                    "type": "boolean",
                    "description": "If true, detect and prevent communication from containers to IP addresses known to have a bad reputation.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Indicates if the runtime policy is enabled or not.\n"
                },
                "enforce": {
                    "type": "boolean",
                    "description": "Indicates that policy should effect container execution (not just for audit).\n"
                },
                "enforceAfterDays": {
                    "type": "integer",
                    "description": "Indicates the number of days after which the runtime policy will be changed to enforce mode.\n"
                },
                "fileIntegrityMonitoring": {
                    "$ref": "#/types/aquasec:index/HostRuntimePolicyFileIntegrityMonitoring:HostRuntimePolicyFileIntegrityMonitoring",
                    "description": "Configuration for file integrity monitoring.\n"
                },
                "malwareScanOptions": {
                    "$ref": "#/types/aquasec:index/HostRuntimePolicyMalwareScanOptions:HostRuntimePolicyMalwareScanOptions",
                    "description": "Configuration for Real-Time Malware Protection.\n"
                },
                "monitorSystemLogIntegrity": {
                    "type": "boolean",
                    "description": "If true, system log will be monitored.\n"
                },
                "monitorSystemTimeChanges": {
                    "type": "boolean",
                    "description": "If true, system time changes will be monitored.\n"
                },
                "monitorWindowsServices": {
                    "type": "boolean",
                    "description": "If true, windows service operations will be monitored.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the host runtime policy\n",
                    "willReplaceOnChanges": true
                },
                "osGroupsAlloweds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of OS (Linux or Windows) groups that are allowed to authenticate to the host, and block authentication requests from all others. Groups can be either Linux groups or Windows AD groups.\n"
                },
                "osGroupsBlockeds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of OS (Linux or Windows) groups that are not allowed to authenticate to the host, and block authentication requests from all others. Groups can be either Linux groups or Windows AD groups.\n"
                },
                "osUsersAlloweds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of OS (Linux or Windows) users that are allowed to authenticate to the host, and block authentication requests from all others.\n"
                },
                "osUsersBlockeds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of OS (Linux or Windows) users that are not allowed to authenticate to the host, and block authentication requests from all others.\n"
                },
                "packageBlocks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of packages that are not allowed read, write or execute all files that under the packages.\n"
                },
                "portScanningDetection": {
                    "type": "boolean",
                    "description": "If true, port scanning behaviors will be audited.\n"
                },
                "scopeExpression": {
                    "type": "string",
                    "description": "Logical expression of how to compute the dependency of the scope variables.\n"
                },
                "scopeVariables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/HostRuntimePolicyScopeVariable:HostRuntimePolicyScopeVariable"
                    },
                    "description": "List of scope attributes.\n"
                },
                "windowsRegistryMonitoring": {
                    "$ref": "#/types/aquasec:index/HostRuntimePolicyWindowsRegistryMonitoring:HostRuntimePolicyWindowsRegistryMonitoring",
                    "description": "Configuration for windows registry monitoring.\n"
                },
                "windowsRegistryProtection": {
                    "$ref": "#/types/aquasec:index/HostRuntimePolicyWindowsRegistryProtection:HostRuntimePolicyWindowsRegistryProtection",
                    "description": "Configuration for windows registry protection.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering HostRuntimePolicy resources.\n",
                "properties": {
                    "applicationScopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Indicates the application scope of the service.\n"
                    },
                    "auditAllOsUserActivity": {
                        "type": "boolean",
                        "description": "If true, all process activity will be audited.\n"
                    },
                    "auditBruteForceLogin": {
                        "type": "boolean",
                        "description": "Detects brute force login attempts\n"
                    },
                    "auditFullCommandArguments": {
                        "type": "boolean",
                        "description": "If true, full command arguments will be audited.\n"
                    },
                    "auditHostFailedLoginEvents": {
                        "type": "boolean",
                        "description": "If true, host failed logins will be audited.\n"
                    },
                    "auditHostSuccessfulLoginEvents": {
                        "type": "boolean",
                        "description": "If true, host successful logins will be audited.\n"
                    },
                    "auditUserAccountManagement": {
                        "type": "boolean",
                        "description": "If true, account management will be audited.\n"
                    },
                    "author": {
                        "type": "string",
                        "description": "Username of the account that created the service.\n"
                    },
                    "blockCryptocurrencyMining": {
                        "type": "boolean",
                        "description": "Detect and prevent communication to DNS/IP addresses known to be used for Cryptocurrency Mining\n"
                    },
                    "blockedFiles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of files that are prevented from being read, modified and executed in the containers.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the host runtime policy\n"
                    },
                    "enableIpReputationSecurity": {
                        "type": "boolean",
                        "description": "If true, detect and prevent communication from containers to IP addresses known to have a bad reputation.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Indicates if the runtime policy is enabled or not.\n"
                    },
                    "enforce": {
                        "type": "boolean",
                        "description": "Indicates that policy should effect container execution (not just for audit).\n"
                    },
                    "enforceAfterDays": {
                        "type": "integer",
                        "description": "Indicates the number of days after which the runtime policy will be changed to enforce mode.\n"
                    },
                    "fileIntegrityMonitoring": {
                        "$ref": "#/types/aquasec:index/HostRuntimePolicyFileIntegrityMonitoring:HostRuntimePolicyFileIntegrityMonitoring",
                        "description": "Configuration for file integrity monitoring.\n"
                    },
                    "malwareScanOptions": {
                        "$ref": "#/types/aquasec:index/HostRuntimePolicyMalwareScanOptions:HostRuntimePolicyMalwareScanOptions",
                        "description": "Configuration for Real-Time Malware Protection.\n"
                    },
                    "monitorSystemLogIntegrity": {
                        "type": "boolean",
                        "description": "If true, system log will be monitored.\n"
                    },
                    "monitorSystemTimeChanges": {
                        "type": "boolean",
                        "description": "If true, system time changes will be monitored.\n"
                    },
                    "monitorWindowsServices": {
                        "type": "boolean",
                        "description": "If true, windows service operations will be monitored.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the host runtime policy\n",
                        "willReplaceOnChanges": true
                    },
                    "osGroupsAlloweds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of OS (Linux or Windows) groups that are allowed to authenticate to the host, and block authentication requests from all others. Groups can be either Linux groups or Windows AD groups.\n"
                    },
                    "osGroupsBlockeds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of OS (Linux or Windows) groups that are not allowed to authenticate to the host, and block authentication requests from all others. Groups can be either Linux groups or Windows AD groups.\n"
                    },
                    "osUsersAlloweds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of OS (Linux or Windows) users that are allowed to authenticate to the host, and block authentication requests from all others.\n"
                    },
                    "osUsersBlockeds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of OS (Linux or Windows) users that are not allowed to authenticate to the host, and block authentication requests from all others.\n"
                    },
                    "packageBlocks": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of packages that are not allowed read, write or execute all files that under the packages.\n"
                    },
                    "portScanningDetection": {
                        "type": "boolean",
                        "description": "If true, port scanning behaviors will be audited.\n"
                    },
                    "scopeExpression": {
                        "type": "string",
                        "description": "Logical expression of how to compute the dependency of the scope variables.\n"
                    },
                    "scopeVariables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/HostRuntimePolicyScopeVariable:HostRuntimePolicyScopeVariable"
                        },
                        "description": "List of scope attributes.\n"
                    },
                    "windowsRegistryMonitoring": {
                        "$ref": "#/types/aquasec:index/HostRuntimePolicyWindowsRegistryMonitoring:HostRuntimePolicyWindowsRegistryMonitoring",
                        "description": "Configuration for windows registry monitoring.\n"
                    },
                    "windowsRegistryProtection": {
                        "$ref": "#/types/aquasec:index/HostRuntimePolicyWindowsRegistryProtection:HostRuntimePolicyWindowsRegistryProtection",
                        "description": "Configuration for windows registry protection.\n"
                    }
                },
                "type": "object"
            }
        },
        "aquasec:index/image:Image": {
            "properties": {
                "allowImage": {
                    "type": "boolean",
                    "description": "If this field is set to true, the image will be whitelisted.\n"
                },
                "architecture": {
                    "type": "string",
                    "description": "The image architecture.\n"
                },
                "assuranceChecksPerformeds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/ImageAssuranceChecksPerformed:ImageAssuranceChecksPerformed"
                    },
                    "description": "The list of image assurance checks performed on the image.\n"
                },
                "author": {
                    "type": "string",
                    "description": "The name of the user who registered the image.\n"
                },
                "blacklisted": {
                    "type": "boolean",
                    "description": "Whether the image is blacklisted.\n"
                },
                "blockImage": {
                    "type": "boolean",
                    "description": "If this field is set to true, the image will be blacklisted.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "The image creation comment.\n"
                },
                "created": {
                    "type": "string",
                    "description": "The date and time when the image was registered.\n"
                },
                "criticalVulnerabilities": {
                    "type": "integer",
                    "description": "Number of critical severity vulnerabilities detected in the image.\n"
                },
                "defaultUser": {
                    "type": "string",
                    "description": "The default user of the image.\n"
                },
                "digest": {
                    "type": "string",
                    "description": "The content digest of the image.\n"
                },
                "disallowed": {
                    "type": "boolean",
                    "description": "Whether the image is disallowed (non-compliant).\n"
                },
                "disallowedByAssuranceChecks": {
                    "type": "boolean",
                    "description": "Whether the image was disallowed because of Image Assurance Policies.\n"
                },
                "dockerId": {
                    "type": "string",
                    "description": "The Docker image ID.\n"
                },
                "dockerLabels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Docker labels of the image.\n"
                },
                "dockerVersion": {
                    "type": "string",
                    "description": "The Docker version used when building the image.\n"
                },
                "dtaSeverityScore": {
                    "type": "string",
                    "description": "DTA severity score.\n"
                },
                "dtaSkipped": {
                    "type": "boolean",
                    "description": "If DTA was skipped.\n"
                },
                "dtaSkippedReason": {
                    "type": "string",
                    "description": "The reason why DTA was skipped.\n"
                },
                "environmentVariables": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Environment variables in the image.\n"
                },
                "highVulnerabilities": {
                    "type": "integer",
                    "description": "Number of high severity vulnerabilities detected in the image.\n"
                },
                "histories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/ImageHistory:ImageHistory"
                    },
                    "description": "The Docker history of the image.\n"
                },
                "imageSize": {
                    "type": "integer",
                    "description": "The size of the image in bytes.\n"
                },
                "imageType": {
                    "type": "string",
                    "description": "The type of the image.\n"
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Aqua labels of the image.\n"
                },
                "lowVulnerabilities": {
                    "type": "integer",
                    "description": "Number of low severity vulnerabilities detected in the image.\n"
                },
                "malware": {
                    "type": "integer",
                    "description": "Number of malware found on the image.\n"
                },
                "mediumVulnerabilities": {
                    "type": "integer",
                    "description": "Number of medium severity vulnerabilities detected in the image.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the image.\n"
                },
                "negligibleVulnerabilities": {
                    "type": "integer",
                    "description": "Number of negligible severity vulnerabilities detected in the image.\n"
                },
                "newerImageExists": {
                    "type": "boolean",
                    "description": "Whether a new version of the image is available in the registry but is not scanned and registered yet.\n"
                },
                "os": {
                    "type": "string",
                    "description": "The operating system detected in the image\n"
                },
                "osVersion": {
                    "type": "string",
                    "description": "The version of the OS detected in the image.\n"
                },
                "parent": {
                    "type": "string",
                    "description": "The ID of the parent image.\n"
                },
                "partialResults": {
                    "type": "boolean",
                    "description": "Whether the image could only be partially scanned.\n"
                },
                "pendingDisallowed": {
                    "type": "boolean",
                    "description": "Whether the image is non-compliant, but is pending this status due to running containers.\n"
                },
                "permission": {
                    "type": "string",
                    "description": "Permission of the image.\n"
                },
                "permissionAuthor": {
                    "type": "string",
                    "description": "The name of the user who last modified the image permissions.\n"
                },
                "permissionComment": {
                    "type": "string",
                    "description": "The comment provided when the image permissions were last modified\n"
                },
                "permissionModificationComment": {
                    "type": "string",
                    "description": "A comment on why the image was whitelisted or blacklisted\n"
                },
                "registry": {
                    "type": "string",
                    "description": "The name of the registry where the image is stored.\n"
                },
                "registryType": {
                    "type": "string",
                    "description": "Type of the registry.\n"
                },
                "repoDigests": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The repository digests.\n"
                },
                "repository": {
                    "type": "string",
                    "description": "The name of the image's repository.\n"
                },
                "scanDate": {
                    "type": "string",
                    "description": "The date and time when the image was last scanned.\n"
                },
                "scanError": {
                    "type": "string",
                    "description": "If the image scan failed, the failure message.\n"
                },
                "scanStatus": {
                    "type": "string",
                    "description": "The scan status of the image (either 'pending', 'in*progress', 'finished', 'failed' or 'not*started').\n"
                },
                "sensitiveData": {
                    "type": "integer",
                    "description": "Number of sensitive data detected in the image.\n"
                },
                "tag": {
                    "type": "string",
                    "description": "The tag of the image.\n"
                },
                "totalVulnerabilities": {
                    "type": "integer",
                    "description": "The total number of vulnerabilities detected in the image.\n"
                },
                "virtualSize": {
                    "type": "integer",
                    "description": "The virtual size of the image.\n"
                },
                "vulnerabilities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/ImageVulnerability:ImageVulnerability"
                    },
                    "description": "A list of all the vulnerabilities found in the image\n"
                },
                "whitelisted": {
                    "type": "boolean",
                    "description": "Whether the image is whitelisted.\n"
                }
            },
            "required": [
                "architecture",
                "assuranceChecksPerformeds",
                "author",
                "blacklisted",
                "comment",
                "created",
                "criticalVulnerabilities",
                "defaultUser",
                "digest",
                "disallowed",
                "disallowedByAssuranceChecks",
                "dockerId",
                "dockerLabels",
                "dockerVersion",
                "dtaSeverityScore",
                "dtaSkipped",
                "dtaSkippedReason",
                "environmentVariables",
                "highVulnerabilities",
                "histories",
                "imageSize",
                "imageType",
                "labels",
                "lowVulnerabilities",
                "malware",
                "mediumVulnerabilities",
                "name",
                "negligibleVulnerabilities",
                "newerImageExists",
                "os",
                "osVersion",
                "parent",
                "partialResults",
                "pendingDisallowed",
                "permission",
                "permissionAuthor",
                "permissionComment",
                "registry",
                "registryType",
                "repoDigests",
                "repository",
                "scanDate",
                "scanError",
                "scanStatus",
                "sensitiveData",
                "tag",
                "totalVulnerabilities",
                "virtualSize",
                "vulnerabilities",
                "whitelisted"
            ],
            "inputProperties": {
                "allowImage": {
                    "type": "boolean",
                    "description": "If this field is set to true, the image will be whitelisted.\n"
                },
                "blockImage": {
                    "type": "boolean",
                    "description": "If this field is set to true, the image will be blacklisted.\n"
                },
                "permissionModificationComment": {
                    "type": "string",
                    "description": "A comment on why the image was whitelisted or blacklisted\n"
                },
                "registry": {
                    "type": "string",
                    "description": "The name of the registry where the image is stored.\n",
                    "willReplaceOnChanges": true
                },
                "repository": {
                    "type": "string",
                    "description": "The name of the image's repository.\n",
                    "willReplaceOnChanges": true
                },
                "tag": {
                    "type": "string",
                    "description": "The tag of the image.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "registry",
                "repository",
                "tag"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Image resources.\n",
                "properties": {
                    "allowImage": {
                        "type": "boolean",
                        "description": "If this field is set to true, the image will be whitelisted.\n"
                    },
                    "architecture": {
                        "type": "string",
                        "description": "The image architecture.\n"
                    },
                    "assuranceChecksPerformeds": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/ImageAssuranceChecksPerformed:ImageAssuranceChecksPerformed"
                        },
                        "description": "The list of image assurance checks performed on the image.\n"
                    },
                    "author": {
                        "type": "string",
                        "description": "The name of the user who registered the image.\n"
                    },
                    "blacklisted": {
                        "type": "boolean",
                        "description": "Whether the image is blacklisted.\n"
                    },
                    "blockImage": {
                        "type": "boolean",
                        "description": "If this field is set to true, the image will be blacklisted.\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "The image creation comment.\n"
                    },
                    "created": {
                        "type": "string",
                        "description": "The date and time when the image was registered.\n"
                    },
                    "criticalVulnerabilities": {
                        "type": "integer",
                        "description": "Number of critical severity vulnerabilities detected in the image.\n"
                    },
                    "defaultUser": {
                        "type": "string",
                        "description": "The default user of the image.\n"
                    },
                    "digest": {
                        "type": "string",
                        "description": "The content digest of the image.\n"
                    },
                    "disallowed": {
                        "type": "boolean",
                        "description": "Whether the image is disallowed (non-compliant).\n"
                    },
                    "disallowedByAssuranceChecks": {
                        "type": "boolean",
                        "description": "Whether the image was disallowed because of Image Assurance Policies.\n"
                    },
                    "dockerId": {
                        "type": "string",
                        "description": "The Docker image ID.\n"
                    },
                    "dockerLabels": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Docker labels of the image.\n"
                    },
                    "dockerVersion": {
                        "type": "string",
                        "description": "The Docker version used when building the image.\n"
                    },
                    "dtaSeverityScore": {
                        "type": "string",
                        "description": "DTA severity score.\n"
                    },
                    "dtaSkipped": {
                        "type": "boolean",
                        "description": "If DTA was skipped.\n"
                    },
                    "dtaSkippedReason": {
                        "type": "string",
                        "description": "The reason why DTA was skipped.\n"
                    },
                    "environmentVariables": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Environment variables in the image.\n"
                    },
                    "highVulnerabilities": {
                        "type": "integer",
                        "description": "Number of high severity vulnerabilities detected in the image.\n"
                    },
                    "histories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/ImageHistory:ImageHistory"
                        },
                        "description": "The Docker history of the image.\n"
                    },
                    "imageSize": {
                        "type": "integer",
                        "description": "The size of the image in bytes.\n"
                    },
                    "imageType": {
                        "type": "string",
                        "description": "The type of the image.\n"
                    },
                    "labels": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Aqua labels of the image.\n"
                    },
                    "lowVulnerabilities": {
                        "type": "integer",
                        "description": "Number of low severity vulnerabilities detected in the image.\n"
                    },
                    "malware": {
                        "type": "integer",
                        "description": "Number of malware found on the image.\n"
                    },
                    "mediumVulnerabilities": {
                        "type": "integer",
                        "description": "Number of medium severity vulnerabilities detected in the image.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the image.\n"
                    },
                    "negligibleVulnerabilities": {
                        "type": "integer",
                        "description": "Number of negligible severity vulnerabilities detected in the image.\n"
                    },
                    "newerImageExists": {
                        "type": "boolean",
                        "description": "Whether a new version of the image is available in the registry but is not scanned and registered yet.\n"
                    },
                    "os": {
                        "type": "string",
                        "description": "The operating system detected in the image\n"
                    },
                    "osVersion": {
                        "type": "string",
                        "description": "The version of the OS detected in the image.\n"
                    },
                    "parent": {
                        "type": "string",
                        "description": "The ID of the parent image.\n"
                    },
                    "partialResults": {
                        "type": "boolean",
                        "description": "Whether the image could only be partially scanned.\n"
                    },
                    "pendingDisallowed": {
                        "type": "boolean",
                        "description": "Whether the image is non-compliant, but is pending this status due to running containers.\n"
                    },
                    "permission": {
                        "type": "string",
                        "description": "Permission of the image.\n"
                    },
                    "permissionAuthor": {
                        "type": "string",
                        "description": "The name of the user who last modified the image permissions.\n"
                    },
                    "permissionComment": {
                        "type": "string",
                        "description": "The comment provided when the image permissions were last modified\n"
                    },
                    "permissionModificationComment": {
                        "type": "string",
                        "description": "A comment on why the image was whitelisted or blacklisted\n"
                    },
                    "registry": {
                        "type": "string",
                        "description": "The name of the registry where the image is stored.\n",
                        "willReplaceOnChanges": true
                    },
                    "registryType": {
                        "type": "string",
                        "description": "Type of the registry.\n"
                    },
                    "repoDigests": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The repository digests.\n"
                    },
                    "repository": {
                        "type": "string",
                        "description": "The name of the image's repository.\n",
                        "willReplaceOnChanges": true
                    },
                    "scanDate": {
                        "type": "string",
                        "description": "The date and time when the image was last scanned.\n"
                    },
                    "scanError": {
                        "type": "string",
                        "description": "If the image scan failed, the failure message.\n"
                    },
                    "scanStatus": {
                        "type": "string",
                        "description": "The scan status of the image (either 'pending', 'in*progress', 'finished', 'failed' or 'not*started').\n"
                    },
                    "sensitiveData": {
                        "type": "integer",
                        "description": "Number of sensitive data detected in the image.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "The tag of the image.\n",
                        "willReplaceOnChanges": true
                    },
                    "totalVulnerabilities": {
                        "type": "integer",
                        "description": "The total number of vulnerabilities detected in the image.\n"
                    },
                    "virtualSize": {
                        "type": "integer",
                        "description": "The virtual size of the image.\n"
                    },
                    "vulnerabilities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/ImageVulnerability:ImageVulnerability"
                        },
                        "description": "A list of all the vulnerabilities found in the image\n"
                    },
                    "whitelisted": {
                        "type": "boolean",
                        "description": "Whether the image is whitelisted.\n"
                    }
                },
                "type": "object"
            }
        },
        "aquasec:index/imageAssurancePolicy:ImageAssurancePolicy": {
            "properties": {
                "allowedImages": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of explicitly allowed images.\n"
                },
                "applicationScopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "auditOnFailure": {
                    "type": "boolean",
                    "description": "Indicates if auditing for failures.\n"
                },
                "author": {
                    "type": "string",
                    "description": "Name of user account that created the policy.\n"
                },
                "autoScanConfigured": {
                    "type": "boolean"
                },
                "autoScanEnabled": {
                    "type": "boolean"
                },
                "autoScanTimes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/ImageAssurancePolicyAutoScanTime:ImageAssurancePolicyAutoScanTime"
                    }
                },
                "blacklistPermissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of function's forbidden permissions.\n"
                },
                "blacklistPermissionsEnabled": {
                    "type": "boolean",
                    "description": "Indicates if blacklist permissions is relevant.\n"
                },
                "blacklistedLicenses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of blacklisted licenses.\n"
                },
                "blacklistedLicensesEnabled": {
                    "type": "boolean",
                    "description": "Lndicates if license blacklist is relevant.\n"
                },
                "blockFailed": {
                    "type": "boolean",
                    "description": "Indicates if failed images are blocked.\n"
                },
                "controlExcludeNoFix": {
                    "type": "boolean"
                },
                "customChecks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/ImageAssurancePolicyCustomCheck:ImageAssurancePolicyCustomCheck"
                    },
                    "description": "List of Custom user scripts for checks.\n"
                },
                "customChecksEnabled": {
                    "type": "boolean",
                    "description": "Indicates if scanning should include custom checks.\n"
                },
                "customSeverityEnabled": {
                    "type": "boolean"
                },
                "cvesBlackListEnabled": {
                    "type": "boolean",
                    "description": "Indicates if cves blacklist is relevant.\n"
                },
                "cvesBlackLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of cves blacklisted items.\n"
                },
                "cvesWhiteListEnabled": {
                    "type": "boolean",
                    "description": "Indicates if cves whitelist is relevant.\n"
                },
                "cvesWhiteLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of cves whitelisted licenses\n"
                },
                "cvssSeverity": {
                    "type": "string",
                    "description": "Identifier of the cvss severity.\n"
                },
                "cvssSeverityEnabled": {
                    "type": "boolean",
                    "description": "Indicates if the cvss severity is scanned.\n"
                },
                "cvssSeverityExcludeNoFix": {
                    "type": "boolean",
                    "description": "Indicates that policy should ignore cvss cases that do not have a known fix.\n"
                },
                "description": {
                    "type": "string"
                },
                "disallowMalware": {
                    "type": "boolean",
                    "description": "Indicates if malware should block the image.\n"
                },
                "dockerCisEnabled": {
                    "type": "boolean"
                },
                "domain": {
                    "type": "string",
                    "description": "Name of the container image.\n"
                },
                "domainName": {
                    "type": "string"
                },
                "dtaEnabled": {
                    "type": "boolean"
                },
                "dtaSeverity": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "enforce": {
                    "type": "boolean"
                },
                "enforceAfterDays": {
                    "type": "integer"
                },
                "enforceExcessivePermissions": {
                    "type": "boolean"
                },
                "exceptionalMonitoredMalwarePaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "failCicd": {
                    "type": "boolean",
                    "description": "Indicates if cicd failures will fail the image.\n"
                },
                "forbiddenLabels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/ImageAssurancePolicyForbiddenLabel:ImageAssurancePolicyForbiddenLabel"
                    }
                },
                "forbiddenLabelsEnabled": {
                    "type": "boolean"
                },
                "forceMicroenforcer": {
                    "type": "boolean"
                },
                "functionIntegrityEnabled": {
                    "type": "boolean"
                },
                "ignoreRecentlyPublishedVln": {
                    "type": "boolean"
                },
                "ignoreRecentlyPublishedVlnPeriod": {
                    "type": "integer"
                },
                "ignoreRiskResourcesEnabled": {
                    "type": "boolean",
                    "description": "Indicates if risk resources are ignored.\n"
                },
                "ignoredRiskResources": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of ignored risk resources.\n"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of images.\n"
                },
                "kubeCisEnabled": {
                    "type": "boolean"
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of labels.\n"
                },
                "malwareAction": {
                    "type": "string"
                },
                "maximumScore": {
                    "type": "number",
                    "description": "Value of allowed maximum score.\n"
                },
                "maximumScoreEnabled": {
                    "type": "boolean",
                    "description": "Indicates if exceeding the maximum score is scanned.\n"
                },
                "maximumScoreExcludeNoFix": {
                    "type": "boolean",
                    "description": "Indicates that policy should ignore cases that do not have a known fix.\n"
                },
                "monitoredMalwarePaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "onlyNoneRootUsers": {
                    "type": "boolean",
                    "description": "Indicates if raise a warning for images that should only be run as root.\n"
                },
                "packagesBlackListEnabled": {
                    "type": "boolean",
                    "description": "Indicates if packages blacklist is relevant.\n"
                },
                "packagesBlackLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/ImageAssurancePolicyPackagesBlackList:ImageAssurancePolicyPackagesBlackList"
                    },
                    "description": "List of backlisted images.\n"
                },
                "packagesWhiteListEnabled": {
                    "type": "boolean",
                    "description": "Indicates if packages whitelist is relevant.\n"
                },
                "packagesWhiteLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/ImageAssurancePolicyPackagesWhiteList:ImageAssurancePolicyPackagesWhiteList"
                    },
                    "description": "List of whitelisted images.\n"
                },
                "partialResultsImageFail": {
                    "type": "boolean"
                },
                "readOnly": {
                    "type": "boolean"
                },
                "registries": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of registries.\n"
                },
                "registry": {
                    "type": "string"
                },
                "requiredLabels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/ImageAssurancePolicyRequiredLabel:ImageAssurancePolicyRequiredLabel"
                    }
                },
                "requiredLabelsEnabled": {
                    "type": "boolean"
                },
                "scanNfsMounts": {
                    "type": "boolean"
                },
                "scanSensitiveData": {
                    "type": "boolean",
                    "description": "Indicates if scan should include sensitive data in the image.\n"
                },
                "scapEnabled": {
                    "type": "boolean",
                    "description": "Indicates if scanning should include scap.\n"
                },
                "scapFiles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of SCAP user scripts for checks.\n"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/ImageAssurancePolicyScope:ImageAssurancePolicyScope"
                    }
                },
                "trustedBaseImages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/ImageAssurancePolicyTrustedBaseImage:ImageAssurancePolicyTrustedBaseImage"
                    },
                    "description": "List of trusted images.\n"
                },
                "trustedBaseImagesEnabled": {
                    "type": "boolean",
                    "description": "Indicates if list of trusted base images is relevant.\n"
                },
                "whitelistedLicenses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of whitelisted licenses.\n"
                },
                "whitelistedLicensesEnabled": {
                    "type": "boolean",
                    "description": "Indicates if license blacklist is relevant.\n"
                }
            },
            "required": [
                "applicationScopes",
                "author",
                "autoScanTimes",
                "ignoreRecentlyPublishedVlnPeriod",
                "name",
                "scopes"
            ],
            "inputProperties": {
                "allowedImages": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of explicitly allowed images.\n"
                },
                "applicationScopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "auditOnFailure": {
                    "type": "boolean",
                    "description": "Indicates if auditing for failures.\n"
                },
                "autoScanConfigured": {
                    "type": "boolean"
                },
                "autoScanEnabled": {
                    "type": "boolean"
                },
                "autoScanTimes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/ImageAssurancePolicyAutoScanTime:ImageAssurancePolicyAutoScanTime"
                    }
                },
                "blacklistPermissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of function's forbidden permissions.\n"
                },
                "blacklistPermissionsEnabled": {
                    "type": "boolean",
                    "description": "Indicates if blacklist permissions is relevant.\n"
                },
                "blacklistedLicenses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of blacklisted licenses.\n"
                },
                "blacklistedLicensesEnabled": {
                    "type": "boolean",
                    "description": "Lndicates if license blacklist is relevant.\n"
                },
                "blockFailed": {
                    "type": "boolean",
                    "description": "Indicates if failed images are blocked.\n"
                },
                "controlExcludeNoFix": {
                    "type": "boolean"
                },
                "customChecks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/ImageAssurancePolicyCustomCheck:ImageAssurancePolicyCustomCheck"
                    },
                    "description": "List of Custom user scripts for checks.\n"
                },
                "customChecksEnabled": {
                    "type": "boolean",
                    "description": "Indicates if scanning should include custom checks.\n"
                },
                "customSeverityEnabled": {
                    "type": "boolean"
                },
                "cvesBlackListEnabled": {
                    "type": "boolean",
                    "description": "Indicates if cves blacklist is relevant.\n"
                },
                "cvesBlackLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of cves blacklisted items.\n"
                },
                "cvesWhiteListEnabled": {
                    "type": "boolean",
                    "description": "Indicates if cves whitelist is relevant.\n"
                },
                "cvesWhiteLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of cves whitelisted licenses\n"
                },
                "cvssSeverity": {
                    "type": "string",
                    "description": "Identifier of the cvss severity.\n"
                },
                "cvssSeverityEnabled": {
                    "type": "boolean",
                    "description": "Indicates if the cvss severity is scanned.\n"
                },
                "cvssSeverityExcludeNoFix": {
                    "type": "boolean",
                    "description": "Indicates that policy should ignore cvss cases that do not have a known fix.\n"
                },
                "description": {
                    "type": "string"
                },
                "disallowMalware": {
                    "type": "boolean",
                    "description": "Indicates if malware should block the image.\n"
                },
                "dockerCisEnabled": {
                    "type": "boolean"
                },
                "domain": {
                    "type": "string",
                    "description": "Name of the container image.\n"
                },
                "domainName": {
                    "type": "string"
                },
                "dtaEnabled": {
                    "type": "boolean"
                },
                "dtaSeverity": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "enforce": {
                    "type": "boolean"
                },
                "enforceAfterDays": {
                    "type": "integer"
                },
                "enforceExcessivePermissions": {
                    "type": "boolean"
                },
                "exceptionalMonitoredMalwarePaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "failCicd": {
                    "type": "boolean",
                    "description": "Indicates if cicd failures will fail the image.\n"
                },
                "forbiddenLabels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/ImageAssurancePolicyForbiddenLabel:ImageAssurancePolicyForbiddenLabel"
                    }
                },
                "forbiddenLabelsEnabled": {
                    "type": "boolean"
                },
                "forceMicroenforcer": {
                    "type": "boolean"
                },
                "functionIntegrityEnabled": {
                    "type": "boolean"
                },
                "ignoreRecentlyPublishedVln": {
                    "type": "boolean"
                },
                "ignoreRiskResourcesEnabled": {
                    "type": "boolean",
                    "description": "Indicates if risk resources are ignored.\n"
                },
                "ignoredRiskResources": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of ignored risk resources.\n"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of images.\n"
                },
                "kubeCisEnabled": {
                    "type": "boolean"
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of labels.\n"
                },
                "malwareAction": {
                    "type": "string"
                },
                "maximumScore": {
                    "type": "number",
                    "description": "Value of allowed maximum score.\n"
                },
                "maximumScoreEnabled": {
                    "type": "boolean",
                    "description": "Indicates if exceeding the maximum score is scanned.\n"
                },
                "maximumScoreExcludeNoFix": {
                    "type": "boolean",
                    "description": "Indicates that policy should ignore cases that do not have a known fix.\n"
                },
                "monitoredMalwarePaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "onlyNoneRootUsers": {
                    "type": "boolean",
                    "description": "Indicates if raise a warning for images that should only be run as root.\n"
                },
                "packagesBlackListEnabled": {
                    "type": "boolean",
                    "description": "Indicates if packages blacklist is relevant.\n"
                },
                "packagesBlackLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/ImageAssurancePolicyPackagesBlackList:ImageAssurancePolicyPackagesBlackList"
                    },
                    "description": "List of backlisted images.\n"
                },
                "packagesWhiteListEnabled": {
                    "type": "boolean",
                    "description": "Indicates if packages whitelist is relevant.\n"
                },
                "packagesWhiteLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/ImageAssurancePolicyPackagesWhiteList:ImageAssurancePolicyPackagesWhiteList"
                    },
                    "description": "List of whitelisted images.\n"
                },
                "partialResultsImageFail": {
                    "type": "boolean"
                },
                "readOnly": {
                    "type": "boolean"
                },
                "registries": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of registries.\n"
                },
                "registry": {
                    "type": "string"
                },
                "requiredLabels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/ImageAssurancePolicyRequiredLabel:ImageAssurancePolicyRequiredLabel"
                    }
                },
                "requiredLabelsEnabled": {
                    "type": "boolean"
                },
                "scanNfsMounts": {
                    "type": "boolean"
                },
                "scanSensitiveData": {
                    "type": "boolean",
                    "description": "Indicates if scan should include sensitive data in the image.\n"
                },
                "scapEnabled": {
                    "type": "boolean",
                    "description": "Indicates if scanning should include scap.\n"
                },
                "scapFiles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of SCAP user scripts for checks.\n"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/ImageAssurancePolicyScope:ImageAssurancePolicyScope"
                    }
                },
                "trustedBaseImages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/ImageAssurancePolicyTrustedBaseImage:ImageAssurancePolicyTrustedBaseImage"
                    },
                    "description": "List of trusted images.\n"
                },
                "trustedBaseImagesEnabled": {
                    "type": "boolean",
                    "description": "Indicates if list of trusted base images is relevant.\n"
                },
                "whitelistedLicenses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of whitelisted licenses.\n"
                },
                "whitelistedLicensesEnabled": {
                    "type": "boolean",
                    "description": "Indicates if license blacklist is relevant.\n"
                }
            },
            "requiredInputs": [
                "applicationScopes"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ImageAssurancePolicy resources.\n",
                "properties": {
                    "allowedImages": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of explicitly allowed images.\n"
                    },
                    "applicationScopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "auditOnFailure": {
                        "type": "boolean",
                        "description": "Indicates if auditing for failures.\n"
                    },
                    "author": {
                        "type": "string",
                        "description": "Name of user account that created the policy.\n"
                    },
                    "autoScanConfigured": {
                        "type": "boolean"
                    },
                    "autoScanEnabled": {
                        "type": "boolean"
                    },
                    "autoScanTimes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/ImageAssurancePolicyAutoScanTime:ImageAssurancePolicyAutoScanTime"
                        }
                    },
                    "blacklistPermissions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of function's forbidden permissions.\n"
                    },
                    "blacklistPermissionsEnabled": {
                        "type": "boolean",
                        "description": "Indicates if blacklist permissions is relevant.\n"
                    },
                    "blacklistedLicenses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of blacklisted licenses.\n"
                    },
                    "blacklistedLicensesEnabled": {
                        "type": "boolean",
                        "description": "Lndicates if license blacklist is relevant.\n"
                    },
                    "blockFailed": {
                        "type": "boolean",
                        "description": "Indicates if failed images are blocked.\n"
                    },
                    "controlExcludeNoFix": {
                        "type": "boolean"
                    },
                    "customChecks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/ImageAssurancePolicyCustomCheck:ImageAssurancePolicyCustomCheck"
                        },
                        "description": "List of Custom user scripts for checks.\n"
                    },
                    "customChecksEnabled": {
                        "type": "boolean",
                        "description": "Indicates if scanning should include custom checks.\n"
                    },
                    "customSeverityEnabled": {
                        "type": "boolean"
                    },
                    "cvesBlackListEnabled": {
                        "type": "boolean",
                        "description": "Indicates if cves blacklist is relevant.\n"
                    },
                    "cvesBlackLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of cves blacklisted items.\n"
                    },
                    "cvesWhiteListEnabled": {
                        "type": "boolean",
                        "description": "Indicates if cves whitelist is relevant.\n"
                    },
                    "cvesWhiteLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of cves whitelisted licenses\n"
                    },
                    "cvssSeverity": {
                        "type": "string",
                        "description": "Identifier of the cvss severity.\n"
                    },
                    "cvssSeverityEnabled": {
                        "type": "boolean",
                        "description": "Indicates if the cvss severity is scanned.\n"
                    },
                    "cvssSeverityExcludeNoFix": {
                        "type": "boolean",
                        "description": "Indicates that policy should ignore cvss cases that do not have a known fix.\n"
                    },
                    "description": {
                        "type": "string"
                    },
                    "disallowMalware": {
                        "type": "boolean",
                        "description": "Indicates if malware should block the image.\n"
                    },
                    "dockerCisEnabled": {
                        "type": "boolean"
                    },
                    "domain": {
                        "type": "string",
                        "description": "Name of the container image.\n"
                    },
                    "domainName": {
                        "type": "string"
                    },
                    "dtaEnabled": {
                        "type": "boolean"
                    },
                    "dtaSeverity": {
                        "type": "string"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "enforce": {
                        "type": "boolean"
                    },
                    "enforceAfterDays": {
                        "type": "integer"
                    },
                    "enforceExcessivePermissions": {
                        "type": "boolean"
                    },
                    "exceptionalMonitoredMalwarePaths": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "failCicd": {
                        "type": "boolean",
                        "description": "Indicates if cicd failures will fail the image.\n"
                    },
                    "forbiddenLabels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/ImageAssurancePolicyForbiddenLabel:ImageAssurancePolicyForbiddenLabel"
                        }
                    },
                    "forbiddenLabelsEnabled": {
                        "type": "boolean"
                    },
                    "forceMicroenforcer": {
                        "type": "boolean"
                    },
                    "functionIntegrityEnabled": {
                        "type": "boolean"
                    },
                    "ignoreRecentlyPublishedVln": {
                        "type": "boolean"
                    },
                    "ignoreRecentlyPublishedVlnPeriod": {
                        "type": "integer"
                    },
                    "ignoreRiskResourcesEnabled": {
                        "type": "boolean",
                        "description": "Indicates if risk resources are ignored.\n"
                    },
                    "ignoredRiskResources": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of ignored risk resources.\n"
                    },
                    "images": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of images.\n"
                    },
                    "kubeCisEnabled": {
                        "type": "boolean"
                    },
                    "labels": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of labels.\n"
                    },
                    "malwareAction": {
                        "type": "string"
                    },
                    "maximumScore": {
                        "type": "number",
                        "description": "Value of allowed maximum score.\n"
                    },
                    "maximumScoreEnabled": {
                        "type": "boolean",
                        "description": "Indicates if exceeding the maximum score is scanned.\n"
                    },
                    "maximumScoreExcludeNoFix": {
                        "type": "boolean",
                        "description": "Indicates that policy should ignore cases that do not have a known fix.\n"
                    },
                    "monitoredMalwarePaths": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "onlyNoneRootUsers": {
                        "type": "boolean",
                        "description": "Indicates if raise a warning for images that should only be run as root.\n"
                    },
                    "packagesBlackListEnabled": {
                        "type": "boolean",
                        "description": "Indicates if packages blacklist is relevant.\n"
                    },
                    "packagesBlackLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/ImageAssurancePolicyPackagesBlackList:ImageAssurancePolicyPackagesBlackList"
                        },
                        "description": "List of backlisted images.\n"
                    },
                    "packagesWhiteListEnabled": {
                        "type": "boolean",
                        "description": "Indicates if packages whitelist is relevant.\n"
                    },
                    "packagesWhiteLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/ImageAssurancePolicyPackagesWhiteList:ImageAssurancePolicyPackagesWhiteList"
                        },
                        "description": "List of whitelisted images.\n"
                    },
                    "partialResultsImageFail": {
                        "type": "boolean"
                    },
                    "readOnly": {
                        "type": "boolean"
                    },
                    "registries": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of registries.\n"
                    },
                    "registry": {
                        "type": "string"
                    },
                    "requiredLabels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/ImageAssurancePolicyRequiredLabel:ImageAssurancePolicyRequiredLabel"
                        }
                    },
                    "requiredLabelsEnabled": {
                        "type": "boolean"
                    },
                    "scanNfsMounts": {
                        "type": "boolean"
                    },
                    "scanSensitiveData": {
                        "type": "boolean",
                        "description": "Indicates if scan should include sensitive data in the image.\n"
                    },
                    "scapEnabled": {
                        "type": "boolean",
                        "description": "Indicates if scanning should include scap.\n"
                    },
                    "scapFiles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of SCAP user scripts for checks.\n"
                    },
                    "scopes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/ImageAssurancePolicyScope:ImageAssurancePolicyScope"
                        }
                    },
                    "trustedBaseImages": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/ImageAssurancePolicyTrustedBaseImage:ImageAssurancePolicyTrustedBaseImage"
                        },
                        "description": "List of trusted images.\n"
                    },
                    "trustedBaseImagesEnabled": {
                        "type": "boolean",
                        "description": "Indicates if list of trusted base images is relevant.\n"
                    },
                    "whitelistedLicenses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of whitelisted licenses.\n"
                    },
                    "whitelistedLicensesEnabled": {
                        "type": "boolean",
                        "description": "Indicates if license blacklist is relevant.\n"
                    }
                },
                "type": "object"
            }
        },
        "aquasec:index/integrationRegistry:IntegrationRegistry": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aquasec.IntegrationRegistry;\nimport com.pulumi.aquasec.IntegrationRegistryArgs;\nimport com.pulumi.aquasec.inputs.IntegrationRegistryOptionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var integrationRegistry = new IntegrationRegistry(\"integrationRegistry\", IntegrationRegistryArgs.builder()        \n            .type(\"AWS\")\n            .advancedSettingsCleanup(false)\n            .alwaysPullPatterns()\n            .author(\"aqua@aquasec.com\")\n            .autoCleanup(false)\n            .autoPull(true)\n            .autoPullInterval(1)\n            .autoPullLatestXffEnabled(false)\n            .autoPullMax(100)\n            .autoPullRescan(false)\n            .autoPullTime(\"08:45\")\n            .description(\"Automatically discovered registry\")\n            .detectedType(4)\n            .imageCreationDateCondition(\"image_count\")\n            .options(            \n                IntegrationRegistryOptionArgs.builder()\n                    .option(\"ARNRole\")\n                    .value(\"arn:aws:iam::000000000000:role/aqua-AAAAABBBBCCCDDD-EEEEFFFFGGGG\")\n                    .build(),\n                IntegrationRegistryOptionArgs.builder()\n                    .option(\"TestImagePull\")\n                    .build(),\n                IntegrationRegistryOptionArgs.builder()\n                    .option(\"sts:ExternalId\")\n                    .value(\"00000e2a-5353-4ddd-bbbb-ccc\")\n                    .build())\n            .permission(\"\")\n            .prefixes(\"111111111111.dkr.ecr.us-east-1.amazonaws.com\")\n            .pullImageAge(\"0D\")\n            .pullImageCount(3)\n            .pullImageTagPattern()\n            .pullMaxTags(0)\n            .pullRepoPatterns(null)\n            .pullRepoPatternsExcluded()\n            .pullTagPatterns(null)\n            .registriesType(\"cloud\")\n            .registryScanTimeout(0)\n            .scannerNames(            \n                \"aqua-scanner-222222-cl9qx\",\n                \"aqua-scanner-111111-fstrc\",\n                \"513882222222\")\n            .scannerType(\"specific\")\n            .url(\"ap-northeast-1\")\n            .username(\"\")\n            .webhook(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  integrationRegistry:\n    type: aquasec:IntegrationRegistry\n    properties:\n      type: AWS\n      advancedSettingsCleanup: false\n      alwaysPullPatterns: []\n      author: aqua@aquasec.com\n      autoCleanup: false\n      autoPull: true\n      autoPullInterval: 1\n      autoPullLatestXffEnabled: false\n      autoPullMax: 100\n      autoPullRescan: false\n      autoPullTime: 08:45\n      description: Automatically discovered registry\n      detectedType: 4\n      imageCreationDateCondition: image_count\n      options:\n        - option: ARNRole\n          value: arn:aws:iam::000000000000:role/aqua-AAAAABBBBCCCDDD-EEEEFFFFGGGG\n        - option: TestImagePull\n        - option: sts:ExternalId\n          value: 00000e2a-5353-4ddd-bbbb-ccc\n      permission:\n      prefixes:\n        - 111111111111.dkr.ecr.us-east-1.amazonaws.com\n      pullImageAge: 0D\n      pullImageCount: 3\n      pullImageTagPattern: []\n      pullMaxTags: 0\n      pullRepoPatterns: null\n      pullRepoPatternsExcluded: []\n      pullTagPatterns: null\n      registriesType: cloud\n      registryScanTimeout: 0\n      scannerNames:\n        - aqua-scanner-222222-cl9qx\n        - aqua-scanner-111111-fstrc\n        - '513882222222'\n      scannerType: specific\n      url: ap-northeast-1\n      username:\n      webhook:\n        - authToken:\n          enabled: false\n          unQuarantine: false\n          url:\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "author": {
                    "type": "string",
                    "description": "The username of the user who created or last modified the registry\n"
                },
                "autoCleanup": {
                    "type": "boolean",
                    "description": "Automatically clean up images and repositories which are no longer present in the registry from Aqua console\n"
                },
                "autoPull": {
                    "type": "boolean",
                    "description": "Whether to automatically pull images from the registry on creation and daily\n"
                },
                "autoPullInterval": {
                    "type": "integer",
                    "description": "The interval in days to start pulling new images from the registry, Defaults to 1\n"
                },
                "autoPullMax": {
                    "type": "integer",
                    "description": "Maximum number of repositories to pull every day, defaults to 100\n"
                },
                "autoPullRescan": {
                    "type": "boolean",
                    "description": "Whether to automatically pull and rescan images from the registry on creation and daily\n"
                },
                "autoPullTime": {
                    "type": "string",
                    "description": "The time of day to start pulling new images from the registry, in the format HH:MM (24-hour clock), defaults to 03:00\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the registry\n"
                },
                "imageCreationDateCondition": {
                    "type": "string",
                    "description": "Additional condition for pulling and rescanning images, Defaults to 'none'\n"
                },
                "lastUpdated": {
                    "type": "string",
                    "description": "The last time the registry was modified in UNIX time\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the registry; string, required - this will be treated as the registry's ID, so choose a simple alphanumerical name without special signs and spaces\n"
                },
                "options": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/IntegrationRegistryOption:IntegrationRegistryOption"
                    }
                },
                "password": {
                    "type": "string",
                    "description": "The password for registry authentication\n"
                },
                "prefixes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of possible prefixes to image names pulled from the registry\n"
                },
                "pullImageAge": {
                    "type": "string",
                    "description": "When auto pull image enabled, sets maximum age of auto pulled images (for example for 5 Days the value should be: 5D), Requires `image_creation_date_condition = \"image_age\"`\n"
                },
                "pullImageCount": {
                    "type": "integer",
                    "description": "When auto pull image enabled, sets maximum age of auto pulled images tags from each repository (based on image creation date) Requires `image_creation_date_condition = \"image_count\"`\n"
                },
                "scannerNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of scanner names\n"
                },
                "scannerType": {
                    "type": "string",
                    "description": "The Scanner type\n"
                },
                "type": {
                    "type": "string",
                    "description": "Registry type (HUB / V1 / V2 / ENGINE / AWS / GCR).\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL, address or region of the registry\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username for registry authentication.\n"
                }
            },
            "required": [
                "author",
                "imageCreationDateCondition",
                "lastUpdated",
                "name",
                "prefixes",
                "pullImageAge",
                "pullImageCount",
                "scannerType",
                "type",
                "url"
            ],
            "inputProperties": {
                "author": {
                    "type": "string",
                    "description": "The username of the user who created or last modified the registry\n"
                },
                "autoCleanup": {
                    "type": "boolean",
                    "description": "Automatically clean up images and repositories which are no longer present in the registry from Aqua console\n"
                },
                "autoPull": {
                    "type": "boolean",
                    "description": "Whether to automatically pull images from the registry on creation and daily\n"
                },
                "autoPullInterval": {
                    "type": "integer",
                    "description": "The interval in days to start pulling new images from the registry, Defaults to 1\n"
                },
                "autoPullMax": {
                    "type": "integer",
                    "description": "Maximum number of repositories to pull every day, defaults to 100\n"
                },
                "autoPullRescan": {
                    "type": "boolean",
                    "description": "Whether to automatically pull and rescan images from the registry on creation and daily\n"
                },
                "autoPullTime": {
                    "type": "string",
                    "description": "The time of day to start pulling new images from the registry, in the format HH:MM (24-hour clock), defaults to 03:00\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the registry\n"
                },
                "imageCreationDateCondition": {
                    "type": "string",
                    "description": "Additional condition for pulling and rescanning images, Defaults to 'none'\n"
                },
                "lastUpdated": {
                    "type": "string",
                    "description": "The last time the registry was modified in UNIX time\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the registry; string, required - this will be treated as the registry's ID, so choose a simple alphanumerical name without special signs and spaces\n",
                    "willReplaceOnChanges": true
                },
                "options": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/IntegrationRegistryOption:IntegrationRegistryOption"
                    }
                },
                "password": {
                    "type": "string",
                    "description": "The password for registry authentication\n"
                },
                "prefixes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of possible prefixes to image names pulled from the registry\n"
                },
                "pullImageAge": {
                    "type": "string",
                    "description": "When auto pull image enabled, sets maximum age of auto pulled images (for example for 5 Days the value should be: 5D), Requires `image_creation_date_condition = \"image_age\"`\n"
                },
                "pullImageCount": {
                    "type": "integer",
                    "description": "When auto pull image enabled, sets maximum age of auto pulled images tags from each repository (based on image creation date) Requires `image_creation_date_condition = \"image_count\"`\n"
                },
                "scannerNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of scanner names\n"
                },
                "scannerType": {
                    "type": "string",
                    "description": "The Scanner type\n"
                },
                "type": {
                    "type": "string",
                    "description": "Registry type (HUB / V1 / V2 / ENGINE / AWS / GCR).\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL, address or region of the registry\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username for registry authentication.\n"
                }
            },
            "requiredInputs": [
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IntegrationRegistry resources.\n",
                "properties": {
                    "author": {
                        "type": "string",
                        "description": "The username of the user who created or last modified the registry\n"
                    },
                    "autoCleanup": {
                        "type": "boolean",
                        "description": "Automatically clean up images and repositories which are no longer present in the registry from Aqua console\n"
                    },
                    "autoPull": {
                        "type": "boolean",
                        "description": "Whether to automatically pull images from the registry on creation and daily\n"
                    },
                    "autoPullInterval": {
                        "type": "integer",
                        "description": "The interval in days to start pulling new images from the registry, Defaults to 1\n"
                    },
                    "autoPullMax": {
                        "type": "integer",
                        "description": "Maximum number of repositories to pull every day, defaults to 100\n"
                    },
                    "autoPullRescan": {
                        "type": "boolean",
                        "description": "Whether to automatically pull and rescan images from the registry on creation and daily\n"
                    },
                    "autoPullTime": {
                        "type": "string",
                        "description": "The time of day to start pulling new images from the registry, in the format HH:MM (24-hour clock), defaults to 03:00\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the registry\n"
                    },
                    "imageCreationDateCondition": {
                        "type": "string",
                        "description": "Additional condition for pulling and rescanning images, Defaults to 'none'\n"
                    },
                    "lastUpdated": {
                        "type": "string",
                        "description": "The last time the registry was modified in UNIX time\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the registry; string, required - this will be treated as the registry's ID, so choose a simple alphanumerical name without special signs and spaces\n",
                        "willReplaceOnChanges": true
                    },
                    "options": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/IntegrationRegistryOption:IntegrationRegistryOption"
                        }
                    },
                    "password": {
                        "type": "string",
                        "description": "The password for registry authentication\n"
                    },
                    "prefixes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of possible prefixes to image names pulled from the registry\n"
                    },
                    "pullImageAge": {
                        "type": "string",
                        "description": "When auto pull image enabled, sets maximum age of auto pulled images (for example for 5 Days the value should be: 5D), Requires `image_creation_date_condition = \"image_age\"`\n"
                    },
                    "pullImageCount": {
                        "type": "integer",
                        "description": "When auto pull image enabled, sets maximum age of auto pulled images tags from each repository (based on image creation date) Requires `image_creation_date_condition = \"image_count\"`\n"
                    },
                    "scannerNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of scanner names\n"
                    },
                    "scannerType": {
                        "type": "string",
                        "description": "The Scanner type\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Registry type (HUB / V1 / V2 / ENGINE / AWS / GCR).\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "The URL, address or region of the registry\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "The username for registry authentication.\n"
                    }
                },
                "type": "object"
            }
        },
        "aquasec:index/kubernetesAssurancePolicy:KubernetesAssurancePolicy": {
            "properties": {
                "allowedImages": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of explicitly allowed images.\n"
                },
                "applicationScopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "auditOnFailure": {
                    "type": "boolean",
                    "description": "Indicates if auditing for failures.\n"
                },
                "author": {
                    "type": "string",
                    "description": "Name of user account that created the policy.\n"
                },
                "autoScanConfigured": {
                    "type": "boolean"
                },
                "autoScanEnabled": {
                    "type": "boolean"
                },
                "autoScanTimes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/KubernetesAssurancePolicyAutoScanTime:KubernetesAssurancePolicyAutoScanTime"
                    }
                },
                "blacklistPermissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of function's forbidden permissions.\n"
                },
                "blacklistPermissionsEnabled": {
                    "type": "boolean",
                    "description": "Indicates if blacklist permissions is relevant.\n"
                },
                "blacklistedLicenses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of blacklisted licenses.\n"
                },
                "blacklistedLicensesEnabled": {
                    "type": "boolean",
                    "description": "Lndicates if license blacklist is relevant.\n"
                },
                "blockFailed": {
                    "type": "boolean",
                    "description": "Indicates if failed images are blocked.\n"
                },
                "controlExcludeNoFix": {
                    "type": "boolean"
                },
                "customChecks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/KubernetesAssurancePolicyCustomCheck:KubernetesAssurancePolicyCustomCheck"
                    },
                    "description": "List of Custom user scripts for checks.\n"
                },
                "customChecksEnabled": {
                    "type": "boolean",
                    "description": "Indicates if scanning should include custom checks.\n"
                },
                "customSeverityEnabled": {
                    "type": "boolean"
                },
                "cvesBlackListEnabled": {
                    "type": "boolean",
                    "description": "Indicates if cves blacklist is relevant.\n"
                },
                "cvesBlackLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of cves blacklisted items.\n"
                },
                "cvesWhiteListEnabled": {
                    "type": "boolean",
                    "description": "Indicates if cves whitelist is relevant.\n"
                },
                "cvesWhiteLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of cves whitelisted licenses\n"
                },
                "cvssSeverity": {
                    "type": "string",
                    "description": "Identifier of the cvss severity.\n"
                },
                "cvssSeverityEnabled": {
                    "type": "boolean",
                    "description": "Indicates if the cvss severity is scanned.\n"
                },
                "cvssSeverityExcludeNoFix": {
                    "type": "boolean",
                    "description": "Indicates that policy should ignore cvss cases that do not have a known fix.\n"
                },
                "description": {
                    "type": "string"
                },
                "disallowMalware": {
                    "type": "boolean",
                    "description": "Indicates if malware should block the image.\n"
                },
                "dockerCisEnabled": {
                    "type": "boolean"
                },
                "domain": {
                    "type": "string",
                    "description": "Name of the container image.\n"
                },
                "domainName": {
                    "type": "string"
                },
                "dtaEnabled": {
                    "type": "boolean"
                },
                "dtaSeverity": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "enforce": {
                    "type": "boolean"
                },
                "enforceAfterDays": {
                    "type": "integer"
                },
                "enforceExcessivePermissions": {
                    "type": "boolean"
                },
                "exceptionalMonitoredMalwarePaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "forbiddenLabels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/KubernetesAssurancePolicyForbiddenLabel:KubernetesAssurancePolicyForbiddenLabel"
                    }
                },
                "forbiddenLabelsEnabled": {
                    "type": "boolean"
                },
                "forceMicroenforcer": {
                    "type": "boolean"
                },
                "functionIntegrityEnabled": {
                    "type": "boolean"
                },
                "ignoreRecentlyPublishedVln": {
                    "type": "boolean"
                },
                "ignoreRecentlyPublishedVlnPeriod": {
                    "type": "integer"
                },
                "ignoreRiskResourcesEnabled": {
                    "type": "boolean",
                    "description": "Indicates if risk resources are ignored.\n"
                },
                "ignoredRiskResources": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of ignored risk resources.\n"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of images.\n"
                },
                "kubeCisEnabled": {
                    "type": "boolean"
                },
                "kubernetesControlsNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of kubernetes control names and available kubernetes controls are: 'Access to host IPC namespace', 'Access to host PID', 'Access to host network', 'Access to host ports', 'All container images must start with a GCR domain', 'All container images must start with an ECR domain', 'All container images must start with the *.azurecr.io domain', 'CPU not limited', 'CPU requests not specified', 'Can elevate its own privileges', 'ConfigMap with secrets', 'ConfigMap with sensitive content', 'Container images from public registries used', 'Default capabilitiessome containers do not drop all', 'Default capabilitiessome containers do not drop any', 'Delete pod logs', 'Exec into Pods', 'Image tag :latest used', 'Manage EKS IAM Auth ConfigMap', 'Manage Kubernetes RBAC resources', 'Manage Kubernetes networking', 'Manage Kubernetes workloads and pods', 'Manage all resources', 'Manage all resources at the namespace', 'Manage configmaps', 'Manage namespace secrets', 'Manage secrets', 'Manage webhookconfigurations', 'Manages /etc/hosts', 'Memory not limited', 'Memory requests not specified', 'Non-core volume types used.', 'Non-default /proc masks set', 'Privileged', 'Root file system is not read-only', 'Runs as root user', 'Runs with GID \u003c= 10000', 'Runs with UID \u003c= 10000', 'Runs with a root primary or supplementary GID', 'Runtime/Default AppArmor profile not set', 'Runtime/Default Seccomp profile not set', 'SELinux custom options set', 'SYS_ADMIN capability added', 'Seccomp policies disabled', 'Service with External IP', 'Specific capabilities added', 'Unsafe sysctl options set', 'User with admin access', 'Workloads in the default namespace', 'hostPath volume mounted with docker.sock', 'hostPath volumes mounted'\n"
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of labels.\n"
                },
                "malwareAction": {
                    "type": "string"
                },
                "maximumScore": {
                    "type": "number",
                    "description": "Value of allowed maximum score.\n"
                },
                "maximumScoreEnabled": {
                    "type": "boolean",
                    "description": "Indicates if exceeding the maximum score is scanned.\n"
                },
                "maximumScoreExcludeNoFix": {
                    "type": "boolean",
                    "description": "Indicates that policy should ignore cases that do not have a known fix.\n"
                },
                "monitoredMalwarePaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "onlyNoneRootUsers": {
                    "type": "boolean",
                    "description": "Indicates if raise a warning for images that should only be run as root.\n"
                },
                "packagesBlackListEnabled": {
                    "type": "boolean",
                    "description": "Indicates if packages blacklist is relevant.\n"
                },
                "packagesBlackLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/KubernetesAssurancePolicyPackagesBlackList:KubernetesAssurancePolicyPackagesBlackList"
                    },
                    "description": "List of backlisted images.\n"
                },
                "packagesWhiteListEnabled": {
                    "type": "boolean",
                    "description": "Indicates if packages whitelist is relevant.\n"
                },
                "packagesWhiteLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/KubernetesAssurancePolicyPackagesWhiteList:KubernetesAssurancePolicyPackagesWhiteList"
                    },
                    "description": "List of whitelisted images.\n"
                },
                "partialResultsImageFail": {
                    "type": "boolean"
                },
                "readOnly": {
                    "type": "boolean"
                },
                "registries": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of registries.\n"
                },
                "registry": {
                    "type": "string"
                },
                "requiredLabels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/KubernetesAssurancePolicyRequiredLabel:KubernetesAssurancePolicyRequiredLabel"
                    }
                },
                "requiredLabelsEnabled": {
                    "type": "boolean"
                },
                "scanNfsMounts": {
                    "type": "boolean"
                },
                "scanSensitiveData": {
                    "type": "boolean",
                    "description": "Indicates if scan should include sensitive data in the image.\n"
                },
                "scapEnabled": {
                    "type": "boolean",
                    "description": "Indicates if scanning should include scap.\n"
                },
                "scapFiles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of SCAP user scripts for checks.\n"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/KubernetesAssurancePolicyScope:KubernetesAssurancePolicyScope"
                    }
                },
                "trustedBaseImages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/KubernetesAssurancePolicyTrustedBaseImage:KubernetesAssurancePolicyTrustedBaseImage"
                    },
                    "description": "List of trusted images.\n"
                },
                "trustedBaseImagesEnabled": {
                    "type": "boolean",
                    "description": "Indicates if list of trusted base images is relevant.\n"
                },
                "whitelistedLicenses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of whitelisted licenses.\n"
                },
                "whitelistedLicensesEnabled": {
                    "type": "boolean",
                    "description": "Indicates if license blacklist is relevant.\n"
                }
            },
            "required": [
                "applicationScopes",
                "author",
                "autoScanTimes",
                "ignoreRecentlyPublishedVlnPeriod",
                "name",
                "scopes"
            ],
            "inputProperties": {
                "allowedImages": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of explicitly allowed images.\n"
                },
                "applicationScopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "auditOnFailure": {
                    "type": "boolean",
                    "description": "Indicates if auditing for failures.\n"
                },
                "autoScanConfigured": {
                    "type": "boolean"
                },
                "autoScanEnabled": {
                    "type": "boolean"
                },
                "autoScanTimes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/KubernetesAssurancePolicyAutoScanTime:KubernetesAssurancePolicyAutoScanTime"
                    }
                },
                "blacklistPermissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of function's forbidden permissions.\n"
                },
                "blacklistPermissionsEnabled": {
                    "type": "boolean",
                    "description": "Indicates if blacklist permissions is relevant.\n"
                },
                "blacklistedLicenses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of blacklisted licenses.\n"
                },
                "blacklistedLicensesEnabled": {
                    "type": "boolean",
                    "description": "Lndicates if license blacklist is relevant.\n"
                },
                "blockFailed": {
                    "type": "boolean",
                    "description": "Indicates if failed images are blocked.\n"
                },
                "controlExcludeNoFix": {
                    "type": "boolean"
                },
                "customChecks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/KubernetesAssurancePolicyCustomCheck:KubernetesAssurancePolicyCustomCheck"
                    },
                    "description": "List of Custom user scripts for checks.\n"
                },
                "customChecksEnabled": {
                    "type": "boolean",
                    "description": "Indicates if scanning should include custom checks.\n"
                },
                "customSeverityEnabled": {
                    "type": "boolean"
                },
                "cvesBlackListEnabled": {
                    "type": "boolean",
                    "description": "Indicates if cves blacklist is relevant.\n"
                },
                "cvesBlackLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of cves blacklisted items.\n"
                },
                "cvesWhiteListEnabled": {
                    "type": "boolean",
                    "description": "Indicates if cves whitelist is relevant.\n"
                },
                "cvesWhiteLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of cves whitelisted licenses\n"
                },
                "cvssSeverity": {
                    "type": "string",
                    "description": "Identifier of the cvss severity.\n"
                },
                "cvssSeverityEnabled": {
                    "type": "boolean",
                    "description": "Indicates if the cvss severity is scanned.\n"
                },
                "cvssSeverityExcludeNoFix": {
                    "type": "boolean",
                    "description": "Indicates that policy should ignore cvss cases that do not have a known fix.\n"
                },
                "description": {
                    "type": "string"
                },
                "disallowMalware": {
                    "type": "boolean",
                    "description": "Indicates if malware should block the image.\n"
                },
                "dockerCisEnabled": {
                    "type": "boolean"
                },
                "domain": {
                    "type": "string",
                    "description": "Name of the container image.\n"
                },
                "domainName": {
                    "type": "string"
                },
                "dtaEnabled": {
                    "type": "boolean"
                },
                "dtaSeverity": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "enforce": {
                    "type": "boolean"
                },
                "enforceAfterDays": {
                    "type": "integer"
                },
                "enforceExcessivePermissions": {
                    "type": "boolean"
                },
                "exceptionalMonitoredMalwarePaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "forbiddenLabels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/KubernetesAssurancePolicyForbiddenLabel:KubernetesAssurancePolicyForbiddenLabel"
                    }
                },
                "forbiddenLabelsEnabled": {
                    "type": "boolean"
                },
                "forceMicroenforcer": {
                    "type": "boolean"
                },
                "functionIntegrityEnabled": {
                    "type": "boolean"
                },
                "ignoreRecentlyPublishedVln": {
                    "type": "boolean"
                },
                "ignoreRiskResourcesEnabled": {
                    "type": "boolean",
                    "description": "Indicates if risk resources are ignored.\n"
                },
                "ignoredRiskResources": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of ignored risk resources.\n"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of images.\n"
                },
                "kubeCisEnabled": {
                    "type": "boolean"
                },
                "kubernetesControlsNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of kubernetes control names and available kubernetes controls are: 'Access to host IPC namespace', 'Access to host PID', 'Access to host network', 'Access to host ports', 'All container images must start with a GCR domain', 'All container images must start with an ECR domain', 'All container images must start with the *.azurecr.io domain', 'CPU not limited', 'CPU requests not specified', 'Can elevate its own privileges', 'ConfigMap with secrets', 'ConfigMap with sensitive content', 'Container images from public registries used', 'Default capabilitiessome containers do not drop all', 'Default capabilitiessome containers do not drop any', 'Delete pod logs', 'Exec into Pods', 'Image tag :latest used', 'Manage EKS IAM Auth ConfigMap', 'Manage Kubernetes RBAC resources', 'Manage Kubernetes networking', 'Manage Kubernetes workloads and pods', 'Manage all resources', 'Manage all resources at the namespace', 'Manage configmaps', 'Manage namespace secrets', 'Manage secrets', 'Manage webhookconfigurations', 'Manages /etc/hosts', 'Memory not limited', 'Memory requests not specified', 'Non-core volume types used.', 'Non-default /proc masks set', 'Privileged', 'Root file system is not read-only', 'Runs as root user', 'Runs with GID \u003c= 10000', 'Runs with UID \u003c= 10000', 'Runs with a root primary or supplementary GID', 'Runtime/Default AppArmor profile not set', 'Runtime/Default Seccomp profile not set', 'SELinux custom options set', 'SYS_ADMIN capability added', 'Seccomp policies disabled', 'Service with External IP', 'Specific capabilities added', 'Unsafe sysctl options set', 'User with admin access', 'Workloads in the default namespace', 'hostPath volume mounted with docker.sock', 'hostPath volumes mounted'\n"
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of labels.\n"
                },
                "malwareAction": {
                    "type": "string"
                },
                "maximumScore": {
                    "type": "number",
                    "description": "Value of allowed maximum score.\n"
                },
                "maximumScoreEnabled": {
                    "type": "boolean",
                    "description": "Indicates if exceeding the maximum score is scanned.\n"
                },
                "maximumScoreExcludeNoFix": {
                    "type": "boolean",
                    "description": "Indicates that policy should ignore cases that do not have a known fix.\n"
                },
                "monitoredMalwarePaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "onlyNoneRootUsers": {
                    "type": "boolean",
                    "description": "Indicates if raise a warning for images that should only be run as root.\n"
                },
                "packagesBlackListEnabled": {
                    "type": "boolean",
                    "description": "Indicates if packages blacklist is relevant.\n"
                },
                "packagesBlackLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/KubernetesAssurancePolicyPackagesBlackList:KubernetesAssurancePolicyPackagesBlackList"
                    },
                    "description": "List of backlisted images.\n"
                },
                "packagesWhiteListEnabled": {
                    "type": "boolean",
                    "description": "Indicates if packages whitelist is relevant.\n"
                },
                "packagesWhiteLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/KubernetesAssurancePolicyPackagesWhiteList:KubernetesAssurancePolicyPackagesWhiteList"
                    },
                    "description": "List of whitelisted images.\n"
                },
                "partialResultsImageFail": {
                    "type": "boolean"
                },
                "readOnly": {
                    "type": "boolean"
                },
                "registries": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of registries.\n"
                },
                "registry": {
                    "type": "string"
                },
                "requiredLabels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/KubernetesAssurancePolicyRequiredLabel:KubernetesAssurancePolicyRequiredLabel"
                    }
                },
                "requiredLabelsEnabled": {
                    "type": "boolean"
                },
                "scanNfsMounts": {
                    "type": "boolean"
                },
                "scanSensitiveData": {
                    "type": "boolean",
                    "description": "Indicates if scan should include sensitive data in the image.\n"
                },
                "scapEnabled": {
                    "type": "boolean",
                    "description": "Indicates if scanning should include scap.\n"
                },
                "scapFiles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of SCAP user scripts for checks.\n"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/KubernetesAssurancePolicyScope:KubernetesAssurancePolicyScope"
                    }
                },
                "trustedBaseImages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/KubernetesAssurancePolicyTrustedBaseImage:KubernetesAssurancePolicyTrustedBaseImage"
                    },
                    "description": "List of trusted images.\n"
                },
                "trustedBaseImagesEnabled": {
                    "type": "boolean",
                    "description": "Indicates if list of trusted base images is relevant.\n"
                },
                "whitelistedLicenses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of whitelisted licenses.\n"
                },
                "whitelistedLicensesEnabled": {
                    "type": "boolean",
                    "description": "Indicates if license blacklist is relevant.\n"
                }
            },
            "requiredInputs": [
                "applicationScopes"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering KubernetesAssurancePolicy resources.\n",
                "properties": {
                    "allowedImages": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of explicitly allowed images.\n"
                    },
                    "applicationScopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "auditOnFailure": {
                        "type": "boolean",
                        "description": "Indicates if auditing for failures.\n"
                    },
                    "author": {
                        "type": "string",
                        "description": "Name of user account that created the policy.\n"
                    },
                    "autoScanConfigured": {
                        "type": "boolean"
                    },
                    "autoScanEnabled": {
                        "type": "boolean"
                    },
                    "autoScanTimes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/KubernetesAssurancePolicyAutoScanTime:KubernetesAssurancePolicyAutoScanTime"
                        }
                    },
                    "blacklistPermissions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of function's forbidden permissions.\n"
                    },
                    "blacklistPermissionsEnabled": {
                        "type": "boolean",
                        "description": "Indicates if blacklist permissions is relevant.\n"
                    },
                    "blacklistedLicenses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of blacklisted licenses.\n"
                    },
                    "blacklistedLicensesEnabled": {
                        "type": "boolean",
                        "description": "Lndicates if license blacklist is relevant.\n"
                    },
                    "blockFailed": {
                        "type": "boolean",
                        "description": "Indicates if failed images are blocked.\n"
                    },
                    "controlExcludeNoFix": {
                        "type": "boolean"
                    },
                    "customChecks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/KubernetesAssurancePolicyCustomCheck:KubernetesAssurancePolicyCustomCheck"
                        },
                        "description": "List of Custom user scripts for checks.\n"
                    },
                    "customChecksEnabled": {
                        "type": "boolean",
                        "description": "Indicates if scanning should include custom checks.\n"
                    },
                    "customSeverityEnabled": {
                        "type": "boolean"
                    },
                    "cvesBlackListEnabled": {
                        "type": "boolean",
                        "description": "Indicates if cves blacklist is relevant.\n"
                    },
                    "cvesBlackLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of cves blacklisted items.\n"
                    },
                    "cvesWhiteListEnabled": {
                        "type": "boolean",
                        "description": "Indicates if cves whitelist is relevant.\n"
                    },
                    "cvesWhiteLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of cves whitelisted licenses\n"
                    },
                    "cvssSeverity": {
                        "type": "string",
                        "description": "Identifier of the cvss severity.\n"
                    },
                    "cvssSeverityEnabled": {
                        "type": "boolean",
                        "description": "Indicates if the cvss severity is scanned.\n"
                    },
                    "cvssSeverityExcludeNoFix": {
                        "type": "boolean",
                        "description": "Indicates that policy should ignore cvss cases that do not have a known fix.\n"
                    },
                    "description": {
                        "type": "string"
                    },
                    "disallowMalware": {
                        "type": "boolean",
                        "description": "Indicates if malware should block the image.\n"
                    },
                    "dockerCisEnabled": {
                        "type": "boolean"
                    },
                    "domain": {
                        "type": "string",
                        "description": "Name of the container image.\n"
                    },
                    "domainName": {
                        "type": "string"
                    },
                    "dtaEnabled": {
                        "type": "boolean"
                    },
                    "dtaSeverity": {
                        "type": "string"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "enforce": {
                        "type": "boolean"
                    },
                    "enforceAfterDays": {
                        "type": "integer"
                    },
                    "enforceExcessivePermissions": {
                        "type": "boolean"
                    },
                    "exceptionalMonitoredMalwarePaths": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "forbiddenLabels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/KubernetesAssurancePolicyForbiddenLabel:KubernetesAssurancePolicyForbiddenLabel"
                        }
                    },
                    "forbiddenLabelsEnabled": {
                        "type": "boolean"
                    },
                    "forceMicroenforcer": {
                        "type": "boolean"
                    },
                    "functionIntegrityEnabled": {
                        "type": "boolean"
                    },
                    "ignoreRecentlyPublishedVln": {
                        "type": "boolean"
                    },
                    "ignoreRecentlyPublishedVlnPeriod": {
                        "type": "integer"
                    },
                    "ignoreRiskResourcesEnabled": {
                        "type": "boolean",
                        "description": "Indicates if risk resources are ignored.\n"
                    },
                    "ignoredRiskResources": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of ignored risk resources.\n"
                    },
                    "images": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of images.\n"
                    },
                    "kubeCisEnabled": {
                        "type": "boolean"
                    },
                    "kubernetesControlsNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of kubernetes control names and available kubernetes controls are: 'Access to host IPC namespace', 'Access to host PID', 'Access to host network', 'Access to host ports', 'All container images must start with a GCR domain', 'All container images must start with an ECR domain', 'All container images must start with the *.azurecr.io domain', 'CPU not limited', 'CPU requests not specified', 'Can elevate its own privileges', 'ConfigMap with secrets', 'ConfigMap with sensitive content', 'Container images from public registries used', 'Default capabilitiessome containers do not drop all', 'Default capabilitiessome containers do not drop any', 'Delete pod logs', 'Exec into Pods', 'Image tag :latest used', 'Manage EKS IAM Auth ConfigMap', 'Manage Kubernetes RBAC resources', 'Manage Kubernetes networking', 'Manage Kubernetes workloads and pods', 'Manage all resources', 'Manage all resources at the namespace', 'Manage configmaps', 'Manage namespace secrets', 'Manage secrets', 'Manage webhookconfigurations', 'Manages /etc/hosts', 'Memory not limited', 'Memory requests not specified', 'Non-core volume types used.', 'Non-default /proc masks set', 'Privileged', 'Root file system is not read-only', 'Runs as root user', 'Runs with GID \u003c= 10000', 'Runs with UID \u003c= 10000', 'Runs with a root primary or supplementary GID', 'Runtime/Default AppArmor profile not set', 'Runtime/Default Seccomp profile not set', 'SELinux custom options set', 'SYS_ADMIN capability added', 'Seccomp policies disabled', 'Service with External IP', 'Specific capabilities added', 'Unsafe sysctl options set', 'User with admin access', 'Workloads in the default namespace', 'hostPath volume mounted with docker.sock', 'hostPath volumes mounted'\n"
                    },
                    "labels": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of labels.\n"
                    },
                    "malwareAction": {
                        "type": "string"
                    },
                    "maximumScore": {
                        "type": "number",
                        "description": "Value of allowed maximum score.\n"
                    },
                    "maximumScoreEnabled": {
                        "type": "boolean",
                        "description": "Indicates if exceeding the maximum score is scanned.\n"
                    },
                    "maximumScoreExcludeNoFix": {
                        "type": "boolean",
                        "description": "Indicates that policy should ignore cases that do not have a known fix.\n"
                    },
                    "monitoredMalwarePaths": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "onlyNoneRootUsers": {
                        "type": "boolean",
                        "description": "Indicates if raise a warning for images that should only be run as root.\n"
                    },
                    "packagesBlackListEnabled": {
                        "type": "boolean",
                        "description": "Indicates if packages blacklist is relevant.\n"
                    },
                    "packagesBlackLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/KubernetesAssurancePolicyPackagesBlackList:KubernetesAssurancePolicyPackagesBlackList"
                        },
                        "description": "List of backlisted images.\n"
                    },
                    "packagesWhiteListEnabled": {
                        "type": "boolean",
                        "description": "Indicates if packages whitelist is relevant.\n"
                    },
                    "packagesWhiteLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/KubernetesAssurancePolicyPackagesWhiteList:KubernetesAssurancePolicyPackagesWhiteList"
                        },
                        "description": "List of whitelisted images.\n"
                    },
                    "partialResultsImageFail": {
                        "type": "boolean"
                    },
                    "readOnly": {
                        "type": "boolean"
                    },
                    "registries": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of registries.\n"
                    },
                    "registry": {
                        "type": "string"
                    },
                    "requiredLabels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/KubernetesAssurancePolicyRequiredLabel:KubernetesAssurancePolicyRequiredLabel"
                        }
                    },
                    "requiredLabelsEnabled": {
                        "type": "boolean"
                    },
                    "scanNfsMounts": {
                        "type": "boolean"
                    },
                    "scanSensitiveData": {
                        "type": "boolean",
                        "description": "Indicates if scan should include sensitive data in the image.\n"
                    },
                    "scapEnabled": {
                        "type": "boolean",
                        "description": "Indicates if scanning should include scap.\n"
                    },
                    "scapFiles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of SCAP user scripts for checks.\n"
                    },
                    "scopes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/KubernetesAssurancePolicyScope:KubernetesAssurancePolicyScope"
                        }
                    },
                    "trustedBaseImages": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/KubernetesAssurancePolicyTrustedBaseImage:KubernetesAssurancePolicyTrustedBaseImage"
                        },
                        "description": "List of trusted images.\n"
                    },
                    "trustedBaseImagesEnabled": {
                        "type": "boolean",
                        "description": "Indicates if list of trusted base images is relevant.\n"
                    },
                    "whitelistedLicenses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of whitelisted licenses.\n"
                    },
                    "whitelistedLicensesEnabled": {
                        "type": "boolean",
                        "description": "Indicates if license blacklist is relevant.\n"
                    }
                },
                "type": "object"
            }
        },
        "aquasec:index/notification:Notification": {
            "description": "Provides a Aquasec Notification resource. This can be used to create and manage Aquasec Notification resources.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aquasec from \"@pulumiverse/aquasec\";\n\nconst teams = new aquasec.Notification(\"teams\", {\n    properties: {\n        url: \"\u003cTEAMS-URL\u003e\",\n    },\n    type: \"teams\",\n});\nconst slack = new aquasec.Notification(\"slack\", {\n    properties: {\n        url: \"\u003cSLACK-URL\u003e\",\n    },\n    type: \"slack\",\n});\nconst webhook = new aquasec.Notification(\"webhook\", {\n    properties: {\n        url: \"\u003cWEBHOOK-URL\u003e\",\n    },\n    type: \"webhook\",\n});\nconst servicenow = new aquasec.Notification(\"servicenow\", {\n    properties: {\n        board_name: \"\",\n        instance_name: \"\",\n        password: \"\u003cPASSWORD\u003e\",\n        url: \"\u003cSERVICENOW-URL\u003e\",\n        user: \"\u003cUSERNAME\u003e\",\n    },\n    type: \"serviceNow\",\n});\nconst jiraWithToken = new aquasec.Notification(\"jiraWithToken\", {\n    properties: {\n        definition_of_done: \"Done\",\n        project_key: \"\u003cJIRA_PROJECT_KEY\u003e\",\n        summary: \"SOME_TEXT\",\n        token: \"\u003cJIRA-TOKEN\u003e\",\n        url: \"\u003cJIRA-URL\u003e\",\n    },\n    type: \"jira\",\n});\nconst jiraWithCreds = new aquasec.Notification(\"jiraWithCreds\", {\n    properties: {\n        password: \"\u003cJIRA_PASSWORD\u003e\",\n        project_key: \"\u003cJIRA_PROJECT_KEY\u003e\",\n        summary: \"SOME_TEXT\",\n        url: \"\u003cJIRA-URL\u003e\",\n        user: \"\u003cJIRA_USERNAME\u003e\",\n    },\n    type: \"jira\",\n});\nconst emailWithCreds = new aquasec.Notification(\"emailWithCreds\", {\n    properties: {\n        host: \"\u003cEMAIL_HOST\u003e\",\n        password: \"\u003cEMAIL_PASSWORD\u003e\",\n        port: \"\u003cEMAIL_PORT\u003e\",\n        recipients: \"\u003cRECIPIENTS\u003e\",\n        sender: \"\u003cSENDER_EMAIL_ADDRESS\u003e\",\n        user: \"\u003cEMAIL_USERNAME\u003e\",\n    },\n    type: \"email\",\n});\nconst emailWithMx = new aquasec.Notification(\"emailWithMx\", {\n    properties: {\n        port: \"\u003cEMAIL_PORT\u003e\",\n        recipients: \"\u003cRECIPIENTS\u003e\",\n        sender: \"\u003cSENDER_EMAIL_ADDRESS\u003e\",\n        use_mx: \"true\",\n    },\n    type: \"email\",\n});\n```\n```python\nimport pulumi\nimport pulumiverse_aquasec as aquasec\n\nteams = aquasec.Notification(\"teams\",\n    properties={\n        \"url\": \"\u003cTEAMS-URL\u003e\",\n    },\n    type=\"teams\")\nslack = aquasec.Notification(\"slack\",\n    properties={\n        \"url\": \"\u003cSLACK-URL\u003e\",\n    },\n    type=\"slack\")\nwebhook = aquasec.Notification(\"webhook\",\n    properties={\n        \"url\": \"\u003cWEBHOOK-URL\u003e\",\n    },\n    type=\"webhook\")\nservicenow = aquasec.Notification(\"servicenow\",\n    properties={\n        \"board_name\": \"\",\n        \"instance_name\": \"\",\n        \"password\": \"\u003cPASSWORD\u003e\",\n        \"url\": \"\u003cSERVICENOW-URL\u003e\",\n        \"user\": \"\u003cUSERNAME\u003e\",\n    },\n    type=\"serviceNow\")\njira_with_token = aquasec.Notification(\"jiraWithToken\",\n    properties={\n        \"definition_of_done\": \"Done\",\n        \"project_key\": \"\u003cJIRA_PROJECT_KEY\u003e\",\n        \"summary\": \"SOME_TEXT\",\n        \"token\": \"\u003cJIRA-TOKEN\u003e\",\n        \"url\": \"\u003cJIRA-URL\u003e\",\n    },\n    type=\"jira\")\njira_with_creds = aquasec.Notification(\"jiraWithCreds\",\n    properties={\n        \"password\": \"\u003cJIRA_PASSWORD\u003e\",\n        \"project_key\": \"\u003cJIRA_PROJECT_KEY\u003e\",\n        \"summary\": \"SOME_TEXT\",\n        \"url\": \"\u003cJIRA-URL\u003e\",\n        \"user\": \"\u003cJIRA_USERNAME\u003e\",\n    },\n    type=\"jira\")\nemail_with_creds = aquasec.Notification(\"emailWithCreds\",\n    properties={\n        \"host\": \"\u003cEMAIL_HOST\u003e\",\n        \"password\": \"\u003cEMAIL_PASSWORD\u003e\",\n        \"port\": \"\u003cEMAIL_PORT\u003e\",\n        \"recipients\": \"\u003cRECIPIENTS\u003e\",\n        \"sender\": \"\u003cSENDER_EMAIL_ADDRESS\u003e\",\n        \"user\": \"\u003cEMAIL_USERNAME\u003e\",\n    },\n    type=\"email\")\nemail_with_mx = aquasec.Notification(\"emailWithMx\",\n    properties={\n        \"port\": \"\u003cEMAIL_PORT\u003e\",\n        \"recipients\": \"\u003cRECIPIENTS\u003e\",\n        \"sender\": \"\u003cSENDER_EMAIL_ADDRESS\u003e\",\n        \"use_mx\": \"true\",\n    },\n    type=\"email\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Aquasec = Pulumiverse.Aquasec;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var teams = new Aquasec.Notification(\"teams\", new()\n    {\n        Properties = \n        {\n            { \"url\", \"\u003cTEAMS-URL\u003e\" },\n        },\n        Type = \"teams\",\n    });\n\n    var slack = new Aquasec.Notification(\"slack\", new()\n    {\n        Properties = \n        {\n            { \"url\", \"\u003cSLACK-URL\u003e\" },\n        },\n        Type = \"slack\",\n    });\n\n    var webhook = new Aquasec.Notification(\"webhook\", new()\n    {\n        Properties = \n        {\n            { \"url\", \"\u003cWEBHOOK-URL\u003e\" },\n        },\n        Type = \"webhook\",\n    });\n\n    var servicenow = new Aquasec.Notification(\"servicenow\", new()\n    {\n        Properties = \n        {\n            { \"board_name\", \"\" },\n            { \"instance_name\", \"\" },\n            { \"password\", \"\u003cPASSWORD\u003e\" },\n            { \"url\", \"\u003cSERVICENOW-URL\u003e\" },\n            { \"user\", \"\u003cUSERNAME\u003e\" },\n        },\n        Type = \"serviceNow\",\n    });\n\n    var jiraWithToken = new Aquasec.Notification(\"jiraWithToken\", new()\n    {\n        Properties = \n        {\n            { \"definition_of_done\", \"Done\" },\n            { \"project_key\", \"\u003cJIRA_PROJECT_KEY\u003e\" },\n            { \"summary\", \"SOME_TEXT\" },\n            { \"token\", \"\u003cJIRA-TOKEN\u003e\" },\n            { \"url\", \"\u003cJIRA-URL\u003e\" },\n        },\n        Type = \"jira\",\n    });\n\n    var jiraWithCreds = new Aquasec.Notification(\"jiraWithCreds\", new()\n    {\n        Properties = \n        {\n            { \"password\", \"\u003cJIRA_PASSWORD\u003e\" },\n            { \"project_key\", \"\u003cJIRA_PROJECT_KEY\u003e\" },\n            { \"summary\", \"SOME_TEXT\" },\n            { \"url\", \"\u003cJIRA-URL\u003e\" },\n            { \"user\", \"\u003cJIRA_USERNAME\u003e\" },\n        },\n        Type = \"jira\",\n    });\n\n    var emailWithCreds = new Aquasec.Notification(\"emailWithCreds\", new()\n    {\n        Properties = \n        {\n            { \"host\", \"\u003cEMAIL_HOST\u003e\" },\n            { \"password\", \"\u003cEMAIL_PASSWORD\u003e\" },\n            { \"port\", \"\u003cEMAIL_PORT\u003e\" },\n            { \"recipients\", \"\u003cRECIPIENTS\u003e\" },\n            { \"sender\", \"\u003cSENDER_EMAIL_ADDRESS\u003e\" },\n            { \"user\", \"\u003cEMAIL_USERNAME\u003e\" },\n        },\n        Type = \"email\",\n    });\n\n    var emailWithMx = new Aquasec.Notification(\"emailWithMx\", new()\n    {\n        Properties = \n        {\n            { \"port\", \"\u003cEMAIL_PORT\u003e\" },\n            { \"recipients\", \"\u003cRECIPIENTS\u003e\" },\n            { \"sender\", \"\u003cSENDER_EMAIL_ADDRESS\u003e\" },\n            { \"use_mx\", \"true\" },\n        },\n        Type = \"email\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-aquasec/sdk/go/aquasec\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := aquasec.NewNotification(ctx, \"teams\", \u0026aquasec.NotificationArgs{\n\t\t\tProperties: pulumi.StringMap{\n\t\t\t\t\"url\": pulumi.String(\"\u003cTEAMS-URL\u003e\"),\n\t\t\t},\n\t\t\tType: pulumi.String(\"teams\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = aquasec.NewNotification(ctx, \"slack\", \u0026aquasec.NotificationArgs{\n\t\t\tProperties: pulumi.StringMap{\n\t\t\t\t\"url\": pulumi.String(\"\u003cSLACK-URL\u003e\"),\n\t\t\t},\n\t\t\tType: pulumi.String(\"slack\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = aquasec.NewNotification(ctx, \"webhook\", \u0026aquasec.NotificationArgs{\n\t\t\tProperties: pulumi.StringMap{\n\t\t\t\t\"url\": pulumi.String(\"\u003cWEBHOOK-URL\u003e\"),\n\t\t\t},\n\t\t\tType: pulumi.String(\"webhook\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = aquasec.NewNotification(ctx, \"servicenow\", \u0026aquasec.NotificationArgs{\n\t\t\tProperties: pulumi.StringMap{\n\t\t\t\t\"board_name\":    pulumi.String(\"\"),\n\t\t\t\t\"instance_name\": pulumi.String(\"\"),\n\t\t\t\t\"password\":      pulumi.String(\"\u003cPASSWORD\u003e\"),\n\t\t\t\t\"url\":           pulumi.String(\"\u003cSERVICENOW-URL\u003e\"),\n\t\t\t\t\"user\":          pulumi.String(\"\u003cUSERNAME\u003e\"),\n\t\t\t},\n\t\t\tType: pulumi.String(\"serviceNow\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = aquasec.NewNotification(ctx, \"jiraWithToken\", \u0026aquasec.NotificationArgs{\n\t\t\tProperties: pulumi.StringMap{\n\t\t\t\t\"definition_of_done\": pulumi.String(\"Done\"),\n\t\t\t\t\"project_key\":        pulumi.String(\"\u003cJIRA_PROJECT_KEY\u003e\"),\n\t\t\t\t\"summary\":            pulumi.String(\"SOME_TEXT\"),\n\t\t\t\t\"token\":              pulumi.String(\"\u003cJIRA-TOKEN\u003e\"),\n\t\t\t\t\"url\":                pulumi.String(\"\u003cJIRA-URL\u003e\"),\n\t\t\t},\n\t\t\tType: pulumi.String(\"jira\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = aquasec.NewNotification(ctx, \"jiraWithCreds\", \u0026aquasec.NotificationArgs{\n\t\t\tProperties: pulumi.StringMap{\n\t\t\t\t\"password\":    pulumi.String(\"\u003cJIRA_PASSWORD\u003e\"),\n\t\t\t\t\"project_key\": pulumi.String(\"\u003cJIRA_PROJECT_KEY\u003e\"),\n\t\t\t\t\"summary\":     pulumi.String(\"SOME_TEXT\"),\n\t\t\t\t\"url\":         pulumi.String(\"\u003cJIRA-URL\u003e\"),\n\t\t\t\t\"user\":        pulumi.String(\"\u003cJIRA_USERNAME\u003e\"),\n\t\t\t},\n\t\t\tType: pulumi.String(\"jira\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = aquasec.NewNotification(ctx, \"emailWithCreds\", \u0026aquasec.NotificationArgs{\n\t\t\tProperties: pulumi.StringMap{\n\t\t\t\t\"host\":       pulumi.String(\"\u003cEMAIL_HOST\u003e\"),\n\t\t\t\t\"password\":   pulumi.String(\"\u003cEMAIL_PASSWORD\u003e\"),\n\t\t\t\t\"port\":       pulumi.String(\"\u003cEMAIL_PORT\u003e\"),\n\t\t\t\t\"recipients\": pulumi.String(\"\u003cRECIPIENTS\u003e\"),\n\t\t\t\t\"sender\":     pulumi.String(\"\u003cSENDER_EMAIL_ADDRESS\u003e\"),\n\t\t\t\t\"user\":       pulumi.String(\"\u003cEMAIL_USERNAME\u003e\"),\n\t\t\t},\n\t\t\tType: pulumi.String(\"email\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = aquasec.NewNotification(ctx, \"emailWithMx\", \u0026aquasec.NotificationArgs{\n\t\t\tProperties: pulumi.StringMap{\n\t\t\t\t\"port\":       pulumi.String(\"\u003cEMAIL_PORT\u003e\"),\n\t\t\t\t\"recipients\": pulumi.String(\"\u003cRECIPIENTS\u003e\"),\n\t\t\t\t\"sender\":     pulumi.String(\"\u003cSENDER_EMAIL_ADDRESS\u003e\"),\n\t\t\t\t\"use_mx\":     pulumi.String(\"true\"),\n\t\t\t},\n\t\t\tType: pulumi.String(\"email\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aquasec.Notification;\nimport com.pulumi.aquasec.NotificationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var teams = new Notification(\"teams\", NotificationArgs.builder()        \n            .properties(Map.of(\"url\", \"\u003cTEAMS-URL\u003e\"))\n            .type(\"teams\")\n            .build());\n\n        var slack = new Notification(\"slack\", NotificationArgs.builder()        \n            .properties(Map.of(\"url\", \"\u003cSLACK-URL\u003e\"))\n            .type(\"slack\")\n            .build());\n\n        var webhook = new Notification(\"webhook\", NotificationArgs.builder()        \n            .properties(Map.of(\"url\", \"\u003cWEBHOOK-URL\u003e\"))\n            .type(\"webhook\")\n            .build());\n\n        var servicenow = new Notification(\"servicenow\", NotificationArgs.builder()        \n            .properties(Map.ofEntries(\n                Map.entry(\"board_name\", \"\"),\n                Map.entry(\"instance_name\", \"\"),\n                Map.entry(\"password\", \"\u003cPASSWORD\u003e\"),\n                Map.entry(\"url\", \"\u003cSERVICENOW-URL\u003e\"),\n                Map.entry(\"user\", \"\u003cUSERNAME\u003e\")\n            ))\n            .type(\"serviceNow\")\n            .build());\n\n        var jiraWithToken = new Notification(\"jiraWithToken\", NotificationArgs.builder()        \n            .properties(Map.ofEntries(\n                Map.entry(\"definition_of_done\", \"Done\"),\n                Map.entry(\"project_key\", \"\u003cJIRA_PROJECT_KEY\u003e\"),\n                Map.entry(\"summary\", \"SOME_TEXT\"),\n                Map.entry(\"token\", \"\u003cJIRA-TOKEN\u003e\"),\n                Map.entry(\"url\", \"\u003cJIRA-URL\u003e\")\n            ))\n            .type(\"jira\")\n            .build());\n\n        var jiraWithCreds = new Notification(\"jiraWithCreds\", NotificationArgs.builder()        \n            .properties(Map.ofEntries(\n                Map.entry(\"password\", \"\u003cJIRA_PASSWORD\u003e\"),\n                Map.entry(\"project_key\", \"\u003cJIRA_PROJECT_KEY\u003e\"),\n                Map.entry(\"summary\", \"SOME_TEXT\"),\n                Map.entry(\"url\", \"\u003cJIRA-URL\u003e\"),\n                Map.entry(\"user\", \"\u003cJIRA_USERNAME\u003e\")\n            ))\n            .type(\"jira\")\n            .build());\n\n        var emailWithCreds = new Notification(\"emailWithCreds\", NotificationArgs.builder()        \n            .properties(Map.ofEntries(\n                Map.entry(\"host\", \"\u003cEMAIL_HOST\u003e\"),\n                Map.entry(\"password\", \"\u003cEMAIL_PASSWORD\u003e\"),\n                Map.entry(\"port\", \"\u003cEMAIL_PORT\u003e\"),\n                Map.entry(\"recipients\", \"\u003cRECIPIENTS\u003e\"),\n                Map.entry(\"sender\", \"\u003cSENDER_EMAIL_ADDRESS\u003e\"),\n                Map.entry(\"user\", \"\u003cEMAIL_USERNAME\u003e\")\n            ))\n            .type(\"email\")\n            .build());\n\n        var emailWithMx = new Notification(\"emailWithMx\", NotificationArgs.builder()        \n            .properties(Map.ofEntries(\n                Map.entry(\"port\", \"\u003cEMAIL_PORT\u003e\"),\n                Map.entry(\"recipients\", \"\u003cRECIPIENTS\u003e\"),\n                Map.entry(\"sender\", \"\u003cSENDER_EMAIL_ADDRESS\u003e\"),\n                Map.entry(\"use_mx\", true)\n            ))\n            .type(\"email\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  teams:\n    type: aquasec:Notification\n    properties:\n      properties:\n        url: \u003cTEAMS-URL\u003e\n      type: teams\n  slack:\n    type: aquasec:Notification\n    properties:\n      properties:\n        url: \u003cSLACK-URL\u003e\n      type: slack\n  webhook:\n    type: aquasec:Notification\n    properties:\n      properties:\n        url: \u003cWEBHOOK-URL\u003e\n      type: webhook\n  servicenow:\n    type: aquasec:Notification\n    properties:\n      properties:\n        board_name:\n        instance_name:\n        password: \u003cPASSWORD\u003e\n        url: \u003cSERVICENOW-URL\u003e\n        user: \u003cUSERNAME\u003e\n      type: serviceNow\n  jiraWithToken:\n    type: aquasec:Notification\n    properties:\n      properties:\n        definition_of_done: Done\n        project_key: \u003cJIRA_PROJECT_KEY\u003e\n        summary: SOME_TEXT\n        token: \u003cJIRA-TOKEN\u003e\n        url: \u003cJIRA-URL\u003e\n      type: jira\n  jiraWithCreds:\n    type: aquasec:Notification\n    properties:\n      properties:\n        password: \u003cJIRA_PASSWORD\u003e\n        project_key: \u003cJIRA_PROJECT_KEY\u003e\n        summary: SOME_TEXT\n        url: \u003cJIRA-URL\u003e\n        user: \u003cJIRA_USERNAME\u003e\n      type: jira\n  emailWithCreds:\n    type: aquasec:Notification\n    properties:\n      properties:\n        host: \u003cEMAIL_HOST\u003e\n        password: \u003cEMAIL_PASSWORD\u003e\n        port: \u003cEMAIL_PORT\u003e\n        recipients: \u003cRECIPIENTS\u003e\n        sender: \u003cSENDER_EMAIL_ADDRESS\u003e\n        user: \u003cEMAIL_USERNAME\u003e\n      type: email\n  emailWithMx:\n    type: aquasec:Notification\n    properties:\n      properties:\n        port: \u003cEMAIL_PORT\u003e\n        recipients: \u003cRECIPIENTS\u003e\n        sender: \u003cSENDER_EMAIL_ADDRESS\u003e\n        use_mx: true\n      type: email\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "author": {
                    "type": "string",
                    "description": "The user that created the notification\n"
                },
                "lastUpdated": {
                    "type": "string",
                    "description": "Notification last update time\n"
                },
                "name": {
                    "type": "string",
                    "description": "Notification name\n"
                },
                "properties": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Notification properties, please check the examples for setting it\n"
                },
                "template": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Notification Template\n"
                },
                "type": {
                    "type": "string",
                    "description": "Notifications types, allowed values: slack\\ jira\\ email\\ teams\\ webhook\\ splunk\\ serviceNow\n"
                }
            },
            "required": [
                "author",
                "lastUpdated",
                "name",
                "properties",
                "template",
                "type"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "Notification name\n"
                },
                "properties": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Notification properties, please check the examples for setting it\n"
                },
                "type": {
                    "type": "string",
                    "description": "Notifications types, allowed values: slack\\ jira\\ email\\ teams\\ webhook\\ splunk\\ serviceNow\n"
                }
            },
            "requiredInputs": [
                "properties",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Notification resources.\n",
                "properties": {
                    "author": {
                        "type": "string",
                        "description": "The user that created the notification\n"
                    },
                    "lastUpdated": {
                        "type": "string",
                        "description": "Notification last update time\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Notification name\n"
                    },
                    "properties": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Notification properties, please check the examples for setting it\n"
                    },
                    "template": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Notification Template\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Notifications types, allowed values: slack\\ jira\\ email\\ teams\\ webhook\\ splunk\\ serviceNow\n"
                    }
                },
                "type": "object"
            }
        },
        "aquasec:index/notificationSlack:NotificationSlack": {
            "description": "Provides an Aquasec Notification Slack resource\n\n\u003e **Note about resource deprecation**\nResource aquasec.NotificationSlack is deprecated, please use aquasec.Notification instead\n",
            "properties": {
                "channel": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "icon": {
                    "type": "string"
                },
                "mainText": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "serviceKey": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "userName": {
                    "type": "string"
                },
                "webhookUrl": {
                    "type": "string"
                }
            },
            "required": [
                "channel",
                "enabled",
                "name",
                "type",
                "userName",
                "webhookUrl"
            ],
            "inputProperties": {
                "channel": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "icon": {
                    "type": "string"
                },
                "mainText": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "serviceKey": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "userName": {
                    "type": "string"
                },
                "webhookUrl": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "channel",
                "enabled",
                "type",
                "userName",
                "webhookUrl"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NotificationSlack resources.\n",
                "properties": {
                    "channel": {
                        "type": "string"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "icon": {
                        "type": "string"
                    },
                    "mainText": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "serviceKey": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "userName": {
                        "type": "string"
                    },
                    "webhookUrl": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "aquasec:index/permissionsSets:PermissionsSets": {
            "description": "The `aquasec.PermissionsSets` resource manages your Permission Set within Aqua.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aquasec from \"@pulumiverse/aquasec\";\n\nconst myTerraformPermSet = new aquasec.PermissionsSets(\"myTerraformPermSet\", {\n    actions: [\n        \"acl_policies.read\",\n        \"acl_policies.write\",\n        \"image_profiles.read\",\n        \"image_profiles.write\",\n        \"network_policies.read\",\n        \"network_policies.write\",\n        \"runtime_policies.read\",\n        \"runtime_policies.write\",\n        \"response_policies.read\",\n        \"response_policies.write\",\n        \"image_assurance.read\",\n        \"image_assurance.write\",\n        \"dashboard.read\",\n        \"dashboard.write\",\n        \"risk_explorer.read\",\n        \"images.read\",\n        \"images.write\",\n        \"risks.host_images.read\",\n        \"risks.host_images.write\",\n        \"functions.read\",\n        \"functions.write\",\n        \"enforcers.read\",\n        \"enforcers.write\",\n        \"containers.read\",\n        \"services.read\",\n        \"services.write\",\n        \"infrastructure.read\",\n        \"infrastructure.write\",\n        \"risks.vulnerabilities.read\",\n        \"risks.vulnerabilities.write\",\n        \"risks.benchmark.read\",\n        \"risks.benchmark.write\",\n        \"audits.read\",\n        \"secrets.read\",\n        \"secrets.write\",\n        \"settings.read\",\n        \"settings.write\",\n        \"integrations.read\",\n        \"integrations.write\",\n        \"registries_integrations.read\",\n        \"registries_integrations.write\",\n        \"scan.read\",\n        \"gateways.read\",\n        \"gateways.write\",\n        \"consoles.read\",\n        \"web_hook.read\",\n        \"incidents.read\",\n    ],\n    author: \"system\",\n    description: \"Test Permissions Sets created by Terraform\",\n    isSuper: false,\n    uiAccess: true,\n});\n```\n```python\nimport pulumi\nimport pulumiverse_aquasec as aquasec\n\nmy_terraform_perm_set = aquasec.PermissionsSets(\"myTerraformPermSet\",\n    actions=[\n        \"acl_policies.read\",\n        \"acl_policies.write\",\n        \"image_profiles.read\",\n        \"image_profiles.write\",\n        \"network_policies.read\",\n        \"network_policies.write\",\n        \"runtime_policies.read\",\n        \"runtime_policies.write\",\n        \"response_policies.read\",\n        \"response_policies.write\",\n        \"image_assurance.read\",\n        \"image_assurance.write\",\n        \"dashboard.read\",\n        \"dashboard.write\",\n        \"risk_explorer.read\",\n        \"images.read\",\n        \"images.write\",\n        \"risks.host_images.read\",\n        \"risks.host_images.write\",\n        \"functions.read\",\n        \"functions.write\",\n        \"enforcers.read\",\n        \"enforcers.write\",\n        \"containers.read\",\n        \"services.read\",\n        \"services.write\",\n        \"infrastructure.read\",\n        \"infrastructure.write\",\n        \"risks.vulnerabilities.read\",\n        \"risks.vulnerabilities.write\",\n        \"risks.benchmark.read\",\n        \"risks.benchmark.write\",\n        \"audits.read\",\n        \"secrets.read\",\n        \"secrets.write\",\n        \"settings.read\",\n        \"settings.write\",\n        \"integrations.read\",\n        \"integrations.write\",\n        \"registries_integrations.read\",\n        \"registries_integrations.write\",\n        \"scan.read\",\n        \"gateways.read\",\n        \"gateways.write\",\n        \"consoles.read\",\n        \"web_hook.read\",\n        \"incidents.read\",\n    ],\n    author=\"system\",\n    description=\"Test Permissions Sets created by Terraform\",\n    is_super=False,\n    ui_access=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Aquasec = Pulumiverse.Aquasec;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myTerraformPermSet = new Aquasec.PermissionsSets(\"myTerraformPermSet\", new()\n    {\n        Actions = new[]\n        {\n            \"acl_policies.read\",\n            \"acl_policies.write\",\n            \"image_profiles.read\",\n            \"image_profiles.write\",\n            \"network_policies.read\",\n            \"network_policies.write\",\n            \"runtime_policies.read\",\n            \"runtime_policies.write\",\n            \"response_policies.read\",\n            \"response_policies.write\",\n            \"image_assurance.read\",\n            \"image_assurance.write\",\n            \"dashboard.read\",\n            \"dashboard.write\",\n            \"risk_explorer.read\",\n            \"images.read\",\n            \"images.write\",\n            \"risks.host_images.read\",\n            \"risks.host_images.write\",\n            \"functions.read\",\n            \"functions.write\",\n            \"enforcers.read\",\n            \"enforcers.write\",\n            \"containers.read\",\n            \"services.read\",\n            \"services.write\",\n            \"infrastructure.read\",\n            \"infrastructure.write\",\n            \"risks.vulnerabilities.read\",\n            \"risks.vulnerabilities.write\",\n            \"risks.benchmark.read\",\n            \"risks.benchmark.write\",\n            \"audits.read\",\n            \"secrets.read\",\n            \"secrets.write\",\n            \"settings.read\",\n            \"settings.write\",\n            \"integrations.read\",\n            \"integrations.write\",\n            \"registries_integrations.read\",\n            \"registries_integrations.write\",\n            \"scan.read\",\n            \"gateways.read\",\n            \"gateways.write\",\n            \"consoles.read\",\n            \"web_hook.read\",\n            \"incidents.read\",\n        },\n        Author = \"system\",\n        Description = \"Test Permissions Sets created by Terraform\",\n        IsSuper = false,\n        UiAccess = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-aquasec/sdk/go/aquasec\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := aquasec.NewPermissionsSets(ctx, \"myTerraformPermSet\", \u0026aquasec.PermissionsSetsArgs{\n\t\t\tActions: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"acl_policies.read\"),\n\t\t\t\tpulumi.String(\"acl_policies.write\"),\n\t\t\t\tpulumi.String(\"image_profiles.read\"),\n\t\t\t\tpulumi.String(\"image_profiles.write\"),\n\t\t\t\tpulumi.String(\"network_policies.read\"),\n\t\t\t\tpulumi.String(\"network_policies.write\"),\n\t\t\t\tpulumi.String(\"runtime_policies.read\"),\n\t\t\t\tpulumi.String(\"runtime_policies.write\"),\n\t\t\t\tpulumi.String(\"response_policies.read\"),\n\t\t\t\tpulumi.String(\"response_policies.write\"),\n\t\t\t\tpulumi.String(\"image_assurance.read\"),\n\t\t\t\tpulumi.String(\"image_assurance.write\"),\n\t\t\t\tpulumi.String(\"dashboard.read\"),\n\t\t\t\tpulumi.String(\"dashboard.write\"),\n\t\t\t\tpulumi.String(\"risk_explorer.read\"),\n\t\t\t\tpulumi.String(\"images.read\"),\n\t\t\t\tpulumi.String(\"images.write\"),\n\t\t\t\tpulumi.String(\"risks.host_images.read\"),\n\t\t\t\tpulumi.String(\"risks.host_images.write\"),\n\t\t\t\tpulumi.String(\"functions.read\"),\n\t\t\t\tpulumi.String(\"functions.write\"),\n\t\t\t\tpulumi.String(\"enforcers.read\"),\n\t\t\t\tpulumi.String(\"enforcers.write\"),\n\t\t\t\tpulumi.String(\"containers.read\"),\n\t\t\t\tpulumi.String(\"services.read\"),\n\t\t\t\tpulumi.String(\"services.write\"),\n\t\t\t\tpulumi.String(\"infrastructure.read\"),\n\t\t\t\tpulumi.String(\"infrastructure.write\"),\n\t\t\t\tpulumi.String(\"risks.vulnerabilities.read\"),\n\t\t\t\tpulumi.String(\"risks.vulnerabilities.write\"),\n\t\t\t\tpulumi.String(\"risks.benchmark.read\"),\n\t\t\t\tpulumi.String(\"risks.benchmark.write\"),\n\t\t\t\tpulumi.String(\"audits.read\"),\n\t\t\t\tpulumi.String(\"secrets.read\"),\n\t\t\t\tpulumi.String(\"secrets.write\"),\n\t\t\t\tpulumi.String(\"settings.read\"),\n\t\t\t\tpulumi.String(\"settings.write\"),\n\t\t\t\tpulumi.String(\"integrations.read\"),\n\t\t\t\tpulumi.String(\"integrations.write\"),\n\t\t\t\tpulumi.String(\"registries_integrations.read\"),\n\t\t\t\tpulumi.String(\"registries_integrations.write\"),\n\t\t\t\tpulumi.String(\"scan.read\"),\n\t\t\t\tpulumi.String(\"gateways.read\"),\n\t\t\t\tpulumi.String(\"gateways.write\"),\n\t\t\t\tpulumi.String(\"consoles.read\"),\n\t\t\t\tpulumi.String(\"web_hook.read\"),\n\t\t\t\tpulumi.String(\"incidents.read\"),\n\t\t\t},\n\t\t\tAuthor:      pulumi.String(\"system\"),\n\t\t\tDescription: pulumi.String(\"Test Permissions Sets created by Terraform\"),\n\t\t\tIsSuper:     pulumi.Bool(false),\n\t\t\tUiAccess:    pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aquasec.PermissionsSets;\nimport com.pulumi.aquasec.PermissionsSetsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myTerraformPermSet = new PermissionsSets(\"myTerraformPermSet\", PermissionsSetsArgs.builder()        \n            .actions(            \n                \"acl_policies.read\",\n                \"acl_policies.write\",\n                \"image_profiles.read\",\n                \"image_profiles.write\",\n                \"network_policies.read\",\n                \"network_policies.write\",\n                \"runtime_policies.read\",\n                \"runtime_policies.write\",\n                \"response_policies.read\",\n                \"response_policies.write\",\n                \"image_assurance.read\",\n                \"image_assurance.write\",\n                \"dashboard.read\",\n                \"dashboard.write\",\n                \"risk_explorer.read\",\n                \"images.read\",\n                \"images.write\",\n                \"risks.host_images.read\",\n                \"risks.host_images.write\",\n                \"functions.read\",\n                \"functions.write\",\n                \"enforcers.read\",\n                \"enforcers.write\",\n                \"containers.read\",\n                \"services.read\",\n                \"services.write\",\n                \"infrastructure.read\",\n                \"infrastructure.write\",\n                \"risks.vulnerabilities.read\",\n                \"risks.vulnerabilities.write\",\n                \"risks.benchmark.read\",\n                \"risks.benchmark.write\",\n                \"audits.read\",\n                \"secrets.read\",\n                \"secrets.write\",\n                \"settings.read\",\n                \"settings.write\",\n                \"integrations.read\",\n                \"integrations.write\",\n                \"registries_integrations.read\",\n                \"registries_integrations.write\",\n                \"scan.read\",\n                \"gateways.read\",\n                \"gateways.write\",\n                \"consoles.read\",\n                \"web_hook.read\",\n                \"incidents.read\")\n            .author(\"system\")\n            .description(\"Test Permissions Sets created by Terraform\")\n            .isSuper(false)\n            .uiAccess(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myTerraformPermSet:\n    type: aquasec:PermissionsSets\n    properties:\n      actions:\n        - acl_policies.read\n        - acl_policies.write\n        - image_profiles.read\n        - image_profiles.write\n        - network_policies.read\n        - network_policies.write\n        - runtime_policies.read\n        - runtime_policies.write\n        - response_policies.read\n        - response_policies.write\n        - image_assurance.read\n        - image_assurance.write\n        - dashboard.read\n        - dashboard.write\n        - risk_explorer.read\n        - images.read\n        - images.write\n        - risks.host_images.read\n        - risks.host_images.write\n        - functions.read\n        - functions.write\n        - enforcers.read\n        - enforcers.write\n        - containers.read\n        - services.read\n        - services.write\n        - infrastructure.read\n        - infrastructure.write\n        - risks.vulnerabilities.read\n        - risks.vulnerabilities.write\n        - risks.benchmark.read\n        - risks.benchmark.write\n        - audits.read\n        - secrets.read\n        - secrets.write\n        - settings.read\n        - settings.write\n        - integrations.read\n        - integrations.write\n        - registries_integrations.read\n        - registries_integrations.write\n        - scan.read\n        - gateways.read\n        - gateways.write\n        - consoles.read\n        - web_hook.read\n        - incidents.read\n      author: system\n      description: Test Permissions Sets created by Terraform\n      isSuper: false\n      uiAccess: true\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "actions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of allowed actions for the Permission Set (not relevant if 'is_super' is true).\n"
                },
                "author": {
                    "type": "string",
                    "description": "The name of the user who created the Permission Set.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Free text description for the Permission Set.\n"
                },
                "isSuper": {
                    "type": "boolean",
                    "description": "Give the Permission Set full access, meaning all actions are allowed without restriction.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Permission Set, comprised of alphanumeric characters and '-', '_', ' ', ':', '.', '@', '!', '^'.\n"
                },
                "uiAccess": {
                    "type": "boolean",
                    "description": "Whether to allow UI access for users with this Permission Set.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date of the last modification of the Role.\n"
                }
            },
            "required": [
                "actions",
                "name",
                "uiAccess",
                "updatedAt"
            ],
            "inputProperties": {
                "actions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of allowed actions for the Permission Set (not relevant if 'is_super' is true).\n"
                },
                "author": {
                    "type": "string",
                    "description": "The name of the user who created the Permission Set.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Free text description for the Permission Set.\n"
                },
                "isSuper": {
                    "type": "boolean",
                    "description": "Give the Permission Set full access, meaning all actions are allowed without restriction.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Permission Set, comprised of alphanumeric characters and '-', '_', ' ', ':', '.', '@', '!', '^'.\n",
                    "willReplaceOnChanges": true
                },
                "uiAccess": {
                    "type": "boolean",
                    "description": "Whether to allow UI access for users with this Permission Set.\n"
                }
            },
            "requiredInputs": [
                "actions",
                "uiAccess"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PermissionsSets resources.\n",
                "properties": {
                    "actions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of allowed actions for the Permission Set (not relevant if 'is_super' is true).\n"
                    },
                    "author": {
                        "type": "string",
                        "description": "The name of the user who created the Permission Set.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Free text description for the Permission Set.\n"
                    },
                    "isSuper": {
                        "type": "boolean",
                        "description": "Give the Permission Set full access, meaning all actions are allowed without restriction.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Permission Set, comprised of alphanumeric characters and '-', '_', ' ', ':', '.', '@', '!', '^'.\n",
                        "willReplaceOnChanges": true
                    },
                    "uiAccess": {
                        "type": "boolean",
                        "description": "Whether to allow UI access for users with this Permission Set.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The date of the last modification of the Role.\n"
                    }
                },
                "type": "object"
            }
        },
        "aquasec:index/role:Role": {
            "description": "The `aquasec.Role` resource manages your roles within Aqua.\n\nThe roles created must have permission set and at least one Role Application Scope that is already present within Aqua.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aquasec from \"@pulumiverse/aquasec\";\n\nconst iaC = new aquasec.Role(\"iaC\", {\n    description: \"RoleIaC\",\n    permission: \"PermissionIaC\",\n    roleName: \"RoleIaC\",\n    scopes: [\"Global\"],\n});\n```\n```python\nimport pulumi\nimport pulumiverse_aquasec as aquasec\n\nia_c = aquasec.Role(\"iaC\",\n    description=\"RoleIaC\",\n    permission=\"PermissionIaC\",\n    role_name=\"RoleIaC\",\n    scopes=[\"Global\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Aquasec = Pulumiverse.Aquasec;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var iaC = new Aquasec.Role(\"iaC\", new()\n    {\n        Description = \"RoleIaC\",\n        Permission = \"PermissionIaC\",\n        RoleName = \"RoleIaC\",\n        Scopes = new[]\n        {\n            \"Global\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-aquasec/sdk/go/aquasec\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := aquasec.NewRole(ctx, \"iaC\", \u0026aquasec.RoleArgs{\n\t\t\tDescription: pulumi.String(\"RoleIaC\"),\n\t\t\tPermission:  pulumi.String(\"PermissionIaC\"),\n\t\t\tRoleName:    pulumi.String(\"RoleIaC\"),\n\t\t\tScopes: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"Global\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aquasec.Role;\nimport com.pulumi.aquasec.RoleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var iaC = new Role(\"iaC\", RoleArgs.builder()        \n            .description(\"RoleIaC\")\n            .permission(\"PermissionIaC\")\n            .roleName(\"RoleIaC\")\n            .scopes(\"Global\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  iaC:\n    type: aquasec:Role\n    properties:\n      description: RoleIaC\n      permission: PermissionIaC\n      roleName: RoleIaC\n      scopes:\n        - Global\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "author": {
                    "type": "string",
                    "description": "The name of the user who created the role. Only returned from the API for existing permissions, not part of the permission creation/modification structure.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Free text description for the role.\n"
                },
                "permission": {
                    "type": "string",
                    "description": "The name of the Permission Set that will affect the users assigned to this specific Role.\n"
                },
                "roleName": {
                    "type": "string",
                    "description": "The name of the role, comprised of alphanumeric characters and '-', '_', ' ', ':', '.', '@', '!', '^'.\n"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Application Scopes that will affect the users assigned to this specific Role.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date of the last modification of the role.\n"
                }
            },
            "required": [
                "author",
                "permission",
                "roleName",
                "scopes",
                "updatedAt"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Free text description for the role.\n"
                },
                "permission": {
                    "type": "string",
                    "description": "The name of the Permission Set that will affect the users assigned to this specific Role.\n"
                },
                "roleName": {
                    "type": "string",
                    "description": "The name of the role, comprised of alphanumeric characters and '-', '_', ' ', ':', '.', '@', '!', '^'.\n",
                    "willReplaceOnChanges": true
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Application Scopes that will affect the users assigned to this specific Role.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The date of the last modification of the role.\n"
                }
            },
            "requiredInputs": [
                "permission",
                "roleName",
                "scopes"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Role resources.\n",
                "properties": {
                    "author": {
                        "type": "string",
                        "description": "The name of the user who created the role. Only returned from the API for existing permissions, not part of the permission creation/modification structure.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Free text description for the role.\n"
                    },
                    "permission": {
                        "type": "string",
                        "description": "The name of the Permission Set that will affect the users assigned to this specific Role.\n"
                    },
                    "roleName": {
                        "type": "string",
                        "description": "The name of the role, comprised of alphanumeric characters and '-', '_', ' ', ':', '.', '@', '!', '^'.\n",
                        "willReplaceOnChanges": true
                    },
                    "scopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of Application Scopes that will affect the users assigned to this specific Role.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The date of the last modification of the role.\n"
                    }
                },
                "type": "object"
            }
        },
        "aquasec:index/roleMapping:RoleMapping": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aquasec from \"@pulumiverse/aquasec\";\n\nconst roleMappingRoleMapping = new aquasec.RoleMapping(\"roleMappingRoleMapping\", {saml: {\n    roleMapping: {\n        Administrator: \"group1\",\n    },\n}});\nexport const roleMapping = roleMappingRoleMapping;\n```\n```python\nimport pulumi\nimport pulumiverse_aquasec as aquasec\n\nrole_mapping_role_mapping = aquasec.RoleMapping(\"roleMappingRoleMapping\", saml=aquasec.RoleMappingSamlArgs(\n    role_mapping={\n        \"Administrator\": \"group1\",\n    },\n))\npulumi.export(\"roleMapping\", role_mapping_role_mapping)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Aquasec = Pulumiverse.Aquasec;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var roleMappingRoleMapping = new Aquasec.RoleMapping(\"roleMappingRoleMapping\", new()\n    {\n        Saml = new Aquasec.Inputs.RoleMappingSamlArgs\n        {\n            RoleMapping = \n            {\n                { \"Administrator\", \"group1\" },\n            },\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"roleMapping\"] = roleMappingRoleMapping,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-aquasec/sdk/go/aquasec\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\troleMappingRoleMapping, err := aquasec.NewRoleMapping(ctx, \"roleMappingRoleMapping\", \u0026aquasec.RoleMappingArgs{\n\t\t\tSaml: \u0026aquasec.RoleMappingSamlArgs{\n\t\t\t\tRoleMapping: pulumi.StringMap{\n\t\t\t\t\t\"Administrator\": pulumi.String(\"group1\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"roleMapping\", roleMappingRoleMapping)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aquasec.RoleMapping;\nimport com.pulumi.aquasec.RoleMappingArgs;\nimport com.pulumi.aquasec.inputs.RoleMappingSamlArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var roleMappingRoleMapping = new RoleMapping(\"roleMappingRoleMapping\", RoleMappingArgs.builder()        \n            .saml(RoleMappingSamlArgs.builder()\n                .roleMapping(Map.of(\"Administrator\", \"group1\"))\n                .build())\n            .build());\n\n        ctx.export(\"roleMapping\", roleMappingRoleMapping);\n    }\n}\n```\n```yaml\nresources:\n  roleMappingRoleMapping:\n    type: aquasec:RoleMapping\n    properties:\n      saml:\n        roleMapping:\n          Administrator: group1\noutputs:\n  roleMapping: ${roleMappingRoleMapping}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "ldap": {
                    "$ref": "#/types/aquasec:index/RoleMappingLdap:RoleMappingLdap",
                    "description": "LDAP Authentication\n"
                },
                "oauth2": {
                    "$ref": "#/types/aquasec:index/RoleMappingOauth2:RoleMappingOauth2",
                    "description": "Oauth2 Authentication\n"
                },
                "openid": {
                    "$ref": "#/types/aquasec:index/RoleMappingOpenid:RoleMappingOpenid",
                    "description": "OpenId Authentication\n"
                },
                "saml": {
                    "$ref": "#/types/aquasec:index/RoleMappingSaml:RoleMappingSaml",
                    "description": "SAML Authentication\n"
                }
            },
            "inputProperties": {
                "ldap": {
                    "$ref": "#/types/aquasec:index/RoleMappingLdap:RoleMappingLdap",
                    "description": "LDAP Authentication\n"
                },
                "oauth2": {
                    "$ref": "#/types/aquasec:index/RoleMappingOauth2:RoleMappingOauth2",
                    "description": "Oauth2 Authentication\n"
                },
                "openid": {
                    "$ref": "#/types/aquasec:index/RoleMappingOpenid:RoleMappingOpenid",
                    "description": "OpenId Authentication\n"
                },
                "saml": {
                    "$ref": "#/types/aquasec:index/RoleMappingSaml:RoleMappingSaml",
                    "description": "SAML Authentication\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RoleMapping resources.\n",
                "properties": {
                    "ldap": {
                        "$ref": "#/types/aquasec:index/RoleMappingLdap:RoleMappingLdap",
                        "description": "LDAP Authentication\n"
                    },
                    "oauth2": {
                        "$ref": "#/types/aquasec:index/RoleMappingOauth2:RoleMappingOauth2",
                        "description": "Oauth2 Authentication\n"
                    },
                    "openid": {
                        "$ref": "#/types/aquasec:index/RoleMappingOpenid:RoleMappingOpenid",
                        "description": "OpenId Authentication\n"
                    },
                    "saml": {
                        "$ref": "#/types/aquasec:index/RoleMappingSaml:RoleMappingSaml",
                        "description": "SAML Authentication\n"
                    }
                },
                "type": "object"
            }
        },
        "aquasec:index/roleMappingSaas:RoleMappingSaas": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aquasec from \"@pulumiverse/aquasec\";\n\nconst rolesMappingSaasRoleMappingSaas = new aquasec.RoleMappingSaas(\"rolesMappingSaasRoleMappingSaas\", {\n    samlGroups: [\n        \"group1\",\n        \"group2\",\n    ],\n    cspRole: \"Administrator\",\n});\nexport const rolesMappingSaas = rolesMappingSaasRoleMappingSaas;\n```\n```python\nimport pulumi\nimport pulumiverse_aquasec as aquasec\n\nroles_mapping_saas_role_mapping_saas = aquasec.RoleMappingSaas(\"rolesMappingSaasRoleMappingSaas\",\n    saml_groups=[\n        \"group1\",\n        \"group2\",\n    ],\n    csp_role=\"Administrator\")\npulumi.export(\"rolesMappingSaas\", roles_mapping_saas_role_mapping_saas)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Aquasec = Pulumiverse.Aquasec;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var rolesMappingSaasRoleMappingSaas = new Aquasec.RoleMappingSaas(\"rolesMappingSaasRoleMappingSaas\", new()\n    {\n        SamlGroups = new[]\n        {\n            \"group1\",\n            \"group2\",\n        },\n        CspRole = \"Administrator\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"rolesMappingSaas\"] = rolesMappingSaasRoleMappingSaas,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-aquasec/sdk/go/aquasec\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\trolesMappingSaasRoleMappingSaas, err := aquasec.NewRoleMappingSaas(ctx, \"rolesMappingSaasRoleMappingSaas\", \u0026aquasec.RoleMappingSaasArgs{\n\t\t\tSamlGroups: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"group1\"),\n\t\t\t\tpulumi.String(\"group2\"),\n\t\t\t},\n\t\t\tCspRole: pulumi.String(\"Administrator\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"rolesMappingSaas\", rolesMappingSaasRoleMappingSaas)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aquasec.RoleMappingSaas;\nimport com.pulumi.aquasec.RoleMappingSaasArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var rolesMappingSaasRoleMappingSaas = new RoleMappingSaas(\"rolesMappingSaasRoleMappingSaas\", RoleMappingSaasArgs.builder()        \n            .samlGroups(            \n                \"group1\",\n                \"group2\")\n            .cspRole(\"Administrator\")\n            .build());\n\n        ctx.export(\"rolesMappingSaas\", rolesMappingSaasRoleMappingSaas);\n    }\n}\n```\n```yaml\nresources:\n  rolesMappingSaasRoleMappingSaas:\n    type: aquasec:RoleMappingSaas\n    properties:\n      samlGroups:\n        - group1\n        - group2\n      cspRole: Administrator\noutputs:\n  rolesMappingSaas: ${rolesMappingSaasRoleMappingSaas}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "accountId": {
                    "type": "integer"
                },
                "created": {
                    "type": "string"
                },
                "cspRole": {
                    "type": "string"
                },
                "roleMappingId": {
                    "type": "integer"
                },
                "samlGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "accountId",
                "created",
                "cspRole",
                "roleMappingId",
                "samlGroups"
            ],
            "inputProperties": {
                "cspRole": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "samlGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "requiredInputs": [
                "cspRole",
                "samlGroups"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RoleMappingSaas resources.\n",
                "properties": {
                    "accountId": {
                        "type": "integer"
                    },
                    "created": {
                        "type": "string"
                    },
                    "cspRole": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "roleMappingId": {
                        "type": "integer"
                    },
                    "samlGroups": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object"
            }
        },
        "aquasec:index/service:Service": {
            "properties": {
                "applicationScopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Indicates the application scope of the service.\n"
                },
                "author": {
                    "type": "string",
                    "description": "Username of the account that created the service.\n"
                },
                "containersCount": {
                    "type": "integer",
                    "description": "The number of containers associated with the service.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A textual description of the service record; maximum 500 characters.\n"
                },
                "enforce": {
                    "type": "boolean",
                    "description": "Enforcement status of the service.\n"
                },
                "evaluated": {
                    "type": "boolean",
                    "description": "Whether the service has been evaluated for security vulnerabilities.\n"
                },
                "isRegistered": {
                    "type": "boolean",
                    "description": "Indicates if registered or not.\n"
                },
                "lastupdate": {
                    "type": "integer",
                    "description": "Timestamp of the last update in Unix time format.\n"
                },
                "monitoring": {
                    "type": "boolean",
                    "description": "Indicates if monitoring is enabled or not\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the service. It is recommended not to use whitespace characters in the name.\n"
                },
                "notEvaluatedCount": {
                    "type": "integer",
                    "description": "The number of container that are not evaluated.\n"
                },
                "policies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The service's policies; an array of container firewall policy names.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Rules priority, must be between 1-100.\n"
                },
                "scopeExpression": {
                    "type": "string",
                    "description": "Logical expression of how to compute the dependency of the scope variables.\n"
                },
                "scopeVariables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/ServiceScopeVariable:ServiceScopeVariable"
                    },
                    "description": "List of scope attributes.\n"
                },
                "target": {
                    "type": "string",
                    "description": "Type of the workload. container or host.\n"
                },
                "unregisteredCount": {
                    "type": "integer",
                    "description": "The number of containers allocated to the service that are not registered.\n"
                },
                "vulnerabilitiesHigh": {
                    "type": "integer",
                    "description": "Number of high severity vulnerabilities.\n"
                },
                "vulnerabilitiesLow": {
                    "type": "integer",
                    "description": "Number of low severity vulnerabilities.\n"
                },
                "vulnerabilitiesMalware": {
                    "type": "integer",
                    "description": "Number of malware.\n"
                },
                "vulnerabilitiesMedium": {
                    "type": "integer",
                    "description": "Number of medium severity vulnerabilities.\n"
                },
                "vulnerabilitiesNegligible": {
                    "type": "integer",
                    "description": "Number of negligible vulnerabilities.\n"
                },
                "vulnerabilitiesScoreAverage": {
                    "type": "integer",
                    "description": "The CVSS average vulnerabilities score.\n"
                },
                "vulnerabilitiesSensitive": {
                    "type": "integer",
                    "description": "Number of sensitive vulnerabilities.\n"
                },
                "vulnerabilitiesTotal": {
                    "type": "integer",
                    "description": "Total number of vulnerabilities.\n"
                }
            },
            "required": [
                "applicationScopes",
                "author",
                "containersCount",
                "evaluated",
                "isRegistered",
                "lastupdate",
                "name",
                "notEvaluatedCount",
                "policies",
                "target",
                "unregisteredCount",
                "vulnerabilitiesHigh",
                "vulnerabilitiesLow",
                "vulnerabilitiesMalware",
                "vulnerabilitiesMedium",
                "vulnerabilitiesNegligible",
                "vulnerabilitiesScoreAverage",
                "vulnerabilitiesSensitive",
                "vulnerabilitiesTotal"
            ],
            "inputProperties": {
                "applicationScopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Indicates the application scope of the service.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A textual description of the service record; maximum 500 characters.\n"
                },
                "enforce": {
                    "type": "boolean",
                    "description": "Enforcement status of the service.\n"
                },
                "monitoring": {
                    "type": "boolean",
                    "description": "Indicates if monitoring is enabled or not\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the service. It is recommended not to use whitespace characters in the name.\n",
                    "willReplaceOnChanges": true
                },
                "policies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The service's policies; an array of container firewall policy names.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Rules priority, must be between 1-100.\n"
                },
                "scopeExpression": {
                    "type": "string",
                    "description": "Logical expression of how to compute the dependency of the scope variables.\n"
                },
                "scopeVariables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/ServiceScopeVariable:ServiceScopeVariable"
                    },
                    "description": "List of scope attributes.\n"
                },
                "target": {
                    "type": "string",
                    "description": "Type of the workload. container or host.\n"
                }
            },
            "requiredInputs": [
                "applicationScopes",
                "policies",
                "target"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Service resources.\n",
                "properties": {
                    "applicationScopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Indicates the application scope of the service.\n"
                    },
                    "author": {
                        "type": "string",
                        "description": "Username of the account that created the service.\n"
                    },
                    "containersCount": {
                        "type": "integer",
                        "description": "The number of containers associated with the service.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A textual description of the service record; maximum 500 characters.\n"
                    },
                    "enforce": {
                        "type": "boolean",
                        "description": "Enforcement status of the service.\n"
                    },
                    "evaluated": {
                        "type": "boolean",
                        "description": "Whether the service has been evaluated for security vulnerabilities.\n"
                    },
                    "isRegistered": {
                        "type": "boolean",
                        "description": "Indicates if registered or not.\n"
                    },
                    "lastupdate": {
                        "type": "integer",
                        "description": "Timestamp of the last update in Unix time format.\n"
                    },
                    "monitoring": {
                        "type": "boolean",
                        "description": "Indicates if monitoring is enabled or not\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the service. It is recommended not to use whitespace characters in the name.\n",
                        "willReplaceOnChanges": true
                    },
                    "notEvaluatedCount": {
                        "type": "integer",
                        "description": "The number of container that are not evaluated.\n"
                    },
                    "policies": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The service's policies; an array of container firewall policy names.\n"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Rules priority, must be between 1-100.\n"
                    },
                    "scopeExpression": {
                        "type": "string",
                        "description": "Logical expression of how to compute the dependency of the scope variables.\n"
                    },
                    "scopeVariables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/ServiceScopeVariable:ServiceScopeVariable"
                        },
                        "description": "List of scope attributes.\n"
                    },
                    "target": {
                        "type": "string",
                        "description": "Type of the workload. container or host.\n"
                    },
                    "unregisteredCount": {
                        "type": "integer",
                        "description": "The number of containers allocated to the service that are not registered.\n"
                    },
                    "vulnerabilitiesHigh": {
                        "type": "integer",
                        "description": "Number of high severity vulnerabilities.\n"
                    },
                    "vulnerabilitiesLow": {
                        "type": "integer",
                        "description": "Number of low severity vulnerabilities.\n"
                    },
                    "vulnerabilitiesMalware": {
                        "type": "integer",
                        "description": "Number of malware.\n"
                    },
                    "vulnerabilitiesMedium": {
                        "type": "integer",
                        "description": "Number of medium severity vulnerabilities.\n"
                    },
                    "vulnerabilitiesNegligible": {
                        "type": "integer",
                        "description": "Number of negligible vulnerabilities.\n"
                    },
                    "vulnerabilitiesScoreAverage": {
                        "type": "integer",
                        "description": "The CVSS average vulnerabilities score.\n"
                    },
                    "vulnerabilitiesSensitive": {
                        "type": "integer",
                        "description": "Number of sensitive vulnerabilities.\n"
                    },
                    "vulnerabilitiesTotal": {
                        "type": "integer",
                        "description": "Total number of vulnerabilities.\n"
                    }
                },
                "type": "object"
            }
        },
        "aquasec:index/user:User": {
            "description": "The `aquasec.User` resource manages your users within Aqua.\n\nThe users created must have at least one Role that is already present within Aqua.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aquasec from \"@pulumiverse/aquasec\";\n\nconst iaC = new aquasec.User(\"iaC\", {\n    userId: \"IaC\",\n    password: _var.password,\n    roles: [\"infrastructure\"],\n    email: \"infrastructure@example.com\",\n    firstTime: true,\n});\n// Display name for this user\n```\n```python\nimport pulumi\nimport pulumiverse_aquasec as aquasec\n\nia_c = aquasec.User(\"iaC\",\n    user_id=\"IaC\",\n    password=var[\"password\"],\n    roles=[\"infrastructure\"],\n    email=\"infrastructure@example.com\",\n    first_time=True)\n# Display name for this user\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Aquasec = Pulumiverse.Aquasec;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var iaC = new Aquasec.User(\"iaC\", new()\n    {\n        UserId = \"IaC\",\n        Password = @var.Password,\n        Roles = new[]\n        {\n            \"infrastructure\",\n        },\n        Email = \"infrastructure@example.com\",\n        FirstTime = true,\n    });\n\n    // Display name for this user\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-aquasec/sdk/go/aquasec\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := aquasec.NewUser(ctx, \"iaC\", \u0026aquasec.UserArgs{\n\t\t\tUserId:   pulumi.String(\"IaC\"),\n\t\t\tPassword: pulumi.Any(_var.Password),\n\t\t\tRoles: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"infrastructure\"),\n\t\t\t},\n\t\t\tEmail:     pulumi.String(\"infrastructure@example.com\"),\n\t\t\tFirstTime: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aquasec.User;\nimport com.pulumi.aquasec.UserArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var iaC = new User(\"iaC\", UserArgs.builder()        \n            .userId(\"IaC\")\n            .password(var_.password())\n            .roles(\"infrastructure\")\n            .email(\"infrastructure@example.com\")\n            .firstTime(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  iaC:\n    type: aquasec:User\n    properties:\n      userId: IaC\n      password: ${var.password}\n      roles:\n        - infrastructure\n      # optional fields\n      email: infrastructure@example.com\n      firstTime: true\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "email": {
                    "type": "string",
                    "description": "The user Email.\n"
                },
                "firstTime": {
                    "type": "boolean",
                    "description": "If the user must change the password first login. Applicable only one time, Later for user password resets use aqua console.\n"
                },
                "isSuper": {
                    "type": "boolean",
                    "description": "Give the Permission Set full access, meaning all actions are allowed without restriction.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The user name.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Login password for the user; string, required, at least 8 characters long.\n"
                },
                "passwordConfirm": {
                    "type": "string",
                    "description": "Password confirmation.\n"
                },
                "plan": {
                    "type": "string",
                    "description": "User's Aqua plan (Developer / Team / Advanced).\n"
                },
                "role": {
                    "type": "string",
                    "description": "The first role that assigned to the user for backward compatibility.\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The roles that will be assigned to the user.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The user type (Aqua, LDAP, SAML, OAuth2, OpenID, Tenant Manager).\n"
                },
                "uiAccess": {
                    "type": "boolean",
                    "description": "Whether to allow UI access for users with this Permission Set.\n"
                },
                "userId": {
                    "type": "string",
                    "description": "The user ID.\n"
                }
            },
            "required": [
                "isSuper",
                "name",
                "password",
                "plan",
                "role",
                "roles",
                "type",
                "uiAccess",
                "userId"
            ],
            "inputProperties": {
                "email": {
                    "type": "string",
                    "description": "The user Email.\n"
                },
                "firstTime": {
                    "type": "boolean",
                    "description": "If the user must change the password first login. Applicable only one time, Later for user password resets use aqua console.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The user name.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Login password for the user; string, required, at least 8 characters long.\n"
                },
                "passwordConfirm": {
                    "type": "string",
                    "description": "Password confirmation.\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The roles that will be assigned to the user.\n"
                },
                "userId": {
                    "type": "string",
                    "description": "The user ID.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "password",
                "roles",
                "userId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering User resources.\n",
                "properties": {
                    "email": {
                        "type": "string",
                        "description": "The user Email.\n"
                    },
                    "firstTime": {
                        "type": "boolean",
                        "description": "If the user must change the password first login. Applicable only one time, Later for user password resets use aqua console.\n"
                    },
                    "isSuper": {
                        "type": "boolean",
                        "description": "Give the Permission Set full access, meaning all actions are allowed without restriction.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The user name.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Login password for the user; string, required, at least 8 characters long.\n"
                    },
                    "passwordConfirm": {
                        "type": "string",
                        "description": "Password confirmation.\n"
                    },
                    "plan": {
                        "type": "string",
                        "description": "User's Aqua plan (Developer / Team / Advanced).\n"
                    },
                    "role": {
                        "type": "string",
                        "description": "The first role that assigned to the user for backward compatibility.\n"
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The roles that will be assigned to the user.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The user type (Aqua, LDAP, SAML, OAuth2, OpenID, Tenant Manager).\n"
                    },
                    "uiAccess": {
                        "type": "boolean",
                        "description": "Whether to allow UI access for users with this Permission Set.\n"
                    },
                    "userId": {
                        "type": "string",
                        "description": "The user ID.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "aquasec:index/userSaas:UserSaas": {
            "description": "The `aquasec.UserSaas` resource manages your saas users within Aqua.\n\nThe users created must have at least one Csp Role that is already present within Aqua.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aquasec from \"@pulumiverse/aquasec\";\n\nconst iaC1 = new aquasec.UserSaas(\"iaC1\", {\n    accountAdmin: true,\n    cspRoles: [],\n    email: \"infrastructure1@example.com\",\n});\nconst iaC2 = new aquasec.UserSaas(\"iaC2\", {\n    accountAdmin: false,\n    cspRoles: [\"Default\"],\n    email: \"infrastructure2@example.com\",\n    groups: [{\n        groupAdmin: false,\n        name: \"IacGroupName\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumiverse_aquasec as aquasec\n\nia_c1 = aquasec.UserSaas(\"iaC1\",\n    account_admin=True,\n    csp_roles=[],\n    email=\"infrastructure1@example.com\")\nia_c2 = aquasec.UserSaas(\"iaC2\",\n    account_admin=False,\n    csp_roles=[\"Default\"],\n    email=\"infrastructure2@example.com\",\n    groups=[aquasec.UserSaasGroupArgs(\n        group_admin=False,\n        name=\"IacGroupName\",\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Aquasec = Pulumiverse.Aquasec;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var iaC1 = new Aquasec.UserSaas(\"iaC1\", new()\n    {\n        AccountAdmin = true,\n        CspRoles = new[] {},\n        Email = \"infrastructure1@example.com\",\n    });\n\n    var iaC2 = new Aquasec.UserSaas(\"iaC2\", new()\n    {\n        AccountAdmin = false,\n        CspRoles = new[]\n        {\n            \"Default\",\n        },\n        Email = \"infrastructure2@example.com\",\n        Groups = new[]\n        {\n            new Aquasec.Inputs.UserSaasGroupArgs\n            {\n                GroupAdmin = false,\n                Name = \"IacGroupName\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-aquasec/sdk/go/aquasec\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := aquasec.NewUserSaas(ctx, \"iaC1\", \u0026aquasec.UserSaasArgs{\n\t\t\tAccountAdmin: pulumi.Bool(true),\n\t\t\tCspRoles:     pulumi.StringArray{},\n\t\t\tEmail:        pulumi.String(\"infrastructure1@example.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = aquasec.NewUserSaas(ctx, \"iaC2\", \u0026aquasec.UserSaasArgs{\n\t\t\tAccountAdmin: pulumi.Bool(false),\n\t\t\tCspRoles: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"Default\"),\n\t\t\t},\n\t\t\tEmail: pulumi.String(\"infrastructure2@example.com\"),\n\t\t\tGroups: aquasec.UserSaasGroupArray{\n\t\t\t\t\u0026aquasec.UserSaasGroupArgs{\n\t\t\t\t\tGroupAdmin: pulumi.Bool(false),\n\t\t\t\t\tName:       pulumi.String(\"IacGroupName\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aquasec.UserSaas;\nimport com.pulumi.aquasec.UserSaasArgs;\nimport com.pulumi.aquasec.inputs.UserSaasGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var iaC1 = new UserSaas(\"iaC1\", UserSaasArgs.builder()        \n            .accountAdmin(true)\n            .cspRoles()\n            .email(\"infrastructure1@example.com\")\n            .build());\n\n        var iaC2 = new UserSaas(\"iaC2\", UserSaasArgs.builder()        \n            .accountAdmin(false)\n            .cspRoles(\"Default\")\n            .email(\"infrastructure2@example.com\")\n            .groups(UserSaasGroupArgs.builder()\n                .groupAdmin(false)\n                .name(\"IacGroupName\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  iaC1:\n    type: aquasec:UserSaas\n    properties:\n      accountAdmin: true\n      cspRoles: []\n      email: infrastructure1@example.com\n  iaC2:\n    type: aquasec:UserSaas\n    properties:\n      accountAdmin: false\n      cspRoles:\n        - Default\n      email: infrastructure2@example.com\n      # optional\n      groups:\n        - groupAdmin: false\n          name: IacGroupName\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "accountAdmin": {
                    "type": "boolean"
                },
                "confirmed": {
                    "type": "boolean"
                },
                "created": {
                    "type": "string"
                },
                "cspRoles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "email": {
                    "type": "string"
                },
                "groups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/UserSaasGroup:UserSaasGroup"
                    }
                },
                "logins": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/UserSaasLogin:UserSaasLogin"
                    }
                },
                "multiaccount": {
                    "type": "boolean"
                },
                "passwordReset": {
                    "type": "boolean"
                },
                "sendAnnouncements": {
                    "type": "boolean"
                },
                "sendNewPlugins": {
                    "type": "boolean"
                },
                "sendNewRisks": {
                    "type": "boolean"
                },
                "sendScanResults": {
                    "type": "boolean"
                },
                "userId": {
                    "type": "string"
                }
            },
            "required": [
                "accountAdmin",
                "confirmed",
                "created",
                "cspRoles",
                "email",
                "logins",
                "multiaccount",
                "passwordReset",
                "sendAnnouncements",
                "sendNewPlugins",
                "sendNewRisks",
                "sendScanResults",
                "userId"
            ],
            "inputProperties": {
                "accountAdmin": {
                    "type": "boolean"
                },
                "cspRoles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "email": {
                    "type": "string"
                },
                "groups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aquasec:index/UserSaasGroup:UserSaasGroup"
                    }
                }
            },
            "requiredInputs": [
                "accountAdmin",
                "cspRoles",
                "email"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering UserSaas resources.\n",
                "properties": {
                    "accountAdmin": {
                        "type": "boolean"
                    },
                    "confirmed": {
                        "type": "boolean"
                    },
                    "created": {
                        "type": "string"
                    },
                    "cspRoles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "email": {
                        "type": "string"
                    },
                    "groups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/UserSaasGroup:UserSaasGroup"
                        }
                    },
                    "logins": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/UserSaasLogin:UserSaasLogin"
                        }
                    },
                    "multiaccount": {
                        "type": "boolean"
                    },
                    "passwordReset": {
                        "type": "boolean"
                    },
                    "sendAnnouncements": {
                        "type": "boolean"
                    },
                    "sendNewPlugins": {
                        "type": "boolean"
                    },
                    "sendNewRisks": {
                        "type": "boolean"
                    },
                    "sendScanResults": {
                        "type": "boolean"
                    },
                    "userId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "aquasec:index/getAcknowledges:getAcknowledges": {
            "description": "The data source `aquasec.getAcknowledges` provides a method to query all acknowledges within the Aqua\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aquasec from \"@pulumi/aquasec\";\n\nconst acknowledgesAcknowledges = aquasec.getAcknowledges({});\nexport const acknowledges = acknowledgesAcknowledges;\n```\n```python\nimport pulumi\nimport pulumi_aquasec as aquasec\n\nacknowledges_acknowledges = aquasec.get_acknowledges()\npulumi.export(\"acknowledges\", acknowledges_acknowledges)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Aquasec = Pulumi.Aquasec;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var acknowledgesAcknowledges = Aquasec.GetAcknowledges.Invoke();\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"acknowledges\"] = acknowledgesAcknowledges,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-aquasec/sdk/go/aquasec\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tacknowledgesAcknowledges, err := aquasec.GetAcknowledges(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"acknowledges\", acknowledgesAcknowledges)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aquasec.AquasecFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var acknowledgesAcknowledges = AquasecFunctions.getAcknowledges();\n\n        ctx.export(\"acknowledges\", acknowledgesAcknowledges.applyValue(getAcknowledgesResult -\u003e getAcknowledgesResult));\n    }\n}\n```\n```yaml\nvariables:\n  acknowledgesAcknowledges:\n    fn::invoke:\n      Function: aquasec:getAcknowledges\n      Arguments: {}\noutputs:\n  acknowledges: ${acknowledgesAcknowledges}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getAcknowledges.\n",
                "properties": {
                    "acknowledges": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/getAcknowledgesAcknowledge:getAcknowledgesAcknowledge"
                        },
                        "description": "A list of existing security acknowledges.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "acknowledges",
                    "id"
                ]
            }
        },
        "aquasec:index/getApplicationScope:getApplicationScope": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aquasec from \"@pulumi/aquasec\";\n\nconst default = aquasec.getApplicationScope({\n    name: \"Global\",\n});\nexport const scopes = _default;\n```\n```python\nimport pulumi\nimport pulumi_aquasec as aquasec\n\ndefault = aquasec.get_application_scope(name=\"Global\")\npulumi.export(\"scopes\", default)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Aquasec = Pulumi.Aquasec;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = Aquasec.GetApplicationScope.Invoke(new()\n    {\n        Name = \"Global\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"scopes\"] = @default,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-aquasec/sdk/go/aquasec\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_default, err := aquasec.LookupApplicationScope(ctx, \u0026aquasec.LookupApplicationScopeArgs{\n\t\t\tName: \"Global\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"scopes\", _default)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aquasec.AquasecFunctions;\nimport com.pulumi.aquasec.inputs.GetApplicationScopeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = AquasecFunctions.getApplicationScope(GetApplicationScopeArgs.builder()\n            .name(\"Global\")\n            .build());\n\n        ctx.export(\"scopes\", default_);\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    fn::invoke:\n      Function: aquasec:getApplicationScope\n      Arguments:\n        name: Global\noutputs:\n  scopes: ${default}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getApplicationScope.\n",
                "properties": {
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/getApplicationScopeCategory:getApplicationScopeCategory"
                        },
                        "description": "Artifacts (of applications) / Workloads (containers) / Infrastructure (elements).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of an application scope.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getApplicationScope.\n",
                "properties": {
                    "author": {
                        "type": "string",
                        "description": "Username of the account that created the service.\n"
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/getApplicationScopeCategory:getApplicationScopeCategory"
                        },
                        "description": "Artifacts (of applications) / Workloads (containers) / Infrastructure (elements).\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the application scope.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of an application scope.\n"
                    },
                    "ownerEmail": {
                        "type": "string",
                        "description": "Name of an application scope.\n"
                    }
                },
                "type": "object",
                "required": [
                    "author",
                    "description",
                    "name",
                    "ownerEmail",
                    "id"
                ]
            }
        },
        "aquasec:index/getAquaLabels:getAquaLabels": {
            "description": "The data source `aquasec.getAquaLabels` provides a method to query all aqua labels within the Aqua account management.The fields returned from this query are detailed in the Schema section below.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aquasec from \"@pulumi/aquasec\";\n\nconst aquaLabels = aquasec.getAquaLabels({});\nexport const scopes = aquaLabels;\n```\n```python\nimport pulumi\nimport pulumi_aquasec as aquasec\n\naqua_labels = aquasec.get_aqua_labels()\npulumi.export(\"scopes\", aqua_labels)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Aquasec = Pulumi.Aquasec;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var aquaLabels = Aquasec.GetAquaLabels.Invoke();\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"scopes\"] = aquaLabels,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-aquasec/sdk/go/aquasec\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\taquaLabels, err := aquasec.GetAquaLabels(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"scopes\", aquaLabels)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aquasec.AquasecFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var aquaLabels = AquasecFunctions.getAquaLabels();\n\n        ctx.export(\"scopes\", aquaLabels.applyValue(getAquaLabelsResult -\u003e getAquaLabelsResult));\n    }\n}\n```\n```yaml\nvariables:\n  aquaLabels:\n    fn::invoke:\n      Function: aquasec:getAquaLabels\n      Arguments: {}\noutputs:\n  # Print all Aqua labels\n  scopes: ${aquaLabels}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getAquaLabels.\n",
                "properties": {
                    "aquaLabels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/getAquaLabelsAquaLabel:getAquaLabelsAquaLabel"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "aquaLabels",
                    "id"
                ]
            }
        },
        "aquasec:index/getContainerRuntimePolicy:getContainerRuntimePolicy": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aquasec from \"@pulumi/aquasec\";\n\nconst containerRuntimePolicy = aquasec.getContainerRuntimePolicy({\n    name: \"FunctionRuntimePolicyName\",\n});\nexport const containerRuntimePolicyDetails = containerRuntimePolicy;\n```\n```python\nimport pulumi\nimport pulumi_aquasec as aquasec\n\ncontainer_runtime_policy = aquasec.get_container_runtime_policy(name=\"FunctionRuntimePolicyName\")\npulumi.export(\"containerRuntimePolicyDetails\", container_runtime_policy)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Aquasec = Pulumi.Aquasec;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var containerRuntimePolicy = Aquasec.GetContainerRuntimePolicy.Invoke(new()\n    {\n        Name = \"FunctionRuntimePolicyName\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"containerRuntimePolicyDetails\"] = containerRuntimePolicy,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-aquasec/sdk/go/aquasec\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcontainerRuntimePolicy, err := aquasec.LookupContainerRuntimePolicy(ctx, \u0026aquasec.LookupContainerRuntimePolicyArgs{\n\t\t\tName: \"FunctionRuntimePolicyName\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"containerRuntimePolicyDetails\", containerRuntimePolicy)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aquasec.AquasecFunctions;\nimport com.pulumi.aquasec.inputs.GetContainerRuntimePolicyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var containerRuntimePolicy = AquasecFunctions.getContainerRuntimePolicy(GetContainerRuntimePolicyArgs.builder()\n            .name(\"FunctionRuntimePolicyName\")\n            .build());\n\n        ctx.export(\"containerRuntimePolicyDetails\", containerRuntimePolicy.applyValue(getContainerRuntimePolicyResult -\u003e getContainerRuntimePolicyResult));\n    }\n}\n```\n```yaml\nvariables:\n  containerRuntimePolicy:\n    fn::invoke:\n      Function: aquasec:getContainerRuntimePolicy\n      Arguments:\n        name: FunctionRuntimePolicyName\noutputs:\n  containerRuntimePolicyDetails: ${containerRuntimePolicy}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getContainerRuntimePolicy.\n",
                "properties": {
                    "malwareScanOptions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/getContainerRuntimePolicyMalwareScanOption:getContainerRuntimePolicyMalwareScanOption"
                        },
                        "description": "Configuration for Real-Time Malware Protection.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the container runtime policy\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getContainerRuntimePolicy.\n",
                "properties": {
                    "allowedExecutables": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of executables that are allowed for the user.\n"
                    },
                    "allowedRegistries": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of registries that allowed for running containers.\n"
                    },
                    "applicationScopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Indicates the application scope of the service.\n"
                    },
                    "auditAllNetworkActivity": {
                        "type": "boolean",
                        "description": "If true, all network activity will be audited.\n"
                    },
                    "auditAllProcessesActivity": {
                        "type": "boolean",
                        "description": "If true, all process activity will be audited.\n"
                    },
                    "auditFullCommandArguments": {
                        "type": "boolean",
                        "description": "If true, full command arguments will be audited.\n"
                    },
                    "author": {
                        "type": "string",
                        "description": "Username of the account that created the service.\n"
                    },
                    "blockAccessHostNetwork": {
                        "type": "boolean",
                        "description": "If true, prevent containers from running with access to host network.\n"
                    },
                    "blockAddingCapabilities": {
                        "type": "boolean",
                        "description": "If true, prevent containers from running with adding capabilities with `--cap-add` privilege.\n"
                    },
                    "blockContainerExec": {
                        "type": "boolean",
                        "description": "If true, exec into a container is prevented.\n"
                    },
                    "blockCryptocurrencyMining": {
                        "type": "boolean",
                        "description": "Detect and prevent communication to DNS/IP addresses known to be used for Cryptocurrency Mining\n"
                    },
                    "blockFilelessExec": {
                        "type": "boolean",
                        "description": "Detect and prevent running in-memory execution\n"
                    },
                    "blockLowPortBinding": {
                        "type": "boolean",
                        "description": "If true, prevent containers from running with the capability to bind in port lower than 1024.\n"
                    },
                    "blockNonCompliantImages": {
                        "type": "boolean",
                        "description": "If true, running non-compliant image in the container is prevented.\n"
                    },
                    "blockNonCompliantWorkloads": {
                        "type": "boolean",
                        "description": "If true, running containers in non-compliant pods is prevented.\n"
                    },
                    "blockNonK8sContainers": {
                        "type": "boolean",
                        "description": "If true, running non-kubernetes containers is prevented.\n"
                    },
                    "blockPrivilegedContainers": {
                        "type": "boolean",
                        "description": "If true, prevent containers from running with privileged container capability.\n"
                    },
                    "blockReverseShell": {
                        "type": "boolean",
                        "description": "If true, reverse shell is prevented.\n"
                    },
                    "blockRootUser": {
                        "type": "boolean",
                        "description": "If true, prevent containers from running with root user.\n"
                    },
                    "blockUnregisteredImages": {
                        "type": "boolean",
                        "description": "If true, running images in the container that are not registered in Aqua is prevented.\n"
                    },
                    "blockUseIpcNamespace": {
                        "type": "boolean",
                        "description": "If true, prevent containers from running with the privilege to use the IPC namespace.\n"
                    },
                    "blockUsePidNamespace": {
                        "type": "boolean",
                        "description": "If true, prevent containers from running with the privilege to use the PID namespace.\n"
                    },
                    "blockUseUserNamespace": {
                        "type": "boolean",
                        "description": "If true, prevent containers from running with the privilege to use the user namespace.\n"
                    },
                    "blockUseUtsNamespace": {
                        "type": "boolean",
                        "description": "If true, prevent containers from running with the privilege to use the UTS namespace.\n"
                    },
                    "blockedCapabilities": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "If true, prevents containers from using specific Unix capabilities.\n"
                    },
                    "blockedExecutables": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of executables that are prevented from running in containers.\n"
                    },
                    "blockedFiles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of files that are prevented from being read, modified and executed in the containers.\n"
                    },
                    "blockedInboundPorts": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of blocked inbound ports.\n"
                    },
                    "blockedOutboundPorts": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of blocked outbound ports.\n"
                    },
                    "blockedPackages": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Prevent containers from reading, writing, or executing all files in the list of packages.\n"
                    },
                    "blockedVolumes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of volumes that are prevented from being mounted in the containers.\n"
                    },
                    "containerExecAllowedProcesses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of processes that will be allowed.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the container runtime policy\n"
                    },
                    "enableDriftPrevention": {
                        "type": "boolean",
                        "description": "If true, executables that are not in the original image is prevented from running.\n"
                    },
                    "enableForkGuard": {
                        "type": "boolean",
                        "description": "If true, fork bombs are prevented in the containers.\n"
                    },
                    "enableIpReputationSecurity": {
                        "type": "boolean",
                        "description": "If true, detect and prevent communication from containers to IP addresses known to have a bad reputation.\n"
                    },
                    "enablePortScanDetection": {
                        "type": "boolean",
                        "description": "If true, detects port scanning behavior in the container.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Indicates if the runtime policy is enabled or not.\n"
                    },
                    "enforce": {
                        "type": "boolean",
                        "description": "Indicates that policy should effect container execution (not just for audit).\n"
                    },
                    "enforceAfterDays": {
                        "type": "integer",
                        "description": "Indicates the number of days after which the runtime policy will be changed to enforce mode.\n"
                    },
                    "exceptionalReadonlyFilesAndDirectories": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of files and directories to be excluded from the read-only list.\n"
                    },
                    "execLockdownWhiteLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specify processes that will be allowed\n"
                    },
                    "fileIntegrityMonitorings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/getContainerRuntimePolicyFileIntegrityMonitoring:getContainerRuntimePolicyFileIntegrityMonitoring"
                        },
                        "description": "Configuration for file integrity monitoring.\n"
                    },
                    "forkGuardProcessLimit": {
                        "type": "integer",
                        "description": "Process limit for the fork guard.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "limitNewPrivileges": {
                        "type": "boolean",
                        "description": "If true, prevents the container from obtaining new privileges at runtime. (only enabled in enforce mode)\n"
                    },
                    "malwareScanOptions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/getContainerRuntimePolicyMalwareScanOption:getContainerRuntimePolicyMalwareScanOption"
                        },
                        "description": "Configuration for Real-Time Malware Protection.\n"
                    },
                    "monitorSystemTimeChanges": {
                        "type": "boolean",
                        "description": "If true, system time changes will be monitored.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the container runtime policy\n"
                    },
                    "readonlyFilesAndDirectories": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of files and directories to be restricted as read-only\n"
                    },
                    "reverseShellAllowedIps": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of IPs/ CIDRs that will be allowed\n"
                    },
                    "reverseShellAllowedProcesses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of processes that will be allowed\n"
                    },
                    "scopeExpression": {
                        "type": "string",
                        "description": "Logical expression of how to compute the dependency of the scope variables.\n"
                    },
                    "scopeVariables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/getContainerRuntimePolicyScopeVariable:getContainerRuntimePolicyScopeVariable"
                        },
                        "description": "List of scope attributes.\n"
                    }
                },
                "type": "object",
                "required": [
                    "allowedExecutables",
                    "allowedRegistries",
                    "applicationScopes",
                    "auditAllNetworkActivity",
                    "auditAllProcessesActivity",
                    "auditFullCommandArguments",
                    "author",
                    "blockAccessHostNetwork",
                    "blockAddingCapabilities",
                    "blockContainerExec",
                    "blockCryptocurrencyMining",
                    "blockFilelessExec",
                    "blockLowPortBinding",
                    "blockNonCompliantImages",
                    "blockNonCompliantWorkloads",
                    "blockNonK8sContainers",
                    "blockPrivilegedContainers",
                    "blockReverseShell",
                    "blockRootUser",
                    "blockUnregisteredImages",
                    "blockUseIpcNamespace",
                    "blockUsePidNamespace",
                    "blockUseUserNamespace",
                    "blockUseUtsNamespace",
                    "blockedCapabilities",
                    "blockedExecutables",
                    "blockedFiles",
                    "blockedInboundPorts",
                    "blockedOutboundPorts",
                    "blockedPackages",
                    "blockedVolumes",
                    "containerExecAllowedProcesses",
                    "description",
                    "enableDriftPrevention",
                    "enableForkGuard",
                    "enableIpReputationSecurity",
                    "enablePortScanDetection",
                    "enabled",
                    "enforce",
                    "enforceAfterDays",
                    "exceptionalReadonlyFilesAndDirectories",
                    "execLockdownWhiteLists",
                    "fileIntegrityMonitorings",
                    "forkGuardProcessLimit",
                    "limitNewPrivileges",
                    "malwareScanOptions",
                    "monitorSystemTimeChanges",
                    "name",
                    "readonlyFilesAndDirectories",
                    "reverseShellAllowedIps",
                    "reverseShellAllowedProcesses",
                    "scopeExpression",
                    "scopeVariables",
                    "id"
                ]
            }
        },
        "aquasec:index/getEnforcerGroups:getEnforcerGroups": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aquasec from \"@pulumi/aquasec\";\n\nconst groups = aquasec.getEnforcerGroups({\n    groupId: \"IacGroup\",\n});\nexport const groupDetails = groups;\n```\n```python\nimport pulumi\nimport pulumi_aquasec as aquasec\n\ngroups = aquasec.get_enforcer_groups(group_id=\"IacGroup\")\npulumi.export(\"groupDetails\", groups)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Aquasec = Pulumi.Aquasec;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var groups = Aquasec.GetEnforcerGroups.Invoke(new()\n    {\n        GroupId = \"IacGroup\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"groupDetails\"] = groups,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-aquasec/sdk/go/aquasec\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tgroups, err := aquasec.LookupEnforcerGroups(ctx, \u0026aquasec.LookupEnforcerGroupsArgs{\n\t\t\tGroupId: \"IacGroup\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"groupDetails\", groups)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aquasec.AquasecFunctions;\nimport com.pulumi.aquasec.inputs.GetEnforcerGroupsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var groups = AquasecFunctions.getEnforcerGroups(GetEnforcerGroupsArgs.builder()\n            .groupId(\"IacGroup\")\n            .build());\n\n        ctx.export(\"groupDetails\", groups.applyValue(getEnforcerGroupsResult -\u003e getEnforcerGroupsResult));\n    }\n}\n```\n```yaml\nvariables:\n  groups:\n    fn::invoke:\n      Function: aquasec:getEnforcerGroups\n      Arguments:\n        groupId: IacGroup\noutputs:\n  groupDetails: ${groups}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getEnforcerGroups.\n",
                "properties": {
                    "forensics": {
                        "type": "boolean",
                        "description": "Select Enabled to send activity logs in your containers to the Aqua Server for forensics purposes.\n"
                    },
                    "groupId": {
                        "type": "string",
                        "description": "The ID of the Enforcer group.\n"
                    },
                    "hostForensics": {
                        "type": "boolean",
                        "description": "Select Enabled to send activity logs in your host to the Aqua Server for forensics purposes.\n"
                    }
                },
                "type": "object",
                "required": [
                    "groupId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getEnforcerGroups.\n",
                "properties": {
                    "admissionControl": {
                        "type": "boolean",
                        "description": "Selecting this option will allow the KubeEnforcer to block the deployment of container images that have failed any of these Container Runtime Policy controls:\\\n\t\t\t* Block Non-Compliant Images\\\n\t\t\t* Block Non-Compliant Workloads\\\n\t\t\t* Block Unregistered Images\\\n\t\t\tThis functionality can work only when the KubeEnforcer is deployed in Enforce mode.\n"
                    },
                    "allowKubeEnforcerAudit": {
                        "type": "boolean",
                        "description": "Allow kube enforcer audit.\n"
                    },
                    "allowedApplications": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of application names to allow on the hosts. if provided, only containers of the listed applications will be allowed to run.\n"
                    },
                    "allowedLabels": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of label names to allow on the hosts.\n"
                    },
                    "allowedRegistries": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of registry names to allow on the hosts.\n"
                    },
                    "antivirusProtection": {
                        "type": "boolean",
                        "description": "This setting is available only when you have license for `Advanced Malware Protection`. Send true to make use of the license and enable the `Real-time Malware Protection` control in the Host Runtime policies.\n"
                    },
                    "aquaVersion": {
                        "type": "string",
                        "description": "Aqua server version\n"
                    },
                    "auditAll": {
                        "type": "boolean",
                        "description": "Agent will send extra audit messages to the server for success operations from inside the container (runtime).\n"
                    },
                    "autoCopySecrets": {
                        "type": "boolean",
                        "description": "This option is applicable only if `Enable Pod Enforcer injection` is selected. Select this option if you want Aqua Enterprise to copy the secrets defined above to the Pod Enforcer namespace and container. Otherwise, you can choose to copy these secrets by other means.\n"
                    },
                    "autoDiscoverConfigureRegistries": {
                        "type": "boolean",
                        "description": "This option is available only if `Enable workload discovery` is selected. If selected, the KubeEnforcer will add previously unknown image registries from the cluster to Aqua.\n"
                    },
                    "autoDiscoveryEnabled": {
                        "type": "boolean",
                        "description": "When this option is selected, the KubeEnforcer will discover workloads on its cluster.\n"
                    },
                    "autoScanDiscoveredImagesRunningContainers": {
                        "type": "boolean",
                        "description": "This option is available only if `Enable workload discovery` is selected. If selected, the KubeEnforcer will automatically register images running as workloads (and scan the discovered images for security issues).\n"
                    },
                    "behavioralEngine": {
                        "type": "boolean",
                        "description": "If `Enabled`, detects suspicious activity in your containers and displays potential security threats in the Incidents and Audits pages.\n"
                    },
                    "blockAdmissionControl": {
                        "type": "boolean",
                        "description": "This applies only if both `Enable admission control` and Enforce mode are set. This additional option must be selected for admission control to work if the KubeEnforcer is not connected to any Gateway. If this option is not selected, admission control will be disabled; this will have no effect on containers already running.\n"
                    },
                    "commands": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/getEnforcerGroupsCommand:getEnforcerGroupsCommand"
                        },
                        "description": "The installation command.\n"
                    },
                    "connectedCount": {
                        "type": "integer",
                        "description": "Number of connected enforcers in the enforcer group.\n"
                    },
                    "containerActivityProtection": {
                        "type": "boolean",
                        "description": "When set to `True` applies Container Runtime Policies, Image Profiles, and Firewall Policies to containers.\n"
                    },
                    "containerAntivirusProtection": {
                        "type": "boolean",
                        "description": "This setting is available only when you have license for `Advanced Malware Protection`. Send true to make use of the license and enable the `Real-time Malware Protection` control in the Container Runtime policies.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A description for the Aqua Enforcer group.\n"
                    },
                    "disconnectedCount": {
                        "type": "integer",
                        "description": "Number of disconnected enforcers in the enforcer group.\n"
                    },
                    "enforce": {
                        "type": "boolean",
                        "description": "Whether the enforce mode is enabled on the Enforcers.\n"
                    },
                    "enforcerImageName": {
                        "type": "string",
                        "description": "The specific Aqua Enforcer product image (with image tag) to be deployed.\n"
                    },
                    "forensics": {
                        "type": "boolean",
                        "description": "Select Enabled to send activity logs in your containers to the Aqua Server for forensics purposes.\n"
                    },
                    "gatewayAddress": {
                        "type": "string",
                        "description": "Gateway Address\n"
                    },
                    "gatewayName": {
                        "type": "string",
                        "description": "Gateway Name\n"
                    },
                    "gateways": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of Aqua gateway IDs for the Enforcers.\n"
                    },
                    "groupId": {
                        "type": "string",
                        "description": "The ID of the Enforcer group.\n"
                    },
                    "highVulns": {
                        "type": "integer",
                        "description": "Number of high vulnerabilities in the enforcers that in this enforcer group.\n"
                    },
                    "hostAssurance": {
                        "type": "boolean",
                        "description": "When set to `True` enables host scanning and respective Host Assurance controls.\n"
                    },
                    "hostBehavioralEngine": {
                        "type": "boolean",
                        "description": "When set to `True` enables these Host Runtime Policy controls: `OS Users and Groups Allowed` and `OS Users and Groups Blocked`\n"
                    },
                    "hostForensics": {
                        "type": "boolean",
                        "description": "Select Enabled to send activity logs in your host to the Aqua Server for forensics purposes.\n"
                    },
                    "hostNetworkProtection": {
                        "type": "boolean",
                        "description": "When set to `True` applies Firewall Policies to hosts, and allows recording network maps for Aqua services. The Network Firewall setting must be disabled when deploying the Aqua Enforcer on a machine running Rocky Linux. See https://docs.aquasec.com/docs/platform-support-limitations-rocky-linux for further information\n"
                    },
                    "hostOs": {
                        "type": "string",
                        "description": "The OS type for the host\n"
                    },
                    "hostProtection": {
                        "type": "boolean",
                        "description": "When set to `True` enables all Host Runtime Policy controls except for `OS Users and Groups Allowed` and `OS Users and Groups Blocked`.\n"
                    },
                    "hostUserProtection": {
                        "type": "boolean",
                        "description": "When set to `True` enables these Host Runtime Policy controls: `OS Users and Groups Allowed` and `OS Users and Groups Blocked`\n"
                    },
                    "hostsCount": {
                        "type": "integer",
                        "description": "Number of enforcers in the enforcer group.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "imageAssurance": {
                        "type": "boolean",
                        "description": "When Set to `True` enables selected controls: Container Runtime Policy (`Block Non-Compliant Images`, `Block Unregistered Images`, and `Registries Allowed`) and Default Image Assurance Policy (`Images Blocked`).\n"
                    },
                    "installCommand": {
                        "type": "string",
                        "description": "Enforcer install command\n"
                    },
                    "kubeBenchImageName": {
                        "type": "string",
                        "description": "See https://docs.aquasec.com/docs/securing-kubernetes-applications#section-configuration-hardening, The KubeEnforcer can deploy the Aqua Security kube-bench open-source product to perform Kubernetes CIS benchmark testing of nodes.\n\t\t\tThis field specifies the path and file name of the kube-bench product image for the KubeEnforcer to deploy; it will be filled in automatically. You can optionally enter a different value.\n"
                    },
                    "lastUpdate": {
                        "type": "integer",
                        "description": "The last date and time the batch token was updated in UNIX time.\n"
                    },
                    "logicalName": {
                        "type": "string",
                        "description": "Name for the batch install record.\n"
                    },
                    "lowVulns": {
                        "type": "integer",
                        "description": "Number of low vulnerabilities in the enforcers that in this enforcer group.\n"
                    },
                    "medVulns": {
                        "type": "integer",
                        "description": "Number of medium vulnerabilities in the enforcers that in this enforcer group.\n"
                    },
                    "microEnforcerCertsSecretsName": {
                        "type": "string",
                        "description": "This option is applicable only if `Enable Pod Enforcer injection` is selected.\n"
                    },
                    "microEnforcerImageName": {
                        "type": "string",
                        "description": "This option is applicable only if `Enable Pod Enforcer injection` is selected. This field specifies the path and file name of the KubeEnforcer product image to be deployed; it will be filled in automatically. You can optionally enter a different value.\n"
                    },
                    "microEnforcerInjection": {
                        "type": "boolean",
                        "description": "This applies only if both `Enable admission control` and Enforce mode are set. This additional option must be selected for admission control to work if the KubeEnforcer is not connected to any Gateway. If this option is not selected, admission control will be disabled; this will have no effect on containers already running.\n"
                    },
                    "microEnforcerSecretsName": {
                        "type": "string",
                        "description": "This option is applicable only if `Enable Pod Enforcer injection` is selected.\n"
                    },
                    "negVulns": {
                        "type": "integer",
                        "description": "Number of negligible vulnerabilities in the enforcers that in this enforcer group.\n"
                    },
                    "networkProtection": {
                        "type": "boolean",
                        "description": "When set to `True` applies Firewall Policies to containers, and allows recording network maps for Aqua services. The Network Firewall setting must be disabled when deploying the Aqua Enforcer on a machine running Rocky Linux. See https://docs.aquasec.com/docs/platform-support-limitations-rocky-linux for further information.\n"
                    },
                    "orchestrators": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/getEnforcerGroupsOrchestrator:getEnforcerGroupsOrchestrator"
                        },
                        "description": "The orchestrator for which you are creating the Enforcer group.\n"
                    },
                    "pasDeploymentLink": {
                        "type": "string",
                        "description": "pas deployment link\n"
                    },
                    "permission": {
                        "type": "string",
                        "description": "Permission Action\n"
                    },
                    "riskExplorerAutoDiscovery": {
                        "type": "boolean",
                        "description": "When set to `True` allows Enforcers to be discovered in the Risk Explorer.\n"
                    },
                    "runtimePolicyName": {
                        "type": "string",
                        "description": "Function Runtime Policy that will applay on the nano enforcer.\n"
                    },
                    "runtimeType": {
                        "type": "string",
                        "description": "The container runtime environment.\n"
                    },
                    "syncHostImages": {
                        "type": "boolean",
                        "description": "When set to `True` configures Enforcers to discover local host images. Discovered images will be listed under Images \u003e Host Images, as well as under Infrastructure (in the Images tab for applicable hosts).\n"
                    },
                    "syscallEnabled": {
                        "type": "boolean",
                        "description": "When set to `True` allows profiling and monitoring system calls made by running containers.\n"
                    },
                    "token": {
                        "type": "string",
                        "description": "The batch install token.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Enforcer Type.\n"
                    },
                    "userAccessControl": {
                        "type": "boolean",
                        "description": "When set to `True` applies User Access Control Policies to containers. Note that Aqua Enforcers must be deployed with the AQUA*RUNC*INTERCEPTION environment variable set to 0 in order to use User Access Control Policies.\n"
                    }
                },
                "type": "object",
                "required": [
                    "admissionControl",
                    "allowKubeEnforcerAudit",
                    "allowedApplications",
                    "allowedLabels",
                    "allowedRegistries",
                    "antivirusProtection",
                    "aquaVersion",
                    "auditAll",
                    "autoCopySecrets",
                    "autoDiscoverConfigureRegistries",
                    "autoDiscoveryEnabled",
                    "autoScanDiscoveredImagesRunningContainers",
                    "behavioralEngine",
                    "blockAdmissionControl",
                    "commands",
                    "connectedCount",
                    "containerActivityProtection",
                    "containerAntivirusProtection",
                    "description",
                    "disconnectedCount",
                    "enforce",
                    "enforcerImageName",
                    "gatewayAddress",
                    "gatewayName",
                    "gateways",
                    "groupId",
                    "highVulns",
                    "hostAssurance",
                    "hostBehavioralEngine",
                    "hostNetworkProtection",
                    "hostOs",
                    "hostProtection",
                    "hostUserProtection",
                    "hostsCount",
                    "imageAssurance",
                    "installCommand",
                    "kubeBenchImageName",
                    "lastUpdate",
                    "logicalName",
                    "lowVulns",
                    "medVulns",
                    "microEnforcerCertsSecretsName",
                    "microEnforcerImageName",
                    "microEnforcerInjection",
                    "microEnforcerSecretsName",
                    "negVulns",
                    "networkProtection",
                    "orchestrators",
                    "pasDeploymentLink",
                    "permission",
                    "riskExplorerAutoDiscovery",
                    "runtimePolicyName",
                    "runtimeType",
                    "syncHostImages",
                    "syscallEnabled",
                    "token",
                    "type",
                    "userAccessControl",
                    "id"
                ]
            }
        },
        "aquasec:index/getFirewallPolicy:getFirewallPolicy": {
            "inputs": {
                "description": "A collection of arguments for invoking getFirewallPolicy.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the policy, no longer than 128 characters and no slash characters.\n"
                    },
                    "outboundNetworks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/getFirewallPolicyOutboundNetwork:getFirewallPolicyOutboundNetwork"
                        },
                        "description": "Information on network addresses that are allowed to receive data or requests.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getFirewallPolicy.\n",
                "properties": {
                    "author": {
                        "type": "string",
                        "description": "Username of the account that created the policy.\n"
                    },
                    "blockIcmpPing": {
                        "type": "boolean",
                        "description": "Indicates whether policy includes blocking incoming 'ping' requests.\n"
                    },
                    "blockMetadataService": {
                        "type": "boolean",
                        "description": "Indicates whether policy includes blocking metadata services of the cloud.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the Firewall Policy.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "inboundNetworks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/getFirewallPolicyInboundNetwork:getFirewallPolicyInboundNetwork"
                        },
                        "description": "Information on network addresses that are allowed to pass in data or requests.\n"
                    },
                    "lastupdate": {
                        "type": "integer",
                        "description": "Timestamp of the last update in Unix time format.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the policy, no longer than 128 characters and no slash characters.\n"
                    },
                    "outboundNetworks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/getFirewallPolicyOutboundNetwork:getFirewallPolicyOutboundNetwork"
                        },
                        "description": "Information on network addresses that are allowed to receive data or requests.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Indicates the class of protection defined by the firewall.\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "Aqua version functionality supported\n"
                    }
                },
                "type": "object",
                "required": [
                    "author",
                    "blockIcmpPing",
                    "blockMetadataService",
                    "description",
                    "inboundNetworks",
                    "lastupdate",
                    "name",
                    "type",
                    "version",
                    "id"
                ]
            }
        },
        "aquasec:index/getFunctionAssurancePolicy:getFunctionAssurancePolicy": {
            "inputs": {
                "description": "A collection of arguments for invoking getFunctionAssurancePolicy.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getFunctionAssurancePolicy.\n",
                "properties": {
                    "allowedImages": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of explicitly allowed images.\n"
                    },
                    "applicationScopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "auditOnFailure": {
                        "type": "boolean",
                        "description": "Indicates if auditing for failures.\n"
                    },
                    "author": {
                        "type": "string",
                        "description": "Name of user account that created the policy.\n"
                    },
                    "autoScanConfigured": {
                        "type": "boolean"
                    },
                    "autoScanEnabled": {
                        "type": "boolean"
                    },
                    "autoScanTimes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/getFunctionAssurancePolicyAutoScanTime:getFunctionAssurancePolicyAutoScanTime"
                        }
                    },
                    "blacklistPermissions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of function's forbidden permissions.\n"
                    },
                    "blacklistPermissionsEnabled": {
                        "type": "boolean",
                        "description": "Indicates if blacklist permissions is relevant.\n"
                    },
                    "blacklistedLicenses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of blacklisted licenses.\n"
                    },
                    "blacklistedLicensesEnabled": {
                        "type": "boolean",
                        "description": "Lndicates if license blacklist is relevant.\n"
                    },
                    "blockFailed": {
                        "type": "boolean",
                        "description": "Indicates if failed images are blocked.\n"
                    },
                    "controlExcludeNoFix": {
                        "type": "boolean"
                    },
                    "customChecks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/getFunctionAssurancePolicyCustomCheck:getFunctionAssurancePolicyCustomCheck"
                        },
                        "description": "List of Custom user scripts for checks.\n"
                    },
                    "customChecksEnabled": {
                        "type": "boolean",
                        "description": "Indicates if scanning should include custom checks.\n"
                    },
                    "customSeverityEnabled": {
                        "type": "boolean"
                    },
                    "cvesBlackListEnabled": {
                        "type": "boolean",
                        "description": "Indicates if cves blacklist is relevant.\n"
                    },
                    "cvesBlackLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of cves blacklisted items.\n"
                    },
                    "cvesWhiteListEnabled": {
                        "type": "boolean",
                        "description": "Indicates if cves whitelist is relevant.\n"
                    },
                    "cvesWhiteLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of cves whitelisted licenses\n"
                    },
                    "cvssSeverity": {
                        "type": "string",
                        "description": "Identifier of the cvss severity.\n"
                    },
                    "cvssSeverityEnabled": {
                        "type": "boolean",
                        "description": "Indicates if the cvss severity is scanned.\n"
                    },
                    "cvssSeverityExcludeNoFix": {
                        "type": "boolean",
                        "description": "Indicates that policy should ignore cvss cases that do not have a known fix.\n"
                    },
                    "description": {
                        "type": "string"
                    },
                    "disallowMalware": {
                        "type": "boolean",
                        "description": "Indicates if malware should block the image.\n"
                    },
                    "dockerCisEnabled": {
                        "type": "boolean"
                    },
                    "domain": {
                        "type": "string",
                        "description": "Name of the container image.\n"
                    },
                    "domainName": {
                        "type": "string"
                    },
                    "dtaEnabled": {
                        "type": "boolean"
                    },
                    "dtaSeverity": {
                        "type": "string"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "enforce": {
                        "type": "boolean"
                    },
                    "enforceAfterDays": {
                        "type": "integer"
                    },
                    "enforceExcessivePermissions": {
                        "type": "boolean"
                    },
                    "exceptionalMonitoredMalwarePaths": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "failCicd": {
                        "type": "boolean",
                        "description": "Indicates if cicd failures will fail the image.\n"
                    },
                    "forbiddenLabels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/getFunctionAssurancePolicyForbiddenLabel:getFunctionAssurancePolicyForbiddenLabel"
                        }
                    },
                    "forbiddenLabelsEnabled": {
                        "type": "boolean"
                    },
                    "forceMicroenforcer": {
                        "type": "boolean"
                    },
                    "functionIntegrityEnabled": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "ignoreRecentlyPublishedVln": {
                        "type": "boolean"
                    },
                    "ignoreRecentlyPublishedVlnPeriod": {
                        "type": "integer"
                    },
                    "ignoreRiskResourcesEnabled": {
                        "type": "boolean",
                        "description": "Indicates if risk resources are ignored.\n"
                    },
                    "ignoredRiskResources": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of ignored risk resources.\n"
                    },
                    "images": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of images.\n"
                    },
                    "kubeCisEnabled": {
                        "type": "boolean"
                    },
                    "labels": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of labels.\n"
                    },
                    "malwareAction": {
                        "type": "string"
                    },
                    "maximumScore": {
                        "type": "number",
                        "description": "Value of allowed maximum score.\n"
                    },
                    "maximumScoreEnabled": {
                        "type": "boolean",
                        "description": "Indicates if exceeding the maximum score is scanned.\n"
                    },
                    "maximumScoreExcludeNoFix": {
                        "type": "boolean",
                        "description": "Indicates that policy should ignore cases that do not have a known fix.\n"
                    },
                    "monitoredMalwarePaths": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "onlyNoneRootUsers": {
                        "type": "boolean",
                        "description": "Indicates if raise a warning for images that should only be run as root.\n"
                    },
                    "packagesBlackListEnabled": {
                        "type": "boolean",
                        "description": "Indicates if packages blacklist is relevant.\n"
                    },
                    "packagesBlackLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/getFunctionAssurancePolicyPackagesBlackList:getFunctionAssurancePolicyPackagesBlackList"
                        },
                        "description": "List of backlisted images.\n"
                    },
                    "packagesWhiteListEnabled": {
                        "type": "boolean",
                        "description": "Indicates if packages whitelist is relevant.\n"
                    },
                    "packagesWhiteLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/getFunctionAssurancePolicyPackagesWhiteList:getFunctionAssurancePolicyPackagesWhiteList"
                        },
                        "description": "List of whitelisted images.\n"
                    },
                    "partialResultsImageFail": {
                        "type": "boolean"
                    },
                    "readOnly": {
                        "type": "boolean"
                    },
                    "registries": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of registries.\n"
                    },
                    "registry": {
                        "type": "string"
                    },
                    "requiredLabels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/getFunctionAssurancePolicyRequiredLabel:getFunctionAssurancePolicyRequiredLabel"
                        }
                    },
                    "requiredLabelsEnabled": {
                        "type": "boolean"
                    },
                    "scanNfsMounts": {
                        "type": "boolean"
                    },
                    "scanSensitiveData": {
                        "type": "boolean",
                        "description": "Indicates if scan should include sensitive data in the image.\n"
                    },
                    "scapEnabled": {
                        "type": "boolean",
                        "description": "Indicates if scanning should include scap.\n"
                    },
                    "scapFiles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of SCAP user scripts for checks.\n"
                    },
                    "scopes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/getFunctionAssurancePolicyScope:getFunctionAssurancePolicyScope"
                        }
                    },
                    "trustedBaseImages": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/getFunctionAssurancePolicyTrustedBaseImage:getFunctionAssurancePolicyTrustedBaseImage"
                        },
                        "description": "List of trusted images.\n"
                    },
                    "trustedBaseImagesEnabled": {
                        "type": "boolean",
                        "description": "Indicates if list of trusted base images is relevant.\n"
                    },
                    "whitelistedLicenses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of whitelisted licenses.\n"
                    },
                    "whitelistedLicensesEnabled": {
                        "type": "boolean",
                        "description": "Indicates if license blacklist is relevant.\n"
                    }
                },
                "type": "object",
                "required": [
                    "allowedImages",
                    "applicationScopes",
                    "auditOnFailure",
                    "author",
                    "autoScanConfigured",
                    "autoScanEnabled",
                    "autoScanTimes",
                    "blacklistPermissions",
                    "blacklistPermissionsEnabled",
                    "blacklistedLicenses",
                    "blacklistedLicensesEnabled",
                    "blockFailed",
                    "controlExcludeNoFix",
                    "customChecks",
                    "customChecksEnabled",
                    "customSeverityEnabled",
                    "cvesBlackLists",
                    "cvesBlackListEnabled",
                    "cvesWhiteLists",
                    "cvesWhiteListEnabled",
                    "cvssSeverity",
                    "cvssSeverityEnabled",
                    "cvssSeverityExcludeNoFix",
                    "description",
                    "disallowMalware",
                    "dockerCisEnabled",
                    "domain",
                    "domainName",
                    "dtaEnabled",
                    "dtaSeverity",
                    "enabled",
                    "enforce",
                    "enforceAfterDays",
                    "enforceExcessivePermissions",
                    "exceptionalMonitoredMalwarePaths",
                    "failCicd",
                    "forbiddenLabels",
                    "forbiddenLabelsEnabled",
                    "forceMicroenforcer",
                    "functionIntegrityEnabled",
                    "id",
                    "ignoreRecentlyPublishedVln",
                    "ignoreRecentlyPublishedVlnPeriod",
                    "ignoreRiskResourcesEnabled",
                    "ignoredRiskResources",
                    "images",
                    "kubeCisEnabled",
                    "labels",
                    "malwareAction",
                    "maximumScore",
                    "maximumScoreEnabled",
                    "maximumScoreExcludeNoFix",
                    "monitoredMalwarePaths",
                    "name",
                    "onlyNoneRootUsers",
                    "packagesBlackLists",
                    "packagesBlackListEnabled",
                    "packagesWhiteLists",
                    "packagesWhiteListEnabled",
                    "partialResultsImageFail",
                    "readOnly",
                    "registries",
                    "registry",
                    "requiredLabels",
                    "requiredLabelsEnabled",
                    "scanNfsMounts",
                    "scanSensitiveData",
                    "scapEnabled",
                    "scapFiles",
                    "scopes",
                    "trustedBaseImages",
                    "trustedBaseImagesEnabled",
                    "whitelistedLicenses",
                    "whitelistedLicensesEnabled"
                ]
            }
        },
        "aquasec:index/getFunctionRuntimePolicy:getFunctionRuntimePolicy": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aquasec from \"@pulumi/aquasec\";\n\nconst functionRuntimePolicy = aquasec.getFunctionRuntimePolicy({\n    name: \"FunctionRuntimePolicyName\",\n});\nexport const functionRuntimePolicyDetails = functionRuntimePolicy;\n```\n```python\nimport pulumi\nimport pulumi_aquasec as aquasec\n\nfunction_runtime_policy = aquasec.get_function_runtime_policy(name=\"FunctionRuntimePolicyName\")\npulumi.export(\"functionRuntimePolicyDetails\", function_runtime_policy)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Aquasec = Pulumi.Aquasec;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var functionRuntimePolicy = Aquasec.GetFunctionRuntimePolicy.Invoke(new()\n    {\n        Name = \"FunctionRuntimePolicyName\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"functionRuntimePolicyDetails\"] = functionRuntimePolicy,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-aquasec/sdk/go/aquasec\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfunctionRuntimePolicy, err := aquasec.LookupFunctionRuntimePolicy(ctx, \u0026aquasec.LookupFunctionRuntimePolicyArgs{\n\t\t\tName: \"FunctionRuntimePolicyName\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"functionRuntimePolicyDetails\", functionRuntimePolicy)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aquasec.AquasecFunctions;\nimport com.pulumi.aquasec.inputs.GetFunctionRuntimePolicyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var functionRuntimePolicy = AquasecFunctions.getFunctionRuntimePolicy(GetFunctionRuntimePolicyArgs.builder()\n            .name(\"FunctionRuntimePolicyName\")\n            .build());\n\n        ctx.export(\"functionRuntimePolicyDetails\", functionRuntimePolicy.applyValue(getFunctionRuntimePolicyResult -\u003e getFunctionRuntimePolicyResult));\n    }\n}\n```\n```yaml\nvariables:\n  functionRuntimePolicy:\n    fn::invoke:\n      Function: aquasec:getFunctionRuntimePolicy\n      Arguments:\n        name: FunctionRuntimePolicyName\noutputs:\n  functionRuntimePolicyDetails: ${functionRuntimePolicy}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getFunctionRuntimePolicy.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the function runtime policy\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getFunctionRuntimePolicy.\n",
                "properties": {
                    "applicationScopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Indicates the application scope of the service.\n"
                    },
                    "author": {
                        "type": "string",
                        "description": "Username of the account that created the service.\n"
                    },
                    "blockMaliciousExecutables": {
                        "type": "boolean",
                        "description": "If true, prevent creation of malicious executables in functions during their runtime post invocation.\n"
                    },
                    "blockMaliciousExecutablesAllowedProcesses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of processes that will be allowed\n"
                    },
                    "blockRunningExecutablesInTmpFolder": {
                        "type": "boolean",
                        "description": "If true, prevent running of executables in functions locate in /tmp folder during their runtime post invocation.\n"
                    },
                    "blockedExecutables": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of executables that are prevented from running in containers.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the function runtime policy\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Indicates if the runtime policy is enabled or not.\n"
                    },
                    "enforce": {
                        "type": "boolean",
                        "description": "Indicates that policy should effect container execution (not just for audit).\n"
                    },
                    "honeypotAccessKey": {
                        "type": "string",
                        "description": "Honeypot User ID (Access Key)\n"
                    },
                    "honeypotApplyOns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of options to apply the honeypot on (Environment Vairable, Layer, File)\n"
                    },
                    "honeypotSecretKey": {
                        "type": "string",
                        "description": "Honeypot User Password (Secret Key)\n",
                        "secret": true
                    },
                    "honeypotServerlessAppName": {
                        "type": "string",
                        "description": "Serverless application name\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the function runtime policy\n"
                    },
                    "scopeExpression": {
                        "type": "string",
                        "description": "Logical expression of how to compute the dependency of the scope variables.\n"
                    },
                    "scopeVariables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/getFunctionRuntimePolicyScopeVariable:getFunctionRuntimePolicyScopeVariable"
                        },
                        "description": "List of scope attributes.\n"
                    }
                },
                "type": "object",
                "required": [
                    "applicationScopes",
                    "author",
                    "blockMaliciousExecutables",
                    "blockMaliciousExecutablesAllowedProcesses",
                    "blockRunningExecutablesInTmpFolder",
                    "blockedExecutables",
                    "description",
                    "enabled",
                    "enforce",
                    "honeypotAccessKey",
                    "honeypotApplyOns",
                    "honeypotSecretKey",
                    "honeypotServerlessAppName",
                    "name",
                    "scopeExpression",
                    "scopeVariables",
                    "id"
                ]
            }
        },
        "aquasec:index/getGateways:getGateways": {
            "description": "The data source `aquasec.getGateways` provides a method to query all gateways within the Aqua\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aquasec from \"@pulumi/aquasec\";\n\nconst testgateway = aquasec.getGateways({});\nexport const gatewayData = testgateway;\nexport const gatewayName = testgateway.then(testgateway =\u003e testgateway.gateways?.[0]?.id);\nexport const gatewayStatus = testgateway.then(testgateway =\u003e testgateway.gateways?.[0]?.status);\nexport const gatewayDescription = testgateway.then(testgateway =\u003e testgateway.gateways?.[0]?.description);\nexport const gatewayVersion = testgateway.then(testgateway =\u003e testgateway.gateways?.[0]?.version);\nexport const gatewayHostname = testgateway.then(testgateway =\u003e testgateway.gateways?.[0]?.hostname);\nexport const gatewayGrpcAddress = testgateway.then(testgateway =\u003e testgateway.gateways?.[0]?.grpcAddress);\n```\n```python\nimport pulumi\nimport pulumi_aquasec as aquasec\n\ntestgateway = aquasec.get_gateways()\npulumi.export(\"gatewayData\", testgateway)\npulumi.export(\"gatewayName\", testgateway.gateways[0].id)\npulumi.export(\"gatewayStatus\", testgateway.gateways[0].status)\npulumi.export(\"gatewayDescription\", testgateway.gateways[0].description)\npulumi.export(\"gatewayVersion\", testgateway.gateways[0].version)\npulumi.export(\"gatewayHostname\", testgateway.gateways[0].hostname)\npulumi.export(\"gatewayGrpcAddress\", testgateway.gateways[0].grpc_address)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Aquasec = Pulumi.Aquasec;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var testgateway = Aquasec.GetGateways.Invoke();\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"gatewayData\"] = testgateway,\n        [\"gatewayName\"] = testgateway.Apply(getGatewaysResult =\u003e getGatewaysResult.Gateways[0]?.Id),\n        [\"gatewayStatus\"] = testgateway.Apply(getGatewaysResult =\u003e getGatewaysResult.Gateways[0]?.Status),\n        [\"gatewayDescription\"] = testgateway.Apply(getGatewaysResult =\u003e getGatewaysResult.Gateways[0]?.Description),\n        [\"gatewayVersion\"] = testgateway.Apply(getGatewaysResult =\u003e getGatewaysResult.Gateways[0]?.Version),\n        [\"gatewayHostname\"] = testgateway.Apply(getGatewaysResult =\u003e getGatewaysResult.Gateways[0]?.Hostname),\n        [\"gatewayGrpcAddress\"] = testgateway.Apply(getGatewaysResult =\u003e getGatewaysResult.Gateways[0]?.GrpcAddress),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-aquasec/sdk/go/aquasec\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttestgateway, err := aquasec.GetGateways(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"gatewayData\", testgateway)\n\t\tctx.Export(\"gatewayName\", testgateway.Gateways[0].Id)\n\t\tctx.Export(\"gatewayStatus\", testgateway.Gateways[0].Status)\n\t\tctx.Export(\"gatewayDescription\", testgateway.Gateways[0].Description)\n\t\tctx.Export(\"gatewayVersion\", testgateway.Gateways[0].Version)\n\t\tctx.Export(\"gatewayHostname\", testgateway.Gateways[0].Hostname)\n\t\tctx.Export(\"gatewayGrpcAddress\", testgateway.Gateways[0].GrpcAddress)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aquasec.AquasecFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var testgateway = AquasecFunctions.getGateways();\n\n        ctx.export(\"gatewayData\", testgateway.applyValue(getGatewaysResult -\u003e getGatewaysResult));\n        ctx.export(\"gatewayName\", testgateway.applyValue(getGatewaysResult -\u003e getGatewaysResult.gateways()[0].id()));\n        ctx.export(\"gatewayStatus\", testgateway.applyValue(getGatewaysResult -\u003e getGatewaysResult.gateways()[0].status()));\n        ctx.export(\"gatewayDescription\", testgateway.applyValue(getGatewaysResult -\u003e getGatewaysResult.gateways()[0].description()));\n        ctx.export(\"gatewayVersion\", testgateway.applyValue(getGatewaysResult -\u003e getGatewaysResult.gateways()[0].version()));\n        ctx.export(\"gatewayHostname\", testgateway.applyValue(getGatewaysResult -\u003e getGatewaysResult.gateways()[0].hostname()));\n        ctx.export(\"gatewayGrpcAddress\", testgateway.applyValue(getGatewaysResult -\u003e getGatewaysResult.gateways()[0].grpcAddress()));\n    }\n}\n```\n```yaml\nvariables:\n  testgateway:\n    fn::invoke:\n      Function: aquasec:getGateways\n      Arguments: {}\noutputs:\n  gatewayData: ${testgateway}\n  gatewayName: ${testgateway.gateways[0].id}\n  gatewayStatus: ${testgateway.gateways[0].status}\n  gatewayDescription: ${testgateway.gateways[0].description}\n  gatewayVersion: ${testgateway.gateways[0].version}\n  gatewayHostname: ${testgateway.gateways[0].hostname}\n  gatewayGrpcAddress: ${testgateway.gateways[0].grpcAddress}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getGateways.\n",
                "properties": {
                    "gateways": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/getGatewaysGateway:getGatewaysGateway"
                        },
                        "description": "A list of existing gateways' parameters.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "gateways",
                    "id"
                ]
            }
        },
        "aquasec:index/getGroups:getGroups": {
            "description": "The data source `aquasec.getGroups` provides a method to query all groups within the Aqua CSPMgroup database. The fields returned from this query are detailed in the Schema section below.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aquasec from \"@pulumi/aquasec\";\n\nconst groups = aquasec.getGroups({});\nexport const firstGroupName = groups.then(groups =\u003e groups.groups?.[0]?.name);\n```\n```python\nimport pulumi\nimport pulumi_aquasec as aquasec\n\ngroups = aquasec.get_groups()\npulumi.export(\"firstGroupName\", groups.groups[0].name)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Aquasec = Pulumi.Aquasec;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var groups = Aquasec.GetGroups.Invoke();\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"firstGroupName\"] = groups.Apply(getGroupsResult =\u003e getGroupsResult.Groups[0]?.Name),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-aquasec/sdk/go/aquasec\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tgroups, err := aquasec.GetGroups(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"firstGroupName\", groups.Groups[0].Name)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aquasec.AquasecFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var groups = AquasecFunctions.getGroups();\n\n        ctx.export(\"firstGroupName\", groups.applyValue(getGroupsResult -\u003e getGroupsResult.groups()[0].name()));\n    }\n}\n```\n```yaml\nvariables:\n  groups:\n    fn::invoke:\n      Function: aquasec:getGroups\n      Arguments: {}\noutputs:\n  firstGroupName: ${groups.groups[0].name}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getGroups.\n",
                "properties": {
                    "groups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/getGroupsGroup:getGroupsGroup"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "groups",
                    "id"
                ]
            }
        },
        "aquasec:index/getHostAssurancePolicy:getHostAssurancePolicy": {
            "inputs": {
                "description": "A collection of arguments for invoking getHostAssurancePolicy.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getHostAssurancePolicy.\n",
                "properties": {
                    "allowedImages": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of explicitly allowed images.\n"
                    },
                    "applicationScopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "auditOnFailure": {
                        "type": "boolean",
                        "description": "Indicates if auditing for failures.\n"
                    },
                    "author": {
                        "type": "string",
                        "description": "Name of user account that created the policy.\n"
                    },
                    "autoScanConfigured": {
                        "type": "boolean"
                    },
                    "autoScanEnabled": {
                        "type": "boolean"
                    },
                    "autoScanTimes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/getHostAssurancePolicyAutoScanTime:getHostAssurancePolicyAutoScanTime"
                        }
                    },
                    "blacklistPermissions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of function's forbidden permissions.\n"
                    },
                    "blacklistPermissionsEnabled": {
                        "type": "boolean",
                        "description": "Indicates if blacklist permissions is relevant.\n"
                    },
                    "blacklistedLicenses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of blacklisted licenses.\n"
                    },
                    "blacklistedLicensesEnabled": {
                        "type": "boolean",
                        "description": "Lndicates if license blacklist is relevant.\n"
                    },
                    "blockFailed": {
                        "type": "boolean",
                        "description": "Indicates if failed images are blocked.\n"
                    },
                    "controlExcludeNoFix": {
                        "type": "boolean"
                    },
                    "customChecks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/getHostAssurancePolicyCustomCheck:getHostAssurancePolicyCustomCheck"
                        },
                        "description": "List of Custom user scripts for checks.\n"
                    },
                    "customChecksEnabled": {
                        "type": "boolean",
                        "description": "Indicates if scanning should include custom checks.\n"
                    },
                    "customSeverityEnabled": {
                        "type": "boolean"
                    },
                    "cvesBlackListEnabled": {
                        "type": "boolean",
                        "description": "Indicates if cves blacklist is relevant.\n"
                    },
                    "cvesBlackLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of cves blacklisted items.\n"
                    },
                    "cvesWhiteListEnabled": {
                        "type": "boolean",
                        "description": "Indicates if cves whitelist is relevant.\n"
                    },
                    "cvesWhiteLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of cves whitelisted licenses\n"
                    },
                    "cvssSeverity": {
                        "type": "string",
                        "description": "Identifier of the cvss severity.\n"
                    },
                    "cvssSeverityEnabled": {
                        "type": "boolean",
                        "description": "Indicates if the cvss severity is scanned.\n"
                    },
                    "cvssSeverityExcludeNoFix": {
                        "type": "boolean",
                        "description": "Indicates that policy should ignore cvss cases that do not have a known fix.\n"
                    },
                    "description": {
                        "type": "string"
                    },
                    "disallowMalware": {
                        "type": "boolean",
                        "description": "Indicates if malware should block the image.\n"
                    },
                    "dockerCisEnabled": {
                        "type": "boolean"
                    },
                    "domain": {
                        "type": "string",
                        "description": "Name of the container image.\n"
                    },
                    "domainName": {
                        "type": "string"
                    },
                    "dtaEnabled": {
                        "type": "boolean"
                    },
                    "dtaSeverity": {
                        "type": "string"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "enforce": {
                        "type": "boolean"
                    },
                    "enforceAfterDays": {
                        "type": "integer"
                    },
                    "enforceExcessivePermissions": {
                        "type": "boolean"
                    },
                    "exceptionalMonitoredMalwarePaths": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "failCicd": {
                        "type": "boolean",
                        "description": "Indicates if cicd failures will fail the image.\n"
                    },
                    "forbiddenLabels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/getHostAssurancePolicyForbiddenLabel:getHostAssurancePolicyForbiddenLabel"
                        }
                    },
                    "forbiddenLabelsEnabled": {
                        "type": "boolean"
                    },
                    "forceMicroenforcer": {
                        "type": "boolean"
                    },
                    "functionIntegrityEnabled": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "ignoreRecentlyPublishedVln": {
                        "type": "boolean"
                    },
                    "ignoreRecentlyPublishedVlnPeriod": {
                        "type": "integer"
                    },
                    "ignoreRiskResourcesEnabled": {
                        "type": "boolean",
                        "description": "Indicates if risk resources are ignored.\n"
                    },
                    "ignoredRiskResources": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of ignored risk resources.\n"
                    },
                    "images": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of images.\n"
                    },
                    "kubeCisEnabled": {
                        "type": "boolean"
                    },
                    "labels": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of labels.\n"
                    },
                    "malwareAction": {
                        "type": "string"
                    },
                    "maximumScore": {
                        "type": "number",
                        "description": "Value of allowed maximum score.\n"
                    },
                    "maximumScoreEnabled": {
                        "type": "boolean",
                        "description": "Indicates if exceeding the maximum score is scanned.\n"
                    },
                    "maximumScoreExcludeNoFix": {
                        "type": "boolean",
                        "description": "Indicates that policy should ignore cases that do not have a known fix.\n"
                    },
                    "monitoredMalwarePaths": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "onlyNoneRootUsers": {
                        "type": "boolean",
                        "description": "Indicates if raise a warning for images that should only be run as root.\n"
                    },
                    "packagesBlackListEnabled": {
                        "type": "boolean",
                        "description": "Indicates if packages blacklist is relevant.\n"
                    },
                    "packagesBlackLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/getHostAssurancePolicyPackagesBlackList:getHostAssurancePolicyPackagesBlackList"
                        },
                        "description": "List of backlisted images.\n"
                    },
                    "packagesWhiteListEnabled": {
                        "type": "boolean",
                        "description": "Indicates if packages whitelist is relevant.\n"
                    },
                    "packagesWhiteLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/getHostAssurancePolicyPackagesWhiteList:getHostAssurancePolicyPackagesWhiteList"
                        },
                        "description": "List of whitelisted images.\n"
                    },
                    "partialResultsImageFail": {
                        "type": "boolean"
                    },
                    "readOnly": {
                        "type": "boolean"
                    },
                    "registries": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of registries.\n"
                    },
                    "registry": {
                        "type": "string"
                    },
                    "requiredLabels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/getHostAssurancePolicyRequiredLabel:getHostAssurancePolicyRequiredLabel"
                        }
                    },
                    "requiredLabelsEnabled": {
                        "type": "boolean"
                    },
                    "scanNfsMounts": {
                        "type": "boolean"
                    },
                    "scanSensitiveData": {
                        "type": "boolean",
                        "description": "Indicates if scan should include sensitive data in the image.\n"
                    },
                    "scapEnabled": {
                        "type": "boolean",
                        "description": "Indicates if scanning should include scap.\n"
                    },
                    "scapFiles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of SCAP user scripts for checks.\n"
                    },
                    "scopes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/getHostAssurancePolicyScope:getHostAssurancePolicyScope"
                        }
                    },
                    "trustedBaseImages": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/getHostAssurancePolicyTrustedBaseImage:getHostAssurancePolicyTrustedBaseImage"
                        },
                        "description": "List of trusted images.\n"
                    },
                    "trustedBaseImagesEnabled": {
                        "type": "boolean",
                        "description": "Indicates if list of trusted base images is relevant.\n"
                    },
                    "whitelistedLicenses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of whitelisted licenses.\n"
                    },
                    "whitelistedLicensesEnabled": {
                        "type": "boolean",
                        "description": "Indicates if license blacklist is relevant.\n"
                    }
                },
                "type": "object",
                "required": [
                    "allowedImages",
                    "applicationScopes",
                    "auditOnFailure",
                    "author",
                    "autoScanConfigured",
                    "autoScanEnabled",
                    "autoScanTimes",
                    "blacklistPermissions",
                    "blacklistPermissionsEnabled",
                    "blacklistedLicenses",
                    "blacklistedLicensesEnabled",
                    "blockFailed",
                    "controlExcludeNoFix",
                    "customChecks",
                    "customChecksEnabled",
                    "customSeverityEnabled",
                    "cvesBlackLists",
                    "cvesBlackListEnabled",
                    "cvesWhiteLists",
                    "cvesWhiteListEnabled",
                    "cvssSeverity",
                    "cvssSeverityEnabled",
                    "cvssSeverityExcludeNoFix",
                    "description",
                    "disallowMalware",
                    "dockerCisEnabled",
                    "domain",
                    "domainName",
                    "dtaEnabled",
                    "dtaSeverity",
                    "enabled",
                    "enforce",
                    "enforceAfterDays",
                    "enforceExcessivePermissions",
                    "exceptionalMonitoredMalwarePaths",
                    "failCicd",
                    "forbiddenLabels",
                    "forbiddenLabelsEnabled",
                    "forceMicroenforcer",
                    "functionIntegrityEnabled",
                    "id",
                    "ignoreRecentlyPublishedVln",
                    "ignoreRecentlyPublishedVlnPeriod",
                    "ignoreRiskResourcesEnabled",
                    "ignoredRiskResources",
                    "images",
                    "kubeCisEnabled",
                    "labels",
                    "malwareAction",
                    "maximumScore",
                    "maximumScoreEnabled",
                    "maximumScoreExcludeNoFix",
                    "monitoredMalwarePaths",
                    "name",
                    "onlyNoneRootUsers",
                    "packagesBlackLists",
                    "packagesBlackListEnabled",
                    "packagesWhiteLists",
                    "packagesWhiteListEnabled",
                    "partialResultsImageFail",
                    "readOnly",
                    "registries",
                    "registry",
                    "requiredLabels",
                    "requiredLabelsEnabled",
                    "scanNfsMounts",
                    "scanSensitiveData",
                    "scapEnabled",
                    "scapFiles",
                    "scopes",
                    "trustedBaseImages",
                    "trustedBaseImagesEnabled",
                    "whitelistedLicenses",
                    "whitelistedLicensesEnabled"
                ]
            }
        },
        "aquasec:index/getHostRuntimePolicy:getHostRuntimePolicy": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aquasec from \"@pulumi/aquasec\";\n\nconst hostRuntimePolicy = aquasec.getHostRuntimePolicy({\n    name: \"hostRuntimePolicyName\",\n});\nexport const hostRuntimePolicyDetails = hostRuntimePolicy;\n```\n```python\nimport pulumi\nimport pulumi_aquasec as aquasec\n\nhost_runtime_policy = aquasec.get_host_runtime_policy(name=\"hostRuntimePolicyName\")\npulumi.export(\"hostRuntimePolicyDetails\", host_runtime_policy)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Aquasec = Pulumi.Aquasec;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var hostRuntimePolicy = Aquasec.GetHostRuntimePolicy.Invoke(new()\n    {\n        Name = \"hostRuntimePolicyName\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"hostRuntimePolicyDetails\"] = hostRuntimePolicy,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-aquasec/sdk/go/aquasec\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\thostRuntimePolicy, err := aquasec.LookupHostRuntimePolicy(ctx, \u0026aquasec.LookupHostRuntimePolicyArgs{\n\t\t\tName: \"hostRuntimePolicyName\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"hostRuntimePolicyDetails\", hostRuntimePolicy)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aquasec.AquasecFunctions;\nimport com.pulumi.aquasec.inputs.GetHostRuntimePolicyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var hostRuntimePolicy = AquasecFunctions.getHostRuntimePolicy(GetHostRuntimePolicyArgs.builder()\n            .name(\"hostRuntimePolicyName\")\n            .build());\n\n        ctx.export(\"hostRuntimePolicyDetails\", hostRuntimePolicy.applyValue(getHostRuntimePolicyResult -\u003e getHostRuntimePolicyResult));\n    }\n}\n```\n```yaml\nvariables:\n  hostRuntimePolicy:\n    fn::invoke:\n      Function: aquasec:getHostRuntimePolicy\n      Arguments:\n        name: hostRuntimePolicyName\noutputs:\n  hostRuntimePolicyDetails: ${hostRuntimePolicy}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getHostRuntimePolicy.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the host runtime policy\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getHostRuntimePolicy.\n",
                "properties": {
                    "applicationScopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Indicates the application scope of the service.\n"
                    },
                    "auditAllOsUserActivity": {
                        "type": "boolean",
                        "description": "If true, all process activity will be audited.\n"
                    },
                    "auditBruteForceLogin": {
                        "type": "boolean",
                        "description": "Detects brute force login attempts\n"
                    },
                    "auditFullCommandArguments": {
                        "type": "boolean",
                        "description": "If true, full command arguments will be audited.\n"
                    },
                    "auditHostFailedLoginEvents": {
                        "type": "boolean",
                        "description": "If true, host failed logins will be audited.\n"
                    },
                    "auditHostSuccessfulLoginEvents": {
                        "type": "boolean",
                        "description": "If true, host successful logins will be audited.\n"
                    },
                    "auditUserAccountManagement": {
                        "type": "boolean",
                        "description": "If true, account management will be audited.\n"
                    },
                    "author": {
                        "type": "string",
                        "description": "Username of the account that created the service.\n"
                    },
                    "blockCryptocurrencyMining": {
                        "type": "boolean",
                        "description": "Detect and prevent communication to DNS/IP addresses known to be used for Cryptocurrency Mining\n"
                    },
                    "blockedFiles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of files that are prevented from being read, modified and executed in the containers.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the host runtime policy\n"
                    },
                    "enableIpReputationSecurity": {
                        "type": "boolean",
                        "description": "If true, detect and prevent communication from containers to IP addresses known to have a bad reputation.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Indicates if the runtime policy is enabled or not.\n"
                    },
                    "enforce": {
                        "type": "boolean",
                        "description": "Indicates that policy should effect container execution (not just for audit).\n"
                    },
                    "enforceAfterDays": {
                        "type": "integer",
                        "description": "Indicates the number of days after which the runtime policy will be changed to enforce mode.\n"
                    },
                    "fileIntegrityMonitorings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/getHostRuntimePolicyFileIntegrityMonitoring:getHostRuntimePolicyFileIntegrityMonitoring"
                        },
                        "description": "Configuration for file integrity monitoring.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "malwareScanOptions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/getHostRuntimePolicyMalwareScanOption:getHostRuntimePolicyMalwareScanOption"
                        },
                        "description": "Configuration for Real-Time Malware Protection.\n"
                    },
                    "monitorSystemLogIntegrity": {
                        "type": "boolean",
                        "description": "If true, system log will be monitored.\n"
                    },
                    "monitorSystemTimeChanges": {
                        "type": "boolean",
                        "description": "If true, system time changes will be monitored.\n"
                    },
                    "monitorWindowsServices": {
                        "type": "boolean",
                        "description": "If true, windows service operations will be monitored.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the host runtime policy\n"
                    },
                    "osGroupsAlloweds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of OS (Linux or Windows) groups that are allowed to authenticate to the host, and block authentication requests from all others. Groups can be either Linux groups or Windows AD groups.\n"
                    },
                    "osGroupsBlockeds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of OS (Linux or Windows) groups that are not allowed to authenticate to the host, and block authentication requests from all others. Groups can be either Linux groups or Windows AD groups.\n"
                    },
                    "osUsersAlloweds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of OS (Linux or Windows) users that are allowed to authenticate to the host, and block authentication requests from all others.\n"
                    },
                    "osUsersBlockeds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of OS (Linux or Windows) users that are not allowed to authenticate to the host, and block authentication requests from all others.\n"
                    },
                    "packageBlocks": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of packages that are not allowed read, write or execute all files that under the packages.\n"
                    },
                    "portScanningDetection": {
                        "type": "boolean",
                        "description": "If true, port scanning behaviors will be audited.\n"
                    },
                    "scopeExpression": {
                        "type": "string",
                        "description": "Logical expression of how to compute the dependency of the scope variables.\n"
                    },
                    "scopeVariables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/getHostRuntimePolicyScopeVariable:getHostRuntimePolicyScopeVariable"
                        },
                        "description": "List of scope attributes.\n"
                    },
                    "windowsRegistryMonitorings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/getHostRuntimePolicyWindowsRegistryMonitoring:getHostRuntimePolicyWindowsRegistryMonitoring"
                        },
                        "description": "Configuration for windows registry monitoring.\n"
                    },
                    "windowsRegistryProtections": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/getHostRuntimePolicyWindowsRegistryProtection:getHostRuntimePolicyWindowsRegistryProtection"
                        },
                        "description": "Configuration for windows registry protection.\n"
                    }
                },
                "type": "object",
                "required": [
                    "applicationScopes",
                    "auditAllOsUserActivity",
                    "auditBruteForceLogin",
                    "auditFullCommandArguments",
                    "auditHostFailedLoginEvents",
                    "auditHostSuccessfulLoginEvents",
                    "auditUserAccountManagement",
                    "author",
                    "blockCryptocurrencyMining",
                    "blockedFiles",
                    "description",
                    "enableIpReputationSecurity",
                    "enabled",
                    "enforce",
                    "enforceAfterDays",
                    "fileIntegrityMonitorings",
                    "malwareScanOptions",
                    "monitorSystemLogIntegrity",
                    "monitorSystemTimeChanges",
                    "monitorWindowsServices",
                    "name",
                    "osGroupsAlloweds",
                    "osGroupsBlockeds",
                    "osUsersAlloweds",
                    "osUsersBlockeds",
                    "packageBlocks",
                    "portScanningDetection",
                    "scopeExpression",
                    "scopeVariables",
                    "windowsRegistryMonitorings",
                    "windowsRegistryProtections",
                    "id"
                ]
            }
        },
        "aquasec:index/getImage:getImage": {
            "inputs": {
                "description": "A collection of arguments for invoking getImage.\n",
                "properties": {
                    "registry": {
                        "type": "string",
                        "description": "The name of the registry where the image is stored.\n"
                    },
                    "repository": {
                        "type": "string",
                        "description": "The name of the image's repository.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "The tag of the image.\n"
                    }
                },
                "type": "object",
                "required": [
                    "registry",
                    "repository",
                    "tag"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getImage.\n",
                "properties": {
                    "architecture": {
                        "type": "string",
                        "description": "The image architecture.\n"
                    },
                    "assuranceChecksPerformeds": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/getImageAssuranceChecksPerformed:getImageAssuranceChecksPerformed"
                        },
                        "description": "The list of image assurance checks performed on the image.\n"
                    },
                    "author": {
                        "type": "string",
                        "description": "The name of the user who registered the image.\n"
                    },
                    "blacklisted": {
                        "type": "boolean",
                        "description": "Whether the image is blacklisted.\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "The image creation comment.\n"
                    },
                    "created": {
                        "type": "string",
                        "description": "The date and time when the image was registered.\n"
                    },
                    "criticalVulnerabilities": {
                        "type": "integer",
                        "description": "Number of critical severity vulnerabilities detected in the image.\n"
                    },
                    "defaultUser": {
                        "type": "string",
                        "description": "The default user of the image.\n"
                    },
                    "digest": {
                        "type": "string",
                        "description": "The content digest of the image.\n"
                    },
                    "disallowed": {
                        "type": "boolean",
                        "description": "Whether the image is disallowed (non-compliant).\n"
                    },
                    "disallowedByAssuranceChecks": {
                        "type": "boolean",
                        "description": "Whether the image was disallowed because of Image Assurance Policies.\n"
                    },
                    "dockerId": {
                        "type": "string",
                        "description": "The Docker image ID.\n"
                    },
                    "dockerLabels": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Docker labels of the image.\n"
                    },
                    "dockerVersion": {
                        "type": "string",
                        "description": "The Docker version used when building the image.\n"
                    },
                    "dtaSeverityScore": {
                        "type": "string",
                        "description": "DTA severity score.\n"
                    },
                    "dtaSkipped": {
                        "type": "boolean",
                        "description": "If DTA was skipped.\n"
                    },
                    "dtaSkippedReason": {
                        "type": "string",
                        "description": "The reason why DTA was skipped.\n"
                    },
                    "environmentVariables": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Environment variables in the image.\n"
                    },
                    "highVulnerabilities": {
                        "type": "integer",
                        "description": "Number of high severity vulnerabilities detected in the image.\n"
                    },
                    "histories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/getImageHistory:getImageHistory"
                        },
                        "description": "The Docker history of the image.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "imageSize": {
                        "type": "integer",
                        "description": "The size of the image in bytes.\n"
                    },
                    "imageType": {
                        "type": "string",
                        "description": "The type of the image.\n"
                    },
                    "labels": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Aqua labels of the image.\n"
                    },
                    "lowVulnerabilities": {
                        "type": "integer",
                        "description": "Number of low severity vulnerabilities detected in the image.\n"
                    },
                    "malware": {
                        "type": "integer",
                        "description": "Number of malware found on the image.\n"
                    },
                    "mediumVulnerabilities": {
                        "type": "integer",
                        "description": "Number of medium severity vulnerabilities detected in the image.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the image.\n"
                    },
                    "negligibleVulnerabilities": {
                        "type": "integer",
                        "description": "Number of negligible severity vulnerabilities detected in the image.\n"
                    },
                    "newerImageExists": {
                        "type": "boolean",
                        "description": "Whether a new version of the image is available in the registry but is not scanned and registered yet.\n"
                    },
                    "os": {
                        "type": "string",
                        "description": "The operating system detected in the image\n"
                    },
                    "osVersion": {
                        "type": "string",
                        "description": "The version of the OS detected in the image.\n"
                    },
                    "parent": {
                        "type": "string",
                        "description": "The ID of the parent image.\n"
                    },
                    "partialResults": {
                        "type": "boolean",
                        "description": "Whether the image could only be partially scanned.\n"
                    },
                    "pendingDisallowed": {
                        "type": "boolean",
                        "description": "Whether the image is non-compliant, but is pending this status due to running containers.\n"
                    },
                    "permission": {
                        "type": "string",
                        "description": "Permission of the image.\n"
                    },
                    "permissionAuthor": {
                        "type": "string",
                        "description": "The name of the user who last modified the image permissions.\n"
                    },
                    "permissionComment": {
                        "type": "string",
                        "description": "The comment provided when the image permissions were last modified\n"
                    },
                    "registry": {
                        "type": "string",
                        "description": "The name of the registry where the image is stored.\n"
                    },
                    "registryType": {
                        "type": "string",
                        "description": "Type of the registry.\n"
                    },
                    "repoDigests": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The repository digests.\n"
                    },
                    "repository": {
                        "type": "string",
                        "description": "The name of the image's repository.\n"
                    },
                    "scanDate": {
                        "type": "string",
                        "description": "The date and time when the image was last scanned.\n"
                    },
                    "scanError": {
                        "type": "string",
                        "description": "If the image scan failed, the failure message.\n"
                    },
                    "scanStatus": {
                        "type": "string",
                        "description": "The scan status of the image (either 'pending', 'in*progress', 'finished', 'failed' or 'not*started').\n"
                    },
                    "sensitiveData": {
                        "type": "integer",
                        "description": "Number of sensitive data detected in the image.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "The tag of the image.\n"
                    },
                    "totalVulnerabilities": {
                        "type": "integer",
                        "description": "The total number of vulnerabilities detected in the image.\n"
                    },
                    "virtualSize": {
                        "type": "integer",
                        "description": "The virtual size of the image.\n"
                    },
                    "vulnerabilities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/getImageVulnerability:getImageVulnerability"
                        },
                        "description": "A list of all the vulnerabilities found in the image\n"
                    },
                    "whitelisted": {
                        "type": "boolean",
                        "description": "Whether the image is whitelisted.\n"
                    }
                },
                "type": "object",
                "required": [
                    "architecture",
                    "assuranceChecksPerformeds",
                    "author",
                    "blacklisted",
                    "comment",
                    "created",
                    "criticalVulnerabilities",
                    "defaultUser",
                    "digest",
                    "disallowed",
                    "disallowedByAssuranceChecks",
                    "dockerId",
                    "dockerLabels",
                    "dockerVersion",
                    "dtaSeverityScore",
                    "dtaSkipped",
                    "dtaSkippedReason",
                    "environmentVariables",
                    "highVulnerabilities",
                    "histories",
                    "imageSize",
                    "imageType",
                    "labels",
                    "lowVulnerabilities",
                    "malware",
                    "mediumVulnerabilities",
                    "name",
                    "negligibleVulnerabilities",
                    "newerImageExists",
                    "os",
                    "osVersion",
                    "parent",
                    "partialResults",
                    "pendingDisallowed",
                    "permission",
                    "permissionAuthor",
                    "permissionComment",
                    "registry",
                    "registryType",
                    "repoDigests",
                    "repository",
                    "scanDate",
                    "scanError",
                    "scanStatus",
                    "sensitiveData",
                    "tag",
                    "totalVulnerabilities",
                    "virtualSize",
                    "vulnerabilities",
                    "whitelisted",
                    "id"
                ]
            }
        },
        "aquasec:index/getImageAssurancePolicy:getImageAssurancePolicy": {
            "inputs": {
                "description": "A collection of arguments for invoking getImageAssurancePolicy.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getImageAssurancePolicy.\n",
                "properties": {
                    "allowedImages": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of explicitly allowed images.\n"
                    },
                    "applicationScopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "auditOnFailure": {
                        "type": "boolean",
                        "description": "Indicates if auditing for failures.\n"
                    },
                    "author": {
                        "type": "string",
                        "description": "Name of user account that created the policy.\n"
                    },
                    "autoScanConfigured": {
                        "type": "boolean"
                    },
                    "autoScanEnabled": {
                        "type": "boolean"
                    },
                    "autoScanTimes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/getImageAssurancePolicyAutoScanTime:getImageAssurancePolicyAutoScanTime"
                        }
                    },
                    "blacklistPermissions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of function's forbidden permissions.\n"
                    },
                    "blacklistPermissionsEnabled": {
                        "type": "boolean",
                        "description": "Indicates if blacklist permissions is relevant.\n"
                    },
                    "blacklistedLicenses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of blacklisted licenses.\n"
                    },
                    "blacklistedLicensesEnabled": {
                        "type": "boolean",
                        "description": "Lndicates if license blacklist is relevant.\n"
                    },
                    "blockFailed": {
                        "type": "boolean",
                        "description": "Indicates if failed images are blocked.\n"
                    },
                    "controlExcludeNoFix": {
                        "type": "boolean"
                    },
                    "customChecks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/getImageAssurancePolicyCustomCheck:getImageAssurancePolicyCustomCheck"
                        },
                        "description": "List of Custom user scripts for checks.\n"
                    },
                    "customChecksEnabled": {
                        "type": "boolean",
                        "description": "Indicates if scanning should include custom checks.\n"
                    },
                    "customSeverityEnabled": {
                        "type": "boolean"
                    },
                    "cvesBlackListEnabled": {
                        "type": "boolean",
                        "description": "Indicates if cves blacklist is relevant.\n"
                    },
                    "cvesBlackLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of cves blacklisted items.\n"
                    },
                    "cvesWhiteListEnabled": {
                        "type": "boolean",
                        "description": "Indicates if cves whitelist is relevant.\n"
                    },
                    "cvesWhiteLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of cves whitelisted licenses\n"
                    },
                    "cvssSeverity": {
                        "type": "string",
                        "description": "Identifier of the cvss severity.\n"
                    },
                    "cvssSeverityEnabled": {
                        "type": "boolean",
                        "description": "Indicates if the cvss severity is scanned.\n"
                    },
                    "cvssSeverityExcludeNoFix": {
                        "type": "boolean",
                        "description": "Indicates that policy should ignore cvss cases that do not have a known fix.\n"
                    },
                    "description": {
                        "type": "string"
                    },
                    "disallowMalware": {
                        "type": "boolean",
                        "description": "Indicates if malware should block the image.\n"
                    },
                    "dockerCisEnabled": {
                        "type": "boolean"
                    },
                    "domain": {
                        "type": "string",
                        "description": "Name of the container image.\n"
                    },
                    "domainName": {
                        "type": "string"
                    },
                    "dtaEnabled": {
                        "type": "boolean"
                    },
                    "dtaSeverity": {
                        "type": "string"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "enforce": {
                        "type": "boolean"
                    },
                    "enforceAfterDays": {
                        "type": "integer"
                    },
                    "enforceExcessivePermissions": {
                        "type": "boolean"
                    },
                    "exceptionalMonitoredMalwarePaths": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "failCicd": {
                        "type": "boolean",
                        "description": "Indicates if cicd failures will fail the image.\n"
                    },
                    "forbiddenLabels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/getImageAssurancePolicyForbiddenLabel:getImageAssurancePolicyForbiddenLabel"
                        }
                    },
                    "forbiddenLabelsEnabled": {
                        "type": "boolean"
                    },
                    "forceMicroenforcer": {
                        "type": "boolean"
                    },
                    "functionIntegrityEnabled": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "ignoreRecentlyPublishedVln": {
                        "type": "boolean"
                    },
                    "ignoreRecentlyPublishedVlnPeriod": {
                        "type": "integer"
                    },
                    "ignoreRiskResourcesEnabled": {
                        "type": "boolean",
                        "description": "Indicates if risk resources are ignored.\n"
                    },
                    "ignoredRiskResources": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of ignored risk resources.\n"
                    },
                    "images": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of images.\n"
                    },
                    "kubeCisEnabled": {
                        "type": "boolean"
                    },
                    "labels": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of labels.\n"
                    },
                    "malwareAction": {
                        "type": "string"
                    },
                    "maximumScore": {
                        "type": "number",
                        "description": "Value of allowed maximum score.\n"
                    },
                    "maximumScoreEnabled": {
                        "type": "boolean",
                        "description": "Indicates if exceeding the maximum score is scanned.\n"
                    },
                    "maximumScoreExcludeNoFix": {
                        "type": "boolean",
                        "description": "Indicates that policy should ignore cases that do not have a known fix.\n"
                    },
                    "monitoredMalwarePaths": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "onlyNoneRootUsers": {
                        "type": "boolean",
                        "description": "Indicates if raise a warning for images that should only be run as root.\n"
                    },
                    "packagesBlackListEnabled": {
                        "type": "boolean",
                        "description": "Indicates if packages blacklist is relevant.\n"
                    },
                    "packagesBlackLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/getImageAssurancePolicyPackagesBlackList:getImageAssurancePolicyPackagesBlackList"
                        },
                        "description": "List of backlisted images.\n"
                    },
                    "packagesWhiteListEnabled": {
                        "type": "boolean",
                        "description": "Indicates if packages whitelist is relevant.\n"
                    },
                    "packagesWhiteLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/getImageAssurancePolicyPackagesWhiteList:getImageAssurancePolicyPackagesWhiteList"
                        },
                        "description": "List of whitelisted images.\n"
                    },
                    "partialResultsImageFail": {
                        "type": "boolean"
                    },
                    "readOnly": {
                        "type": "boolean"
                    },
                    "registries": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of registries.\n"
                    },
                    "registry": {
                        "type": "string"
                    },
                    "requiredLabels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/getImageAssurancePolicyRequiredLabel:getImageAssurancePolicyRequiredLabel"
                        }
                    },
                    "requiredLabelsEnabled": {
                        "type": "boolean"
                    },
                    "scanNfsMounts": {
                        "type": "boolean"
                    },
                    "scanSensitiveData": {
                        "type": "boolean",
                        "description": "Indicates if scan should include sensitive data in the image.\n"
                    },
                    "scapEnabled": {
                        "type": "boolean",
                        "description": "Indicates if scanning should include scap.\n"
                    },
                    "scapFiles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of SCAP user scripts for checks.\n"
                    },
                    "scopes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/getImageAssurancePolicyScope:getImageAssurancePolicyScope"
                        }
                    },
                    "trustedBaseImages": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/getImageAssurancePolicyTrustedBaseImage:getImageAssurancePolicyTrustedBaseImage"
                        },
                        "description": "List of trusted images.\n"
                    },
                    "trustedBaseImagesEnabled": {
                        "type": "boolean",
                        "description": "Indicates if list of trusted base images is relevant.\n"
                    },
                    "whitelistedLicenses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of whitelisted licenses.\n"
                    },
                    "whitelistedLicensesEnabled": {
                        "type": "boolean",
                        "description": "Indicates if license blacklist is relevant.\n"
                    }
                },
                "type": "object",
                "required": [
                    "allowedImages",
                    "applicationScopes",
                    "auditOnFailure",
                    "author",
                    "autoScanConfigured",
                    "autoScanEnabled",
                    "autoScanTimes",
                    "blacklistPermissions",
                    "blacklistPermissionsEnabled",
                    "blacklistedLicenses",
                    "blacklistedLicensesEnabled",
                    "blockFailed",
                    "controlExcludeNoFix",
                    "customChecks",
                    "customChecksEnabled",
                    "customSeverityEnabled",
                    "cvesBlackLists",
                    "cvesBlackListEnabled",
                    "cvesWhiteLists",
                    "cvesWhiteListEnabled",
                    "cvssSeverity",
                    "cvssSeverityEnabled",
                    "cvssSeverityExcludeNoFix",
                    "description",
                    "disallowMalware",
                    "dockerCisEnabled",
                    "domain",
                    "domainName",
                    "dtaEnabled",
                    "dtaSeverity",
                    "enabled",
                    "enforce",
                    "enforceAfterDays",
                    "enforceExcessivePermissions",
                    "exceptionalMonitoredMalwarePaths",
                    "failCicd",
                    "forbiddenLabels",
                    "forbiddenLabelsEnabled",
                    "forceMicroenforcer",
                    "functionIntegrityEnabled",
                    "id",
                    "ignoreRecentlyPublishedVln",
                    "ignoreRecentlyPublishedVlnPeriod",
                    "ignoreRiskResourcesEnabled",
                    "ignoredRiskResources",
                    "images",
                    "kubeCisEnabled",
                    "labels",
                    "malwareAction",
                    "maximumScore",
                    "maximumScoreEnabled",
                    "maximumScoreExcludeNoFix",
                    "monitoredMalwarePaths",
                    "name",
                    "onlyNoneRootUsers",
                    "packagesBlackLists",
                    "packagesBlackListEnabled",
                    "packagesWhiteLists",
                    "packagesWhiteListEnabled",
                    "partialResultsImageFail",
                    "readOnly",
                    "registries",
                    "registry",
                    "requiredLabels",
                    "requiredLabelsEnabled",
                    "scanNfsMounts",
                    "scanSensitiveData",
                    "scapEnabled",
                    "scapFiles",
                    "scopes",
                    "trustedBaseImages",
                    "trustedBaseImagesEnabled",
                    "whitelistedLicenses",
                    "whitelistedLicensesEnabled"
                ]
            }
        },
        "aquasec:index/getIntegrationRegistry:getIntegrationRegistry": {
            "inputs": {
                "description": "A collection of arguments for invoking getIntegrationRegistry.\n",
                "properties": {
                    "imageCreationDateCondition": {
                        "type": "string",
                        "description": "Additional condition for pulling and rescanning images, Defaults to 'none'\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the registry; string, required - this will be treated as the registry's ID, so choose a simple alphanumerical name without special signs and spaces\n"
                    },
                    "pullImageAge": {
                        "type": "string",
                        "description": "When auto pull image enabled, sets maximum age of auto pulled images\n"
                    },
                    "pullImageCount": {
                        "type": "integer",
                        "description": "When auto pull image enabled, sets maximum age of auto pulled images tags from each repository.\n"
                    },
                    "scannerNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of scanner names\n"
                    },
                    "scannerType": {
                        "type": "string",
                        "description": "Scanner type\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getIntegrationRegistry.\n",
                "properties": {
                    "autoCleanup": {
                        "type": "boolean",
                        "description": "Automatically clean up images and repositories which are no longer present in the registry from Aqua console\n"
                    },
                    "autoPull": {
                        "type": "boolean",
                        "description": "Whether to automatically pull images from the registry on creation and daily\n"
                    },
                    "autoPullInterval": {
                        "type": "integer",
                        "description": "The interval in days to start pulling new images from the registry, Defaults to 1\n"
                    },
                    "autoPullMax": {
                        "type": "integer",
                        "description": "Maximum number of repositories to pull every day, defaults to 100\n"
                    },
                    "autoPullRescan": {
                        "type": "boolean",
                        "description": "Whether to automatically pull and rescan images from the registry on creation and daily\n"
                    },
                    "autoPullTime": {
                        "type": "string",
                        "description": "The time of day to start pulling new images from the registry, in the format HH:MM (24-hour clock), defaults to 03:00\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the registry\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "imageCreationDateCondition": {
                        "type": "string",
                        "description": "Additional condition for pulling and rescanning images, Defaults to 'none'\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the registry; string, required - this will be treated as the registry's ID, so choose a simple alphanumerical name without special signs and spaces\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "The password for registry authentication\n"
                    },
                    "prefixes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of possible prefixes to image names pulled from the registry\n"
                    },
                    "pullImageAge": {
                        "type": "string",
                        "description": "When auto pull image enabled, sets maximum age of auto pulled images\n"
                    },
                    "pullImageCount": {
                        "type": "integer",
                        "description": "When auto pull image enabled, sets maximum age of auto pulled images tags from each repository.\n"
                    },
                    "scannerNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of scanner names\n"
                    },
                    "scannerType": {
                        "type": "string",
                        "description": "Scanner type\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Registry type (HUB / V1 / V2 / ENGINE / AWS / GCR).\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "The URL, address or region of the registry\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "The username for registry authentication.\n"
                    }
                },
                "type": "object",
                "required": [
                    "autoCleanup",
                    "autoPull",
                    "autoPullInterval",
                    "autoPullMax",
                    "autoPullRescan",
                    "autoPullTime",
                    "description",
                    "imageCreationDateCondition",
                    "name",
                    "password",
                    "prefixes",
                    "pullImageAge",
                    "pullImageCount",
                    "scannerNames",
                    "scannerType",
                    "type",
                    "url",
                    "username",
                    "id"
                ]
            }
        },
        "aquasec:index/getIntegrationState:getIntegrationState": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aquasec from \"@pulumi/aquasec\";\n\nconst integrationState = aquasec.getIntegrationState({});\nexport const aquasecIntegrationState = integrationState;\n```\n```python\nimport pulumi\nimport pulumi_aquasec as aquasec\n\nintegration_state = aquasec.get_integration_state()\npulumi.export(\"aquasecIntegrationState\", integration_state)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Aquasec = Pulumi.Aquasec;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var integrationState = Aquasec.GetIntegrationState.Invoke();\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"aquasecIntegrationState\"] = integrationState,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-aquasec/sdk/go/aquasec\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tintegrationState, err := aquasec.GetIntegrationState(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"aquasecIntegrationState\", integrationState)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aquasec.AquasecFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var integrationState = AquasecFunctions.getIntegrationState();\n\n        ctx.export(\"aquasecIntegrationState\", integrationState.applyValue(getIntegrationStateResult -\u003e getIntegrationStateResult));\n    }\n}\n```\n```yaml\nvariables:\n  integrationState:\n    fn::invoke:\n      Function: aquasec:getIntegrationState\n      Arguments: {}\noutputs:\n  aquasecIntegrationState: ${integrationState}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getIntegrationState.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "oidcSettings": {
                        "type": "boolean",
                        "description": "OIDCSettings enabled status\n"
                    },
                    "openidSettings": {
                        "type": "boolean",
                        "description": "OpenIdSettings enabled status\n"
                    },
                    "samlSettings": {
                        "type": "boolean",
                        "description": "SAMLSettings enabled status\n"
                    }
                },
                "type": "object",
                "required": [
                    "oidcSettings",
                    "openidSettings",
                    "samlSettings",
                    "id"
                ]
            }
        },
        "aquasec:index/getKubernetesAssurancePolicy:getKubernetesAssurancePolicy": {
            "inputs": {
                "description": "A collection of arguments for invoking getKubernetesAssurancePolicy.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getKubernetesAssurancePolicy.\n",
                "properties": {
                    "allowedImages": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of explicitly allowed images.\n"
                    },
                    "applicationScopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "auditOnFailure": {
                        "type": "boolean",
                        "description": "Indicates if auditing for failures.\n"
                    },
                    "author": {
                        "type": "string",
                        "description": "Name of user account that created the policy.\n"
                    },
                    "autoScanConfigured": {
                        "type": "boolean"
                    },
                    "autoScanEnabled": {
                        "type": "boolean"
                    },
                    "autoScanTimes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/getKubernetesAssurancePolicyAutoScanTime:getKubernetesAssurancePolicyAutoScanTime"
                        }
                    },
                    "blacklistPermissions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of function's forbidden permissions.\n"
                    },
                    "blacklistPermissionsEnabled": {
                        "type": "boolean",
                        "description": "Indicates if blacklist permissions is relevant.\n"
                    },
                    "blacklistedLicenses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of blacklisted licenses.\n"
                    },
                    "blacklistedLicensesEnabled": {
                        "type": "boolean",
                        "description": "Lndicates if license blacklist is relevant.\n"
                    },
                    "blockFailed": {
                        "type": "boolean",
                        "description": "Indicates if failed images are blocked.\n"
                    },
                    "controlExcludeNoFix": {
                        "type": "boolean"
                    },
                    "customChecks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/getKubernetesAssurancePolicyCustomCheck:getKubernetesAssurancePolicyCustomCheck"
                        },
                        "description": "List of Custom user scripts for checks.\n"
                    },
                    "customChecksEnabled": {
                        "type": "boolean",
                        "description": "Indicates if scanning should include custom checks.\n"
                    },
                    "customSeverityEnabled": {
                        "type": "boolean"
                    },
                    "cvesBlackListEnabled": {
                        "type": "boolean",
                        "description": "Indicates if cves blacklist is relevant.\n"
                    },
                    "cvesBlackLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of cves blacklisted items.\n"
                    },
                    "cvesWhiteListEnabled": {
                        "type": "boolean",
                        "description": "Indicates if cves whitelist is relevant.\n"
                    },
                    "cvesWhiteLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of cves whitelisted licenses\n"
                    },
                    "cvssSeverity": {
                        "type": "string",
                        "description": "Identifier of the cvss severity.\n"
                    },
                    "cvssSeverityEnabled": {
                        "type": "boolean",
                        "description": "Indicates if the cvss severity is scanned.\n"
                    },
                    "cvssSeverityExcludeNoFix": {
                        "type": "boolean",
                        "description": "Indicates that policy should ignore cvss cases that do not have a known fix.\n"
                    },
                    "description": {
                        "type": "string"
                    },
                    "disallowMalware": {
                        "type": "boolean",
                        "description": "Indicates if malware should block the image.\n"
                    },
                    "dockerCisEnabled": {
                        "type": "boolean"
                    },
                    "domain": {
                        "type": "string",
                        "description": "Name of the container image.\n"
                    },
                    "domainName": {
                        "type": "string"
                    },
                    "dtaEnabled": {
                        "type": "boolean"
                    },
                    "dtaSeverity": {
                        "type": "string"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "enforce": {
                        "type": "boolean"
                    },
                    "enforceAfterDays": {
                        "type": "integer"
                    },
                    "enforceExcessivePermissions": {
                        "type": "boolean"
                    },
                    "exceptionalMonitoredMalwarePaths": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "failCicd": {
                        "type": "boolean",
                        "description": "Indicates if cicd failures will fail the image.\n"
                    },
                    "forbiddenLabels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/getKubernetesAssurancePolicyForbiddenLabel:getKubernetesAssurancePolicyForbiddenLabel"
                        }
                    },
                    "forbiddenLabelsEnabled": {
                        "type": "boolean"
                    },
                    "forceMicroenforcer": {
                        "type": "boolean"
                    },
                    "functionIntegrityEnabled": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "ignoreRecentlyPublishedVln": {
                        "type": "boolean"
                    },
                    "ignoreRecentlyPublishedVlnPeriod": {
                        "type": "integer"
                    },
                    "ignoreRiskResourcesEnabled": {
                        "type": "boolean",
                        "description": "Indicates if risk resources are ignored.\n"
                    },
                    "ignoredRiskResources": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of ignored risk resources.\n"
                    },
                    "images": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of images.\n"
                    },
                    "kubeCisEnabled": {
                        "type": "boolean"
                    },
                    "kubernetesControlsNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of kubernetes control names\n"
                    },
                    "labels": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of labels.\n"
                    },
                    "malwareAction": {
                        "type": "string"
                    },
                    "maximumScore": {
                        "type": "number",
                        "description": "Value of allowed maximum score.\n"
                    },
                    "maximumScoreEnabled": {
                        "type": "boolean",
                        "description": "Indicates if exceeding the maximum score is scanned.\n"
                    },
                    "maximumScoreExcludeNoFix": {
                        "type": "boolean",
                        "description": "Indicates that policy should ignore cases that do not have a known fix.\n"
                    },
                    "monitoredMalwarePaths": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "onlyNoneRootUsers": {
                        "type": "boolean",
                        "description": "Indicates if raise a warning for images that should only be run as root.\n"
                    },
                    "packagesBlackListEnabled": {
                        "type": "boolean",
                        "description": "Indicates if packages blacklist is relevant.\n"
                    },
                    "packagesBlackLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/getKubernetesAssurancePolicyPackagesBlackList:getKubernetesAssurancePolicyPackagesBlackList"
                        },
                        "description": "List of backlisted images.\n"
                    },
                    "packagesWhiteListEnabled": {
                        "type": "boolean",
                        "description": "Indicates if packages whitelist is relevant.\n"
                    },
                    "packagesWhiteLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/getKubernetesAssurancePolicyPackagesWhiteList:getKubernetesAssurancePolicyPackagesWhiteList"
                        },
                        "description": "List of whitelisted images.\n"
                    },
                    "partialResultsImageFail": {
                        "type": "boolean"
                    },
                    "readOnly": {
                        "type": "boolean"
                    },
                    "registries": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of registries.\n"
                    },
                    "registry": {
                        "type": "string"
                    },
                    "requiredLabels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/getKubernetesAssurancePolicyRequiredLabel:getKubernetesAssurancePolicyRequiredLabel"
                        }
                    },
                    "requiredLabelsEnabled": {
                        "type": "boolean"
                    },
                    "scanNfsMounts": {
                        "type": "boolean"
                    },
                    "scanSensitiveData": {
                        "type": "boolean",
                        "description": "Indicates if scan should include sensitive data in the image.\n"
                    },
                    "scapEnabled": {
                        "type": "boolean",
                        "description": "Indicates if scanning should include scap.\n"
                    },
                    "scapFiles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of SCAP user scripts for checks.\n"
                    },
                    "scopes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/getKubernetesAssurancePolicyScope:getKubernetesAssurancePolicyScope"
                        }
                    },
                    "trustedBaseImages": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/getKubernetesAssurancePolicyTrustedBaseImage:getKubernetesAssurancePolicyTrustedBaseImage"
                        },
                        "description": "List of trusted images.\n"
                    },
                    "trustedBaseImagesEnabled": {
                        "type": "boolean",
                        "description": "Indicates if list of trusted base images is relevant.\n"
                    },
                    "whitelistedLicenses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of whitelisted licenses.\n"
                    },
                    "whitelistedLicensesEnabled": {
                        "type": "boolean",
                        "description": "Indicates if license blacklist is relevant.\n"
                    }
                },
                "type": "object",
                "required": [
                    "allowedImages",
                    "applicationScopes",
                    "auditOnFailure",
                    "author",
                    "autoScanConfigured",
                    "autoScanEnabled",
                    "autoScanTimes",
                    "blacklistPermissions",
                    "blacklistPermissionsEnabled",
                    "blacklistedLicenses",
                    "blacklistedLicensesEnabled",
                    "blockFailed",
                    "controlExcludeNoFix",
                    "customChecks",
                    "customChecksEnabled",
                    "customSeverityEnabled",
                    "cvesBlackLists",
                    "cvesBlackListEnabled",
                    "cvesWhiteLists",
                    "cvesWhiteListEnabled",
                    "cvssSeverity",
                    "cvssSeverityEnabled",
                    "cvssSeverityExcludeNoFix",
                    "description",
                    "disallowMalware",
                    "dockerCisEnabled",
                    "domain",
                    "domainName",
                    "dtaEnabled",
                    "dtaSeverity",
                    "enabled",
                    "enforce",
                    "enforceAfterDays",
                    "enforceExcessivePermissions",
                    "exceptionalMonitoredMalwarePaths",
                    "failCicd",
                    "forbiddenLabels",
                    "forbiddenLabelsEnabled",
                    "forceMicroenforcer",
                    "functionIntegrityEnabled",
                    "id",
                    "ignoreRecentlyPublishedVln",
                    "ignoreRecentlyPublishedVlnPeriod",
                    "ignoreRiskResourcesEnabled",
                    "ignoredRiskResources",
                    "images",
                    "kubeCisEnabled",
                    "kubernetesControlsNames",
                    "labels",
                    "malwareAction",
                    "maximumScore",
                    "maximumScoreEnabled",
                    "maximumScoreExcludeNoFix",
                    "monitoredMalwarePaths",
                    "name",
                    "onlyNoneRootUsers",
                    "packagesBlackLists",
                    "packagesBlackListEnabled",
                    "packagesWhiteLists",
                    "packagesWhiteListEnabled",
                    "partialResultsImageFail",
                    "readOnly",
                    "registries",
                    "registry",
                    "requiredLabels",
                    "requiredLabelsEnabled",
                    "scanNfsMounts",
                    "scanSensitiveData",
                    "scapEnabled",
                    "scapFiles",
                    "scopes",
                    "trustedBaseImages",
                    "trustedBaseImagesEnabled",
                    "whitelistedLicenses",
                    "whitelistedLicensesEnabled"
                ]
            }
        },
        "aquasec:index/getNotifications:getNotifications": {
            "outputs": {
                "description": "A collection of values returned by getNotifications.\n",
                "properties": {
                    "emails": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/getNotificationsEmail:getNotificationsEmail"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "jiras": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/getNotificationsJira:getNotificationsJira"
                        }
                    },
                    "servicenows": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/getNotificationsServicenow:getNotificationsServicenow"
                        }
                    },
                    "slacks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/getNotificationsSlack:getNotificationsSlack"
                        }
                    },
                    "splunks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/getNotificationsSplunk:getNotificationsSplunk"
                        }
                    },
                    "teams": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/getNotificationsTeam:getNotificationsTeam"
                        }
                    },
                    "webhooks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/getNotificationsWebhook:getNotificationsWebhook"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "emails",
                    "jiras",
                    "servicenows",
                    "slacks",
                    "splunks",
                    "teams",
                    "webhooks",
                    "id"
                ]
            }
        },
        "aquasec:index/getPermissionsSets:getPermissionsSets": {
            "description": "The data source `aquasec.PermissionsSets` provides a method to query all permissions within the Aqua CSPMThe fields returned from this query are detailed in the Schema section below.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aquasec from \"@pulumi/aquasec\";\n\nconst testpermissionsset = aquasec.getPermissionsSets({});\nexport const permissionsSets = testpermissionsset;\nexport const permissionsSetsNames = [testpermissionsset].map(__item =\u003e [__item.then(obj =\u003e obj.permissionsSets)].map(__item =\u003e __item?.name));\n```\n```python\nimport pulumi\nimport pulumi_aquasec as aquasec\n\ntestpermissionsset = aquasec.get_permissions_sets()\npulumi.export(\"permissionsSets\", testpermissionsset)\npulumi.export(\"permissionsSetsNames\", [[__item.name for __item in [__item.permissions_sets]] for __item in [testpermissionsset]])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Aquasec = Pulumi.Aquasec;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var testpermissionsset = Aquasec.GetPermissionsSets.Invoke();\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"permissionsSets\"] = testpermissionsset,\n        [\"permissionsSetsNames\"] = new[]\n        {\n            testpermissionsset,\n        }.Select(__item =\u003e new[]\n        {\n            __item.Apply(obj =\u003e obj.PermissionsSets),\n        }.Select(__item =\u003e __item?.Name).ToList()).ToList(),\n    };\n});\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aquasec.AquasecFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var testpermissionsset = AquasecFunctions.getPermissionsSets();\n\n        ctx.export(\"permissionsSets\", testpermissionsset.applyValue(getPermissionsSetsResult -\u003e getPermissionsSetsResult));\n        ctx.export(\"permissionsSetsNames\", testpermissionsset.applyValue(getPermissionsSetsResult -\u003e getPermissionsSetsResult).stream().map(element -\u003e element.permissionsSets().stream().map(element -\u003e element.name()).collect(toList())).collect(toList()));\n    }\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getPermissionsSets.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "permissionsSets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/getPermissionsSetsPermissionsSet:getPermissionsSetsPermissionsSet"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "permissionsSets",
                    "id"
                ]
            }
        },
        "aquasec:index/getRoles:getRoles": {
            "description": "The data source `aquasec.getRoles` provides a method to query all roles within the Aqua account managementrole database. The fields returned from this query are detailed in the Schema section below.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aquasec from \"@pulumi/aquasec\";\n\nconst roles = aquasec.getRoles({});\nexport const firstUserName = roles.then(roles =\u003e roles.roles?.[0]);\n```\n```python\nimport pulumi\nimport pulumi_aquasec as aquasec\n\nroles = aquasec.get_roles()\npulumi.export(\"firstUserName\", roles.roles[0])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Aquasec = Pulumi.Aquasec;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var roles = Aquasec.GetRoles.Invoke();\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"firstUserName\"] = roles.Apply(getRolesResult =\u003e getRolesResult.Roles[0]),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-aquasec/sdk/go/aquasec\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\troles, err := aquasec.GetRoles(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"firstUserName\", roles.Roles[0])\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aquasec.AquasecFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var roles = AquasecFunctions.getRoles();\n\n        ctx.export(\"firstUserName\", roles.applyValue(getRolesResult -\u003e getRolesResult.roles()[0]));\n    }\n}\n```\n```yaml\nvariables:\n  roles:\n    fn::invoke:\n      Function: aquasec:getRoles\n      Arguments: {}\noutputs:\n  # Output the first role\n  firstUserName: ${roles.roles[0]}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getRoles.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/getRolesRole:getRolesRole"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "roles",
                    "id"
                ]
            }
        },
        "aquasec:index/getRolesMapping:getRolesMapping": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aquasec from \"@pulumi/aquasec\";\n\nconst rolesMapping = aquasec.getRolesMapping({});\nexport const roleMappingAll = rolesMapping;\nexport const roleMappingSaml = rolesMapping.then(rolesMapping =\u003e rolesMapping.samls);\n```\n```python\nimport pulumi\nimport pulumi_aquasec as aquasec\n\nroles_mapping = aquasec.get_roles_mapping()\npulumi.export(\"roleMappingAll\", roles_mapping)\npulumi.export(\"roleMappingSaml\", roles_mapping.samls)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Aquasec = Pulumi.Aquasec;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var rolesMapping = Aquasec.GetRolesMapping.Invoke();\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"roleMappingAll\"] = rolesMapping,\n        [\"roleMappingSaml\"] = rolesMapping.Apply(getRolesMappingResult =\u003e getRolesMappingResult.Samls),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-aquasec/sdk/go/aquasec\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\trolesMapping, err := aquasec.GetRolesMapping(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"roleMappingAll\", rolesMapping)\n\t\tctx.Export(\"roleMappingSaml\", rolesMapping.Samls)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aquasec.AquasecFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var rolesMapping = AquasecFunctions.getRolesMapping();\n\n        ctx.export(\"roleMappingAll\", rolesMapping.applyValue(getRolesMappingResult -\u003e getRolesMappingResult));\n        ctx.export(\"roleMappingSaml\", rolesMapping.applyValue(getRolesMappingResult -\u003e getRolesMappingResult.samls()));\n    }\n}\n```\n```yaml\nvariables:\n  rolesMapping:\n    fn::invoke:\n      Function: aquasec:getRolesMapping\n      Arguments: {}\noutputs:\n  roleMappingAll: ${rolesMapping}\n  roleMappingSaml: ${rolesMapping.samls}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getRolesMapping.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ldaps": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/getRolesMappingLdap:getRolesMappingLdap"
                        },
                        "description": "LDAP Authentication\n"
                    },
                    "oauth2s": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/getRolesMappingOauth2:getRolesMappingOauth2"
                        },
                        "description": "Oauth2 Authentication\n"
                    },
                    "openids": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/getRolesMappingOpenid:getRolesMappingOpenid"
                        },
                        "description": "OpenId Authentication\n"
                    },
                    "samls": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/getRolesMappingSaml:getRolesMappingSaml"
                        },
                        "description": "SAML Authentication\n"
                    }
                },
                "type": "object",
                "required": [
                    "ldaps",
                    "oauth2s",
                    "openids",
                    "samls",
                    "id"
                ]
            }
        },
        "aquasec:index/getRolesMappingSaas:getRolesMappingSaas": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aquasec from \"@pulumi/aquasec\";\n\nconst rolesMappingSaas = aquasec.getRolesMappingSaas({});\nexport const roleMapping = rolesMappingSaas.then(rolesMappingSaas =\u003e rolesMappingSaas.rolesMappings);\n```\n```python\nimport pulumi\nimport pulumi_aquasec as aquasec\n\nroles_mapping_saas = aquasec.get_roles_mapping_saas()\npulumi.export(\"roleMapping\", roles_mapping_saas.roles_mappings)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Aquasec = Pulumi.Aquasec;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var rolesMappingSaas = Aquasec.GetRolesMappingSaas.Invoke();\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"roleMapping\"] = rolesMappingSaas.Apply(getRolesMappingSaasResult =\u003e getRolesMappingSaasResult.RolesMappings),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-aquasec/sdk/go/aquasec\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\trolesMappingSaas, err := aquasec.GetRolesMappingSaas(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"roleMapping\", rolesMappingSaas.RolesMappings)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aquasec.AquasecFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var rolesMappingSaas = AquasecFunctions.getRolesMappingSaas();\n\n        ctx.export(\"roleMapping\", rolesMappingSaas.applyValue(getRolesMappingSaasResult -\u003e getRolesMappingSaasResult.rolesMappings()));\n    }\n}\n```\n```yaml\nvariables:\n  rolesMappingSaas:\n    fn::invoke:\n      Function: aquasec:getRolesMappingSaas\n      Arguments: {}\noutputs:\n  roleMapping: ${rolesMappingSaas.rolesMappings}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getRolesMappingSaas.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "rolesMappings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/getRolesMappingSaasRolesMapping:getRolesMappingSaasRolesMapping"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "rolesMappings",
                    "id"
                ]
            }
        },
        "aquasec:index/getService:getService": {
            "inputs": {
                "description": "A collection of arguments for invoking getService.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the service. It is recommended not to use whitespace characters in the name.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getService.\n",
                "properties": {
                    "applicationScopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Indicates the application scope of the service.\n"
                    },
                    "author": {
                        "type": "string",
                        "description": "Username of the account that created the service.\n"
                    },
                    "containersCount": {
                        "type": "integer",
                        "description": "The number of containers associated with the service.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A textual description of the service record; maximum 500 characters.\n"
                    },
                    "enforce": {
                        "type": "boolean",
                        "description": "Enforcement status of the service.\n"
                    },
                    "evaluated": {
                        "type": "boolean",
                        "description": "Whether the service has been evaluated for security vulnerabilities.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "isRegistered": {
                        "type": "boolean",
                        "description": "Indicates if registered or not.\n"
                    },
                    "lastupdate": {
                        "type": "integer",
                        "description": "Timestamp of the last update in Unix time format.\n"
                    },
                    "monitoring": {
                        "type": "boolean",
                        "description": "Indicates if monitoring is enabled or not\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the service. It is recommended not to use whitespace characters in the name.\n"
                    },
                    "notEvaluatedCount": {
                        "type": "integer",
                        "description": "The number of container that are not evaluated.\n"
                    },
                    "policies": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The service's policies; an array of container firewall policy names.\n"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Rules priority, must be between 1-100.\n"
                    },
                    "scopeExpression": {
                        "type": "string",
                        "description": "Logical expression of how to compute the dependency of the scope variables.\n"
                    },
                    "scopeVariables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/getServiceScopeVariable:getServiceScopeVariable"
                        },
                        "description": "List of scope attributes.\n"
                    },
                    "target": {
                        "type": "string",
                        "description": "Type of the workload. container or host.\n"
                    },
                    "unregisteredCount": {
                        "type": "integer",
                        "description": "The number of containers allocated to the service that are not registered.\n"
                    },
                    "vulnerabilitiesHigh": {
                        "type": "integer",
                        "description": "Number of high severity vulnerabilities.\n"
                    },
                    "vulnerabilitiesLow": {
                        "type": "integer",
                        "description": "Number of low severity vulnerabilities.\n"
                    },
                    "vulnerabilitiesMalware": {
                        "type": "integer",
                        "description": "Number of malware.\n"
                    },
                    "vulnerabilitiesMedium": {
                        "type": "integer",
                        "description": "Number of medium severity vulnerabilities.\n"
                    },
                    "vulnerabilitiesNegligible": {
                        "type": "integer",
                        "description": "Number of negligible vulnerabilities.\n"
                    },
                    "vulnerabilitiesScoreAverage": {
                        "type": "integer",
                        "description": "The CVSS average vulnerabilities score.\n"
                    },
                    "vulnerabilitiesSensitive": {
                        "type": "integer",
                        "description": "Number of sensitive vulnerabilities.\n"
                    },
                    "vulnerabilitiesTotal": {
                        "type": "integer",
                        "description": "Total number of vulnerabilities.\n"
                    }
                },
                "type": "object",
                "required": [
                    "applicationScopes",
                    "author",
                    "containersCount",
                    "description",
                    "enforce",
                    "evaluated",
                    "isRegistered",
                    "lastupdate",
                    "monitoring",
                    "name",
                    "notEvaluatedCount",
                    "policies",
                    "priority",
                    "scopeExpression",
                    "scopeVariables",
                    "target",
                    "unregisteredCount",
                    "vulnerabilitiesHigh",
                    "vulnerabilitiesLow",
                    "vulnerabilitiesMalware",
                    "vulnerabilitiesMedium",
                    "vulnerabilitiesNegligible",
                    "vulnerabilitiesScoreAverage",
                    "vulnerabilitiesSensitive",
                    "vulnerabilitiesTotal",
                    "id"
                ]
            }
        },
        "aquasec:index/getUsers:getUsers": {
            "description": "The data source `aquasec.getUsers` provides a method to query all users within the Aqua users database. The fields returned from this query are detailed in the Schema section below.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aquasec from \"@pulumi/aquasec\";\n\nconst users = aquasec.getUsers({});\nexport const firstUserName = users.then(users =\u003e users.users?.[0]?.name);\n```\n```python\nimport pulumi\nimport pulumi_aquasec as aquasec\n\nusers = aquasec.get_users()\npulumi.export(\"firstUserName\", users.users[0].name)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Aquasec = Pulumi.Aquasec;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var users = Aquasec.GetUsers.Invoke();\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"firstUserName\"] = users.Apply(getUsersResult =\u003e getUsersResult.Users[0]?.Name),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-aquasec/sdk/go/aquasec\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tusers, err := aquasec.GetUsers(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"firstUserName\", users.Users[0].Name)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aquasec.AquasecFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var users = AquasecFunctions.getUsers();\n\n        ctx.export(\"firstUserName\", users.applyValue(getUsersResult -\u003e getUsersResult.users()[0].name()));\n    }\n}\n```\n```yaml\nvariables:\n  users:\n    fn::invoke:\n      Function: aquasec:getUsers\n      Arguments: {}\noutputs:\n  firstUserName: ${users.users[0].name}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getUsers.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/getUsersUser:getUsersUser"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "users",
                    "id"
                ]
            }
        },
        "aquasec:index/getUsersSaas:getUsersSaas": {
            "description": "The data source `aquasec.getUsersSaas` provides a method to query all saas users within the Aqua users management. The fields returned from this query are detailed in the Schema section below.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aquasec from \"@pulumi/aquasec\";\n\nconst users = aquasec.getUsers({});\nexport const firstUserEmail = data.aquasec_users_saas.users.users[0].email;\n```\n```python\nimport pulumi\nimport pulumi_aquasec as aquasec\n\nusers = aquasec.get_users()\npulumi.export(\"firstUserEmail\", data[\"aquasec_users_saas\"][\"users\"][\"users\"][0][\"email\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Aquasec = Pulumi.Aquasec;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var users = Aquasec.GetUsers.Invoke();\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"firstUserEmail\"] = data.Aquasec_users_saas.Users.Users[0].Email,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-aquasec/sdk/go/aquasec\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := aquasec.GetUsers(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"firstUserEmail\", data.Aquasec_users_saas.Users.Users[0].Email)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aquasec.AquasecFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var users = AquasecFunctions.getUsers();\n\n        ctx.export(\"firstUserEmail\", data.aquasec_users_saas().users().users()[0].email());\n    }\n}\n```\n```yaml\nvariables:\n  users:\n    fn::invoke:\n      Function: aquasec:getUsers\n      Arguments: {}\noutputs:\n  firstUserEmail: ${data.aquasec_users_saas.users.users[0].email}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getUsersSaas.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/aquasec:index/getUsersSaasUser:getUsersSaasUser"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "users",
                    "id"
                ]
            }
        }
    }
}