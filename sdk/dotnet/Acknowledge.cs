// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Aquasec
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Aquasec = Pulumiverse.Aquasec;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var acknowledge = new Aquasec.Acknowledge("acknowledge", new()
    ///     {
    ///         Comment = "comment",
    ///         Issues = new[]
    ///         {
    ///             new Aquasec.Inputs.AcknowledgeIssueArgs
    ///             {
    ///                 DockerId = "",
    ///                 ImageName = "image:latest",
    ///                 IssueName = "CVE-2022-1271",
    ///                 IssueType = "vulnerability",
    ///                 RegistryName = "registry",
    ///                 ResourceCpe = "cpe:/a:gnu:gzip:1.10",
    ///                 ResourceName = "gzip",
    ///                 ResourcePath = "/usr/bin/gzip",
    ///                 ResourceType = "executable",
    ///                 ResourceVersion = "1.10",
    ///             },
    ///             new Aquasec.Inputs.AcknowledgeIssueArgs
    ///             {
    ///                 DockerId = "docker-id",
    ///                 ImageName = "image-name",
    ///                 IssueName = "ALAS2-2021-1722",
    ///                 IssueType = "vulnerability",
    ///                 RegistryName = "registry-name",
    ///                 ResourceCpe = "pkg:/amzn:2:nss-softokn:3.44.0-8.amzn2",
    ///                 ResourceName = "nss-softokn",
    ///                 ResourcePath = "",
    ///                 ResourceType = "package",
    ///                 ResourceVersion = "3.44.0-8.amzn2",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [AquasecResourceType("aquasec:index/acknowledge:Acknowledge")]
    public partial class Acknowledge : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A comment describing the reason for the acknowledgment
        /// </summary>
        [Output("comment")]
        public Output<string> Comment { get; private set; } = null!;

        /// <summary>
        /// A list of existing security acknowledges.
        /// </summary>
        [Output("issues")]
        public Output<ImmutableArray<Outputs.AcknowledgeIssue>> Issues { get; private set; } = null!;


        /// <summary>
        /// Create a Acknowledge resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Acknowledge(string name, AcknowledgeArgs args, CustomResourceOptions? options = null)
            : base("aquasec:index/acknowledge:Acknowledge", name, args ?? new AcknowledgeArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Acknowledge(string name, Input<string> id, AcknowledgeState? state = null, CustomResourceOptions? options = null)
            : base("aquasec:index/acknowledge:Acknowledge", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse/pulumi-aquasec",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Acknowledge resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Acknowledge Get(string name, Input<string> id, AcknowledgeState? state = null, CustomResourceOptions? options = null)
        {
            return new Acknowledge(name, id, state, options);
        }
    }

    public sealed class AcknowledgeArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A comment describing the reason for the acknowledgment
        /// </summary>
        [Input("comment", required: true)]
        public Input<string> Comment { get; set; } = null!;

        [Input("issues", required: true)]
        private InputList<Inputs.AcknowledgeIssueArgs>? _issues;

        /// <summary>
        /// A list of existing security acknowledges.
        /// </summary>
        public InputList<Inputs.AcknowledgeIssueArgs> Issues
        {
            get => _issues ?? (_issues = new InputList<Inputs.AcknowledgeIssueArgs>());
            set => _issues = value;
        }

        public AcknowledgeArgs()
        {
        }
        public static new AcknowledgeArgs Empty => new AcknowledgeArgs();
    }

    public sealed class AcknowledgeState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A comment describing the reason for the acknowledgment
        /// </summary>
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        [Input("issues")]
        private InputList<Inputs.AcknowledgeIssueGetArgs>? _issues;

        /// <summary>
        /// A list of existing security acknowledges.
        /// </summary>
        public InputList<Inputs.AcknowledgeIssueGetArgs> Issues
        {
            get => _issues ?? (_issues = new InputList<Inputs.AcknowledgeIssueGetArgs>());
            set => _issues = value;
        }

        public AcknowledgeState()
        {
        }
        public static new AcknowledgeState Empty => new AcknowledgeState();
    }
}
