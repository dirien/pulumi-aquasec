// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Aquasec
{
    public static class GetApplicationScope
    {
        /// <summary>
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Aquasec = Pulumi.Aquasec;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @default = Aquasec.GetApplicationScope.Invoke(new()
        ///     {
        ///         Name = "Global",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["scopes"] = @default.Apply(getApplicationScopeResult =&gt; getApplicationScopeResult),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetApplicationScopeResult> InvokeAsync(GetApplicationScopeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetApplicationScopeResult>("aquasec:index/getApplicationScope:getApplicationScope", args ?? new GetApplicationScopeArgs(), options.WithDefaults());

        /// <summary>
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Aquasec = Pulumi.Aquasec;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @default = Aquasec.GetApplicationScope.Invoke(new()
        ///     {
        ///         Name = "Global",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["scopes"] = @default.Apply(getApplicationScopeResult =&gt; getApplicationScopeResult),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetApplicationScopeResult> Invoke(GetApplicationScopeInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetApplicationScopeResult>("aquasec:index/getApplicationScope:getApplicationScope", args ?? new GetApplicationScopeInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetApplicationScopeArgs : global::Pulumi.InvokeArgs
    {
        [Input("categories")]
        private List<Inputs.GetApplicationScopeCategoryArgs>? _categories;

        /// <summary>
        /// Artifacts (of applications) / Workloads (containers) / Infrastructure (elements).
        /// </summary>
        public List<Inputs.GetApplicationScopeCategoryArgs> Categories
        {
            get => _categories ?? (_categories = new List<Inputs.GetApplicationScopeCategoryArgs>());
            set => _categories = value;
        }

        /// <summary>
        /// Description of the application scope.
        /// </summary>
        [Input("description")]
        public string? Description { get; set; }

        /// <summary>
        /// Name of an application scope.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// Name of an application scope.
        /// </summary>
        [Input("ownerEmail")]
        public string? OwnerEmail { get; set; }

        public GetApplicationScopeArgs()
        {
        }
        public static new GetApplicationScopeArgs Empty => new GetApplicationScopeArgs();
    }

    public sealed class GetApplicationScopeInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("categories")]
        private InputList<Inputs.GetApplicationScopeCategoryInputArgs>? _categories;

        /// <summary>
        /// Artifacts (of applications) / Workloads (containers) / Infrastructure (elements).
        /// </summary>
        public InputList<Inputs.GetApplicationScopeCategoryInputArgs> Categories
        {
            get => _categories ?? (_categories = new InputList<Inputs.GetApplicationScopeCategoryInputArgs>());
            set => _categories = value;
        }

        /// <summary>
        /// Description of the application scope.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Name of an application scope.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Name of an application scope.
        /// </summary>
        [Input("ownerEmail")]
        public Input<string>? OwnerEmail { get; set; }

        public GetApplicationScopeInvokeArgs()
        {
        }
        public static new GetApplicationScopeInvokeArgs Empty => new GetApplicationScopeInvokeArgs();
    }


    [OutputType]
    public sealed class GetApplicationScopeResult
    {
        /// <summary>
        /// Username of the account that created the service.
        /// </summary>
        public readonly string Author;
        /// <summary>
        /// Artifacts (of applications) / Workloads (containers) / Infrastructure (elements).
        /// </summary>
        public readonly ImmutableArray<Outputs.GetApplicationScopeCategoryResult> Categories;
        /// <summary>
        /// Description of the application scope.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Name of an application scope.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Name of an application scope.
        /// </summary>
        public readonly string? OwnerEmail;

        [OutputConstructor]
        private GetApplicationScopeResult(
            string author,

            ImmutableArray<Outputs.GetApplicationScopeCategoryResult> categories,

            string? description,

            string id,

            string name,

            string? ownerEmail)
        {
            Author = author;
            Categories = categories;
            Description = description;
            Id = id;
            Name = name;
            OwnerEmail = ownerEmail;
        }
    }
}
