// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Aquasec
{
    public static class GetHostRuntimePolicy
    {
        /// <summary>
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Aquasec = Pulumi.Aquasec;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var hostRuntimePolicy = Aquasec.GetHostRuntimePolicy.Invoke(new()
        ///     {
        ///         Name = "hostRuntimePolicyName",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["hostRuntimePolicyDetails"] = hostRuntimePolicy.Apply(getHostRuntimePolicyResult =&gt; getHostRuntimePolicyResult),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetHostRuntimePolicyResult> InvokeAsync(GetHostRuntimePolicyArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetHostRuntimePolicyResult>("aquasec:index/getHostRuntimePolicy:getHostRuntimePolicy", args ?? new GetHostRuntimePolicyArgs(), options.WithDefaults());

        /// <summary>
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Aquasec = Pulumi.Aquasec;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var hostRuntimePolicy = Aquasec.GetHostRuntimePolicy.Invoke(new()
        ///     {
        ///         Name = "hostRuntimePolicyName",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["hostRuntimePolicyDetails"] = hostRuntimePolicy.Apply(getHostRuntimePolicyResult =&gt; getHostRuntimePolicyResult),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetHostRuntimePolicyResult> Invoke(GetHostRuntimePolicyInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetHostRuntimePolicyResult>("aquasec:index/getHostRuntimePolicy:getHostRuntimePolicy", args ?? new GetHostRuntimePolicyInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetHostRuntimePolicyArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Configuration for Real-Time Malware Protection.
        /// </summary>
        [Input("malwareScanOptions")]
        public Inputs.GetHostRuntimePolicyMalwareScanOptionsArgs? MalwareScanOptions { get; set; }

        /// <summary>
        /// Name of the host runtime policy
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public GetHostRuntimePolicyArgs()
        {
        }
        public static new GetHostRuntimePolicyArgs Empty => new GetHostRuntimePolicyArgs();
    }

    public sealed class GetHostRuntimePolicyInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Configuration for Real-Time Malware Protection.
        /// </summary>
        [Input("malwareScanOptions")]
        public Input<Inputs.GetHostRuntimePolicyMalwareScanOptionsInputArgs>? MalwareScanOptions { get; set; }

        /// <summary>
        /// Name of the host runtime policy
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public GetHostRuntimePolicyInvokeArgs()
        {
        }
        public static new GetHostRuntimePolicyInvokeArgs Empty => new GetHostRuntimePolicyInvokeArgs();
    }


    [OutputType]
    public sealed class GetHostRuntimePolicyResult
    {
        /// <summary>
        /// Indicates the application scope of the service.
        /// </summary>
        public readonly ImmutableArray<string> ApplicationScopes;
        /// <summary>
        /// If true, all process activity will be audited.
        /// </summary>
        public readonly bool AuditAllOsUserActivity;
        /// <summary>
        /// Detects brute force login attempts
        /// </summary>
        public readonly bool AuditBruteForceLogin;
        /// <summary>
        /// If true, full command arguments will be audited.
        /// </summary>
        public readonly bool AuditFullCommandArguments;
        /// <summary>
        /// If true, host failed logins will be audited.
        /// </summary>
        public readonly bool AuditHostFailedLoginEvents;
        /// <summary>
        /// If true, host successful logins will be audited.
        /// </summary>
        public readonly bool AuditHostSuccessfulLoginEvents;
        /// <summary>
        /// If true, account management will be audited.
        /// </summary>
        public readonly bool AuditUserAccountManagement;
        /// <summary>
        /// Username of the account that created the service.
        /// </summary>
        public readonly string Author;
        /// <summary>
        /// Detect and prevent communication to DNS/IP addresses known to be used for Cryptocurrency Mining
        /// </summary>
        public readonly bool BlockCryptocurrencyMining;
        /// <summary>
        /// List of files that are prevented from being read, modified and executed in the containers.
        /// </summary>
        public readonly ImmutableArray<string> BlockedFiles;
        /// <summary>
        /// The description of the host runtime policy
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// If true, detect and prevent communication from containers to IP addresses known to have a bad reputation.
        /// </summary>
        public readonly bool EnableIpReputationSecurity;
        /// <summary>
        /// Indicates if the runtime policy is enabled or not.
        /// </summary>
        public readonly bool Enabled;
        /// <summary>
        /// Indicates that policy should effect container execution (not just for audit).
        /// </summary>
        public readonly bool Enforce;
        /// <summary>
        /// Indicates the number of days after which the runtime policy will be changed to enforce mode.
        /// </summary>
        public readonly int EnforceAfterDays;
        /// <summary>
        /// Configuration for file integrity monitoring.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetHostRuntimePolicyFileIntegrityMonitoringResult> FileIntegrityMonitorings;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Configuration for Real-Time Malware Protection.
        /// </summary>
        public readonly Outputs.GetHostRuntimePolicyMalwareScanOptionsResult? MalwareScanOptions;
        /// <summary>
        /// If true, system log will be monitored.
        /// </summary>
        public readonly bool MonitorSystemLogIntegrity;
        /// <summary>
        /// If true, system time changes will be monitored.
        /// </summary>
        public readonly bool MonitorSystemTimeChanges;
        /// <summary>
        /// If true, windows service operations will be monitored.
        /// </summary>
        public readonly bool MonitorWindowsServices;
        /// <summary>
        /// Name of the host runtime policy
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// List of OS (Linux or Windows) groups that are allowed to authenticate to the host, and block authentication requests from all others. Groups can be either Linux groups or Windows AD groups.
        /// </summary>
        public readonly ImmutableArray<string> OsGroupsAlloweds;
        /// <summary>
        /// List of OS (Linux or Windows) groups that are not allowed to authenticate to the host, and block authentication requests from all others. Groups can be either Linux groups or Windows AD groups.
        /// </summary>
        public readonly ImmutableArray<string> OsGroupsBlockeds;
        /// <summary>
        /// List of OS (Linux or Windows) users that are allowed to authenticate to the host, and block authentication requests from all others.
        /// </summary>
        public readonly ImmutableArray<string> OsUsersAlloweds;
        /// <summary>
        /// List of OS (Linux or Windows) users that are not allowed to authenticate to the host, and block authentication requests from all others.
        /// </summary>
        public readonly ImmutableArray<string> OsUsersBlockeds;
        /// <summary>
        /// List of packages that are not allowed read, write or execute all files that under the packages.
        /// </summary>
        public readonly ImmutableArray<string> PackageBlocks;
        /// <summary>
        /// If true, port scanning behaviors will be audited.
        /// </summary>
        public readonly bool PortScanningDetection;
        /// <summary>
        /// Logical expression of how to compute the dependency of the scope variables.
        /// </summary>
        public readonly string ScopeExpression;
        /// <summary>
        /// List of scope attributes.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetHostRuntimePolicyScopeVariableResult> ScopeVariables;
        /// <summary>
        /// Configuration for windows registry monitoring.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetHostRuntimePolicyWindowsRegistryMonitoringResult> WindowsRegistryMonitorings;
        /// <summary>
        /// Configuration for windows registry protection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetHostRuntimePolicyWindowsRegistryProtectionResult> WindowsRegistryProtections;

        [OutputConstructor]
        private GetHostRuntimePolicyResult(
            ImmutableArray<string> applicationScopes,

            bool auditAllOsUserActivity,

            bool auditBruteForceLogin,

            bool auditFullCommandArguments,

            bool auditHostFailedLoginEvents,

            bool auditHostSuccessfulLoginEvents,

            bool auditUserAccountManagement,

            string author,

            bool blockCryptocurrencyMining,

            ImmutableArray<string> blockedFiles,

            string description,

            bool enableIpReputationSecurity,

            bool enabled,

            bool enforce,

            int enforceAfterDays,

            ImmutableArray<Outputs.GetHostRuntimePolicyFileIntegrityMonitoringResult> fileIntegrityMonitorings,

            string id,

            Outputs.GetHostRuntimePolicyMalwareScanOptionsResult? malwareScanOptions,

            bool monitorSystemLogIntegrity,

            bool monitorSystemTimeChanges,

            bool monitorWindowsServices,

            string name,

            ImmutableArray<string> osGroupsAlloweds,

            ImmutableArray<string> osGroupsBlockeds,

            ImmutableArray<string> osUsersAlloweds,

            ImmutableArray<string> osUsersBlockeds,

            ImmutableArray<string> packageBlocks,

            bool portScanningDetection,

            string scopeExpression,

            ImmutableArray<Outputs.GetHostRuntimePolicyScopeVariableResult> scopeVariables,

            ImmutableArray<Outputs.GetHostRuntimePolicyWindowsRegistryMonitoringResult> windowsRegistryMonitorings,

            ImmutableArray<Outputs.GetHostRuntimePolicyWindowsRegistryProtectionResult> windowsRegistryProtections)
        {
            ApplicationScopes = applicationScopes;
            AuditAllOsUserActivity = auditAllOsUserActivity;
            AuditBruteForceLogin = auditBruteForceLogin;
            AuditFullCommandArguments = auditFullCommandArguments;
            AuditHostFailedLoginEvents = auditHostFailedLoginEvents;
            AuditHostSuccessfulLoginEvents = auditHostSuccessfulLoginEvents;
            AuditUserAccountManagement = auditUserAccountManagement;
            Author = author;
            BlockCryptocurrencyMining = blockCryptocurrencyMining;
            BlockedFiles = blockedFiles;
            Description = description;
            EnableIpReputationSecurity = enableIpReputationSecurity;
            Enabled = enabled;
            Enforce = enforce;
            EnforceAfterDays = enforceAfterDays;
            FileIntegrityMonitorings = fileIntegrityMonitorings;
            Id = id;
            MalwareScanOptions = malwareScanOptions;
            MonitorSystemLogIntegrity = monitorSystemLogIntegrity;
            MonitorSystemTimeChanges = monitorSystemTimeChanges;
            MonitorWindowsServices = monitorWindowsServices;
            Name = name;
            OsGroupsAlloweds = osGroupsAlloweds;
            OsGroupsBlockeds = osGroupsBlockeds;
            OsUsersAlloweds = osUsersAlloweds;
            OsUsersBlockeds = osUsersBlockeds;
            PackageBlocks = packageBlocks;
            PortScanningDetection = portScanningDetection;
            ScopeExpression = scopeExpression;
            ScopeVariables = scopeVariables;
            WindowsRegistryMonitorings = windowsRegistryMonitorings;
            WindowsRegistryProtections = windowsRegistryProtections;
        }
    }
}
