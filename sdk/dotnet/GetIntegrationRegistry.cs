// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Aquasec
{
    public static class GetIntegrationRegistry
    {
        public static Task<GetIntegrationRegistryResult> InvokeAsync(GetIntegrationRegistryArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetIntegrationRegistryResult>("aquasec:index/getIntegrationRegistry:getIntegrationRegistry", args ?? new GetIntegrationRegistryArgs(), options.WithDefaults());

        public static Output<GetIntegrationRegistryResult> Invoke(GetIntegrationRegistryInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetIntegrationRegistryResult>("aquasec:index/getIntegrationRegistry:getIntegrationRegistry", args ?? new GetIntegrationRegistryInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetIntegrationRegistryArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the registry; string, required - this will be treated as the registry's ID, so choose a simple alphanumerical name without special signs and spaces
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        [Input("scannerNames")]
        private List<string>? _scannerNames;
        public List<string> ScannerNames
        {
            get => _scannerNames ?? (_scannerNames = new List<string>());
            set => _scannerNames = value;
        }

        /// <summary>
        /// Scanner type
        /// </summary>
        [Input("scannerType")]
        public string? ScannerType { get; set; }

        public GetIntegrationRegistryArgs()
        {
        }
        public static new GetIntegrationRegistryArgs Empty => new GetIntegrationRegistryArgs();
    }

    public sealed class GetIntegrationRegistryInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the registry; string, required - this will be treated as the registry's ID, so choose a simple alphanumerical name without special signs and spaces
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("scannerNames")]
        private InputList<string>? _scannerNames;
        public InputList<string> ScannerNames
        {
            get => _scannerNames ?? (_scannerNames = new InputList<string>());
            set => _scannerNames = value;
        }

        /// <summary>
        /// Scanner type
        /// </summary>
        [Input("scannerType")]
        public Input<string>? ScannerType { get; set; }

        public GetIntegrationRegistryInvokeArgs()
        {
        }
        public static new GetIntegrationRegistryInvokeArgs Empty => new GetIntegrationRegistryInvokeArgs();
    }


    [OutputType]
    public sealed class GetIntegrationRegistryResult
    {
        /// <summary>
        /// Whether to automatically pull images from the registry on creation and daily
        /// </summary>
        public readonly bool AutoPull;
        /// <summary>
        /// The interval in days to start pulling new images from the registry, Defaults to 1
        /// </summary>
        public readonly int AutoPullInterval;
        /// <summary>
        /// Maximum number of repositories to pull every day, defaults to 100
        /// </summary>
        public readonly int AutoPullMax;
        /// <summary>
        /// The time of day to start pulling new images from the registry, in the format HH:MM (24-hour clock), defaults to 03:00
        /// </summary>
        public readonly string AutoPullTime;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the registry; string, required - this will be treated as the registry's ID, so choose a simple alphanumerical name without special signs and spaces
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The password for registry authentication
        /// </summary>
        public readonly string Password;
        /// <summary>
        /// List of possible prefixes to image names pulled from the registry
        /// </summary>
        public readonly ImmutableArray<string> Prefixes;
        public readonly ImmutableArray<string> ScannerNames;
        /// <summary>
        /// Scanner type
        /// </summary>
        public readonly string? ScannerType;
        /// <summary>
        /// Registry type (HUB / V1 / V2 / ENGINE / AWS / GCR).
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// The URL, address or region of the registry
        /// </summary>
        public readonly string Url;
        /// <summary>
        /// The username for registry authentication.
        /// </summary>
        public readonly string Username;

        [OutputConstructor]
        private GetIntegrationRegistryResult(
            bool autoPull,

            int autoPullInterval,

            int autoPullMax,

            string autoPullTime,

            string id,

            string name,

            string password,

            ImmutableArray<string> prefixes,

            ImmutableArray<string> scannerNames,

            string? scannerType,

            string type,

            string url,

            string username)
        {
            AutoPull = autoPull;
            AutoPullInterval = autoPullInterval;
            AutoPullMax = autoPullMax;
            AutoPullTime = autoPullTime;
            Id = id;
            Name = name;
            Password = password;
            Prefixes = prefixes;
            ScannerNames = scannerNames;
            ScannerType = scannerType;
            Type = type;
            Url = url;
            Username = username;
        }
    }
}
