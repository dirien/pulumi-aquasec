// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Aquasec
{
    /// <summary>
    /// ## Example Usage
    /// </summary>
    [AquasecResourceType("aquasec:index/hostRuntimePolicy:HostRuntimePolicy")]
    public partial class HostRuntimePolicy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Allowed executables configuration.
        /// </summary>
        [Output("allowedExecutables")]
        public Output<ImmutableArray<Outputs.HostRuntimePolicyAllowedExecutable>> AllowedExecutables { get; private set; } = null!;

        /// <summary>
        /// Allowed registries configuration.
        /// </summary>
        [Output("allowedRegistries")]
        public Output<ImmutableArray<Outputs.HostRuntimePolicyAllowedRegistry>> AllowedRegistries { get; private set; } = null!;

        /// <summary>
        /// Indicates the application scope of the service.
        /// </summary>
        [Output("applicationScopes")]
        public Output<ImmutableArray<string>> ApplicationScopes { get; private set; } = null!;

        /// <summary>
        /// Detects brute force login attempts
        /// </summary>
        [Output("auditBruteForceLogin")]
        public Output<bool?> AuditBruteForceLogin { get; private set; } = null!;

        /// <summary>
        /// If true, full command arguments will be audited.
        /// </summary>
        [Output("auditFullCommandArguments")]
        public Output<bool?> AuditFullCommandArguments { get; private set; } = null!;

        /// <summary>
        /// If true, host failed logins will be audited.
        /// </summary>
        [Output("auditHostFailedLoginEvents")]
        public Output<bool?> AuditHostFailedLoginEvents { get; private set; } = null!;

        /// <summary>
        /// If true, host successful logins will be audited.
        /// </summary>
        [Output("auditHostSuccessfulLoginEvents")]
        public Output<bool?> AuditHostSuccessfulLoginEvents { get; private set; } = null!;

        /// <summary>
        /// If true, account management will be audited.
        /// </summary>
        [Output("auditUserAccountManagement")]
        public Output<bool?> AuditUserAccountManagement { get; private set; } = null!;

        [Output("auditing")]
        public Output<Outputs.HostRuntimePolicyAuditing> Auditing { get; private set; } = null!;

        /// <summary>
        /// Username of the account that created the service.
        /// </summary>
        [Output("author")]
        public Output<string> Author { get; private set; } = null!;

        [Output("blacklistedOsUsers")]
        public Output<Outputs.HostRuntimePolicyBlacklistedOsUsers> BlacklistedOsUsers { get; private set; } = null!;

        [Output("blockContainerExec")]
        public Output<bool?> BlockContainerExec { get; private set; } = null!;

        /// <summary>
        /// Detect and prevent communication to DNS/IP addresses known to be used for Cryptocurrency Mining
        /// </summary>
        [Output("blockCryptocurrencyMining")]
        public Output<bool?> BlockCryptocurrencyMining { get; private set; } = null!;

        [Output("blockDisallowedImages")]
        public Output<bool?> BlockDisallowedImages { get; private set; } = null!;

        [Output("blockFilelessExec")]
        public Output<bool?> BlockFilelessExec { get; private set; } = null!;

        [Output("blockNonCompliantWorkloads")]
        public Output<bool?> BlockNonCompliantWorkloads { get; private set; } = null!;

        [Output("blockNonK8sContainers")]
        public Output<bool?> BlockNonK8sContainers { get; private set; } = null!;

        /// <summary>
        /// List of files that are prevented from being read, modified and executed in the containers.
        /// </summary>
        [Output("blockedFiles")]
        public Output<ImmutableArray<string>> BlockedFiles { get; private set; } = null!;

        /// <summary>
        /// Bypass scope configuration.
        /// </summary>
        [Output("bypassScopes")]
        public Output<ImmutableArray<Outputs.HostRuntimePolicyBypassScope>> BypassScopes { get; private set; } = null!;

        [Output("containerExec")]
        public Output<Outputs.HostRuntimePolicyContainerExec> ContainerExec { get; private set; } = null!;

        [Output("created")]
        public Output<string> Created { get; private set; } = null!;

        [Output("cve")]
        public Output<string?> Cve { get; private set; } = null!;

        [Output("defaultSecurityProfile")]
        public Output<string?> DefaultSecurityProfile { get; private set; } = null!;

        /// <summary>
        /// The description of the host runtime policy
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        [Output("digest")]
        public Output<string?> Digest { get; private set; } = null!;

        /// <summary>
        /// Drift prevention configuration.
        /// </summary>
        [Output("driftPreventions")]
        public Output<ImmutableArray<Outputs.HostRuntimePolicyDriftPrevention>> DriftPreventions { get; private set; } = null!;

        [Output("enableCryptoMiningDns")]
        public Output<bool?> EnableCryptoMiningDns { get; private set; } = null!;

        [Output("enableForkGuard")]
        public Output<bool?> EnableForkGuard { get; private set; } = null!;

        [Output("enableIpReputation")]
        public Output<bool?> EnableIpReputation { get; private set; } = null!;

        [Output("enablePortScanProtection")]
        public Output<bool?> EnablePortScanProtection { get; private set; } = null!;

        /// <summary>
        /// Indicates if the runtime policy is enabled or not.
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// Indicates that policy should effect container execution (not just for audit).
        /// </summary>
        [Output("enforce")]
        public Output<bool?> Enforce { get; private set; } = null!;

        /// <summary>
        /// Indicates the number of days after which the runtime policy will be changed to enforce mode.
        /// </summary>
        [Output("enforceAfterDays")]
        public Output<int?> EnforceAfterDays { get; private set; } = null!;

        [Output("enforceSchedulerAddedOn")]
        public Output<int> EnforceSchedulerAddedOn { get; private set; } = null!;

        /// <summary>
        /// List of excluded application scopes.
        /// </summary>
        [Output("excludeApplicationScopes")]
        public Output<ImmutableArray<string>> ExcludeApplicationScopes { get; private set; } = null!;

        /// <summary>
        /// Executable blacklist configuration.
        /// </summary>
        [Output("executableBlacklists")]
        public Output<ImmutableArray<Outputs.HostRuntimePolicyExecutableBlacklist>> ExecutableBlacklists { get; private set; } = null!;

        [Output("failedKubernetesChecks")]
        public Output<Outputs.HostRuntimePolicyFailedKubernetesChecks> FailedKubernetesChecks { get; private set; } = null!;

        [Output("fileBlock")]
        public Output<Outputs.HostRuntimePolicyFileBlock> FileBlock { get; private set; } = null!;

        /// <summary>
        /// Configuration for file integrity monitoring.
        /// </summary>
        [Output("fileIntegrityMonitoring")]
        public Output<Outputs.HostRuntimePolicyFileIntegrityMonitoring> FileIntegrityMonitoring { get; private set; } = null!;

        [Output("forkGuardProcessLimit")]
        public Output<int?> ForkGuardProcessLimit { get; private set; } = null!;

        [Output("imageName")]
        public Output<string?> ImageName { get; private set; } = null!;

        [Output("isAuditChecked")]
        public Output<bool?> IsAuditChecked { get; private set; } = null!;

        [Output("isAutoGenerated")]
        public Output<bool?> IsAutoGenerated { get; private set; } = null!;

        [Output("isOotbPolicy")]
        public Output<bool?> IsOotbPolicy { get; private set; } = null!;

        [Output("lastupdate")]
        public Output<int> Lastupdate { get; private set; } = null!;

        /// <summary>
        /// Container privileges configuration.
        /// </summary>
        [Output("limitContainerPrivileges")]
        public Output<ImmutableArray<Outputs.HostRuntimePolicyLimitContainerPrivilege>> LimitContainerPrivileges { get; private set; } = null!;

        [Output("linuxCapabilities")]
        public Output<Outputs.HostRuntimePolicyLinuxCapabilities> LinuxCapabilities { get; private set; } = null!;

        /// <summary>
        /// Configuration for Real-Time Malware Protection.
        /// </summary>
        [Output("malwareScanOptions")]
        public Output<Outputs.HostRuntimePolicyMalwareScanOptions> MalwareScanOptions { get; private set; } = null!;

        /// <summary>
        /// If true, system log will be monitored.
        /// </summary>
        [Output("monitorSystemLogIntegrity")]
        public Output<bool?> MonitorSystemLogIntegrity { get; private set; } = null!;

        /// <summary>
        /// If true, system time changes will be monitored.
        /// </summary>
        [Output("monitorSystemTimeChanges")]
        public Output<bool?> MonitorSystemTimeChanges { get; private set; } = null!;

        /// <summary>
        /// If true, windows service operations will be monitored.
        /// </summary>
        [Output("monitorWindowsServices")]
        public Output<bool?> MonitorWindowsServices { get; private set; } = null!;

        /// <summary>
        /// Name of the host runtime policy
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("noNewPrivileges")]
        public Output<bool?> NoNewPrivileges { get; private set; } = null!;

        [Output("onlyRegisteredImages")]
        public Output<bool?> OnlyRegisteredImages { get; private set; } = null!;

        /// <summary>
        /// List of OS (Linux or Windows) groups that are allowed to authenticate to the host, and block authentication requests from all others. Groups can be either Linux groups or Windows AD groups.
        /// </summary>
        [Output("osGroupsAlloweds")]
        public Output<ImmutableArray<string>> OsGroupsAlloweds { get; private set; } = null!;

        /// <summary>
        /// List of OS (Linux or Windows) groups that are not allowed to authenticate to the host, and block authentication requests from all others. Groups can be either Linux groups or Windows AD groups.
        /// </summary>
        [Output("osGroupsBlockeds")]
        public Output<ImmutableArray<string>> OsGroupsBlockeds { get; private set; } = null!;

        /// <summary>
        /// List of OS (Linux or Windows) users that are allowed to authenticate to the host, and block authentication requests from all others.
        /// </summary>
        [Output("osUsersAlloweds")]
        public Output<ImmutableArray<string>> OsUsersAlloweds { get; private set; } = null!;

        /// <summary>
        /// List of OS (Linux or Windows) users that are not allowed to authenticate to the host, and block authentication requests from all others.
        /// </summary>
        [Output("osUsersBlockeds")]
        public Output<ImmutableArray<string>> OsUsersBlockeds { get; private set; } = null!;

        [Output("packageBlocks")]
        public Output<ImmutableArray<Outputs.HostRuntimePolicyPackageBlock>> PackageBlocks { get; private set; } = null!;

        [Output("permission")]
        public Output<string?> Permission { get; private set; } = null!;

        [Output("portBlock")]
        public Output<Outputs.HostRuntimePolicyPortBlock> PortBlock { get; private set; } = null!;

        [Output("readonlyFiles")]
        public Output<Outputs.HostRuntimePolicyReadonlyFiles> ReadonlyFiles { get; private set; } = null!;

        [Output("readonlyRegistry")]
        public Output<Outputs.HostRuntimePolicyReadonlyRegistry> ReadonlyRegistry { get; private set; } = null!;

        [Output("registry")]
        public Output<string?> Registry { get; private set; } = null!;

        [Output("registryAccessMonitoring")]
        public Output<Outputs.HostRuntimePolicyRegistryAccessMonitoring> RegistryAccessMonitoring { get; private set; } = null!;

        [Output("repoName")]
        public Output<string?> RepoName { get; private set; } = null!;

        [Output("resourceName")]
        public Output<string?> ResourceName { get; private set; } = null!;

        [Output("resourceType")]
        public Output<string?> ResourceType { get; private set; } = null!;

        /// <summary>
        /// Restricted volumes configuration.
        /// </summary>
        [Output("restrictedVolumes")]
        public Output<ImmutableArray<Outputs.HostRuntimePolicyRestrictedVolume>> RestrictedVolumes { get; private set; } = null!;

        [Output("reverseShell")]
        public Output<Outputs.HostRuntimePolicyReverseShell> ReverseShell { get; private set; } = null!;

        [Output("runtimeMode")]
        public Output<int?> RuntimeMode { get; private set; } = null!;

        [Output("runtimeType")]
        public Output<string> RuntimeType { get; private set; } = null!;

        /// <summary>
        /// Logical expression of how to compute the dependency of the scope variables.
        /// </summary>
        [Output("scopeExpression")]
        public Output<string> ScopeExpression { get; private set; } = null!;

        /// <summary>
        /// List of scope attributes.
        /// </summary>
        [Output("scopeVariables")]
        public Output<ImmutableArray<Outputs.HostRuntimePolicyScopeVariable>> ScopeVariables { get; private set; } = null!;

        /// <summary>
        /// Scope configuration.
        /// </summary>
        [Output("scopes")]
        public Output<ImmutableArray<Outputs.HostRuntimePolicyScope>> Scopes { get; private set; } = null!;

        [Output("systemIntegrityProtection")]
        public Output<Outputs.HostRuntimePolicySystemIntegrityProtection> SystemIntegrityProtection { get; private set; } = null!;

        [Output("tripwire")]
        public Output<Outputs.HostRuntimePolicyTripwire> Tripwire { get; private set; } = null!;

        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        [Output("updated")]
        public Output<string> Updated { get; private set; } = null!;

        [Output("version")]
        public Output<string?> Version { get; private set; } = null!;

        [Output("vpatchVersion")]
        public Output<string?> VpatchVersion { get; private set; } = null!;

        [Output("whitelistedOsUsers")]
        public Output<Outputs.HostRuntimePolicyWhitelistedOsUsers> WhitelistedOsUsers { get; private set; } = null!;


        /// <summary>
        /// Create a HostRuntimePolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public HostRuntimePolicy(string name, HostRuntimePolicyArgs? args = null, CustomResourceOptions? options = null)
            : base("aquasec:index/hostRuntimePolicy:HostRuntimePolicy", name, args ?? new HostRuntimePolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private HostRuntimePolicy(string name, Input<string> id, HostRuntimePolicyState? state = null, CustomResourceOptions? options = null)
            : base("aquasec:index/hostRuntimePolicy:HostRuntimePolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse/pulumi-aquasec",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing HostRuntimePolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static HostRuntimePolicy Get(string name, Input<string> id, HostRuntimePolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new HostRuntimePolicy(name, id, state, options);
        }
    }

    public sealed class HostRuntimePolicyArgs : global::Pulumi.ResourceArgs
    {
        [Input("allowedExecutables")]
        private InputList<Inputs.HostRuntimePolicyAllowedExecutableArgs>? _allowedExecutables;

        /// <summary>
        /// Allowed executables configuration.
        /// </summary>
        public InputList<Inputs.HostRuntimePolicyAllowedExecutableArgs> AllowedExecutables
        {
            get => _allowedExecutables ?? (_allowedExecutables = new InputList<Inputs.HostRuntimePolicyAllowedExecutableArgs>());
            set => _allowedExecutables = value;
        }

        [Input("allowedRegistries")]
        private InputList<Inputs.HostRuntimePolicyAllowedRegistryArgs>? _allowedRegistries;

        /// <summary>
        /// Allowed registries configuration.
        /// </summary>
        public InputList<Inputs.HostRuntimePolicyAllowedRegistryArgs> AllowedRegistries
        {
            get => _allowedRegistries ?? (_allowedRegistries = new InputList<Inputs.HostRuntimePolicyAllowedRegistryArgs>());
            set => _allowedRegistries = value;
        }

        [Input("applicationScopes")]
        private InputList<string>? _applicationScopes;

        /// <summary>
        /// Indicates the application scope of the service.
        /// </summary>
        public InputList<string> ApplicationScopes
        {
            get => _applicationScopes ?? (_applicationScopes = new InputList<string>());
            set => _applicationScopes = value;
        }

        /// <summary>
        /// Detects brute force login attempts
        /// </summary>
        [Input("auditBruteForceLogin")]
        public Input<bool>? AuditBruteForceLogin { get; set; }

        /// <summary>
        /// If true, full command arguments will be audited.
        /// </summary>
        [Input("auditFullCommandArguments")]
        public Input<bool>? AuditFullCommandArguments { get; set; }

        /// <summary>
        /// If true, host failed logins will be audited.
        /// </summary>
        [Input("auditHostFailedLoginEvents")]
        public Input<bool>? AuditHostFailedLoginEvents { get; set; }

        /// <summary>
        /// If true, host successful logins will be audited.
        /// </summary>
        [Input("auditHostSuccessfulLoginEvents")]
        public Input<bool>? AuditHostSuccessfulLoginEvents { get; set; }

        /// <summary>
        /// If true, account management will be audited.
        /// </summary>
        [Input("auditUserAccountManagement")]
        public Input<bool>? AuditUserAccountManagement { get; set; }

        [Input("auditing")]
        public Input<Inputs.HostRuntimePolicyAuditingArgs>? Auditing { get; set; }

        /// <summary>
        /// Username of the account that created the service.
        /// </summary>
        [Input("author")]
        public Input<string>? Author { get; set; }

        [Input("blacklistedOsUsers")]
        public Input<Inputs.HostRuntimePolicyBlacklistedOsUsersArgs>? BlacklistedOsUsers { get; set; }

        [Input("blockContainerExec")]
        public Input<bool>? BlockContainerExec { get; set; }

        /// <summary>
        /// Detect and prevent communication to DNS/IP addresses known to be used for Cryptocurrency Mining
        /// </summary>
        [Input("blockCryptocurrencyMining")]
        public Input<bool>? BlockCryptocurrencyMining { get; set; }

        [Input("blockDisallowedImages")]
        public Input<bool>? BlockDisallowedImages { get; set; }

        [Input("blockFilelessExec")]
        public Input<bool>? BlockFilelessExec { get; set; }

        [Input("blockNonCompliantWorkloads")]
        public Input<bool>? BlockNonCompliantWorkloads { get; set; }

        [Input("blockNonK8sContainers")]
        public Input<bool>? BlockNonK8sContainers { get; set; }

        [Input("blockedFiles")]
        private InputList<string>? _blockedFiles;

        /// <summary>
        /// List of files that are prevented from being read, modified and executed in the containers.
        /// </summary>
        public InputList<string> BlockedFiles
        {
            get => _blockedFiles ?? (_blockedFiles = new InputList<string>());
            set => _blockedFiles = value;
        }

        [Input("bypassScopes")]
        private InputList<Inputs.HostRuntimePolicyBypassScopeArgs>? _bypassScopes;

        /// <summary>
        /// Bypass scope configuration.
        /// </summary>
        public InputList<Inputs.HostRuntimePolicyBypassScopeArgs> BypassScopes
        {
            get => _bypassScopes ?? (_bypassScopes = new InputList<Inputs.HostRuntimePolicyBypassScopeArgs>());
            set => _bypassScopes = value;
        }

        [Input("containerExec")]
        public Input<Inputs.HostRuntimePolicyContainerExecArgs>? ContainerExec { get; set; }

        [Input("created")]
        public Input<string>? Created { get; set; }

        [Input("cve")]
        public Input<string>? Cve { get; set; }

        [Input("defaultSecurityProfile")]
        public Input<string>? DefaultSecurityProfile { get; set; }

        /// <summary>
        /// The description of the host runtime policy
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("digest")]
        public Input<string>? Digest { get; set; }

        [Input("driftPreventions")]
        private InputList<Inputs.HostRuntimePolicyDriftPreventionArgs>? _driftPreventions;

        /// <summary>
        /// Drift prevention configuration.
        /// </summary>
        public InputList<Inputs.HostRuntimePolicyDriftPreventionArgs> DriftPreventions
        {
            get => _driftPreventions ?? (_driftPreventions = new InputList<Inputs.HostRuntimePolicyDriftPreventionArgs>());
            set => _driftPreventions = value;
        }

        [Input("enableCryptoMiningDns")]
        public Input<bool>? EnableCryptoMiningDns { get; set; }

        [Input("enableForkGuard")]
        public Input<bool>? EnableForkGuard { get; set; }

        [Input("enableIpReputation")]
        public Input<bool>? EnableIpReputation { get; set; }

        [Input("enablePortScanProtection")]
        public Input<bool>? EnablePortScanProtection { get; set; }

        /// <summary>
        /// Indicates if the runtime policy is enabled or not.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Indicates that policy should effect container execution (not just for audit).
        /// </summary>
        [Input("enforce")]
        public Input<bool>? Enforce { get; set; }

        /// <summary>
        /// Indicates the number of days after which the runtime policy will be changed to enforce mode.
        /// </summary>
        [Input("enforceAfterDays")]
        public Input<int>? EnforceAfterDays { get; set; }

        [Input("enforceSchedulerAddedOn")]
        public Input<int>? EnforceSchedulerAddedOn { get; set; }

        [Input("excludeApplicationScopes")]
        private InputList<string>? _excludeApplicationScopes;

        /// <summary>
        /// List of excluded application scopes.
        /// </summary>
        public InputList<string> ExcludeApplicationScopes
        {
            get => _excludeApplicationScopes ?? (_excludeApplicationScopes = new InputList<string>());
            set => _excludeApplicationScopes = value;
        }

        [Input("executableBlacklists")]
        private InputList<Inputs.HostRuntimePolicyExecutableBlacklistArgs>? _executableBlacklists;

        /// <summary>
        /// Executable blacklist configuration.
        /// </summary>
        public InputList<Inputs.HostRuntimePolicyExecutableBlacklistArgs> ExecutableBlacklists
        {
            get => _executableBlacklists ?? (_executableBlacklists = new InputList<Inputs.HostRuntimePolicyExecutableBlacklistArgs>());
            set => _executableBlacklists = value;
        }

        [Input("failedKubernetesChecks")]
        public Input<Inputs.HostRuntimePolicyFailedKubernetesChecksArgs>? FailedKubernetesChecks { get; set; }

        [Input("fileBlock")]
        public Input<Inputs.HostRuntimePolicyFileBlockArgs>? FileBlock { get; set; }

        /// <summary>
        /// Configuration for file integrity monitoring.
        /// </summary>
        [Input("fileIntegrityMonitoring")]
        public Input<Inputs.HostRuntimePolicyFileIntegrityMonitoringArgs>? FileIntegrityMonitoring { get; set; }

        [Input("forkGuardProcessLimit")]
        public Input<int>? ForkGuardProcessLimit { get; set; }

        [Input("imageName")]
        public Input<string>? ImageName { get; set; }

        [Input("isAuditChecked")]
        public Input<bool>? IsAuditChecked { get; set; }

        [Input("isAutoGenerated")]
        public Input<bool>? IsAutoGenerated { get; set; }

        [Input("isOotbPolicy")]
        public Input<bool>? IsOotbPolicy { get; set; }

        [Input("lastupdate")]
        public Input<int>? Lastupdate { get; set; }

        [Input("limitContainerPrivileges")]
        private InputList<Inputs.HostRuntimePolicyLimitContainerPrivilegeArgs>? _limitContainerPrivileges;

        /// <summary>
        /// Container privileges configuration.
        /// </summary>
        public InputList<Inputs.HostRuntimePolicyLimitContainerPrivilegeArgs> LimitContainerPrivileges
        {
            get => _limitContainerPrivileges ?? (_limitContainerPrivileges = new InputList<Inputs.HostRuntimePolicyLimitContainerPrivilegeArgs>());
            set => _limitContainerPrivileges = value;
        }

        [Input("linuxCapabilities")]
        public Input<Inputs.HostRuntimePolicyLinuxCapabilitiesArgs>? LinuxCapabilities { get; set; }

        /// <summary>
        /// Configuration for Real-Time Malware Protection.
        /// </summary>
        [Input("malwareScanOptions")]
        public Input<Inputs.HostRuntimePolicyMalwareScanOptionsArgs>? MalwareScanOptions { get; set; }

        /// <summary>
        /// If true, system log will be monitored.
        /// </summary>
        [Input("monitorSystemLogIntegrity")]
        public Input<bool>? MonitorSystemLogIntegrity { get; set; }

        /// <summary>
        /// If true, system time changes will be monitored.
        /// </summary>
        [Input("monitorSystemTimeChanges")]
        public Input<bool>? MonitorSystemTimeChanges { get; set; }

        /// <summary>
        /// If true, windows service operations will be monitored.
        /// </summary>
        [Input("monitorWindowsServices")]
        public Input<bool>? MonitorWindowsServices { get; set; }

        /// <summary>
        /// Name of the host runtime policy
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("noNewPrivileges")]
        public Input<bool>? NoNewPrivileges { get; set; }

        [Input("onlyRegisteredImages")]
        public Input<bool>? OnlyRegisteredImages { get; set; }

        [Input("osGroupsAlloweds")]
        private InputList<string>? _osGroupsAlloweds;

        /// <summary>
        /// List of OS (Linux or Windows) groups that are allowed to authenticate to the host, and block authentication requests from all others. Groups can be either Linux groups or Windows AD groups.
        /// </summary>
        public InputList<string> OsGroupsAlloweds
        {
            get => _osGroupsAlloweds ?? (_osGroupsAlloweds = new InputList<string>());
            set => _osGroupsAlloweds = value;
        }

        [Input("osGroupsBlockeds")]
        private InputList<string>? _osGroupsBlockeds;

        /// <summary>
        /// List of OS (Linux or Windows) groups that are not allowed to authenticate to the host, and block authentication requests from all others. Groups can be either Linux groups or Windows AD groups.
        /// </summary>
        public InputList<string> OsGroupsBlockeds
        {
            get => _osGroupsBlockeds ?? (_osGroupsBlockeds = new InputList<string>());
            set => _osGroupsBlockeds = value;
        }

        [Input("osUsersAlloweds")]
        private InputList<string>? _osUsersAlloweds;

        /// <summary>
        /// List of OS (Linux or Windows) users that are allowed to authenticate to the host, and block authentication requests from all others.
        /// </summary>
        public InputList<string> OsUsersAlloweds
        {
            get => _osUsersAlloweds ?? (_osUsersAlloweds = new InputList<string>());
            set => _osUsersAlloweds = value;
        }

        [Input("osUsersBlockeds")]
        private InputList<string>? _osUsersBlockeds;

        /// <summary>
        /// List of OS (Linux or Windows) users that are not allowed to authenticate to the host, and block authentication requests from all others.
        /// </summary>
        public InputList<string> OsUsersBlockeds
        {
            get => _osUsersBlockeds ?? (_osUsersBlockeds = new InputList<string>());
            set => _osUsersBlockeds = value;
        }

        [Input("packageBlocks")]
        private InputList<Inputs.HostRuntimePolicyPackageBlockArgs>? _packageBlocks;
        public InputList<Inputs.HostRuntimePolicyPackageBlockArgs> PackageBlocks
        {
            get => _packageBlocks ?? (_packageBlocks = new InputList<Inputs.HostRuntimePolicyPackageBlockArgs>());
            set => _packageBlocks = value;
        }

        [Input("permission")]
        public Input<string>? Permission { get; set; }

        [Input("portBlock")]
        public Input<Inputs.HostRuntimePolicyPortBlockArgs>? PortBlock { get; set; }

        [Input("readonlyFiles")]
        public Input<Inputs.HostRuntimePolicyReadonlyFilesArgs>? ReadonlyFiles { get; set; }

        [Input("readonlyRegistry")]
        public Input<Inputs.HostRuntimePolicyReadonlyRegistryArgs>? ReadonlyRegistry { get; set; }

        [Input("registry")]
        public Input<string>? Registry { get; set; }

        [Input("registryAccessMonitoring")]
        public Input<Inputs.HostRuntimePolicyRegistryAccessMonitoringArgs>? RegistryAccessMonitoring { get; set; }

        [Input("repoName")]
        public Input<string>? RepoName { get; set; }

        [Input("resourceName")]
        public Input<string>? ResourceName { get; set; }

        [Input("resourceType")]
        public Input<string>? ResourceType { get; set; }

        [Input("restrictedVolumes")]
        private InputList<Inputs.HostRuntimePolicyRestrictedVolumeArgs>? _restrictedVolumes;

        /// <summary>
        /// Restricted volumes configuration.
        /// </summary>
        public InputList<Inputs.HostRuntimePolicyRestrictedVolumeArgs> RestrictedVolumes
        {
            get => _restrictedVolumes ?? (_restrictedVolumes = new InputList<Inputs.HostRuntimePolicyRestrictedVolumeArgs>());
            set => _restrictedVolumes = value;
        }

        [Input("reverseShell")]
        public Input<Inputs.HostRuntimePolicyReverseShellArgs>? ReverseShell { get; set; }

        [Input("runtimeMode")]
        public Input<int>? RuntimeMode { get; set; }

        [Input("runtimeType")]
        public Input<string>? RuntimeType { get; set; }

        /// <summary>
        /// Logical expression of how to compute the dependency of the scope variables.
        /// </summary>
        [Input("scopeExpression")]
        public Input<string>? ScopeExpression { get; set; }

        [Input("scopeVariables")]
        private InputList<Inputs.HostRuntimePolicyScopeVariableArgs>? _scopeVariables;

        /// <summary>
        /// List of scope attributes.
        /// </summary>
        public InputList<Inputs.HostRuntimePolicyScopeVariableArgs> ScopeVariables
        {
            get => _scopeVariables ?? (_scopeVariables = new InputList<Inputs.HostRuntimePolicyScopeVariableArgs>());
            set => _scopeVariables = value;
        }

        [Input("scopes")]
        private InputList<Inputs.HostRuntimePolicyScopeArgs>? _scopes;

        /// <summary>
        /// Scope configuration.
        /// </summary>
        public InputList<Inputs.HostRuntimePolicyScopeArgs> Scopes
        {
            get => _scopes ?? (_scopes = new InputList<Inputs.HostRuntimePolicyScopeArgs>());
            set => _scopes = value;
        }

        [Input("systemIntegrityProtection")]
        public Input<Inputs.HostRuntimePolicySystemIntegrityProtectionArgs>? SystemIntegrityProtection { get; set; }

        [Input("tripwire")]
        public Input<Inputs.HostRuntimePolicyTripwireArgs>? Tripwire { get; set; }

        [Input("type")]
        public Input<string>? Type { get; set; }

        [Input("updated")]
        public Input<string>? Updated { get; set; }

        [Input("version")]
        public Input<string>? Version { get; set; }

        [Input("vpatchVersion")]
        public Input<string>? VpatchVersion { get; set; }

        [Input("whitelistedOsUsers")]
        public Input<Inputs.HostRuntimePolicyWhitelistedOsUsersArgs>? WhitelistedOsUsers { get; set; }

        public HostRuntimePolicyArgs()
        {
        }
        public static new HostRuntimePolicyArgs Empty => new HostRuntimePolicyArgs();
    }

    public sealed class HostRuntimePolicyState : global::Pulumi.ResourceArgs
    {
        [Input("allowedExecutables")]
        private InputList<Inputs.HostRuntimePolicyAllowedExecutableGetArgs>? _allowedExecutables;

        /// <summary>
        /// Allowed executables configuration.
        /// </summary>
        public InputList<Inputs.HostRuntimePolicyAllowedExecutableGetArgs> AllowedExecutables
        {
            get => _allowedExecutables ?? (_allowedExecutables = new InputList<Inputs.HostRuntimePolicyAllowedExecutableGetArgs>());
            set => _allowedExecutables = value;
        }

        [Input("allowedRegistries")]
        private InputList<Inputs.HostRuntimePolicyAllowedRegistryGetArgs>? _allowedRegistries;

        /// <summary>
        /// Allowed registries configuration.
        /// </summary>
        public InputList<Inputs.HostRuntimePolicyAllowedRegistryGetArgs> AllowedRegistries
        {
            get => _allowedRegistries ?? (_allowedRegistries = new InputList<Inputs.HostRuntimePolicyAllowedRegistryGetArgs>());
            set => _allowedRegistries = value;
        }

        [Input("applicationScopes")]
        private InputList<string>? _applicationScopes;

        /// <summary>
        /// Indicates the application scope of the service.
        /// </summary>
        public InputList<string> ApplicationScopes
        {
            get => _applicationScopes ?? (_applicationScopes = new InputList<string>());
            set => _applicationScopes = value;
        }

        /// <summary>
        /// Detects brute force login attempts
        /// </summary>
        [Input("auditBruteForceLogin")]
        public Input<bool>? AuditBruteForceLogin { get; set; }

        /// <summary>
        /// If true, full command arguments will be audited.
        /// </summary>
        [Input("auditFullCommandArguments")]
        public Input<bool>? AuditFullCommandArguments { get; set; }

        /// <summary>
        /// If true, host failed logins will be audited.
        /// </summary>
        [Input("auditHostFailedLoginEvents")]
        public Input<bool>? AuditHostFailedLoginEvents { get; set; }

        /// <summary>
        /// If true, host successful logins will be audited.
        /// </summary>
        [Input("auditHostSuccessfulLoginEvents")]
        public Input<bool>? AuditHostSuccessfulLoginEvents { get; set; }

        /// <summary>
        /// If true, account management will be audited.
        /// </summary>
        [Input("auditUserAccountManagement")]
        public Input<bool>? AuditUserAccountManagement { get; set; }

        [Input("auditing")]
        public Input<Inputs.HostRuntimePolicyAuditingGetArgs>? Auditing { get; set; }

        /// <summary>
        /// Username of the account that created the service.
        /// </summary>
        [Input("author")]
        public Input<string>? Author { get; set; }

        [Input("blacklistedOsUsers")]
        public Input<Inputs.HostRuntimePolicyBlacklistedOsUsersGetArgs>? BlacklistedOsUsers { get; set; }

        [Input("blockContainerExec")]
        public Input<bool>? BlockContainerExec { get; set; }

        /// <summary>
        /// Detect and prevent communication to DNS/IP addresses known to be used for Cryptocurrency Mining
        /// </summary>
        [Input("blockCryptocurrencyMining")]
        public Input<bool>? BlockCryptocurrencyMining { get; set; }

        [Input("blockDisallowedImages")]
        public Input<bool>? BlockDisallowedImages { get; set; }

        [Input("blockFilelessExec")]
        public Input<bool>? BlockFilelessExec { get; set; }

        [Input("blockNonCompliantWorkloads")]
        public Input<bool>? BlockNonCompliantWorkloads { get; set; }

        [Input("blockNonK8sContainers")]
        public Input<bool>? BlockNonK8sContainers { get; set; }

        [Input("blockedFiles")]
        private InputList<string>? _blockedFiles;

        /// <summary>
        /// List of files that are prevented from being read, modified and executed in the containers.
        /// </summary>
        public InputList<string> BlockedFiles
        {
            get => _blockedFiles ?? (_blockedFiles = new InputList<string>());
            set => _blockedFiles = value;
        }

        [Input("bypassScopes")]
        private InputList<Inputs.HostRuntimePolicyBypassScopeGetArgs>? _bypassScopes;

        /// <summary>
        /// Bypass scope configuration.
        /// </summary>
        public InputList<Inputs.HostRuntimePolicyBypassScopeGetArgs> BypassScopes
        {
            get => _bypassScopes ?? (_bypassScopes = new InputList<Inputs.HostRuntimePolicyBypassScopeGetArgs>());
            set => _bypassScopes = value;
        }

        [Input("containerExec")]
        public Input<Inputs.HostRuntimePolicyContainerExecGetArgs>? ContainerExec { get; set; }

        [Input("created")]
        public Input<string>? Created { get; set; }

        [Input("cve")]
        public Input<string>? Cve { get; set; }

        [Input("defaultSecurityProfile")]
        public Input<string>? DefaultSecurityProfile { get; set; }

        /// <summary>
        /// The description of the host runtime policy
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("digest")]
        public Input<string>? Digest { get; set; }

        [Input("driftPreventions")]
        private InputList<Inputs.HostRuntimePolicyDriftPreventionGetArgs>? _driftPreventions;

        /// <summary>
        /// Drift prevention configuration.
        /// </summary>
        public InputList<Inputs.HostRuntimePolicyDriftPreventionGetArgs> DriftPreventions
        {
            get => _driftPreventions ?? (_driftPreventions = new InputList<Inputs.HostRuntimePolicyDriftPreventionGetArgs>());
            set => _driftPreventions = value;
        }

        [Input("enableCryptoMiningDns")]
        public Input<bool>? EnableCryptoMiningDns { get; set; }

        [Input("enableForkGuard")]
        public Input<bool>? EnableForkGuard { get; set; }

        [Input("enableIpReputation")]
        public Input<bool>? EnableIpReputation { get; set; }

        [Input("enablePortScanProtection")]
        public Input<bool>? EnablePortScanProtection { get; set; }

        /// <summary>
        /// Indicates if the runtime policy is enabled or not.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Indicates that policy should effect container execution (not just for audit).
        /// </summary>
        [Input("enforce")]
        public Input<bool>? Enforce { get; set; }

        /// <summary>
        /// Indicates the number of days after which the runtime policy will be changed to enforce mode.
        /// </summary>
        [Input("enforceAfterDays")]
        public Input<int>? EnforceAfterDays { get; set; }

        [Input("enforceSchedulerAddedOn")]
        public Input<int>? EnforceSchedulerAddedOn { get; set; }

        [Input("excludeApplicationScopes")]
        private InputList<string>? _excludeApplicationScopes;

        /// <summary>
        /// List of excluded application scopes.
        /// </summary>
        public InputList<string> ExcludeApplicationScopes
        {
            get => _excludeApplicationScopes ?? (_excludeApplicationScopes = new InputList<string>());
            set => _excludeApplicationScopes = value;
        }

        [Input("executableBlacklists")]
        private InputList<Inputs.HostRuntimePolicyExecutableBlacklistGetArgs>? _executableBlacklists;

        /// <summary>
        /// Executable blacklist configuration.
        /// </summary>
        public InputList<Inputs.HostRuntimePolicyExecutableBlacklistGetArgs> ExecutableBlacklists
        {
            get => _executableBlacklists ?? (_executableBlacklists = new InputList<Inputs.HostRuntimePolicyExecutableBlacklistGetArgs>());
            set => _executableBlacklists = value;
        }

        [Input("failedKubernetesChecks")]
        public Input<Inputs.HostRuntimePolicyFailedKubernetesChecksGetArgs>? FailedKubernetesChecks { get; set; }

        [Input("fileBlock")]
        public Input<Inputs.HostRuntimePolicyFileBlockGetArgs>? FileBlock { get; set; }

        /// <summary>
        /// Configuration for file integrity monitoring.
        /// </summary>
        [Input("fileIntegrityMonitoring")]
        public Input<Inputs.HostRuntimePolicyFileIntegrityMonitoringGetArgs>? FileIntegrityMonitoring { get; set; }

        [Input("forkGuardProcessLimit")]
        public Input<int>? ForkGuardProcessLimit { get; set; }

        [Input("imageName")]
        public Input<string>? ImageName { get; set; }

        [Input("isAuditChecked")]
        public Input<bool>? IsAuditChecked { get; set; }

        [Input("isAutoGenerated")]
        public Input<bool>? IsAutoGenerated { get; set; }

        [Input("isOotbPolicy")]
        public Input<bool>? IsOotbPolicy { get; set; }

        [Input("lastupdate")]
        public Input<int>? Lastupdate { get; set; }

        [Input("limitContainerPrivileges")]
        private InputList<Inputs.HostRuntimePolicyLimitContainerPrivilegeGetArgs>? _limitContainerPrivileges;

        /// <summary>
        /// Container privileges configuration.
        /// </summary>
        public InputList<Inputs.HostRuntimePolicyLimitContainerPrivilegeGetArgs> LimitContainerPrivileges
        {
            get => _limitContainerPrivileges ?? (_limitContainerPrivileges = new InputList<Inputs.HostRuntimePolicyLimitContainerPrivilegeGetArgs>());
            set => _limitContainerPrivileges = value;
        }

        [Input("linuxCapabilities")]
        public Input<Inputs.HostRuntimePolicyLinuxCapabilitiesGetArgs>? LinuxCapabilities { get; set; }

        /// <summary>
        /// Configuration for Real-Time Malware Protection.
        /// </summary>
        [Input("malwareScanOptions")]
        public Input<Inputs.HostRuntimePolicyMalwareScanOptionsGetArgs>? MalwareScanOptions { get; set; }

        /// <summary>
        /// If true, system log will be monitored.
        /// </summary>
        [Input("monitorSystemLogIntegrity")]
        public Input<bool>? MonitorSystemLogIntegrity { get; set; }

        /// <summary>
        /// If true, system time changes will be monitored.
        /// </summary>
        [Input("monitorSystemTimeChanges")]
        public Input<bool>? MonitorSystemTimeChanges { get; set; }

        /// <summary>
        /// If true, windows service operations will be monitored.
        /// </summary>
        [Input("monitorWindowsServices")]
        public Input<bool>? MonitorWindowsServices { get; set; }

        /// <summary>
        /// Name of the host runtime policy
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("noNewPrivileges")]
        public Input<bool>? NoNewPrivileges { get; set; }

        [Input("onlyRegisteredImages")]
        public Input<bool>? OnlyRegisteredImages { get; set; }

        [Input("osGroupsAlloweds")]
        private InputList<string>? _osGroupsAlloweds;

        /// <summary>
        /// List of OS (Linux or Windows) groups that are allowed to authenticate to the host, and block authentication requests from all others. Groups can be either Linux groups or Windows AD groups.
        /// </summary>
        public InputList<string> OsGroupsAlloweds
        {
            get => _osGroupsAlloweds ?? (_osGroupsAlloweds = new InputList<string>());
            set => _osGroupsAlloweds = value;
        }

        [Input("osGroupsBlockeds")]
        private InputList<string>? _osGroupsBlockeds;

        /// <summary>
        /// List of OS (Linux or Windows) groups that are not allowed to authenticate to the host, and block authentication requests from all others. Groups can be either Linux groups or Windows AD groups.
        /// </summary>
        public InputList<string> OsGroupsBlockeds
        {
            get => _osGroupsBlockeds ?? (_osGroupsBlockeds = new InputList<string>());
            set => _osGroupsBlockeds = value;
        }

        [Input("osUsersAlloweds")]
        private InputList<string>? _osUsersAlloweds;

        /// <summary>
        /// List of OS (Linux or Windows) users that are allowed to authenticate to the host, and block authentication requests from all others.
        /// </summary>
        public InputList<string> OsUsersAlloweds
        {
            get => _osUsersAlloweds ?? (_osUsersAlloweds = new InputList<string>());
            set => _osUsersAlloweds = value;
        }

        [Input("osUsersBlockeds")]
        private InputList<string>? _osUsersBlockeds;

        /// <summary>
        /// List of OS (Linux or Windows) users that are not allowed to authenticate to the host, and block authentication requests from all others.
        /// </summary>
        public InputList<string> OsUsersBlockeds
        {
            get => _osUsersBlockeds ?? (_osUsersBlockeds = new InputList<string>());
            set => _osUsersBlockeds = value;
        }

        [Input("packageBlocks")]
        private InputList<Inputs.HostRuntimePolicyPackageBlockGetArgs>? _packageBlocks;
        public InputList<Inputs.HostRuntimePolicyPackageBlockGetArgs> PackageBlocks
        {
            get => _packageBlocks ?? (_packageBlocks = new InputList<Inputs.HostRuntimePolicyPackageBlockGetArgs>());
            set => _packageBlocks = value;
        }

        [Input("permission")]
        public Input<string>? Permission { get; set; }

        [Input("portBlock")]
        public Input<Inputs.HostRuntimePolicyPortBlockGetArgs>? PortBlock { get; set; }

        [Input("readonlyFiles")]
        public Input<Inputs.HostRuntimePolicyReadonlyFilesGetArgs>? ReadonlyFiles { get; set; }

        [Input("readonlyRegistry")]
        public Input<Inputs.HostRuntimePolicyReadonlyRegistryGetArgs>? ReadonlyRegistry { get; set; }

        [Input("registry")]
        public Input<string>? Registry { get; set; }

        [Input("registryAccessMonitoring")]
        public Input<Inputs.HostRuntimePolicyRegistryAccessMonitoringGetArgs>? RegistryAccessMonitoring { get; set; }

        [Input("repoName")]
        public Input<string>? RepoName { get; set; }

        [Input("resourceName")]
        public Input<string>? ResourceName { get; set; }

        [Input("resourceType")]
        public Input<string>? ResourceType { get; set; }

        [Input("restrictedVolumes")]
        private InputList<Inputs.HostRuntimePolicyRestrictedVolumeGetArgs>? _restrictedVolumes;

        /// <summary>
        /// Restricted volumes configuration.
        /// </summary>
        public InputList<Inputs.HostRuntimePolicyRestrictedVolumeGetArgs> RestrictedVolumes
        {
            get => _restrictedVolumes ?? (_restrictedVolumes = new InputList<Inputs.HostRuntimePolicyRestrictedVolumeGetArgs>());
            set => _restrictedVolumes = value;
        }

        [Input("reverseShell")]
        public Input<Inputs.HostRuntimePolicyReverseShellGetArgs>? ReverseShell { get; set; }

        [Input("runtimeMode")]
        public Input<int>? RuntimeMode { get; set; }

        [Input("runtimeType")]
        public Input<string>? RuntimeType { get; set; }

        /// <summary>
        /// Logical expression of how to compute the dependency of the scope variables.
        /// </summary>
        [Input("scopeExpression")]
        public Input<string>? ScopeExpression { get; set; }

        [Input("scopeVariables")]
        private InputList<Inputs.HostRuntimePolicyScopeVariableGetArgs>? _scopeVariables;

        /// <summary>
        /// List of scope attributes.
        /// </summary>
        public InputList<Inputs.HostRuntimePolicyScopeVariableGetArgs> ScopeVariables
        {
            get => _scopeVariables ?? (_scopeVariables = new InputList<Inputs.HostRuntimePolicyScopeVariableGetArgs>());
            set => _scopeVariables = value;
        }

        [Input("scopes")]
        private InputList<Inputs.HostRuntimePolicyScopeGetArgs>? _scopes;

        /// <summary>
        /// Scope configuration.
        /// </summary>
        public InputList<Inputs.HostRuntimePolicyScopeGetArgs> Scopes
        {
            get => _scopes ?? (_scopes = new InputList<Inputs.HostRuntimePolicyScopeGetArgs>());
            set => _scopes = value;
        }

        [Input("systemIntegrityProtection")]
        public Input<Inputs.HostRuntimePolicySystemIntegrityProtectionGetArgs>? SystemIntegrityProtection { get; set; }

        [Input("tripwire")]
        public Input<Inputs.HostRuntimePolicyTripwireGetArgs>? Tripwire { get; set; }

        [Input("type")]
        public Input<string>? Type { get; set; }

        [Input("updated")]
        public Input<string>? Updated { get; set; }

        [Input("version")]
        public Input<string>? Version { get; set; }

        [Input("vpatchVersion")]
        public Input<string>? VpatchVersion { get; set; }

        [Input("whitelistedOsUsers")]
        public Input<Inputs.HostRuntimePolicyWhitelistedOsUsersGetArgs>? WhitelistedOsUsers { get; set; }

        public HostRuntimePolicyState()
        {
        }
        public static new HostRuntimePolicyState Empty => new HostRuntimePolicyState();
    }
}
