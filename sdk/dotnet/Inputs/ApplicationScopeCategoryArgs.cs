// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Aquasec.Inputs
{

    public sealed class ApplicationScopeCategoryArgs : global::Pulumi.ResourceArgs
    {
        [Input("artifacts")]
        private InputList<Inputs.ApplicationScopeCategoryArtifactArgs>? _artifacts;

        /// <summary>
        /// An artifact is an application. It can be an image (for a container, not a CF application); a serverless function; or a Tanzu Application Service (TAS) droplet.
        /// </summary>
        public InputList<Inputs.ApplicationScopeCategoryArtifactArgs> Artifacts
        {
            get => _artifacts ?? (_artifacts = new InputList<Inputs.ApplicationScopeCategoryArtifactArgs>());
            set => _artifacts = value;
        }

        [Input("entityScopes")]
        private InputList<Inputs.ApplicationScopeCategoryEntityScopeArgs>? _entityScopes;
        public InputList<Inputs.ApplicationScopeCategoryEntityScopeArgs> EntityScopes
        {
            get => _entityScopes ?? (_entityScopes = new InputList<Inputs.ApplicationScopeCategoryEntityScopeArgs>());
            set => _entityScopes = value;
        }

        [Input("infrastructures")]
        private InputList<Inputs.ApplicationScopeCategoryInfrastructureArgs>? _infrastructures;

        /// <summary>
        /// An infrastructure resource is an element of a computing environment on which a workload is orchestrated and run. It can be a host (VM) or a Kubernetes cluster.
        /// </summary>
        public InputList<Inputs.ApplicationScopeCategoryInfrastructureArgs> Infrastructures
        {
            get => _infrastructures ?? (_infrastructures = new InputList<Inputs.ApplicationScopeCategoryInfrastructureArgs>());
            set => _infrastructures = value;
        }

        [Input("workloads")]
        private InputList<Inputs.ApplicationScopeCategoryWorkloadArgs>? _workloads;

        /// <summary>
        /// A workload is a running container. It can run in a Kubernetes cluster, on a VM (no orchestrator), or under Tanzu Application Service (TAS).
        /// </summary>
        public InputList<Inputs.ApplicationScopeCategoryWorkloadArgs> Workloads
        {
            get => _workloads ?? (_workloads = new InputList<Inputs.ApplicationScopeCategoryWorkloadArgs>());
            set => _workloads = value;
        }

        public ApplicationScopeCategoryArgs()
        {
        }
        public static new ApplicationScopeCategoryArgs Empty => new ApplicationScopeCategoryArgs();
    }
}
