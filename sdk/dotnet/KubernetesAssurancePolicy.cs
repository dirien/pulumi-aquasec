// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Aquasec
{
    /// <summary>
    /// Kubernetes Assurance is responsible for checking the security of workload configurations at the pod level, with respect to your organization's security requirements.
    /// </summary>
    [AquasecResourceType("aquasec:index/kubernetesAssurancePolicy:KubernetesAssurancePolicy")]
    public partial class KubernetesAssurancePolicy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Aggregated vulnerability information.
        /// </summary>
        [Output("aggregatedVulnerability")]
        public Output<ImmutableDictionary<string, string>?> AggregatedVulnerability { get; private set; } = null!;

        /// <summary>
        /// List of explicitly allowed images.
        /// </summary>
        [Output("allowedImages")]
        public Output<ImmutableArray<string>> AllowedImages { get; private set; } = null!;

        [Output("applicationScopes")]
        public Output<ImmutableArray<string>> ApplicationScopes { get; private set; } = null!;

        /// <summary>
        /// What type of assurance policy is described.
        /// </summary>
        [Output("assuranceType")]
        public Output<string> AssuranceType { get; private set; } = null!;

        /// <summary>
        /// Indicates if auditing for failures.
        /// </summary>
        [Output("auditOnFailure")]
        public Output<bool?> AuditOnFailure { get; private set; } = null!;

        /// <summary>
        /// Name of user account that created the policy.
        /// </summary>
        [Output("author")]
        public Output<string> Author { get; private set; } = null!;

        [Output("autoScanConfigured")]
        public Output<bool?> AutoScanConfigured { get; private set; } = null!;

        [Output("autoScanEnabled")]
        public Output<bool?> AutoScanEnabled { get; private set; } = null!;

        [Output("autoScanTimes")]
        public Output<ImmutableArray<Outputs.KubernetesAssurancePolicyAutoScanTime>> AutoScanTimes { get; private set; } = null!;

        /// <summary>
        /// List of function's forbidden permissions.
        /// </summary>
        [Output("blacklistPermissions")]
        public Output<ImmutableArray<string>> BlacklistPermissions { get; private set; } = null!;

        /// <summary>
        /// Indicates if blacklist permissions is relevant.
        /// </summary>
        [Output("blacklistPermissionsEnabled")]
        public Output<bool?> BlacklistPermissionsEnabled { get; private set; } = null!;

        /// <summary>
        /// List of blacklisted licenses.
        /// </summary>
        [Output("blacklistedLicenses")]
        public Output<ImmutableArray<string>> BlacklistedLicenses { get; private set; } = null!;

        /// <summary>
        /// Indicates if license blacklist is relevant.
        /// </summary>
        [Output("blacklistedLicensesEnabled")]
        public Output<bool?> BlacklistedLicensesEnabled { get; private set; } = null!;

        /// <summary>
        /// Indicates if failed images are blocked.
        /// </summary>
        [Output("blockFailed")]
        public Output<bool?> BlockFailed { get; private set; } = null!;

        [Output("controlExcludeNoFix")]
        public Output<bool?> ControlExcludeNoFix { get; private set; } = null!;

        /// <summary>
        /// List of Custom user scripts for checks.
        /// </summary>
        [Output("customChecks")]
        public Output<ImmutableArray<Outputs.KubernetesAssurancePolicyCustomCheck>> CustomChecks { get; private set; } = null!;

        /// <summary>
        /// Indicates if scanning should include custom checks.
        /// </summary>
        [Output("customChecksEnabled")]
        public Output<bool?> CustomChecksEnabled { get; private set; } = null!;

        [Output("customSeverity")]
        public Output<string> CustomSeverity { get; private set; } = null!;

        [Output("customSeverityEnabled")]
        public Output<bool?> CustomSeverityEnabled { get; private set; } = null!;

        /// <summary>
        /// Indicates if CVEs blacklist is relevant.
        /// </summary>
        [Output("cvesBlackListEnabled")]
        public Output<bool?> CvesBlackListEnabled { get; private set; } = null!;

        /// <summary>
        /// List of CVEs blacklisted items.
        /// </summary>
        [Output("cvesBlackLists")]
        public Output<ImmutableArray<string>> CvesBlackLists { get; private set; } = null!;

        /// <summary>
        /// Indicates if CVEs whitelist is relevant.
        /// </summary>
        [Output("cvesWhiteListEnabled")]
        public Output<bool?> CvesWhiteListEnabled { get; private set; } = null!;

        /// <summary>
        /// List of cves whitelisted licenses
        /// </summary>
        [Output("cvesWhiteLists")]
        public Output<ImmutableArray<string>> CvesWhiteLists { get; private set; } = null!;

        /// <summary>
        /// Identifier of the cvss severity.
        /// </summary>
        [Output("cvssSeverity")]
        public Output<string?> CvssSeverity { get; private set; } = null!;

        /// <summary>
        /// Indicates if the cvss severity is scanned.
        /// </summary>
        [Output("cvssSeverityEnabled")]
        public Output<bool?> CvssSeverityEnabled { get; private set; } = null!;

        /// <summary>
        /// Indicates that policy should ignore cvss cases that do not have a known fix.
        /// </summary>
        [Output("cvssSeverityExcludeNoFix")]
        public Output<bool?> CvssSeverityExcludeNoFix { get; private set; } = null!;

        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        [Output("disallowExploitTypes")]
        public Output<ImmutableArray<string>> DisallowExploitTypes { get; private set; } = null!;

        /// <summary>
        /// Indicates if malware should block the image.
        /// </summary>
        [Output("disallowMalware")]
        public Output<bool?> DisallowMalware { get; private set; } = null!;

        /// <summary>
        /// Checks the host according to the Docker CIS benchmark, if Docker is found on the host.
        /// </summary>
        [Output("dockerCisEnabled")]
        public Output<bool?> DockerCisEnabled { get; private set; } = null!;

        /// <summary>
        /// Name of the container image.
        /// </summary>
        [Output("domain")]
        public Output<string?> Domain { get; private set; } = null!;

        [Output("domainName")]
        public Output<string?> DomainName { get; private set; } = null!;

        [Output("dtaEnabled")]
        public Output<bool?> DtaEnabled { get; private set; } = null!;

        [Output("dtaSeverity")]
        public Output<string?> DtaSeverity { get; private set; } = null!;

        /// <summary>
        /// Is the control enabled?
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        [Output("enforce")]
        public Output<bool?> Enforce { get; private set; } = null!;

        [Output("enforceAfterDays")]
        public Output<int?> EnforceAfterDays { get; private set; } = null!;

        [Output("enforceExcessivePermissions")]
        public Output<bool?> EnforceExcessivePermissions { get; private set; } = null!;

        [Output("exceptionalMonitoredMalwarePaths")]
        public Output<ImmutableArray<string>> ExceptionalMonitoredMalwarePaths { get; private set; } = null!;

        [Output("excludeApplicationScopes")]
        public Output<ImmutableArray<string>> ExcludeApplicationScopes { get; private set; } = null!;

        /// <summary>
        /// Indicates if cicd failures will fail the image.
        /// </summary>
        [Output("failCicd")]
        public Output<bool?> FailCicd { get; private set; } = null!;

        [Output("forbiddenLabels")]
        public Output<ImmutableArray<Outputs.KubernetesAssurancePolicyForbiddenLabel>> ForbiddenLabels { get; private set; } = null!;

        [Output("forbiddenLabelsEnabled")]
        public Output<bool?> ForbiddenLabelsEnabled { get; private set; } = null!;

        [Output("forceMicroenforcer")]
        public Output<bool?> ForceMicroenforcer { get; private set; } = null!;

        [Output("functionIntegrityEnabled")]
        public Output<bool?> FunctionIntegrityEnabled { get; private set; } = null!;

        [Output("ignoreBaseImageVln")]
        public Output<bool?> IgnoreBaseImageVln { get; private set; } = null!;

        [Output("ignoreRecentlyPublishedVln")]
        public Output<bool?> IgnoreRecentlyPublishedVln { get; private set; } = null!;

        [Output("ignoreRecentlyPublishedVlnPeriod")]
        public Output<int> IgnoreRecentlyPublishedVlnPeriod { get; private set; } = null!;

        /// <summary>
        /// Indicates if risk resources are ignored.
        /// </summary>
        [Output("ignoreRiskResourcesEnabled")]
        public Output<bool?> IgnoreRiskResourcesEnabled { get; private set; } = null!;

        /// <summary>
        /// List of ignored risk resources.
        /// </summary>
        [Output("ignoredRiskResources")]
        public Output<ImmutableArray<string>> IgnoredRiskResources { get; private set; } = null!;

        [Output("ignoredSensitiveResources")]
        public Output<ImmutableArray<string>> IgnoredSensitiveResources { get; private set; } = null!;

        /// <summary>
        /// List of images.
        /// </summary>
        [Output("images")]
        public Output<ImmutableArray<string>> Images { get; private set; } = null!;

        /// <summary>
        /// Performs a Kubernetes CIS benchmark check for the host.
        /// </summary>
        [Output("kubeCisEnabled")]
        public Output<bool?> KubeCisEnabled { get; private set; } = null!;

        /// <summary>
        /// List of Kubernetes controls.
        /// </summary>
        [Output("kubernetesControls")]
        public Output<ImmutableArray<Outputs.KubernetesAssurancePolicyKubernetesControl>> KubernetesControls { get; private set; } = null!;

        [Output("kubernetesControlsAvdIds")]
        public Output<ImmutableArray<string>> KubernetesControlsAvdIds { get; private set; } = null!;

        /// <summary>
        /// List of kubernetes control names and available kubernetes controls are: 'Access to host IPC namespace', 'Access to host PID', 'Access to host network', 'Access to host ports', 'All container images must start with a GCR domain', 'All container images must start with an ECR domain', 'All container images must start with the *.azurecr.io domain', 'CPU not limited', 'CPU requests not specified', 'Can elevate its own privileges', 'ConfigMap with secrets', 'ConfigMap with sensitive content', 'Container images from public registries used', 'Default capabilitiessome containers do not drop all', 'Default capabilitiessome containers do not drop any', 'Delete pod logs', 'Exec into Pods', 'Image tag :latest used', 'Manage EKS IAM Auth ConfigMap', 'Manage Kubernetes RBAC resources', 'Manage Kubernetes networking', 'Manage Kubernetes workloads and pods', 'Manage all resources', 'Manage all resources at the namespace', 'Manage configmaps', 'Manage namespace secrets', 'Manage secrets', 'Manage webhookconfigurations', 'Manages /etc/hosts', 'Memory not limited', 'Memory requests not specified', 'Non-core volume types used.', 'Non-default /proc masks set', 'Privileged', 'Root file system is not read-only', 'Runs as root user', 'Runs with GID &lt;= 10000', 'Runs with UID &lt;= 10000', 'Runs with a root primary or supplementary GID', 'Runtime/Default AppArmor profile not set', 'Runtime/Default Seccomp profile not set', 'SELinux custom options set', 'SYS_ADMIN capability added', 'Seccomp policies disabled', 'Service with External IP', 'Specific capabilities added', 'Unsafe sysctl options set', 'User with admin access', 'Workloads in the default namespace', 'hostPath volume mounted with docker.sock', 'hostPath volumes mounted'
        /// </summary>
        [Output("kubernetesControlsNames")]
        public Output<ImmutableArray<string>> KubernetesControlsNames { get; private set; } = null!;

        /// <summary>
        /// List of labels.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableArray<string>> Labels { get; private set; } = null!;

        [Output("lastupdate")]
        public Output<string> Lastupdate { get; private set; } = null!;

        [Output("linuxCisEnabled")]
        public Output<bool?> LinuxCisEnabled { get; private set; } = null!;

        [Output("malwareAction")]
        public Output<string?> MalwareAction { get; private set; } = null!;

        /// <summary>
        /// Value of allowed maximum score.
        /// </summary>
        [Output("maximumScore")]
        public Output<double?> MaximumScore { get; private set; } = null!;

        /// <summary>
        /// Indicates if exceeding the maximum score is scanned.
        /// </summary>
        [Output("maximumScoreEnabled")]
        public Output<bool?> MaximumScoreEnabled { get; private set; } = null!;

        /// <summary>
        /// Indicates that policy should ignore cases that do not have a known fix.
        /// </summary>
        [Output("maximumScoreExcludeNoFix")]
        public Output<bool?> MaximumScoreExcludeNoFix { get; private set; } = null!;

        [Output("monitoredMalwarePaths")]
        public Output<ImmutableArray<string>> MonitoredMalwarePaths { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Indicates if raise a warning for images that should only be run as root.
        /// </summary>
        [Output("onlyNoneRootUsers")]
        public Output<bool?> OnlyNoneRootUsers { get; private set; } = null!;

        [Output("openshiftHardeningEnabled")]
        public Output<bool?> OpenshiftHardeningEnabled { get; private set; } = null!;

        /// <summary>
        /// Indicates if packages blacklist is relevant.
        /// </summary>
        [Output("packagesBlackListEnabled")]
        public Output<bool?> PackagesBlackListEnabled { get; private set; } = null!;

        /// <summary>
        /// List of blacklisted images.
        /// </summary>
        [Output("packagesBlackLists")]
        public Output<ImmutableArray<Outputs.KubernetesAssurancePolicyPackagesBlackList>> PackagesBlackLists { get; private set; } = null!;

        /// <summary>
        /// Indicates if packages whitelist is relevant.
        /// </summary>
        [Output("packagesWhiteListEnabled")]
        public Output<bool?> PackagesWhiteListEnabled { get; private set; } = null!;

        /// <summary>
        /// List of whitelisted images.
        /// </summary>
        [Output("packagesWhiteLists")]
        public Output<ImmutableArray<Outputs.KubernetesAssurancePolicyPackagesWhiteList>> PackagesWhiteLists { get; private set; } = null!;

        [Output("partialResultsImageFail")]
        public Output<bool?> PartialResultsImageFail { get; private set; } = null!;

        [Output("permission")]
        public Output<string> Permission { get; private set; } = null!;

        [Output("policySettings")]
        public Output<Outputs.KubernetesAssurancePolicyPolicySettings> PolicySettings { get; private set; } = null!;

        [Output("readOnly")]
        public Output<bool?> ReadOnly { get; private set; } = null!;

        /// <summary>
        /// List of registries.
        /// </summary>
        [Output("registries")]
        public Output<ImmutableArray<string>> Registries { get; private set; } = null!;

        [Output("registry")]
        public Output<string?> Registry { get; private set; } = null!;

        [Output("requiredLabels")]
        public Output<ImmutableArray<Outputs.KubernetesAssurancePolicyRequiredLabel>> RequiredLabels { get; private set; } = null!;

        [Output("requiredLabelsEnabled")]
        public Output<bool?> RequiredLabelsEnabled { get; private set; } = null!;

        [Output("scanMalwareInArchives")]
        public Output<bool?> ScanMalwareInArchives { get; private set; } = null!;

        [Output("scanNfsMounts")]
        public Output<bool?> ScanNfsMounts { get; private set; } = null!;

        [Output("scanProcessMemory")]
        public Output<bool?> ScanProcessMemory { get; private set; } = null!;

        /// <summary>
        /// Indicates if scan should include sensitive data in the image.
        /// </summary>
        [Output("scanSensitiveData")]
        public Output<bool?> ScanSensitiveData { get; private set; } = null!;

        [Output("scanWindowsRegistry")]
        public Output<bool?> ScanWindowsRegistry { get; private set; } = null!;

        /// <summary>
        /// Indicates if scanning should include scap.
        /// </summary>
        [Output("scapEnabled")]
        public Output<bool?> ScapEnabled { get; private set; } = null!;

        /// <summary>
        /// List of SCAP user scripts for checks.
        /// </summary>
        [Output("scapFiles")]
        public Output<ImmutableArray<string>> ScapFiles { get; private set; } = null!;

        [Output("scopes")]
        public Output<ImmutableArray<Outputs.KubernetesAssurancePolicyScope>> Scopes { get; private set; } = null!;

        /// <summary>
        /// List of trusted images.
        /// </summary>
        [Output("trustedBaseImages")]
        public Output<ImmutableArray<Outputs.KubernetesAssurancePolicyTrustedBaseImage>> TrustedBaseImages { get; private set; } = null!;

        /// <summary>
        /// Indicates if list of trusted base images is relevant.
        /// </summary>
        [Output("trustedBaseImagesEnabled")]
        public Output<bool?> TrustedBaseImagesEnabled { get; private set; } = null!;

        [Output("vulnerabilityExploitability")]
        public Output<bool?> VulnerabilityExploitability { get; private set; } = null!;

        [Output("vulnerabilityScoreRanges")]
        public Output<ImmutableArray<int>> VulnerabilityScoreRanges { get; private set; } = null!;

        /// <summary>
        /// List of whitelisted licenses.
        /// </summary>
        [Output("whitelistedLicenses")]
        public Output<ImmutableArray<string>> WhitelistedLicenses { get; private set; } = null!;

        /// <summary>
        /// Indicates if license blacklist is relevant.
        /// </summary>
        [Output("whitelistedLicensesEnabled")]
        public Output<bool?> WhitelistedLicensesEnabled { get; private set; } = null!;


        /// <summary>
        /// Create a KubernetesAssurancePolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public KubernetesAssurancePolicy(string name, KubernetesAssurancePolicyArgs args, CustomResourceOptions? options = null)
            : base("aquasec:index/kubernetesAssurancePolicy:KubernetesAssurancePolicy", name, args ?? new KubernetesAssurancePolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private KubernetesAssurancePolicy(string name, Input<string> id, KubernetesAssurancePolicyState? state = null, CustomResourceOptions? options = null)
            : base("aquasec:index/kubernetesAssurancePolicy:KubernetesAssurancePolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse/pulumi-aquasec",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing KubernetesAssurancePolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static KubernetesAssurancePolicy Get(string name, Input<string> id, KubernetesAssurancePolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new KubernetesAssurancePolicy(name, id, state, options);
        }
    }

    public sealed class KubernetesAssurancePolicyArgs : global::Pulumi.ResourceArgs
    {
        [Input("aggregatedVulnerability")]
        private InputMap<string>? _aggregatedVulnerability;

        /// <summary>
        /// Aggregated vulnerability information.
        /// </summary>
        public InputMap<string> AggregatedVulnerability
        {
            get => _aggregatedVulnerability ?? (_aggregatedVulnerability = new InputMap<string>());
            set => _aggregatedVulnerability = value;
        }

        [Input("allowedImages")]
        private InputList<string>? _allowedImages;

        /// <summary>
        /// List of explicitly allowed images.
        /// </summary>
        public InputList<string> AllowedImages
        {
            get => _allowedImages ?? (_allowedImages = new InputList<string>());
            set => _allowedImages = value;
        }

        [Input("applicationScopes", required: true)]
        private InputList<string>? _applicationScopes;
        public InputList<string> ApplicationScopes
        {
            get => _applicationScopes ?? (_applicationScopes = new InputList<string>());
            set => _applicationScopes = value;
        }

        /// <summary>
        /// What type of assurance policy is described.
        /// </summary>
        [Input("assuranceType")]
        public Input<string>? AssuranceType { get; set; }

        /// <summary>
        /// Indicates if auditing for failures.
        /// </summary>
        [Input("auditOnFailure")]
        public Input<bool>? AuditOnFailure { get; set; }

        /// <summary>
        /// Name of user account that created the policy.
        /// </summary>
        [Input("author")]
        public Input<string>? Author { get; set; }

        [Input("autoScanConfigured")]
        public Input<bool>? AutoScanConfigured { get; set; }

        [Input("autoScanEnabled")]
        public Input<bool>? AutoScanEnabled { get; set; }

        [Input("autoScanTimes")]
        private InputList<Inputs.KubernetesAssurancePolicyAutoScanTimeArgs>? _autoScanTimes;
        public InputList<Inputs.KubernetesAssurancePolicyAutoScanTimeArgs> AutoScanTimes
        {
            get => _autoScanTimes ?? (_autoScanTimes = new InputList<Inputs.KubernetesAssurancePolicyAutoScanTimeArgs>());
            set => _autoScanTimes = value;
        }

        [Input("blacklistPermissions")]
        private InputList<string>? _blacklistPermissions;

        /// <summary>
        /// List of function's forbidden permissions.
        /// </summary>
        public InputList<string> BlacklistPermissions
        {
            get => _blacklistPermissions ?? (_blacklistPermissions = new InputList<string>());
            set => _blacklistPermissions = value;
        }

        /// <summary>
        /// Indicates if blacklist permissions is relevant.
        /// </summary>
        [Input("blacklistPermissionsEnabled")]
        public Input<bool>? BlacklistPermissionsEnabled { get; set; }

        [Input("blacklistedLicenses")]
        private InputList<string>? _blacklistedLicenses;

        /// <summary>
        /// List of blacklisted licenses.
        /// </summary>
        public InputList<string> BlacklistedLicenses
        {
            get => _blacklistedLicenses ?? (_blacklistedLicenses = new InputList<string>());
            set => _blacklistedLicenses = value;
        }

        /// <summary>
        /// Indicates if license blacklist is relevant.
        /// </summary>
        [Input("blacklistedLicensesEnabled")]
        public Input<bool>? BlacklistedLicensesEnabled { get; set; }

        /// <summary>
        /// Indicates if failed images are blocked.
        /// </summary>
        [Input("blockFailed")]
        public Input<bool>? BlockFailed { get; set; }

        [Input("controlExcludeNoFix")]
        public Input<bool>? ControlExcludeNoFix { get; set; }

        [Input("customChecks")]
        private InputList<Inputs.KubernetesAssurancePolicyCustomCheckArgs>? _customChecks;

        /// <summary>
        /// List of Custom user scripts for checks.
        /// </summary>
        public InputList<Inputs.KubernetesAssurancePolicyCustomCheckArgs> CustomChecks
        {
            get => _customChecks ?? (_customChecks = new InputList<Inputs.KubernetesAssurancePolicyCustomCheckArgs>());
            set => _customChecks = value;
        }

        /// <summary>
        /// Indicates if scanning should include custom checks.
        /// </summary>
        [Input("customChecksEnabled")]
        public Input<bool>? CustomChecksEnabled { get; set; }

        [Input("customSeverity")]
        public Input<string>? CustomSeverity { get; set; }

        [Input("customSeverityEnabled")]
        public Input<bool>? CustomSeverityEnabled { get; set; }

        /// <summary>
        /// Indicates if CVEs blacklist is relevant.
        /// </summary>
        [Input("cvesBlackListEnabled")]
        public Input<bool>? CvesBlackListEnabled { get; set; }

        [Input("cvesBlackLists")]
        private InputList<string>? _cvesBlackLists;

        /// <summary>
        /// List of CVEs blacklisted items.
        /// </summary>
        public InputList<string> CvesBlackLists
        {
            get => _cvesBlackLists ?? (_cvesBlackLists = new InputList<string>());
            set => _cvesBlackLists = value;
        }

        /// <summary>
        /// Indicates if CVEs whitelist is relevant.
        /// </summary>
        [Input("cvesWhiteListEnabled")]
        public Input<bool>? CvesWhiteListEnabled { get; set; }

        [Input("cvesWhiteLists")]
        private InputList<string>? _cvesWhiteLists;

        /// <summary>
        /// List of cves whitelisted licenses
        /// </summary>
        public InputList<string> CvesWhiteLists
        {
            get => _cvesWhiteLists ?? (_cvesWhiteLists = new InputList<string>());
            set => _cvesWhiteLists = value;
        }

        /// <summary>
        /// Identifier of the cvss severity.
        /// </summary>
        [Input("cvssSeverity")]
        public Input<string>? CvssSeverity { get; set; }

        /// <summary>
        /// Indicates if the cvss severity is scanned.
        /// </summary>
        [Input("cvssSeverityEnabled")]
        public Input<bool>? CvssSeverityEnabled { get; set; }

        /// <summary>
        /// Indicates that policy should ignore cvss cases that do not have a known fix.
        /// </summary>
        [Input("cvssSeverityExcludeNoFix")]
        public Input<bool>? CvssSeverityExcludeNoFix { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("disallowExploitTypes")]
        private InputList<string>? _disallowExploitTypes;
        public InputList<string> DisallowExploitTypes
        {
            get => _disallowExploitTypes ?? (_disallowExploitTypes = new InputList<string>());
            set => _disallowExploitTypes = value;
        }

        /// <summary>
        /// Indicates if malware should block the image.
        /// </summary>
        [Input("disallowMalware")]
        public Input<bool>? DisallowMalware { get; set; }

        /// <summary>
        /// Checks the host according to the Docker CIS benchmark, if Docker is found on the host.
        /// </summary>
        [Input("dockerCisEnabled")]
        public Input<bool>? DockerCisEnabled { get; set; }

        /// <summary>
        /// Name of the container image.
        /// </summary>
        [Input("domain")]
        public Input<string>? Domain { get; set; }

        [Input("domainName")]
        public Input<string>? DomainName { get; set; }

        [Input("dtaEnabled")]
        public Input<bool>? DtaEnabled { get; set; }

        [Input("dtaSeverity")]
        public Input<string>? DtaSeverity { get; set; }

        /// <summary>
        /// Is the control enabled?
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("enforce")]
        public Input<bool>? Enforce { get; set; }

        [Input("enforceAfterDays")]
        public Input<int>? EnforceAfterDays { get; set; }

        [Input("enforceExcessivePermissions")]
        public Input<bool>? EnforceExcessivePermissions { get; set; }

        [Input("exceptionalMonitoredMalwarePaths")]
        private InputList<string>? _exceptionalMonitoredMalwarePaths;
        public InputList<string> ExceptionalMonitoredMalwarePaths
        {
            get => _exceptionalMonitoredMalwarePaths ?? (_exceptionalMonitoredMalwarePaths = new InputList<string>());
            set => _exceptionalMonitoredMalwarePaths = value;
        }

        [Input("excludeApplicationScopes")]
        private InputList<string>? _excludeApplicationScopes;
        public InputList<string> ExcludeApplicationScopes
        {
            get => _excludeApplicationScopes ?? (_excludeApplicationScopes = new InputList<string>());
            set => _excludeApplicationScopes = value;
        }

        /// <summary>
        /// Indicates if cicd failures will fail the image.
        /// </summary>
        [Input("failCicd")]
        public Input<bool>? FailCicd { get; set; }

        [Input("forbiddenLabels")]
        private InputList<Inputs.KubernetesAssurancePolicyForbiddenLabelArgs>? _forbiddenLabels;
        public InputList<Inputs.KubernetesAssurancePolicyForbiddenLabelArgs> ForbiddenLabels
        {
            get => _forbiddenLabels ?? (_forbiddenLabels = new InputList<Inputs.KubernetesAssurancePolicyForbiddenLabelArgs>());
            set => _forbiddenLabels = value;
        }

        [Input("forbiddenLabelsEnabled")]
        public Input<bool>? ForbiddenLabelsEnabled { get; set; }

        [Input("forceMicroenforcer")]
        public Input<bool>? ForceMicroenforcer { get; set; }

        [Input("functionIntegrityEnabled")]
        public Input<bool>? FunctionIntegrityEnabled { get; set; }

        [Input("ignoreBaseImageVln")]
        public Input<bool>? IgnoreBaseImageVln { get; set; }

        [Input("ignoreRecentlyPublishedVln")]
        public Input<bool>? IgnoreRecentlyPublishedVln { get; set; }

        [Input("ignoreRecentlyPublishedVlnPeriod")]
        public Input<int>? IgnoreRecentlyPublishedVlnPeriod { get; set; }

        /// <summary>
        /// Indicates if risk resources are ignored.
        /// </summary>
        [Input("ignoreRiskResourcesEnabled")]
        public Input<bool>? IgnoreRiskResourcesEnabled { get; set; }

        [Input("ignoredRiskResources")]
        private InputList<string>? _ignoredRiskResources;

        /// <summary>
        /// List of ignored risk resources.
        /// </summary>
        public InputList<string> IgnoredRiskResources
        {
            get => _ignoredRiskResources ?? (_ignoredRiskResources = new InputList<string>());
            set => _ignoredRiskResources = value;
        }

        [Input("ignoredSensitiveResources")]
        private InputList<string>? _ignoredSensitiveResources;
        public InputList<string> IgnoredSensitiveResources
        {
            get => _ignoredSensitiveResources ?? (_ignoredSensitiveResources = new InputList<string>());
            set => _ignoredSensitiveResources = value;
        }

        [Input("images")]
        private InputList<string>? _images;

        /// <summary>
        /// List of images.
        /// </summary>
        public InputList<string> Images
        {
            get => _images ?? (_images = new InputList<string>());
            set => _images = value;
        }

        /// <summary>
        /// Performs a Kubernetes CIS benchmark check for the host.
        /// </summary>
        [Input("kubeCisEnabled")]
        public Input<bool>? KubeCisEnabled { get; set; }

        [Input("kubernetesControls")]
        private InputList<Inputs.KubernetesAssurancePolicyKubernetesControlArgs>? _kubernetesControls;

        /// <summary>
        /// List of Kubernetes controls.
        /// </summary>
        public InputList<Inputs.KubernetesAssurancePolicyKubernetesControlArgs> KubernetesControls
        {
            get => _kubernetesControls ?? (_kubernetesControls = new InputList<Inputs.KubernetesAssurancePolicyKubernetesControlArgs>());
            set => _kubernetesControls = value;
        }

        [Input("kubernetesControlsAvdIds")]
        private InputList<string>? _kubernetesControlsAvdIds;
        public InputList<string> KubernetesControlsAvdIds
        {
            get => _kubernetesControlsAvdIds ?? (_kubernetesControlsAvdIds = new InputList<string>());
            set => _kubernetesControlsAvdIds = value;
        }

        [Input("kubernetesControlsNames")]
        private InputList<string>? _kubernetesControlsNames;

        /// <summary>
        /// List of kubernetes control names and available kubernetes controls are: 'Access to host IPC namespace', 'Access to host PID', 'Access to host network', 'Access to host ports', 'All container images must start with a GCR domain', 'All container images must start with an ECR domain', 'All container images must start with the *.azurecr.io domain', 'CPU not limited', 'CPU requests not specified', 'Can elevate its own privileges', 'ConfigMap with secrets', 'ConfigMap with sensitive content', 'Container images from public registries used', 'Default capabilitiessome containers do not drop all', 'Default capabilitiessome containers do not drop any', 'Delete pod logs', 'Exec into Pods', 'Image tag :latest used', 'Manage EKS IAM Auth ConfigMap', 'Manage Kubernetes RBAC resources', 'Manage Kubernetes networking', 'Manage Kubernetes workloads and pods', 'Manage all resources', 'Manage all resources at the namespace', 'Manage configmaps', 'Manage namespace secrets', 'Manage secrets', 'Manage webhookconfigurations', 'Manages /etc/hosts', 'Memory not limited', 'Memory requests not specified', 'Non-core volume types used.', 'Non-default /proc masks set', 'Privileged', 'Root file system is not read-only', 'Runs as root user', 'Runs with GID &lt;= 10000', 'Runs with UID &lt;= 10000', 'Runs with a root primary or supplementary GID', 'Runtime/Default AppArmor profile not set', 'Runtime/Default Seccomp profile not set', 'SELinux custom options set', 'SYS_ADMIN capability added', 'Seccomp policies disabled', 'Service with External IP', 'Specific capabilities added', 'Unsafe sysctl options set', 'User with admin access', 'Workloads in the default namespace', 'hostPath volume mounted with docker.sock', 'hostPath volumes mounted'
        /// </summary>
        public InputList<string> KubernetesControlsNames
        {
            get => _kubernetesControlsNames ?? (_kubernetesControlsNames = new InputList<string>());
            set => _kubernetesControlsNames = value;
        }

        [Input("labels")]
        private InputList<string>? _labels;

        /// <summary>
        /// List of labels.
        /// </summary>
        public InputList<string> Labels
        {
            get => _labels ?? (_labels = new InputList<string>());
            set => _labels = value;
        }

        [Input("lastupdate")]
        public Input<string>? Lastupdate { get; set; }

        [Input("linuxCisEnabled")]
        public Input<bool>? LinuxCisEnabled { get; set; }

        [Input("malwareAction")]
        public Input<string>? MalwareAction { get; set; }

        /// <summary>
        /// Value of allowed maximum score.
        /// </summary>
        [Input("maximumScore")]
        public Input<double>? MaximumScore { get; set; }

        /// <summary>
        /// Indicates if exceeding the maximum score is scanned.
        /// </summary>
        [Input("maximumScoreEnabled")]
        public Input<bool>? MaximumScoreEnabled { get; set; }

        /// <summary>
        /// Indicates that policy should ignore cases that do not have a known fix.
        /// </summary>
        [Input("maximumScoreExcludeNoFix")]
        public Input<bool>? MaximumScoreExcludeNoFix { get; set; }

        [Input("monitoredMalwarePaths")]
        private InputList<string>? _monitoredMalwarePaths;
        public InputList<string> MonitoredMalwarePaths
        {
            get => _monitoredMalwarePaths ?? (_monitoredMalwarePaths = new InputList<string>());
            set => _monitoredMalwarePaths = value;
        }

        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Indicates if raise a warning for images that should only be run as root.
        /// </summary>
        [Input("onlyNoneRootUsers")]
        public Input<bool>? OnlyNoneRootUsers { get; set; }

        [Input("openshiftHardeningEnabled")]
        public Input<bool>? OpenshiftHardeningEnabled { get; set; }

        /// <summary>
        /// Indicates if packages blacklist is relevant.
        /// </summary>
        [Input("packagesBlackListEnabled")]
        public Input<bool>? PackagesBlackListEnabled { get; set; }

        [Input("packagesBlackLists")]
        private InputList<Inputs.KubernetesAssurancePolicyPackagesBlackListArgs>? _packagesBlackLists;

        /// <summary>
        /// List of blacklisted images.
        /// </summary>
        public InputList<Inputs.KubernetesAssurancePolicyPackagesBlackListArgs> PackagesBlackLists
        {
            get => _packagesBlackLists ?? (_packagesBlackLists = new InputList<Inputs.KubernetesAssurancePolicyPackagesBlackListArgs>());
            set => _packagesBlackLists = value;
        }

        /// <summary>
        /// Indicates if packages whitelist is relevant.
        /// </summary>
        [Input("packagesWhiteListEnabled")]
        public Input<bool>? PackagesWhiteListEnabled { get; set; }

        [Input("packagesWhiteLists")]
        private InputList<Inputs.KubernetesAssurancePolicyPackagesWhiteListArgs>? _packagesWhiteLists;

        /// <summary>
        /// List of whitelisted images.
        /// </summary>
        public InputList<Inputs.KubernetesAssurancePolicyPackagesWhiteListArgs> PackagesWhiteLists
        {
            get => _packagesWhiteLists ?? (_packagesWhiteLists = new InputList<Inputs.KubernetesAssurancePolicyPackagesWhiteListArgs>());
            set => _packagesWhiteLists = value;
        }

        [Input("partialResultsImageFail")]
        public Input<bool>? PartialResultsImageFail { get; set; }

        [Input("permission")]
        public Input<string>? Permission { get; set; }

        [Input("policySettings")]
        public Input<Inputs.KubernetesAssurancePolicyPolicySettingsArgs>? PolicySettings { get; set; }

        [Input("readOnly")]
        public Input<bool>? ReadOnly { get; set; }

        [Input("registries")]
        private InputList<string>? _registries;

        /// <summary>
        /// List of registries.
        /// </summary>
        public InputList<string> Registries
        {
            get => _registries ?? (_registries = new InputList<string>());
            set => _registries = value;
        }

        [Input("registry")]
        public Input<string>? Registry { get; set; }

        [Input("requiredLabels")]
        private InputList<Inputs.KubernetesAssurancePolicyRequiredLabelArgs>? _requiredLabels;
        public InputList<Inputs.KubernetesAssurancePolicyRequiredLabelArgs> RequiredLabels
        {
            get => _requiredLabels ?? (_requiredLabels = new InputList<Inputs.KubernetesAssurancePolicyRequiredLabelArgs>());
            set => _requiredLabels = value;
        }

        [Input("requiredLabelsEnabled")]
        public Input<bool>? RequiredLabelsEnabled { get; set; }

        [Input("scanMalwareInArchives")]
        public Input<bool>? ScanMalwareInArchives { get; set; }

        [Input("scanNfsMounts")]
        public Input<bool>? ScanNfsMounts { get; set; }

        [Input("scanProcessMemory")]
        public Input<bool>? ScanProcessMemory { get; set; }

        /// <summary>
        /// Indicates if scan should include sensitive data in the image.
        /// </summary>
        [Input("scanSensitiveData")]
        public Input<bool>? ScanSensitiveData { get; set; }

        [Input("scanWindowsRegistry")]
        public Input<bool>? ScanWindowsRegistry { get; set; }

        /// <summary>
        /// Indicates if scanning should include scap.
        /// </summary>
        [Input("scapEnabled")]
        public Input<bool>? ScapEnabled { get; set; }

        [Input("scapFiles")]
        private InputList<string>? _scapFiles;

        /// <summary>
        /// List of SCAP user scripts for checks.
        /// </summary>
        public InputList<string> ScapFiles
        {
            get => _scapFiles ?? (_scapFiles = new InputList<string>());
            set => _scapFiles = value;
        }

        [Input("scopes")]
        private InputList<Inputs.KubernetesAssurancePolicyScopeArgs>? _scopes;
        public InputList<Inputs.KubernetesAssurancePolicyScopeArgs> Scopes
        {
            get => _scopes ?? (_scopes = new InputList<Inputs.KubernetesAssurancePolicyScopeArgs>());
            set => _scopes = value;
        }

        [Input("trustedBaseImages")]
        private InputList<Inputs.KubernetesAssurancePolicyTrustedBaseImageArgs>? _trustedBaseImages;

        /// <summary>
        /// List of trusted images.
        /// </summary>
        public InputList<Inputs.KubernetesAssurancePolicyTrustedBaseImageArgs> TrustedBaseImages
        {
            get => _trustedBaseImages ?? (_trustedBaseImages = new InputList<Inputs.KubernetesAssurancePolicyTrustedBaseImageArgs>());
            set => _trustedBaseImages = value;
        }

        /// <summary>
        /// Indicates if list of trusted base images is relevant.
        /// </summary>
        [Input("trustedBaseImagesEnabled")]
        public Input<bool>? TrustedBaseImagesEnabled { get; set; }

        [Input("vulnerabilityExploitability")]
        public Input<bool>? VulnerabilityExploitability { get; set; }

        [Input("vulnerabilityScoreRanges")]
        private InputList<int>? _vulnerabilityScoreRanges;
        public InputList<int> VulnerabilityScoreRanges
        {
            get => _vulnerabilityScoreRanges ?? (_vulnerabilityScoreRanges = new InputList<int>());
            set => _vulnerabilityScoreRanges = value;
        }

        [Input("whitelistedLicenses")]
        private InputList<string>? _whitelistedLicenses;

        /// <summary>
        /// List of whitelisted licenses.
        /// </summary>
        public InputList<string> WhitelistedLicenses
        {
            get => _whitelistedLicenses ?? (_whitelistedLicenses = new InputList<string>());
            set => _whitelistedLicenses = value;
        }

        /// <summary>
        /// Indicates if license blacklist is relevant.
        /// </summary>
        [Input("whitelistedLicensesEnabled")]
        public Input<bool>? WhitelistedLicensesEnabled { get; set; }

        public KubernetesAssurancePolicyArgs()
        {
        }
        public static new KubernetesAssurancePolicyArgs Empty => new KubernetesAssurancePolicyArgs();
    }

    public sealed class KubernetesAssurancePolicyState : global::Pulumi.ResourceArgs
    {
        [Input("aggregatedVulnerability")]
        private InputMap<string>? _aggregatedVulnerability;

        /// <summary>
        /// Aggregated vulnerability information.
        /// </summary>
        public InputMap<string> AggregatedVulnerability
        {
            get => _aggregatedVulnerability ?? (_aggregatedVulnerability = new InputMap<string>());
            set => _aggregatedVulnerability = value;
        }

        [Input("allowedImages")]
        private InputList<string>? _allowedImages;

        /// <summary>
        /// List of explicitly allowed images.
        /// </summary>
        public InputList<string> AllowedImages
        {
            get => _allowedImages ?? (_allowedImages = new InputList<string>());
            set => _allowedImages = value;
        }

        [Input("applicationScopes")]
        private InputList<string>? _applicationScopes;
        public InputList<string> ApplicationScopes
        {
            get => _applicationScopes ?? (_applicationScopes = new InputList<string>());
            set => _applicationScopes = value;
        }

        /// <summary>
        /// What type of assurance policy is described.
        /// </summary>
        [Input("assuranceType")]
        public Input<string>? AssuranceType { get; set; }

        /// <summary>
        /// Indicates if auditing for failures.
        /// </summary>
        [Input("auditOnFailure")]
        public Input<bool>? AuditOnFailure { get; set; }

        /// <summary>
        /// Name of user account that created the policy.
        /// </summary>
        [Input("author")]
        public Input<string>? Author { get; set; }

        [Input("autoScanConfigured")]
        public Input<bool>? AutoScanConfigured { get; set; }

        [Input("autoScanEnabled")]
        public Input<bool>? AutoScanEnabled { get; set; }

        [Input("autoScanTimes")]
        private InputList<Inputs.KubernetesAssurancePolicyAutoScanTimeGetArgs>? _autoScanTimes;
        public InputList<Inputs.KubernetesAssurancePolicyAutoScanTimeGetArgs> AutoScanTimes
        {
            get => _autoScanTimes ?? (_autoScanTimes = new InputList<Inputs.KubernetesAssurancePolicyAutoScanTimeGetArgs>());
            set => _autoScanTimes = value;
        }

        [Input("blacklistPermissions")]
        private InputList<string>? _blacklistPermissions;

        /// <summary>
        /// List of function's forbidden permissions.
        /// </summary>
        public InputList<string> BlacklistPermissions
        {
            get => _blacklistPermissions ?? (_blacklistPermissions = new InputList<string>());
            set => _blacklistPermissions = value;
        }

        /// <summary>
        /// Indicates if blacklist permissions is relevant.
        /// </summary>
        [Input("blacklistPermissionsEnabled")]
        public Input<bool>? BlacklistPermissionsEnabled { get; set; }

        [Input("blacklistedLicenses")]
        private InputList<string>? _blacklistedLicenses;

        /// <summary>
        /// List of blacklisted licenses.
        /// </summary>
        public InputList<string> BlacklistedLicenses
        {
            get => _blacklistedLicenses ?? (_blacklistedLicenses = new InputList<string>());
            set => _blacklistedLicenses = value;
        }

        /// <summary>
        /// Indicates if license blacklist is relevant.
        /// </summary>
        [Input("blacklistedLicensesEnabled")]
        public Input<bool>? BlacklistedLicensesEnabled { get; set; }

        /// <summary>
        /// Indicates if failed images are blocked.
        /// </summary>
        [Input("blockFailed")]
        public Input<bool>? BlockFailed { get; set; }

        [Input("controlExcludeNoFix")]
        public Input<bool>? ControlExcludeNoFix { get; set; }

        [Input("customChecks")]
        private InputList<Inputs.KubernetesAssurancePolicyCustomCheckGetArgs>? _customChecks;

        /// <summary>
        /// List of Custom user scripts for checks.
        /// </summary>
        public InputList<Inputs.KubernetesAssurancePolicyCustomCheckGetArgs> CustomChecks
        {
            get => _customChecks ?? (_customChecks = new InputList<Inputs.KubernetesAssurancePolicyCustomCheckGetArgs>());
            set => _customChecks = value;
        }

        /// <summary>
        /// Indicates if scanning should include custom checks.
        /// </summary>
        [Input("customChecksEnabled")]
        public Input<bool>? CustomChecksEnabled { get; set; }

        [Input("customSeverity")]
        public Input<string>? CustomSeverity { get; set; }

        [Input("customSeverityEnabled")]
        public Input<bool>? CustomSeverityEnabled { get; set; }

        /// <summary>
        /// Indicates if CVEs blacklist is relevant.
        /// </summary>
        [Input("cvesBlackListEnabled")]
        public Input<bool>? CvesBlackListEnabled { get; set; }

        [Input("cvesBlackLists")]
        private InputList<string>? _cvesBlackLists;

        /// <summary>
        /// List of CVEs blacklisted items.
        /// </summary>
        public InputList<string> CvesBlackLists
        {
            get => _cvesBlackLists ?? (_cvesBlackLists = new InputList<string>());
            set => _cvesBlackLists = value;
        }

        /// <summary>
        /// Indicates if CVEs whitelist is relevant.
        /// </summary>
        [Input("cvesWhiteListEnabled")]
        public Input<bool>? CvesWhiteListEnabled { get; set; }

        [Input("cvesWhiteLists")]
        private InputList<string>? _cvesWhiteLists;

        /// <summary>
        /// List of cves whitelisted licenses
        /// </summary>
        public InputList<string> CvesWhiteLists
        {
            get => _cvesWhiteLists ?? (_cvesWhiteLists = new InputList<string>());
            set => _cvesWhiteLists = value;
        }

        /// <summary>
        /// Identifier of the cvss severity.
        /// </summary>
        [Input("cvssSeverity")]
        public Input<string>? CvssSeverity { get; set; }

        /// <summary>
        /// Indicates if the cvss severity is scanned.
        /// </summary>
        [Input("cvssSeverityEnabled")]
        public Input<bool>? CvssSeverityEnabled { get; set; }

        /// <summary>
        /// Indicates that policy should ignore cvss cases that do not have a known fix.
        /// </summary>
        [Input("cvssSeverityExcludeNoFix")]
        public Input<bool>? CvssSeverityExcludeNoFix { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("disallowExploitTypes")]
        private InputList<string>? _disallowExploitTypes;
        public InputList<string> DisallowExploitTypes
        {
            get => _disallowExploitTypes ?? (_disallowExploitTypes = new InputList<string>());
            set => _disallowExploitTypes = value;
        }

        /// <summary>
        /// Indicates if malware should block the image.
        /// </summary>
        [Input("disallowMalware")]
        public Input<bool>? DisallowMalware { get; set; }

        /// <summary>
        /// Checks the host according to the Docker CIS benchmark, if Docker is found on the host.
        /// </summary>
        [Input("dockerCisEnabled")]
        public Input<bool>? DockerCisEnabled { get; set; }

        /// <summary>
        /// Name of the container image.
        /// </summary>
        [Input("domain")]
        public Input<string>? Domain { get; set; }

        [Input("domainName")]
        public Input<string>? DomainName { get; set; }

        [Input("dtaEnabled")]
        public Input<bool>? DtaEnabled { get; set; }

        [Input("dtaSeverity")]
        public Input<string>? DtaSeverity { get; set; }

        /// <summary>
        /// Is the control enabled?
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("enforce")]
        public Input<bool>? Enforce { get; set; }

        [Input("enforceAfterDays")]
        public Input<int>? EnforceAfterDays { get; set; }

        [Input("enforceExcessivePermissions")]
        public Input<bool>? EnforceExcessivePermissions { get; set; }

        [Input("exceptionalMonitoredMalwarePaths")]
        private InputList<string>? _exceptionalMonitoredMalwarePaths;
        public InputList<string> ExceptionalMonitoredMalwarePaths
        {
            get => _exceptionalMonitoredMalwarePaths ?? (_exceptionalMonitoredMalwarePaths = new InputList<string>());
            set => _exceptionalMonitoredMalwarePaths = value;
        }

        [Input("excludeApplicationScopes")]
        private InputList<string>? _excludeApplicationScopes;
        public InputList<string> ExcludeApplicationScopes
        {
            get => _excludeApplicationScopes ?? (_excludeApplicationScopes = new InputList<string>());
            set => _excludeApplicationScopes = value;
        }

        /// <summary>
        /// Indicates if cicd failures will fail the image.
        /// </summary>
        [Input("failCicd")]
        public Input<bool>? FailCicd { get; set; }

        [Input("forbiddenLabels")]
        private InputList<Inputs.KubernetesAssurancePolicyForbiddenLabelGetArgs>? _forbiddenLabels;
        public InputList<Inputs.KubernetesAssurancePolicyForbiddenLabelGetArgs> ForbiddenLabels
        {
            get => _forbiddenLabels ?? (_forbiddenLabels = new InputList<Inputs.KubernetesAssurancePolicyForbiddenLabelGetArgs>());
            set => _forbiddenLabels = value;
        }

        [Input("forbiddenLabelsEnabled")]
        public Input<bool>? ForbiddenLabelsEnabled { get; set; }

        [Input("forceMicroenforcer")]
        public Input<bool>? ForceMicroenforcer { get; set; }

        [Input("functionIntegrityEnabled")]
        public Input<bool>? FunctionIntegrityEnabled { get; set; }

        [Input("ignoreBaseImageVln")]
        public Input<bool>? IgnoreBaseImageVln { get; set; }

        [Input("ignoreRecentlyPublishedVln")]
        public Input<bool>? IgnoreRecentlyPublishedVln { get; set; }

        [Input("ignoreRecentlyPublishedVlnPeriod")]
        public Input<int>? IgnoreRecentlyPublishedVlnPeriod { get; set; }

        /// <summary>
        /// Indicates if risk resources are ignored.
        /// </summary>
        [Input("ignoreRiskResourcesEnabled")]
        public Input<bool>? IgnoreRiskResourcesEnabled { get; set; }

        [Input("ignoredRiskResources")]
        private InputList<string>? _ignoredRiskResources;

        /// <summary>
        /// List of ignored risk resources.
        /// </summary>
        public InputList<string> IgnoredRiskResources
        {
            get => _ignoredRiskResources ?? (_ignoredRiskResources = new InputList<string>());
            set => _ignoredRiskResources = value;
        }

        [Input("ignoredSensitiveResources")]
        private InputList<string>? _ignoredSensitiveResources;
        public InputList<string> IgnoredSensitiveResources
        {
            get => _ignoredSensitiveResources ?? (_ignoredSensitiveResources = new InputList<string>());
            set => _ignoredSensitiveResources = value;
        }

        [Input("images")]
        private InputList<string>? _images;

        /// <summary>
        /// List of images.
        /// </summary>
        public InputList<string> Images
        {
            get => _images ?? (_images = new InputList<string>());
            set => _images = value;
        }

        /// <summary>
        /// Performs a Kubernetes CIS benchmark check for the host.
        /// </summary>
        [Input("kubeCisEnabled")]
        public Input<bool>? KubeCisEnabled { get; set; }

        [Input("kubernetesControls")]
        private InputList<Inputs.KubernetesAssurancePolicyKubernetesControlGetArgs>? _kubernetesControls;

        /// <summary>
        /// List of Kubernetes controls.
        /// </summary>
        public InputList<Inputs.KubernetesAssurancePolicyKubernetesControlGetArgs> KubernetesControls
        {
            get => _kubernetesControls ?? (_kubernetesControls = new InputList<Inputs.KubernetesAssurancePolicyKubernetesControlGetArgs>());
            set => _kubernetesControls = value;
        }

        [Input("kubernetesControlsAvdIds")]
        private InputList<string>? _kubernetesControlsAvdIds;
        public InputList<string> KubernetesControlsAvdIds
        {
            get => _kubernetesControlsAvdIds ?? (_kubernetesControlsAvdIds = new InputList<string>());
            set => _kubernetesControlsAvdIds = value;
        }

        [Input("kubernetesControlsNames")]
        private InputList<string>? _kubernetesControlsNames;

        /// <summary>
        /// List of kubernetes control names and available kubernetes controls are: 'Access to host IPC namespace', 'Access to host PID', 'Access to host network', 'Access to host ports', 'All container images must start with a GCR domain', 'All container images must start with an ECR domain', 'All container images must start with the *.azurecr.io domain', 'CPU not limited', 'CPU requests not specified', 'Can elevate its own privileges', 'ConfigMap with secrets', 'ConfigMap with sensitive content', 'Container images from public registries used', 'Default capabilitiessome containers do not drop all', 'Default capabilitiessome containers do not drop any', 'Delete pod logs', 'Exec into Pods', 'Image tag :latest used', 'Manage EKS IAM Auth ConfigMap', 'Manage Kubernetes RBAC resources', 'Manage Kubernetes networking', 'Manage Kubernetes workloads and pods', 'Manage all resources', 'Manage all resources at the namespace', 'Manage configmaps', 'Manage namespace secrets', 'Manage secrets', 'Manage webhookconfigurations', 'Manages /etc/hosts', 'Memory not limited', 'Memory requests not specified', 'Non-core volume types used.', 'Non-default /proc masks set', 'Privileged', 'Root file system is not read-only', 'Runs as root user', 'Runs with GID &lt;= 10000', 'Runs with UID &lt;= 10000', 'Runs with a root primary or supplementary GID', 'Runtime/Default AppArmor profile not set', 'Runtime/Default Seccomp profile not set', 'SELinux custom options set', 'SYS_ADMIN capability added', 'Seccomp policies disabled', 'Service with External IP', 'Specific capabilities added', 'Unsafe sysctl options set', 'User with admin access', 'Workloads in the default namespace', 'hostPath volume mounted with docker.sock', 'hostPath volumes mounted'
        /// </summary>
        public InputList<string> KubernetesControlsNames
        {
            get => _kubernetesControlsNames ?? (_kubernetesControlsNames = new InputList<string>());
            set => _kubernetesControlsNames = value;
        }

        [Input("labels")]
        private InputList<string>? _labels;

        /// <summary>
        /// List of labels.
        /// </summary>
        public InputList<string> Labels
        {
            get => _labels ?? (_labels = new InputList<string>());
            set => _labels = value;
        }

        [Input("lastupdate")]
        public Input<string>? Lastupdate { get; set; }

        [Input("linuxCisEnabled")]
        public Input<bool>? LinuxCisEnabled { get; set; }

        [Input("malwareAction")]
        public Input<string>? MalwareAction { get; set; }

        /// <summary>
        /// Value of allowed maximum score.
        /// </summary>
        [Input("maximumScore")]
        public Input<double>? MaximumScore { get; set; }

        /// <summary>
        /// Indicates if exceeding the maximum score is scanned.
        /// </summary>
        [Input("maximumScoreEnabled")]
        public Input<bool>? MaximumScoreEnabled { get; set; }

        /// <summary>
        /// Indicates that policy should ignore cases that do not have a known fix.
        /// </summary>
        [Input("maximumScoreExcludeNoFix")]
        public Input<bool>? MaximumScoreExcludeNoFix { get; set; }

        [Input("monitoredMalwarePaths")]
        private InputList<string>? _monitoredMalwarePaths;
        public InputList<string> MonitoredMalwarePaths
        {
            get => _monitoredMalwarePaths ?? (_monitoredMalwarePaths = new InputList<string>());
            set => _monitoredMalwarePaths = value;
        }

        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Indicates if raise a warning for images that should only be run as root.
        /// </summary>
        [Input("onlyNoneRootUsers")]
        public Input<bool>? OnlyNoneRootUsers { get; set; }

        [Input("openshiftHardeningEnabled")]
        public Input<bool>? OpenshiftHardeningEnabled { get; set; }

        /// <summary>
        /// Indicates if packages blacklist is relevant.
        /// </summary>
        [Input("packagesBlackListEnabled")]
        public Input<bool>? PackagesBlackListEnabled { get; set; }

        [Input("packagesBlackLists")]
        private InputList<Inputs.KubernetesAssurancePolicyPackagesBlackListGetArgs>? _packagesBlackLists;

        /// <summary>
        /// List of blacklisted images.
        /// </summary>
        public InputList<Inputs.KubernetesAssurancePolicyPackagesBlackListGetArgs> PackagesBlackLists
        {
            get => _packagesBlackLists ?? (_packagesBlackLists = new InputList<Inputs.KubernetesAssurancePolicyPackagesBlackListGetArgs>());
            set => _packagesBlackLists = value;
        }

        /// <summary>
        /// Indicates if packages whitelist is relevant.
        /// </summary>
        [Input("packagesWhiteListEnabled")]
        public Input<bool>? PackagesWhiteListEnabled { get; set; }

        [Input("packagesWhiteLists")]
        private InputList<Inputs.KubernetesAssurancePolicyPackagesWhiteListGetArgs>? _packagesWhiteLists;

        /// <summary>
        /// List of whitelisted images.
        /// </summary>
        public InputList<Inputs.KubernetesAssurancePolicyPackagesWhiteListGetArgs> PackagesWhiteLists
        {
            get => _packagesWhiteLists ?? (_packagesWhiteLists = new InputList<Inputs.KubernetesAssurancePolicyPackagesWhiteListGetArgs>());
            set => _packagesWhiteLists = value;
        }

        [Input("partialResultsImageFail")]
        public Input<bool>? PartialResultsImageFail { get; set; }

        [Input("permission")]
        public Input<string>? Permission { get; set; }

        [Input("policySettings")]
        public Input<Inputs.KubernetesAssurancePolicyPolicySettingsGetArgs>? PolicySettings { get; set; }

        [Input("readOnly")]
        public Input<bool>? ReadOnly { get; set; }

        [Input("registries")]
        private InputList<string>? _registries;

        /// <summary>
        /// List of registries.
        /// </summary>
        public InputList<string> Registries
        {
            get => _registries ?? (_registries = new InputList<string>());
            set => _registries = value;
        }

        [Input("registry")]
        public Input<string>? Registry { get; set; }

        [Input("requiredLabels")]
        private InputList<Inputs.KubernetesAssurancePolicyRequiredLabelGetArgs>? _requiredLabels;
        public InputList<Inputs.KubernetesAssurancePolicyRequiredLabelGetArgs> RequiredLabels
        {
            get => _requiredLabels ?? (_requiredLabels = new InputList<Inputs.KubernetesAssurancePolicyRequiredLabelGetArgs>());
            set => _requiredLabels = value;
        }

        [Input("requiredLabelsEnabled")]
        public Input<bool>? RequiredLabelsEnabled { get; set; }

        [Input("scanMalwareInArchives")]
        public Input<bool>? ScanMalwareInArchives { get; set; }

        [Input("scanNfsMounts")]
        public Input<bool>? ScanNfsMounts { get; set; }

        [Input("scanProcessMemory")]
        public Input<bool>? ScanProcessMemory { get; set; }

        /// <summary>
        /// Indicates if scan should include sensitive data in the image.
        /// </summary>
        [Input("scanSensitiveData")]
        public Input<bool>? ScanSensitiveData { get; set; }

        [Input("scanWindowsRegistry")]
        public Input<bool>? ScanWindowsRegistry { get; set; }

        /// <summary>
        /// Indicates if scanning should include scap.
        /// </summary>
        [Input("scapEnabled")]
        public Input<bool>? ScapEnabled { get; set; }

        [Input("scapFiles")]
        private InputList<string>? _scapFiles;

        /// <summary>
        /// List of SCAP user scripts for checks.
        /// </summary>
        public InputList<string> ScapFiles
        {
            get => _scapFiles ?? (_scapFiles = new InputList<string>());
            set => _scapFiles = value;
        }

        [Input("scopes")]
        private InputList<Inputs.KubernetesAssurancePolicyScopeGetArgs>? _scopes;
        public InputList<Inputs.KubernetesAssurancePolicyScopeGetArgs> Scopes
        {
            get => _scopes ?? (_scopes = new InputList<Inputs.KubernetesAssurancePolicyScopeGetArgs>());
            set => _scopes = value;
        }

        [Input("trustedBaseImages")]
        private InputList<Inputs.KubernetesAssurancePolicyTrustedBaseImageGetArgs>? _trustedBaseImages;

        /// <summary>
        /// List of trusted images.
        /// </summary>
        public InputList<Inputs.KubernetesAssurancePolicyTrustedBaseImageGetArgs> TrustedBaseImages
        {
            get => _trustedBaseImages ?? (_trustedBaseImages = new InputList<Inputs.KubernetesAssurancePolicyTrustedBaseImageGetArgs>());
            set => _trustedBaseImages = value;
        }

        /// <summary>
        /// Indicates if list of trusted base images is relevant.
        /// </summary>
        [Input("trustedBaseImagesEnabled")]
        public Input<bool>? TrustedBaseImagesEnabled { get; set; }

        [Input("vulnerabilityExploitability")]
        public Input<bool>? VulnerabilityExploitability { get; set; }

        [Input("vulnerabilityScoreRanges")]
        private InputList<int>? _vulnerabilityScoreRanges;
        public InputList<int> VulnerabilityScoreRanges
        {
            get => _vulnerabilityScoreRanges ?? (_vulnerabilityScoreRanges = new InputList<int>());
            set => _vulnerabilityScoreRanges = value;
        }

        [Input("whitelistedLicenses")]
        private InputList<string>? _whitelistedLicenses;

        /// <summary>
        /// List of whitelisted licenses.
        /// </summary>
        public InputList<string> WhitelistedLicenses
        {
            get => _whitelistedLicenses ?? (_whitelistedLicenses = new InputList<string>());
            set => _whitelistedLicenses = value;
        }

        /// <summary>
        /// Indicates if license blacklist is relevant.
        /// </summary>
        [Input("whitelistedLicensesEnabled")]
        public Input<bool>? WhitelistedLicensesEnabled { get; set; }

        public KubernetesAssurancePolicyState()
        {
        }
        public static new KubernetesAssurancePolicyState Empty => new KubernetesAssurancePolicyState();
    }
}
