// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Aquasec
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aquasec = Pulumiverse.Aquasec;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var roleMappingRoleMapping = new Aquasec.RoleMapping("roleMappingRoleMapping", new()
    ///     {
    ///         Saml = new Aquasec.Inputs.RoleMappingSamlArgs
    ///         {
    ///             RoleMapping = 
    ///             {
    ///                 { "Administrator", "group1" },
    ///                 { "Scanner", "group2|group3" },
    ///             },
    ///         },
    ///     });
    /// 
    ///     return new Dictionary&lt;string, object?&gt;
    ///     {
    ///         ["roleMapping"] = roleMappingRoleMapping,
    ///     };
    /// });
    /// ```
    /// </summary>
    [AquasecResourceType("aquasec:index/roleMapping:RoleMapping")]
    public partial class RoleMapping : global::Pulumi.CustomResource
    {
        /// <summary>
        /// LDAP Authentication
        /// </summary>
        [Output("ldap")]
        public Output<Outputs.RoleMappingLdap?> Ldap { get; private set; } = null!;

        /// <summary>
        /// Oauth2 Authentication
        /// </summary>
        [Output("oauth2")]
        public Output<Outputs.RoleMappingOauth2?> Oauth2 { get; private set; } = null!;

        /// <summary>
        /// OpenId Authentication
        /// </summary>
        [Output("openid")]
        public Output<Outputs.RoleMappingOpenid?> Openid { get; private set; } = null!;

        /// <summary>
        /// SAML Authentication
        /// </summary>
        [Output("saml")]
        public Output<Outputs.RoleMappingSaml?> Saml { get; private set; } = null!;


        /// <summary>
        /// Create a RoleMapping resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RoleMapping(string name, RoleMappingArgs? args = null, CustomResourceOptions? options = null)
            : base("aquasec:index/roleMapping:RoleMapping", name, args ?? new RoleMappingArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RoleMapping(string name, Input<string> id, RoleMappingState? state = null, CustomResourceOptions? options = null)
            : base("aquasec:index/roleMapping:RoleMapping", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse/pulumi-aquasec",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RoleMapping resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RoleMapping Get(string name, Input<string> id, RoleMappingState? state = null, CustomResourceOptions? options = null)
        {
            return new RoleMapping(name, id, state, options);
        }
    }

    public sealed class RoleMappingArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// LDAP Authentication
        /// </summary>
        [Input("ldap")]
        public Input<Inputs.RoleMappingLdapArgs>? Ldap { get; set; }

        /// <summary>
        /// Oauth2 Authentication
        /// </summary>
        [Input("oauth2")]
        public Input<Inputs.RoleMappingOauth2Args>? Oauth2 { get; set; }

        /// <summary>
        /// OpenId Authentication
        /// </summary>
        [Input("openid")]
        public Input<Inputs.RoleMappingOpenidArgs>? Openid { get; set; }

        /// <summary>
        /// SAML Authentication
        /// </summary>
        [Input("saml")]
        public Input<Inputs.RoleMappingSamlArgs>? Saml { get; set; }

        public RoleMappingArgs()
        {
        }
        public static new RoleMappingArgs Empty => new RoleMappingArgs();
    }

    public sealed class RoleMappingState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// LDAP Authentication
        /// </summary>
        [Input("ldap")]
        public Input<Inputs.RoleMappingLdapGetArgs>? Ldap { get; set; }

        /// <summary>
        /// Oauth2 Authentication
        /// </summary>
        [Input("oauth2")]
        public Input<Inputs.RoleMappingOauth2GetArgs>? Oauth2 { get; set; }

        /// <summary>
        /// OpenId Authentication
        /// </summary>
        [Input("openid")]
        public Input<Inputs.RoleMappingOpenidGetArgs>? Openid { get; set; }

        /// <summary>
        /// SAML Authentication
        /// </summary>
        [Input("saml")]
        public Input<Inputs.RoleMappingSamlGetArgs>? Saml { get; set; }

        public RoleMappingState()
        {
        }
        public static new RoleMappingState Empty => new RoleMappingState();
    }
}
