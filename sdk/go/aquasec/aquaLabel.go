// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aquasec

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"github.com/pulumiverse/pulumi-aquasec/sdk/go/aquasec/internal"
)

type AquaLabel struct {
	pulumi.CustomResourceState

	// The name of the user who created the Aqua label.
	Author pulumi.StringOutput `pulumi:"author"`
	// The creation date of the Aqua label.
	Created pulumi.StringOutput `pulumi:"created"`
	// Aqua label description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Aqua label name.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewAquaLabel registers a new resource with the given unique name, arguments, and options.
func NewAquaLabel(ctx *pulumi.Context,
	name string, args *AquaLabelArgs, opts ...pulumi.ResourceOption) (*AquaLabel, error) {
	if args == nil {
		args = &AquaLabelArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AquaLabel
	err := ctx.RegisterResource("aquasec:index/aquaLabel:AquaLabel", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAquaLabel gets an existing AquaLabel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAquaLabel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AquaLabelState, opts ...pulumi.ResourceOption) (*AquaLabel, error) {
	var resource AquaLabel
	err := ctx.ReadResource("aquasec:index/aquaLabel:AquaLabel", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AquaLabel resources.
type aquaLabelState struct {
	// The name of the user who created the Aqua label.
	Author *string `pulumi:"author"`
	// The creation date of the Aqua label.
	Created *string `pulumi:"created"`
	// Aqua label description.
	Description *string `pulumi:"description"`
	// Aqua label name.
	Name *string `pulumi:"name"`
}

type AquaLabelState struct {
	// The name of the user who created the Aqua label.
	Author pulumi.StringPtrInput
	// The creation date of the Aqua label.
	Created pulumi.StringPtrInput
	// Aqua label description.
	Description pulumi.StringPtrInput
	// Aqua label name.
	Name pulumi.StringPtrInput
}

func (AquaLabelState) ElementType() reflect.Type {
	return reflect.TypeOf((*aquaLabelState)(nil)).Elem()
}

type aquaLabelArgs struct {
	// Aqua label description.
	Description *string `pulumi:"description"`
	// Aqua label name.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a AquaLabel resource.
type AquaLabelArgs struct {
	// Aqua label description.
	Description pulumi.StringPtrInput
	// Aqua label name.
	Name pulumi.StringPtrInput
}

func (AquaLabelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aquaLabelArgs)(nil)).Elem()
}

type AquaLabelInput interface {
	pulumi.Input

	ToAquaLabelOutput() AquaLabelOutput
	ToAquaLabelOutputWithContext(ctx context.Context) AquaLabelOutput
}

func (*AquaLabel) ElementType() reflect.Type {
	return reflect.TypeOf((**AquaLabel)(nil)).Elem()
}

func (i *AquaLabel) ToAquaLabelOutput() AquaLabelOutput {
	return i.ToAquaLabelOutputWithContext(context.Background())
}

func (i *AquaLabel) ToAquaLabelOutputWithContext(ctx context.Context) AquaLabelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AquaLabelOutput)
}

func (i *AquaLabel) ToOutput(ctx context.Context) pulumix.Output[*AquaLabel] {
	return pulumix.Output[*AquaLabel]{
		OutputState: i.ToAquaLabelOutputWithContext(ctx).OutputState,
	}
}

// AquaLabelArrayInput is an input type that accepts AquaLabelArray and AquaLabelArrayOutput values.
// You can construct a concrete instance of `AquaLabelArrayInput` via:
//
//	AquaLabelArray{ AquaLabelArgs{...} }
type AquaLabelArrayInput interface {
	pulumi.Input

	ToAquaLabelArrayOutput() AquaLabelArrayOutput
	ToAquaLabelArrayOutputWithContext(context.Context) AquaLabelArrayOutput
}

type AquaLabelArray []AquaLabelInput

func (AquaLabelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AquaLabel)(nil)).Elem()
}

func (i AquaLabelArray) ToAquaLabelArrayOutput() AquaLabelArrayOutput {
	return i.ToAquaLabelArrayOutputWithContext(context.Background())
}

func (i AquaLabelArray) ToAquaLabelArrayOutputWithContext(ctx context.Context) AquaLabelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AquaLabelArrayOutput)
}

func (i AquaLabelArray) ToOutput(ctx context.Context) pulumix.Output[[]*AquaLabel] {
	return pulumix.Output[[]*AquaLabel]{
		OutputState: i.ToAquaLabelArrayOutputWithContext(ctx).OutputState,
	}
}

// AquaLabelMapInput is an input type that accepts AquaLabelMap and AquaLabelMapOutput values.
// You can construct a concrete instance of `AquaLabelMapInput` via:
//
//	AquaLabelMap{ "key": AquaLabelArgs{...} }
type AquaLabelMapInput interface {
	pulumi.Input

	ToAquaLabelMapOutput() AquaLabelMapOutput
	ToAquaLabelMapOutputWithContext(context.Context) AquaLabelMapOutput
}

type AquaLabelMap map[string]AquaLabelInput

func (AquaLabelMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AquaLabel)(nil)).Elem()
}

func (i AquaLabelMap) ToAquaLabelMapOutput() AquaLabelMapOutput {
	return i.ToAquaLabelMapOutputWithContext(context.Background())
}

func (i AquaLabelMap) ToAquaLabelMapOutputWithContext(ctx context.Context) AquaLabelMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AquaLabelMapOutput)
}

func (i AquaLabelMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*AquaLabel] {
	return pulumix.Output[map[string]*AquaLabel]{
		OutputState: i.ToAquaLabelMapOutputWithContext(ctx).OutputState,
	}
}

type AquaLabelOutput struct{ *pulumi.OutputState }

func (AquaLabelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AquaLabel)(nil)).Elem()
}

func (o AquaLabelOutput) ToAquaLabelOutput() AquaLabelOutput {
	return o
}

func (o AquaLabelOutput) ToAquaLabelOutputWithContext(ctx context.Context) AquaLabelOutput {
	return o
}

func (o AquaLabelOutput) ToOutput(ctx context.Context) pulumix.Output[*AquaLabel] {
	return pulumix.Output[*AquaLabel]{
		OutputState: o.OutputState,
	}
}

// The name of the user who created the Aqua label.
func (o AquaLabelOutput) Author() pulumi.StringOutput {
	return o.ApplyT(func(v *AquaLabel) pulumi.StringOutput { return v.Author }).(pulumi.StringOutput)
}

// The creation date of the Aqua label.
func (o AquaLabelOutput) Created() pulumi.StringOutput {
	return o.ApplyT(func(v *AquaLabel) pulumi.StringOutput { return v.Created }).(pulumi.StringOutput)
}

// Aqua label description.
func (o AquaLabelOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AquaLabel) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Aqua label name.
func (o AquaLabelOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AquaLabel) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type AquaLabelArrayOutput struct{ *pulumi.OutputState }

func (AquaLabelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AquaLabel)(nil)).Elem()
}

func (o AquaLabelArrayOutput) ToAquaLabelArrayOutput() AquaLabelArrayOutput {
	return o
}

func (o AquaLabelArrayOutput) ToAquaLabelArrayOutputWithContext(ctx context.Context) AquaLabelArrayOutput {
	return o
}

func (o AquaLabelArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*AquaLabel] {
	return pulumix.Output[[]*AquaLabel]{
		OutputState: o.OutputState,
	}
}

func (o AquaLabelArrayOutput) Index(i pulumi.IntInput) AquaLabelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AquaLabel {
		return vs[0].([]*AquaLabel)[vs[1].(int)]
	}).(AquaLabelOutput)
}

type AquaLabelMapOutput struct{ *pulumi.OutputState }

func (AquaLabelMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AquaLabel)(nil)).Elem()
}

func (o AquaLabelMapOutput) ToAquaLabelMapOutput() AquaLabelMapOutput {
	return o
}

func (o AquaLabelMapOutput) ToAquaLabelMapOutputWithContext(ctx context.Context) AquaLabelMapOutput {
	return o
}

func (o AquaLabelMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*AquaLabel] {
	return pulumix.Output[map[string]*AquaLabel]{
		OutputState: o.OutputState,
	}
}

func (o AquaLabelMapOutput) MapIndex(k pulumi.StringInput) AquaLabelOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AquaLabel {
		return vs[0].(map[string]*AquaLabel)[vs[1].(string)]
	}).(AquaLabelOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AquaLabelInput)(nil)).Elem(), &AquaLabel{})
	pulumi.RegisterInputType(reflect.TypeOf((*AquaLabelArrayInput)(nil)).Elem(), AquaLabelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AquaLabelMapInput)(nil)).Elem(), AquaLabelMap{})
	pulumi.RegisterOutputType(AquaLabelOutput{})
	pulumi.RegisterOutputType(AquaLabelArrayOutput{})
	pulumi.RegisterOutputType(AquaLabelMapOutput{})
}
