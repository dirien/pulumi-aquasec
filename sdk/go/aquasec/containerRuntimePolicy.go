// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aquasec

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"github.com/pulumiverse/pulumi-aquasec/sdk/go/aquasec/internal"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-aquasec/sdk/go/aquasec"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := aquasec.NewContainerRuntimePolicy(ctx, "containerRuntimePolicy", &aquasec.ContainerRuntimePolicyArgs{
//				AllowedExecutables: pulumi.StringArray{
//					pulumi.String("exe"),
//					pulumi.String("bin"),
//				},
//				AllowedRegistries: pulumi.StringArray{
//					pulumi.String("registry1"),
//					pulumi.String("registry2"),
//				},
//				ApplicationScopes: pulumi.StringArray{
//					pulumi.String("Global"),
//				},
//				AuditAllNetworkActivity:    pulumi.Bool(true),
//				AuditAllProcessesActivity:  pulumi.Bool(true),
//				AuditFullCommandArguments:  pulumi.Bool(true),
//				BlockAccessHostNetwork:     pulumi.Bool(true),
//				BlockAddingCapabilities:    pulumi.Bool(true),
//				BlockContainerExec:         pulumi.Bool(true),
//				BlockCryptocurrencyMining:  pulumi.Bool(true),
//				BlockFilelessExec:          pulumi.Bool(true),
//				BlockLowPortBinding:        pulumi.Bool(true),
//				BlockNonCompliantImages:    pulumi.Bool(true),
//				BlockNonCompliantWorkloads: pulumi.Bool(true),
//				BlockNonK8sContainers:      pulumi.Bool(true),
//				BlockPrivilegedContainers:  pulumi.Bool(true),
//				BlockReverseShell:          pulumi.Bool(true),
//				BlockRootUser:              pulumi.Bool(true),
//				BlockUnregisteredImages:    pulumi.Bool(true),
//				BlockUseIpcNamespace:       pulumi.Bool(true),
//				BlockUsePidNamespace:       pulumi.Bool(true),
//				BlockUseUserNamespace:      pulumi.Bool(true),
//				BlockUseUtsNamespace:       pulumi.Bool(true),
//				BlockedCapabilities: pulumi.StringArray{
//					pulumi.String("AUDIT_CONTROL"),
//					pulumi.String("AUDIT_WRITE"),
//				},
//				BlockedExecutables: pulumi.StringArray{
//					pulumi.String("exe1"),
//					pulumi.String("exe2"),
//				},
//				BlockedFiles: pulumi.StringArray{
//					pulumi.String("test1"),
//					pulumi.String("test2"),
//				},
//				BlockedInboundPorts: pulumi.StringArray{
//					pulumi.String("80"),
//					pulumi.String("8080"),
//				},
//				BlockedOutboundPorts: pulumi.StringArray{
//					pulumi.String("90"),
//					pulumi.String("9090"),
//				},
//				BlockedPackages: pulumi.StringArray{
//					pulumi.String("pkg"),
//					pulumi.String("pkg2"),
//				},
//				BlockedVolumes: pulumi.StringArray{
//					pulumi.String("blocked"),
//					pulumi.String("vol"),
//				},
//				ContainerExecAllowedProcesses: pulumi.StringArray{
//					pulumi.String("proc1"),
//					pulumi.String("proc2"),
//				},
//				Description:                pulumi.String("container_runtime_policy"),
//				EnableDriftPrevention:      pulumi.Bool(true),
//				EnableForkGuard:            pulumi.Bool(true),
//				EnableIpReputationSecurity: pulumi.Bool(true),
//				EnablePortScanDetection:    pulumi.Bool(true),
//				Enabled:                    pulumi.Bool(true),
//				Enforce:                    pulumi.Bool(false),
//				ExceptionalReadonlyFilesAndDirectories: pulumi.StringArray{
//					pulumi.String("readonly2"),
//					pulumi.String("/dir2/"),
//				},
//				FileIntegrityMonitoring: &aquasec.ContainerRuntimePolicyFileIntegrityMonitoringArgs{
//					ExcludedPaths: pulumi.StringArray{
//						pulumi.String("expaths"),
//					},
//					ExcludedProcesses: pulumi.StringArray{
//						pulumi.String("exprocess"),
//					},
//					ExcludedUsers: pulumi.StringArray{
//						pulumi.String("expuser"),
//					},
//					MonitorAttributes: pulumi.Bool(true),
//					MonitorCreate:     pulumi.Bool(true),
//					MonitorDelete:     pulumi.Bool(true),
//					MonitorModify:     pulumi.Bool(true),
//					MonitorRead:       pulumi.Bool(true),
//					MonitoredPaths: pulumi.StringArray{
//						pulumi.String("paths"),
//					},
//					MonitoredProcesses: pulumi.StringArray{
//						pulumi.String("process"),
//					},
//					MonitoredUsers: pulumi.StringArray{
//						pulumi.String("user"),
//					},
//				},
//				ForkGuardProcessLimit: pulumi.Int(13),
//				LimitNewPrivileges:    pulumi.Bool(true),
//				MalwareScanOptions: &aquasec.ContainerRuntimePolicyMalwareScanOptionsArgs{
//					Action:  pulumi.String("alert"),
//					Enabled: pulumi.Bool(true),
//				},
//				MonitorSystemTimeChanges: pulumi.Bool(true),
//				ReadonlyFilesAndDirectories: pulumi.StringArray{
//					pulumi.String("readonly"),
//					pulumi.String("/dir/"),
//				},
//				ReverseShellAllowedIps: pulumi.StringArray{
//					pulumi.String("ip1"),
//					pulumi.String("ip2"),
//				},
//				ReverseShellAllowedProcesses: pulumi.StringArray{
//					pulumi.String("proc1"),
//					pulumi.String("proc2"),
//				},
//				ScopeExpression: pulumi.String("v1 || v2"),
//				ScopeVariables: aquasec.ContainerRuntimePolicyScopeVariableArray{
//					&aquasec.ContainerRuntimePolicyScopeVariableArgs{
//						Attribute: pulumi.String("kubernetes.cluster"),
//						Value:     pulumi.String("default"),
//					},
//					&aquasec.ContainerRuntimePolicyScopeVariableArgs{
//						Attribute: pulumi.String("kubernetes.label"),
//						Name:      pulumi.String("app"),
//						Value:     pulumi.String("aqua"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type ContainerRuntimePolicy struct {
	pulumi.CustomResourceState

	// List of executables that are allowed for the user.
	AllowedExecutables pulumi.StringArrayOutput `pulumi:"allowedExecutables"`
	// List of registries that allowed for running containers.
	AllowedRegistries pulumi.StringArrayOutput `pulumi:"allowedRegistries"`
	// Indicates the application scope of the service.
	ApplicationScopes pulumi.StringArrayOutput `pulumi:"applicationScopes"`
	// If true, all network activity will be audited.
	AuditAllNetworkActivity pulumi.BoolPtrOutput `pulumi:"auditAllNetworkActivity"`
	// If true, all process activity will be audited.
	AuditAllProcessesActivity pulumi.BoolPtrOutput `pulumi:"auditAllProcessesActivity"`
	// If true, full command arguments will be audited.
	AuditFullCommandArguments pulumi.BoolPtrOutput `pulumi:"auditFullCommandArguments"`
	// Username of the account that created the service.
	Author pulumi.StringOutput `pulumi:"author"`
	// If true, prevent containers from running with access to host network.
	BlockAccessHostNetwork pulumi.BoolPtrOutput `pulumi:"blockAccessHostNetwork"`
	// If true, prevent containers from running with adding capabilities with `--cap-add` privilege.
	BlockAddingCapabilities pulumi.BoolPtrOutput `pulumi:"blockAddingCapabilities"`
	// If true, exec into a container is prevented.
	BlockContainerExec pulumi.BoolPtrOutput `pulumi:"blockContainerExec"`
	// Detect and prevent communication to DNS/IP addresses known to be used for Cryptocurrency Mining
	BlockCryptocurrencyMining pulumi.BoolPtrOutput `pulumi:"blockCryptocurrencyMining"`
	// Detect and prevent running in-memory execution
	BlockFilelessExec pulumi.BoolPtrOutput `pulumi:"blockFilelessExec"`
	// If true, prevent containers from running with the capability to bind in port lower than 1024.
	BlockLowPortBinding pulumi.BoolPtrOutput `pulumi:"blockLowPortBinding"`
	// If true, running non-compliant image in the container is prevented.
	BlockNonCompliantImages pulumi.BoolPtrOutput `pulumi:"blockNonCompliantImages"`
	// If true, running containers in non-compliant pods is prevented.
	BlockNonCompliantWorkloads pulumi.BoolPtrOutput `pulumi:"blockNonCompliantWorkloads"`
	// If true, running non-kubernetes containers is prevented.
	BlockNonK8sContainers pulumi.BoolPtrOutput `pulumi:"blockNonK8sContainers"`
	// If true, prevent containers from running with privileged container capability.
	BlockPrivilegedContainers pulumi.BoolPtrOutput `pulumi:"blockPrivilegedContainers"`
	// If true, reverse shell is prevented.
	BlockReverseShell pulumi.BoolPtrOutput `pulumi:"blockReverseShell"`
	// If true, prevent containers from running with root user.
	BlockRootUser pulumi.BoolPtrOutput `pulumi:"blockRootUser"`
	// If true, running images in the container that are not registered in Aqua is prevented.
	BlockUnregisteredImages pulumi.BoolPtrOutput `pulumi:"blockUnregisteredImages"`
	// If true, prevent containers from running with the privilege to use the IPC namespace.
	BlockUseIpcNamespace pulumi.BoolPtrOutput `pulumi:"blockUseIpcNamespace"`
	// If true, prevent containers from running with the privilege to use the PID namespace.
	BlockUsePidNamespace pulumi.BoolPtrOutput `pulumi:"blockUsePidNamespace"`
	// If true, prevent containers from running with the privilege to use the user namespace.
	BlockUseUserNamespace pulumi.BoolPtrOutput `pulumi:"blockUseUserNamespace"`
	// If true, prevent containers from running with the privilege to use the UTS namespace.
	BlockUseUtsNamespace pulumi.BoolPtrOutput `pulumi:"blockUseUtsNamespace"`
	// If true, prevents containers from using specific Unix capabilities.
	BlockedCapabilities pulumi.StringArrayOutput `pulumi:"blockedCapabilities"`
	// List of executables that are prevented from running in containers.
	BlockedExecutables pulumi.StringArrayOutput `pulumi:"blockedExecutables"`
	// List of files that are prevented from being read, modified and executed in the containers.
	BlockedFiles pulumi.StringArrayOutput `pulumi:"blockedFiles"`
	// List of blocked inbound ports.
	BlockedInboundPorts pulumi.StringArrayOutput `pulumi:"blockedInboundPorts"`
	// List of blocked outbound ports.
	BlockedOutboundPorts pulumi.StringArrayOutput `pulumi:"blockedOutboundPorts"`
	// Prevent containers from reading, writing, or executing all files in the list of packages.
	BlockedPackages pulumi.StringArrayOutput `pulumi:"blockedPackages"`
	// List of volumes that are prevented from being mounted in the containers.
	BlockedVolumes pulumi.StringArrayOutput `pulumi:"blockedVolumes"`
	// List of processes that will be allowed.
	ContainerExecAllowedProcesses pulumi.StringArrayOutput `pulumi:"containerExecAllowedProcesses"`
	// The description of the container runtime policy
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// If true, executables that are not in the original image is prevented from running.
	EnableDriftPrevention pulumi.BoolPtrOutput `pulumi:"enableDriftPrevention"`
	// If true, fork bombs are prevented in the containers.
	EnableForkGuard pulumi.BoolPtrOutput `pulumi:"enableForkGuard"`
	// If true, detect and prevent communication from containers to IP addresses known to have a bad reputation.
	EnableIpReputationSecurity pulumi.BoolPtrOutput `pulumi:"enableIpReputationSecurity"`
	// If true, detects port scanning behavior in the container.
	EnablePortScanDetection pulumi.BoolPtrOutput `pulumi:"enablePortScanDetection"`
	// Indicates if the runtime policy is enabled or not.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Indicates that policy should effect container execution (not just for audit).
	Enforce pulumi.BoolPtrOutput `pulumi:"enforce"`
	// Indicates the number of days after which the runtime policy will be changed to enforce mode.
	EnforceAfterDays pulumi.IntPtrOutput `pulumi:"enforceAfterDays"`
	// List of files and directories to be excluded from the read-only list.
	ExceptionalReadonlyFilesAndDirectories pulumi.StringArrayOutput `pulumi:"exceptionalReadonlyFilesAndDirectories"`
	// Specify processes that will be allowed
	ExecLockdownWhiteLists pulumi.StringArrayOutput `pulumi:"execLockdownWhiteLists"`
	// Configuration for file integrity monitoring.
	FileIntegrityMonitoring ContainerRuntimePolicyFileIntegrityMonitoringPtrOutput `pulumi:"fileIntegrityMonitoring"`
	// Process limit for the fork guard.
	ForkGuardProcessLimit pulumi.IntPtrOutput `pulumi:"forkGuardProcessLimit"`
	// If true, prevents the container from obtaining new privileges at runtime. (only enabled in enforce mode)
	LimitNewPrivileges pulumi.BoolPtrOutput `pulumi:"limitNewPrivileges"`
	// Configuration for Real-Time Malware Protection.
	MalwareScanOptions ContainerRuntimePolicyMalwareScanOptionsPtrOutput `pulumi:"malwareScanOptions"`
	// If true, system time changes will be monitored.
	MonitorSystemTimeChanges pulumi.BoolPtrOutput `pulumi:"monitorSystemTimeChanges"`
	// Name of the container runtime policy
	Name pulumi.StringOutput `pulumi:"name"`
	// List of files and directories to be restricted as read-only
	ReadonlyFilesAndDirectories pulumi.StringArrayOutput `pulumi:"readonlyFilesAndDirectories"`
	// List of IPs/ CIDRs that will be allowed
	ReverseShellAllowedIps pulumi.StringArrayOutput `pulumi:"reverseShellAllowedIps"`
	// List of processes that will be allowed
	ReverseShellAllowedProcesses pulumi.StringArrayOutput `pulumi:"reverseShellAllowedProcesses"`
	// Logical expression of how to compute the dependency of the scope variables.
	ScopeExpression pulumi.StringOutput `pulumi:"scopeExpression"`
	// List of scope attributes.
	ScopeVariables ContainerRuntimePolicyScopeVariableArrayOutput `pulumi:"scopeVariables"`
}

// NewContainerRuntimePolicy registers a new resource with the given unique name, arguments, and options.
func NewContainerRuntimePolicy(ctx *pulumi.Context,
	name string, args *ContainerRuntimePolicyArgs, opts ...pulumi.ResourceOption) (*ContainerRuntimePolicy, error) {
	if args == nil {
		args = &ContainerRuntimePolicyArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ContainerRuntimePolicy
	err := ctx.RegisterResource("aquasec:index/containerRuntimePolicy:ContainerRuntimePolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetContainerRuntimePolicy gets an existing ContainerRuntimePolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetContainerRuntimePolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ContainerRuntimePolicyState, opts ...pulumi.ResourceOption) (*ContainerRuntimePolicy, error) {
	var resource ContainerRuntimePolicy
	err := ctx.ReadResource("aquasec:index/containerRuntimePolicy:ContainerRuntimePolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ContainerRuntimePolicy resources.
type containerRuntimePolicyState struct {
	// List of executables that are allowed for the user.
	AllowedExecutables []string `pulumi:"allowedExecutables"`
	// List of registries that allowed for running containers.
	AllowedRegistries []string `pulumi:"allowedRegistries"`
	// Indicates the application scope of the service.
	ApplicationScopes []string `pulumi:"applicationScopes"`
	// If true, all network activity will be audited.
	AuditAllNetworkActivity *bool `pulumi:"auditAllNetworkActivity"`
	// If true, all process activity will be audited.
	AuditAllProcessesActivity *bool `pulumi:"auditAllProcessesActivity"`
	// If true, full command arguments will be audited.
	AuditFullCommandArguments *bool `pulumi:"auditFullCommandArguments"`
	// Username of the account that created the service.
	Author *string `pulumi:"author"`
	// If true, prevent containers from running with access to host network.
	BlockAccessHostNetwork *bool `pulumi:"blockAccessHostNetwork"`
	// If true, prevent containers from running with adding capabilities with `--cap-add` privilege.
	BlockAddingCapabilities *bool `pulumi:"blockAddingCapabilities"`
	// If true, exec into a container is prevented.
	BlockContainerExec *bool `pulumi:"blockContainerExec"`
	// Detect and prevent communication to DNS/IP addresses known to be used for Cryptocurrency Mining
	BlockCryptocurrencyMining *bool `pulumi:"blockCryptocurrencyMining"`
	// Detect and prevent running in-memory execution
	BlockFilelessExec *bool `pulumi:"blockFilelessExec"`
	// If true, prevent containers from running with the capability to bind in port lower than 1024.
	BlockLowPortBinding *bool `pulumi:"blockLowPortBinding"`
	// If true, running non-compliant image in the container is prevented.
	BlockNonCompliantImages *bool `pulumi:"blockNonCompliantImages"`
	// If true, running containers in non-compliant pods is prevented.
	BlockNonCompliantWorkloads *bool `pulumi:"blockNonCompliantWorkloads"`
	// If true, running non-kubernetes containers is prevented.
	BlockNonK8sContainers *bool `pulumi:"blockNonK8sContainers"`
	// If true, prevent containers from running with privileged container capability.
	BlockPrivilegedContainers *bool `pulumi:"blockPrivilegedContainers"`
	// If true, reverse shell is prevented.
	BlockReverseShell *bool `pulumi:"blockReverseShell"`
	// If true, prevent containers from running with root user.
	BlockRootUser *bool `pulumi:"blockRootUser"`
	// If true, running images in the container that are not registered in Aqua is prevented.
	BlockUnregisteredImages *bool `pulumi:"blockUnregisteredImages"`
	// If true, prevent containers from running with the privilege to use the IPC namespace.
	BlockUseIpcNamespace *bool `pulumi:"blockUseIpcNamespace"`
	// If true, prevent containers from running with the privilege to use the PID namespace.
	BlockUsePidNamespace *bool `pulumi:"blockUsePidNamespace"`
	// If true, prevent containers from running with the privilege to use the user namespace.
	BlockUseUserNamespace *bool `pulumi:"blockUseUserNamespace"`
	// If true, prevent containers from running with the privilege to use the UTS namespace.
	BlockUseUtsNamespace *bool `pulumi:"blockUseUtsNamespace"`
	// If true, prevents containers from using specific Unix capabilities.
	BlockedCapabilities []string `pulumi:"blockedCapabilities"`
	// List of executables that are prevented from running in containers.
	BlockedExecutables []string `pulumi:"blockedExecutables"`
	// List of files that are prevented from being read, modified and executed in the containers.
	BlockedFiles []string `pulumi:"blockedFiles"`
	// List of blocked inbound ports.
	BlockedInboundPorts []string `pulumi:"blockedInboundPorts"`
	// List of blocked outbound ports.
	BlockedOutboundPorts []string `pulumi:"blockedOutboundPorts"`
	// Prevent containers from reading, writing, or executing all files in the list of packages.
	BlockedPackages []string `pulumi:"blockedPackages"`
	// List of volumes that are prevented from being mounted in the containers.
	BlockedVolumes []string `pulumi:"blockedVolumes"`
	// List of processes that will be allowed.
	ContainerExecAllowedProcesses []string `pulumi:"containerExecAllowedProcesses"`
	// The description of the container runtime policy
	Description *string `pulumi:"description"`
	// If true, executables that are not in the original image is prevented from running.
	EnableDriftPrevention *bool `pulumi:"enableDriftPrevention"`
	// If true, fork bombs are prevented in the containers.
	EnableForkGuard *bool `pulumi:"enableForkGuard"`
	// If true, detect and prevent communication from containers to IP addresses known to have a bad reputation.
	EnableIpReputationSecurity *bool `pulumi:"enableIpReputationSecurity"`
	// If true, detects port scanning behavior in the container.
	EnablePortScanDetection *bool `pulumi:"enablePortScanDetection"`
	// Indicates if the runtime policy is enabled or not.
	Enabled *bool `pulumi:"enabled"`
	// Indicates that policy should effect container execution (not just for audit).
	Enforce *bool `pulumi:"enforce"`
	// Indicates the number of days after which the runtime policy will be changed to enforce mode.
	EnforceAfterDays *int `pulumi:"enforceAfterDays"`
	// List of files and directories to be excluded from the read-only list.
	ExceptionalReadonlyFilesAndDirectories []string `pulumi:"exceptionalReadonlyFilesAndDirectories"`
	// Specify processes that will be allowed
	ExecLockdownWhiteLists []string `pulumi:"execLockdownWhiteLists"`
	// Configuration for file integrity monitoring.
	FileIntegrityMonitoring *ContainerRuntimePolicyFileIntegrityMonitoring `pulumi:"fileIntegrityMonitoring"`
	// Process limit for the fork guard.
	ForkGuardProcessLimit *int `pulumi:"forkGuardProcessLimit"`
	// If true, prevents the container from obtaining new privileges at runtime. (only enabled in enforce mode)
	LimitNewPrivileges *bool `pulumi:"limitNewPrivileges"`
	// Configuration for Real-Time Malware Protection.
	MalwareScanOptions *ContainerRuntimePolicyMalwareScanOptions `pulumi:"malwareScanOptions"`
	// If true, system time changes will be monitored.
	MonitorSystemTimeChanges *bool `pulumi:"monitorSystemTimeChanges"`
	// Name of the container runtime policy
	Name *string `pulumi:"name"`
	// List of files and directories to be restricted as read-only
	ReadonlyFilesAndDirectories []string `pulumi:"readonlyFilesAndDirectories"`
	// List of IPs/ CIDRs that will be allowed
	ReverseShellAllowedIps []string `pulumi:"reverseShellAllowedIps"`
	// List of processes that will be allowed
	ReverseShellAllowedProcesses []string `pulumi:"reverseShellAllowedProcesses"`
	// Logical expression of how to compute the dependency of the scope variables.
	ScopeExpression *string `pulumi:"scopeExpression"`
	// List of scope attributes.
	ScopeVariables []ContainerRuntimePolicyScopeVariable `pulumi:"scopeVariables"`
}

type ContainerRuntimePolicyState struct {
	// List of executables that are allowed for the user.
	AllowedExecutables pulumi.StringArrayInput
	// List of registries that allowed for running containers.
	AllowedRegistries pulumi.StringArrayInput
	// Indicates the application scope of the service.
	ApplicationScopes pulumi.StringArrayInput
	// If true, all network activity will be audited.
	AuditAllNetworkActivity pulumi.BoolPtrInput
	// If true, all process activity will be audited.
	AuditAllProcessesActivity pulumi.BoolPtrInput
	// If true, full command arguments will be audited.
	AuditFullCommandArguments pulumi.BoolPtrInput
	// Username of the account that created the service.
	Author pulumi.StringPtrInput
	// If true, prevent containers from running with access to host network.
	BlockAccessHostNetwork pulumi.BoolPtrInput
	// If true, prevent containers from running with adding capabilities with `--cap-add` privilege.
	BlockAddingCapabilities pulumi.BoolPtrInput
	// If true, exec into a container is prevented.
	BlockContainerExec pulumi.BoolPtrInput
	// Detect and prevent communication to DNS/IP addresses known to be used for Cryptocurrency Mining
	BlockCryptocurrencyMining pulumi.BoolPtrInput
	// Detect and prevent running in-memory execution
	BlockFilelessExec pulumi.BoolPtrInput
	// If true, prevent containers from running with the capability to bind in port lower than 1024.
	BlockLowPortBinding pulumi.BoolPtrInput
	// If true, running non-compliant image in the container is prevented.
	BlockNonCompliantImages pulumi.BoolPtrInput
	// If true, running containers in non-compliant pods is prevented.
	BlockNonCompliantWorkloads pulumi.BoolPtrInput
	// If true, running non-kubernetes containers is prevented.
	BlockNonK8sContainers pulumi.BoolPtrInput
	// If true, prevent containers from running with privileged container capability.
	BlockPrivilegedContainers pulumi.BoolPtrInput
	// If true, reverse shell is prevented.
	BlockReverseShell pulumi.BoolPtrInput
	// If true, prevent containers from running with root user.
	BlockRootUser pulumi.BoolPtrInput
	// If true, running images in the container that are not registered in Aqua is prevented.
	BlockUnregisteredImages pulumi.BoolPtrInput
	// If true, prevent containers from running with the privilege to use the IPC namespace.
	BlockUseIpcNamespace pulumi.BoolPtrInput
	// If true, prevent containers from running with the privilege to use the PID namespace.
	BlockUsePidNamespace pulumi.BoolPtrInput
	// If true, prevent containers from running with the privilege to use the user namespace.
	BlockUseUserNamespace pulumi.BoolPtrInput
	// If true, prevent containers from running with the privilege to use the UTS namespace.
	BlockUseUtsNamespace pulumi.BoolPtrInput
	// If true, prevents containers from using specific Unix capabilities.
	BlockedCapabilities pulumi.StringArrayInput
	// List of executables that are prevented from running in containers.
	BlockedExecutables pulumi.StringArrayInput
	// List of files that are prevented from being read, modified and executed in the containers.
	BlockedFiles pulumi.StringArrayInput
	// List of blocked inbound ports.
	BlockedInboundPorts pulumi.StringArrayInput
	// List of blocked outbound ports.
	BlockedOutboundPorts pulumi.StringArrayInput
	// Prevent containers from reading, writing, or executing all files in the list of packages.
	BlockedPackages pulumi.StringArrayInput
	// List of volumes that are prevented from being mounted in the containers.
	BlockedVolumes pulumi.StringArrayInput
	// List of processes that will be allowed.
	ContainerExecAllowedProcesses pulumi.StringArrayInput
	// The description of the container runtime policy
	Description pulumi.StringPtrInput
	// If true, executables that are not in the original image is prevented from running.
	EnableDriftPrevention pulumi.BoolPtrInput
	// If true, fork bombs are prevented in the containers.
	EnableForkGuard pulumi.BoolPtrInput
	// If true, detect and prevent communication from containers to IP addresses known to have a bad reputation.
	EnableIpReputationSecurity pulumi.BoolPtrInput
	// If true, detects port scanning behavior in the container.
	EnablePortScanDetection pulumi.BoolPtrInput
	// Indicates if the runtime policy is enabled or not.
	Enabled pulumi.BoolPtrInput
	// Indicates that policy should effect container execution (not just for audit).
	Enforce pulumi.BoolPtrInput
	// Indicates the number of days after which the runtime policy will be changed to enforce mode.
	EnforceAfterDays pulumi.IntPtrInput
	// List of files and directories to be excluded from the read-only list.
	ExceptionalReadonlyFilesAndDirectories pulumi.StringArrayInput
	// Specify processes that will be allowed
	ExecLockdownWhiteLists pulumi.StringArrayInput
	// Configuration for file integrity monitoring.
	FileIntegrityMonitoring ContainerRuntimePolicyFileIntegrityMonitoringPtrInput
	// Process limit for the fork guard.
	ForkGuardProcessLimit pulumi.IntPtrInput
	// If true, prevents the container from obtaining new privileges at runtime. (only enabled in enforce mode)
	LimitNewPrivileges pulumi.BoolPtrInput
	// Configuration for Real-Time Malware Protection.
	MalwareScanOptions ContainerRuntimePolicyMalwareScanOptionsPtrInput
	// If true, system time changes will be monitored.
	MonitorSystemTimeChanges pulumi.BoolPtrInput
	// Name of the container runtime policy
	Name pulumi.StringPtrInput
	// List of files and directories to be restricted as read-only
	ReadonlyFilesAndDirectories pulumi.StringArrayInput
	// List of IPs/ CIDRs that will be allowed
	ReverseShellAllowedIps pulumi.StringArrayInput
	// List of processes that will be allowed
	ReverseShellAllowedProcesses pulumi.StringArrayInput
	// Logical expression of how to compute the dependency of the scope variables.
	ScopeExpression pulumi.StringPtrInput
	// List of scope attributes.
	ScopeVariables ContainerRuntimePolicyScopeVariableArrayInput
}

func (ContainerRuntimePolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*containerRuntimePolicyState)(nil)).Elem()
}

type containerRuntimePolicyArgs struct {
	// List of executables that are allowed for the user.
	AllowedExecutables []string `pulumi:"allowedExecutables"`
	// List of registries that allowed for running containers.
	AllowedRegistries []string `pulumi:"allowedRegistries"`
	// Indicates the application scope of the service.
	ApplicationScopes []string `pulumi:"applicationScopes"`
	// If true, all network activity will be audited.
	AuditAllNetworkActivity *bool `pulumi:"auditAllNetworkActivity"`
	// If true, all process activity will be audited.
	AuditAllProcessesActivity *bool `pulumi:"auditAllProcessesActivity"`
	// If true, full command arguments will be audited.
	AuditFullCommandArguments *bool `pulumi:"auditFullCommandArguments"`
	// If true, prevent containers from running with access to host network.
	BlockAccessHostNetwork *bool `pulumi:"blockAccessHostNetwork"`
	// If true, prevent containers from running with adding capabilities with `--cap-add` privilege.
	BlockAddingCapabilities *bool `pulumi:"blockAddingCapabilities"`
	// If true, exec into a container is prevented.
	BlockContainerExec *bool `pulumi:"blockContainerExec"`
	// Detect and prevent communication to DNS/IP addresses known to be used for Cryptocurrency Mining
	BlockCryptocurrencyMining *bool `pulumi:"blockCryptocurrencyMining"`
	// Detect and prevent running in-memory execution
	BlockFilelessExec *bool `pulumi:"blockFilelessExec"`
	// If true, prevent containers from running with the capability to bind in port lower than 1024.
	BlockLowPortBinding *bool `pulumi:"blockLowPortBinding"`
	// If true, running non-compliant image in the container is prevented.
	BlockNonCompliantImages *bool `pulumi:"blockNonCompliantImages"`
	// If true, running containers in non-compliant pods is prevented.
	BlockNonCompliantWorkloads *bool `pulumi:"blockNonCompliantWorkloads"`
	// If true, running non-kubernetes containers is prevented.
	BlockNonK8sContainers *bool `pulumi:"blockNonK8sContainers"`
	// If true, prevent containers from running with privileged container capability.
	BlockPrivilegedContainers *bool `pulumi:"blockPrivilegedContainers"`
	// If true, reverse shell is prevented.
	BlockReverseShell *bool `pulumi:"blockReverseShell"`
	// If true, prevent containers from running with root user.
	BlockRootUser *bool `pulumi:"blockRootUser"`
	// If true, running images in the container that are not registered in Aqua is prevented.
	BlockUnregisteredImages *bool `pulumi:"blockUnregisteredImages"`
	// If true, prevent containers from running with the privilege to use the IPC namespace.
	BlockUseIpcNamespace *bool `pulumi:"blockUseIpcNamespace"`
	// If true, prevent containers from running with the privilege to use the PID namespace.
	BlockUsePidNamespace *bool `pulumi:"blockUsePidNamespace"`
	// If true, prevent containers from running with the privilege to use the user namespace.
	BlockUseUserNamespace *bool `pulumi:"blockUseUserNamespace"`
	// If true, prevent containers from running with the privilege to use the UTS namespace.
	BlockUseUtsNamespace *bool `pulumi:"blockUseUtsNamespace"`
	// If true, prevents containers from using specific Unix capabilities.
	BlockedCapabilities []string `pulumi:"blockedCapabilities"`
	// List of executables that are prevented from running in containers.
	BlockedExecutables []string `pulumi:"blockedExecutables"`
	// List of files that are prevented from being read, modified and executed in the containers.
	BlockedFiles []string `pulumi:"blockedFiles"`
	// List of blocked inbound ports.
	BlockedInboundPorts []string `pulumi:"blockedInboundPorts"`
	// List of blocked outbound ports.
	BlockedOutboundPorts []string `pulumi:"blockedOutboundPorts"`
	// Prevent containers from reading, writing, or executing all files in the list of packages.
	BlockedPackages []string `pulumi:"blockedPackages"`
	// List of volumes that are prevented from being mounted in the containers.
	BlockedVolumes []string `pulumi:"blockedVolumes"`
	// List of processes that will be allowed.
	ContainerExecAllowedProcesses []string `pulumi:"containerExecAllowedProcesses"`
	// The description of the container runtime policy
	Description *string `pulumi:"description"`
	// If true, executables that are not in the original image is prevented from running.
	EnableDriftPrevention *bool `pulumi:"enableDriftPrevention"`
	// If true, fork bombs are prevented in the containers.
	EnableForkGuard *bool `pulumi:"enableForkGuard"`
	// If true, detect and prevent communication from containers to IP addresses known to have a bad reputation.
	EnableIpReputationSecurity *bool `pulumi:"enableIpReputationSecurity"`
	// If true, detects port scanning behavior in the container.
	EnablePortScanDetection *bool `pulumi:"enablePortScanDetection"`
	// Indicates if the runtime policy is enabled or not.
	Enabled *bool `pulumi:"enabled"`
	// Indicates that policy should effect container execution (not just for audit).
	Enforce *bool `pulumi:"enforce"`
	// Indicates the number of days after which the runtime policy will be changed to enforce mode.
	EnforceAfterDays *int `pulumi:"enforceAfterDays"`
	// List of files and directories to be excluded from the read-only list.
	ExceptionalReadonlyFilesAndDirectories []string `pulumi:"exceptionalReadonlyFilesAndDirectories"`
	// Specify processes that will be allowed
	ExecLockdownWhiteLists []string `pulumi:"execLockdownWhiteLists"`
	// Configuration for file integrity monitoring.
	FileIntegrityMonitoring *ContainerRuntimePolicyFileIntegrityMonitoring `pulumi:"fileIntegrityMonitoring"`
	// Process limit for the fork guard.
	ForkGuardProcessLimit *int `pulumi:"forkGuardProcessLimit"`
	// If true, prevents the container from obtaining new privileges at runtime. (only enabled in enforce mode)
	LimitNewPrivileges *bool `pulumi:"limitNewPrivileges"`
	// Configuration for Real-Time Malware Protection.
	MalwareScanOptions *ContainerRuntimePolicyMalwareScanOptions `pulumi:"malwareScanOptions"`
	// If true, system time changes will be monitored.
	MonitorSystemTimeChanges *bool `pulumi:"monitorSystemTimeChanges"`
	// Name of the container runtime policy
	Name *string `pulumi:"name"`
	// List of files and directories to be restricted as read-only
	ReadonlyFilesAndDirectories []string `pulumi:"readonlyFilesAndDirectories"`
	// List of IPs/ CIDRs that will be allowed
	ReverseShellAllowedIps []string `pulumi:"reverseShellAllowedIps"`
	// List of processes that will be allowed
	ReverseShellAllowedProcesses []string `pulumi:"reverseShellAllowedProcesses"`
	// Logical expression of how to compute the dependency of the scope variables.
	ScopeExpression *string `pulumi:"scopeExpression"`
	// List of scope attributes.
	ScopeVariables []ContainerRuntimePolicyScopeVariable `pulumi:"scopeVariables"`
}

// The set of arguments for constructing a ContainerRuntimePolicy resource.
type ContainerRuntimePolicyArgs struct {
	// List of executables that are allowed for the user.
	AllowedExecutables pulumi.StringArrayInput
	// List of registries that allowed for running containers.
	AllowedRegistries pulumi.StringArrayInput
	// Indicates the application scope of the service.
	ApplicationScopes pulumi.StringArrayInput
	// If true, all network activity will be audited.
	AuditAllNetworkActivity pulumi.BoolPtrInput
	// If true, all process activity will be audited.
	AuditAllProcessesActivity pulumi.BoolPtrInput
	// If true, full command arguments will be audited.
	AuditFullCommandArguments pulumi.BoolPtrInput
	// If true, prevent containers from running with access to host network.
	BlockAccessHostNetwork pulumi.BoolPtrInput
	// If true, prevent containers from running with adding capabilities with `--cap-add` privilege.
	BlockAddingCapabilities pulumi.BoolPtrInput
	// If true, exec into a container is prevented.
	BlockContainerExec pulumi.BoolPtrInput
	// Detect and prevent communication to DNS/IP addresses known to be used for Cryptocurrency Mining
	BlockCryptocurrencyMining pulumi.BoolPtrInput
	// Detect and prevent running in-memory execution
	BlockFilelessExec pulumi.BoolPtrInput
	// If true, prevent containers from running with the capability to bind in port lower than 1024.
	BlockLowPortBinding pulumi.BoolPtrInput
	// If true, running non-compliant image in the container is prevented.
	BlockNonCompliantImages pulumi.BoolPtrInput
	// If true, running containers in non-compliant pods is prevented.
	BlockNonCompliantWorkloads pulumi.BoolPtrInput
	// If true, running non-kubernetes containers is prevented.
	BlockNonK8sContainers pulumi.BoolPtrInput
	// If true, prevent containers from running with privileged container capability.
	BlockPrivilegedContainers pulumi.BoolPtrInput
	// If true, reverse shell is prevented.
	BlockReverseShell pulumi.BoolPtrInput
	// If true, prevent containers from running with root user.
	BlockRootUser pulumi.BoolPtrInput
	// If true, running images in the container that are not registered in Aqua is prevented.
	BlockUnregisteredImages pulumi.BoolPtrInput
	// If true, prevent containers from running with the privilege to use the IPC namespace.
	BlockUseIpcNamespace pulumi.BoolPtrInput
	// If true, prevent containers from running with the privilege to use the PID namespace.
	BlockUsePidNamespace pulumi.BoolPtrInput
	// If true, prevent containers from running with the privilege to use the user namespace.
	BlockUseUserNamespace pulumi.BoolPtrInput
	// If true, prevent containers from running with the privilege to use the UTS namespace.
	BlockUseUtsNamespace pulumi.BoolPtrInput
	// If true, prevents containers from using specific Unix capabilities.
	BlockedCapabilities pulumi.StringArrayInput
	// List of executables that are prevented from running in containers.
	BlockedExecutables pulumi.StringArrayInput
	// List of files that are prevented from being read, modified and executed in the containers.
	BlockedFiles pulumi.StringArrayInput
	// List of blocked inbound ports.
	BlockedInboundPorts pulumi.StringArrayInput
	// List of blocked outbound ports.
	BlockedOutboundPorts pulumi.StringArrayInput
	// Prevent containers from reading, writing, or executing all files in the list of packages.
	BlockedPackages pulumi.StringArrayInput
	// List of volumes that are prevented from being mounted in the containers.
	BlockedVolumes pulumi.StringArrayInput
	// List of processes that will be allowed.
	ContainerExecAllowedProcesses pulumi.StringArrayInput
	// The description of the container runtime policy
	Description pulumi.StringPtrInput
	// If true, executables that are not in the original image is prevented from running.
	EnableDriftPrevention pulumi.BoolPtrInput
	// If true, fork bombs are prevented in the containers.
	EnableForkGuard pulumi.BoolPtrInput
	// If true, detect and prevent communication from containers to IP addresses known to have a bad reputation.
	EnableIpReputationSecurity pulumi.BoolPtrInput
	// If true, detects port scanning behavior in the container.
	EnablePortScanDetection pulumi.BoolPtrInput
	// Indicates if the runtime policy is enabled or not.
	Enabled pulumi.BoolPtrInput
	// Indicates that policy should effect container execution (not just for audit).
	Enforce pulumi.BoolPtrInput
	// Indicates the number of days after which the runtime policy will be changed to enforce mode.
	EnforceAfterDays pulumi.IntPtrInput
	// List of files and directories to be excluded from the read-only list.
	ExceptionalReadonlyFilesAndDirectories pulumi.StringArrayInput
	// Specify processes that will be allowed
	ExecLockdownWhiteLists pulumi.StringArrayInput
	// Configuration for file integrity monitoring.
	FileIntegrityMonitoring ContainerRuntimePolicyFileIntegrityMonitoringPtrInput
	// Process limit for the fork guard.
	ForkGuardProcessLimit pulumi.IntPtrInput
	// If true, prevents the container from obtaining new privileges at runtime. (only enabled in enforce mode)
	LimitNewPrivileges pulumi.BoolPtrInput
	// Configuration for Real-Time Malware Protection.
	MalwareScanOptions ContainerRuntimePolicyMalwareScanOptionsPtrInput
	// If true, system time changes will be monitored.
	MonitorSystemTimeChanges pulumi.BoolPtrInput
	// Name of the container runtime policy
	Name pulumi.StringPtrInput
	// List of files and directories to be restricted as read-only
	ReadonlyFilesAndDirectories pulumi.StringArrayInput
	// List of IPs/ CIDRs that will be allowed
	ReverseShellAllowedIps pulumi.StringArrayInput
	// List of processes that will be allowed
	ReverseShellAllowedProcesses pulumi.StringArrayInput
	// Logical expression of how to compute the dependency of the scope variables.
	ScopeExpression pulumi.StringPtrInput
	// List of scope attributes.
	ScopeVariables ContainerRuntimePolicyScopeVariableArrayInput
}

func (ContainerRuntimePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*containerRuntimePolicyArgs)(nil)).Elem()
}

type ContainerRuntimePolicyInput interface {
	pulumi.Input

	ToContainerRuntimePolicyOutput() ContainerRuntimePolicyOutput
	ToContainerRuntimePolicyOutputWithContext(ctx context.Context) ContainerRuntimePolicyOutput
}

func (*ContainerRuntimePolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerRuntimePolicy)(nil)).Elem()
}

func (i *ContainerRuntimePolicy) ToContainerRuntimePolicyOutput() ContainerRuntimePolicyOutput {
	return i.ToContainerRuntimePolicyOutputWithContext(context.Background())
}

func (i *ContainerRuntimePolicy) ToContainerRuntimePolicyOutputWithContext(ctx context.Context) ContainerRuntimePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerRuntimePolicyOutput)
}

func (i *ContainerRuntimePolicy) ToOutput(ctx context.Context) pulumix.Output[*ContainerRuntimePolicy] {
	return pulumix.Output[*ContainerRuntimePolicy]{
		OutputState: i.ToContainerRuntimePolicyOutputWithContext(ctx).OutputState,
	}
}

// ContainerRuntimePolicyArrayInput is an input type that accepts ContainerRuntimePolicyArray and ContainerRuntimePolicyArrayOutput values.
// You can construct a concrete instance of `ContainerRuntimePolicyArrayInput` via:
//
//	ContainerRuntimePolicyArray{ ContainerRuntimePolicyArgs{...} }
type ContainerRuntimePolicyArrayInput interface {
	pulumi.Input

	ToContainerRuntimePolicyArrayOutput() ContainerRuntimePolicyArrayOutput
	ToContainerRuntimePolicyArrayOutputWithContext(context.Context) ContainerRuntimePolicyArrayOutput
}

type ContainerRuntimePolicyArray []ContainerRuntimePolicyInput

func (ContainerRuntimePolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ContainerRuntimePolicy)(nil)).Elem()
}

func (i ContainerRuntimePolicyArray) ToContainerRuntimePolicyArrayOutput() ContainerRuntimePolicyArrayOutput {
	return i.ToContainerRuntimePolicyArrayOutputWithContext(context.Background())
}

func (i ContainerRuntimePolicyArray) ToContainerRuntimePolicyArrayOutputWithContext(ctx context.Context) ContainerRuntimePolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerRuntimePolicyArrayOutput)
}

func (i ContainerRuntimePolicyArray) ToOutput(ctx context.Context) pulumix.Output[[]*ContainerRuntimePolicy] {
	return pulumix.Output[[]*ContainerRuntimePolicy]{
		OutputState: i.ToContainerRuntimePolicyArrayOutputWithContext(ctx).OutputState,
	}
}

// ContainerRuntimePolicyMapInput is an input type that accepts ContainerRuntimePolicyMap and ContainerRuntimePolicyMapOutput values.
// You can construct a concrete instance of `ContainerRuntimePolicyMapInput` via:
//
//	ContainerRuntimePolicyMap{ "key": ContainerRuntimePolicyArgs{...} }
type ContainerRuntimePolicyMapInput interface {
	pulumi.Input

	ToContainerRuntimePolicyMapOutput() ContainerRuntimePolicyMapOutput
	ToContainerRuntimePolicyMapOutputWithContext(context.Context) ContainerRuntimePolicyMapOutput
}

type ContainerRuntimePolicyMap map[string]ContainerRuntimePolicyInput

func (ContainerRuntimePolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ContainerRuntimePolicy)(nil)).Elem()
}

func (i ContainerRuntimePolicyMap) ToContainerRuntimePolicyMapOutput() ContainerRuntimePolicyMapOutput {
	return i.ToContainerRuntimePolicyMapOutputWithContext(context.Background())
}

func (i ContainerRuntimePolicyMap) ToContainerRuntimePolicyMapOutputWithContext(ctx context.Context) ContainerRuntimePolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerRuntimePolicyMapOutput)
}

func (i ContainerRuntimePolicyMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*ContainerRuntimePolicy] {
	return pulumix.Output[map[string]*ContainerRuntimePolicy]{
		OutputState: i.ToContainerRuntimePolicyMapOutputWithContext(ctx).OutputState,
	}
}

type ContainerRuntimePolicyOutput struct{ *pulumi.OutputState }

func (ContainerRuntimePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerRuntimePolicy)(nil)).Elem()
}

func (o ContainerRuntimePolicyOutput) ToContainerRuntimePolicyOutput() ContainerRuntimePolicyOutput {
	return o
}

func (o ContainerRuntimePolicyOutput) ToContainerRuntimePolicyOutputWithContext(ctx context.Context) ContainerRuntimePolicyOutput {
	return o
}

func (o ContainerRuntimePolicyOutput) ToOutput(ctx context.Context) pulumix.Output[*ContainerRuntimePolicy] {
	return pulumix.Output[*ContainerRuntimePolicy]{
		OutputState: o.OutputState,
	}
}

// List of executables that are allowed for the user.
func (o ContainerRuntimePolicyOutput) AllowedExecutables() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.StringArrayOutput { return v.AllowedExecutables }).(pulumi.StringArrayOutput)
}

// List of registries that allowed for running containers.
func (o ContainerRuntimePolicyOutput) AllowedRegistries() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.StringArrayOutput { return v.AllowedRegistries }).(pulumi.StringArrayOutput)
}

// Indicates the application scope of the service.
func (o ContainerRuntimePolicyOutput) ApplicationScopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.StringArrayOutput { return v.ApplicationScopes }).(pulumi.StringArrayOutput)
}

// If true, all network activity will be audited.
func (o ContainerRuntimePolicyOutput) AuditAllNetworkActivity() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.BoolPtrOutput { return v.AuditAllNetworkActivity }).(pulumi.BoolPtrOutput)
}

// If true, all process activity will be audited.
func (o ContainerRuntimePolicyOutput) AuditAllProcessesActivity() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.BoolPtrOutput { return v.AuditAllProcessesActivity }).(pulumi.BoolPtrOutput)
}

// If true, full command arguments will be audited.
func (o ContainerRuntimePolicyOutput) AuditFullCommandArguments() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.BoolPtrOutput { return v.AuditFullCommandArguments }).(pulumi.BoolPtrOutput)
}

// Username of the account that created the service.
func (o ContainerRuntimePolicyOutput) Author() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.StringOutput { return v.Author }).(pulumi.StringOutput)
}

// If true, prevent containers from running with access to host network.
func (o ContainerRuntimePolicyOutput) BlockAccessHostNetwork() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.BoolPtrOutput { return v.BlockAccessHostNetwork }).(pulumi.BoolPtrOutput)
}

// If true, prevent containers from running with adding capabilities with `--cap-add` privilege.
func (o ContainerRuntimePolicyOutput) BlockAddingCapabilities() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.BoolPtrOutput { return v.BlockAddingCapabilities }).(pulumi.BoolPtrOutput)
}

// If true, exec into a container is prevented.
func (o ContainerRuntimePolicyOutput) BlockContainerExec() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.BoolPtrOutput { return v.BlockContainerExec }).(pulumi.BoolPtrOutput)
}

// Detect and prevent communication to DNS/IP addresses known to be used for Cryptocurrency Mining
func (o ContainerRuntimePolicyOutput) BlockCryptocurrencyMining() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.BoolPtrOutput { return v.BlockCryptocurrencyMining }).(pulumi.BoolPtrOutput)
}

// Detect and prevent running in-memory execution
func (o ContainerRuntimePolicyOutput) BlockFilelessExec() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.BoolPtrOutput { return v.BlockFilelessExec }).(pulumi.BoolPtrOutput)
}

// If true, prevent containers from running with the capability to bind in port lower than 1024.
func (o ContainerRuntimePolicyOutput) BlockLowPortBinding() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.BoolPtrOutput { return v.BlockLowPortBinding }).(pulumi.BoolPtrOutput)
}

// If true, running non-compliant image in the container is prevented.
func (o ContainerRuntimePolicyOutput) BlockNonCompliantImages() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.BoolPtrOutput { return v.BlockNonCompliantImages }).(pulumi.BoolPtrOutput)
}

// If true, running containers in non-compliant pods is prevented.
func (o ContainerRuntimePolicyOutput) BlockNonCompliantWorkloads() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.BoolPtrOutput { return v.BlockNonCompliantWorkloads }).(pulumi.BoolPtrOutput)
}

// If true, running non-kubernetes containers is prevented.
func (o ContainerRuntimePolicyOutput) BlockNonK8sContainers() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.BoolPtrOutput { return v.BlockNonK8sContainers }).(pulumi.BoolPtrOutput)
}

// If true, prevent containers from running with privileged container capability.
func (o ContainerRuntimePolicyOutput) BlockPrivilegedContainers() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.BoolPtrOutput { return v.BlockPrivilegedContainers }).(pulumi.BoolPtrOutput)
}

// If true, reverse shell is prevented.
func (o ContainerRuntimePolicyOutput) BlockReverseShell() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.BoolPtrOutput { return v.BlockReverseShell }).(pulumi.BoolPtrOutput)
}

// If true, prevent containers from running with root user.
func (o ContainerRuntimePolicyOutput) BlockRootUser() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.BoolPtrOutput { return v.BlockRootUser }).(pulumi.BoolPtrOutput)
}

// If true, running images in the container that are not registered in Aqua is prevented.
func (o ContainerRuntimePolicyOutput) BlockUnregisteredImages() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.BoolPtrOutput { return v.BlockUnregisteredImages }).(pulumi.BoolPtrOutput)
}

// If true, prevent containers from running with the privilege to use the IPC namespace.
func (o ContainerRuntimePolicyOutput) BlockUseIpcNamespace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.BoolPtrOutput { return v.BlockUseIpcNamespace }).(pulumi.BoolPtrOutput)
}

// If true, prevent containers from running with the privilege to use the PID namespace.
func (o ContainerRuntimePolicyOutput) BlockUsePidNamespace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.BoolPtrOutput { return v.BlockUsePidNamespace }).(pulumi.BoolPtrOutput)
}

// If true, prevent containers from running with the privilege to use the user namespace.
func (o ContainerRuntimePolicyOutput) BlockUseUserNamespace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.BoolPtrOutput { return v.BlockUseUserNamespace }).(pulumi.BoolPtrOutput)
}

// If true, prevent containers from running with the privilege to use the UTS namespace.
func (o ContainerRuntimePolicyOutput) BlockUseUtsNamespace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.BoolPtrOutput { return v.BlockUseUtsNamespace }).(pulumi.BoolPtrOutput)
}

// If true, prevents containers from using specific Unix capabilities.
func (o ContainerRuntimePolicyOutput) BlockedCapabilities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.StringArrayOutput { return v.BlockedCapabilities }).(pulumi.StringArrayOutput)
}

// List of executables that are prevented from running in containers.
func (o ContainerRuntimePolicyOutput) BlockedExecutables() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.StringArrayOutput { return v.BlockedExecutables }).(pulumi.StringArrayOutput)
}

// List of files that are prevented from being read, modified and executed in the containers.
func (o ContainerRuntimePolicyOutput) BlockedFiles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.StringArrayOutput { return v.BlockedFiles }).(pulumi.StringArrayOutput)
}

// List of blocked inbound ports.
func (o ContainerRuntimePolicyOutput) BlockedInboundPorts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.StringArrayOutput { return v.BlockedInboundPorts }).(pulumi.StringArrayOutput)
}

// List of blocked outbound ports.
func (o ContainerRuntimePolicyOutput) BlockedOutboundPorts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.StringArrayOutput { return v.BlockedOutboundPorts }).(pulumi.StringArrayOutput)
}

// Prevent containers from reading, writing, or executing all files in the list of packages.
func (o ContainerRuntimePolicyOutput) BlockedPackages() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.StringArrayOutput { return v.BlockedPackages }).(pulumi.StringArrayOutput)
}

// List of volumes that are prevented from being mounted in the containers.
func (o ContainerRuntimePolicyOutput) BlockedVolumes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.StringArrayOutput { return v.BlockedVolumes }).(pulumi.StringArrayOutput)
}

// List of processes that will be allowed.
func (o ContainerRuntimePolicyOutput) ContainerExecAllowedProcesses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.StringArrayOutput { return v.ContainerExecAllowedProcesses }).(pulumi.StringArrayOutput)
}

// The description of the container runtime policy
func (o ContainerRuntimePolicyOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// If true, executables that are not in the original image is prevented from running.
func (o ContainerRuntimePolicyOutput) EnableDriftPrevention() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.BoolPtrOutput { return v.EnableDriftPrevention }).(pulumi.BoolPtrOutput)
}

// If true, fork bombs are prevented in the containers.
func (o ContainerRuntimePolicyOutput) EnableForkGuard() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.BoolPtrOutput { return v.EnableForkGuard }).(pulumi.BoolPtrOutput)
}

// If true, detect and prevent communication from containers to IP addresses known to have a bad reputation.
func (o ContainerRuntimePolicyOutput) EnableIpReputationSecurity() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.BoolPtrOutput { return v.EnableIpReputationSecurity }).(pulumi.BoolPtrOutput)
}

// If true, detects port scanning behavior in the container.
func (o ContainerRuntimePolicyOutput) EnablePortScanDetection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.BoolPtrOutput { return v.EnablePortScanDetection }).(pulumi.BoolPtrOutput)
}

// Indicates if the runtime policy is enabled or not.
func (o ContainerRuntimePolicyOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Indicates that policy should effect container execution (not just for audit).
func (o ContainerRuntimePolicyOutput) Enforce() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.BoolPtrOutput { return v.Enforce }).(pulumi.BoolPtrOutput)
}

// Indicates the number of days after which the runtime policy will be changed to enforce mode.
func (o ContainerRuntimePolicyOutput) EnforceAfterDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.IntPtrOutput { return v.EnforceAfterDays }).(pulumi.IntPtrOutput)
}

// List of files and directories to be excluded from the read-only list.
func (o ContainerRuntimePolicyOutput) ExceptionalReadonlyFilesAndDirectories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.StringArrayOutput {
		return v.ExceptionalReadonlyFilesAndDirectories
	}).(pulumi.StringArrayOutput)
}

// Specify processes that will be allowed
func (o ContainerRuntimePolicyOutput) ExecLockdownWhiteLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.StringArrayOutput { return v.ExecLockdownWhiteLists }).(pulumi.StringArrayOutput)
}

// Configuration for file integrity monitoring.
func (o ContainerRuntimePolicyOutput) FileIntegrityMonitoring() ContainerRuntimePolicyFileIntegrityMonitoringPtrOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) ContainerRuntimePolicyFileIntegrityMonitoringPtrOutput {
		return v.FileIntegrityMonitoring
	}).(ContainerRuntimePolicyFileIntegrityMonitoringPtrOutput)
}

// Process limit for the fork guard.
func (o ContainerRuntimePolicyOutput) ForkGuardProcessLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.IntPtrOutput { return v.ForkGuardProcessLimit }).(pulumi.IntPtrOutput)
}

// If true, prevents the container from obtaining new privileges at runtime. (only enabled in enforce mode)
func (o ContainerRuntimePolicyOutput) LimitNewPrivileges() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.BoolPtrOutput { return v.LimitNewPrivileges }).(pulumi.BoolPtrOutput)
}

// Configuration for Real-Time Malware Protection.
func (o ContainerRuntimePolicyOutput) MalwareScanOptions() ContainerRuntimePolicyMalwareScanOptionsPtrOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) ContainerRuntimePolicyMalwareScanOptionsPtrOutput {
		return v.MalwareScanOptions
	}).(ContainerRuntimePolicyMalwareScanOptionsPtrOutput)
}

// If true, system time changes will be monitored.
func (o ContainerRuntimePolicyOutput) MonitorSystemTimeChanges() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.BoolPtrOutput { return v.MonitorSystemTimeChanges }).(pulumi.BoolPtrOutput)
}

// Name of the container runtime policy
func (o ContainerRuntimePolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// List of files and directories to be restricted as read-only
func (o ContainerRuntimePolicyOutput) ReadonlyFilesAndDirectories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.StringArrayOutput { return v.ReadonlyFilesAndDirectories }).(pulumi.StringArrayOutput)
}

// List of IPs/ CIDRs that will be allowed
func (o ContainerRuntimePolicyOutput) ReverseShellAllowedIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.StringArrayOutput { return v.ReverseShellAllowedIps }).(pulumi.StringArrayOutput)
}

// List of processes that will be allowed
func (o ContainerRuntimePolicyOutput) ReverseShellAllowedProcesses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.StringArrayOutput { return v.ReverseShellAllowedProcesses }).(pulumi.StringArrayOutput)
}

// Logical expression of how to compute the dependency of the scope variables.
func (o ContainerRuntimePolicyOutput) ScopeExpression() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.StringOutput { return v.ScopeExpression }).(pulumi.StringOutput)
}

// List of scope attributes.
func (o ContainerRuntimePolicyOutput) ScopeVariables() ContainerRuntimePolicyScopeVariableArrayOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) ContainerRuntimePolicyScopeVariableArrayOutput {
		return v.ScopeVariables
	}).(ContainerRuntimePolicyScopeVariableArrayOutput)
}

type ContainerRuntimePolicyArrayOutput struct{ *pulumi.OutputState }

func (ContainerRuntimePolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ContainerRuntimePolicy)(nil)).Elem()
}

func (o ContainerRuntimePolicyArrayOutput) ToContainerRuntimePolicyArrayOutput() ContainerRuntimePolicyArrayOutput {
	return o
}

func (o ContainerRuntimePolicyArrayOutput) ToContainerRuntimePolicyArrayOutputWithContext(ctx context.Context) ContainerRuntimePolicyArrayOutput {
	return o
}

func (o ContainerRuntimePolicyArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*ContainerRuntimePolicy] {
	return pulumix.Output[[]*ContainerRuntimePolicy]{
		OutputState: o.OutputState,
	}
}

func (o ContainerRuntimePolicyArrayOutput) Index(i pulumi.IntInput) ContainerRuntimePolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ContainerRuntimePolicy {
		return vs[0].([]*ContainerRuntimePolicy)[vs[1].(int)]
	}).(ContainerRuntimePolicyOutput)
}

type ContainerRuntimePolicyMapOutput struct{ *pulumi.OutputState }

func (ContainerRuntimePolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ContainerRuntimePolicy)(nil)).Elem()
}

func (o ContainerRuntimePolicyMapOutput) ToContainerRuntimePolicyMapOutput() ContainerRuntimePolicyMapOutput {
	return o
}

func (o ContainerRuntimePolicyMapOutput) ToContainerRuntimePolicyMapOutputWithContext(ctx context.Context) ContainerRuntimePolicyMapOutput {
	return o
}

func (o ContainerRuntimePolicyMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*ContainerRuntimePolicy] {
	return pulumix.Output[map[string]*ContainerRuntimePolicy]{
		OutputState: o.OutputState,
	}
}

func (o ContainerRuntimePolicyMapOutput) MapIndex(k pulumi.StringInput) ContainerRuntimePolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ContainerRuntimePolicy {
		return vs[0].(map[string]*ContainerRuntimePolicy)[vs[1].(string)]
	}).(ContainerRuntimePolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerRuntimePolicyInput)(nil)).Elem(), &ContainerRuntimePolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerRuntimePolicyArrayInput)(nil)).Elem(), ContainerRuntimePolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerRuntimePolicyMapInput)(nil)).Elem(), ContainerRuntimePolicyMap{})
	pulumi.RegisterOutputType(ContainerRuntimePolicyOutput{})
	pulumi.RegisterOutputType(ContainerRuntimePolicyArrayOutput{})
	pulumi.RegisterOutputType(ContainerRuntimePolicyMapOutput{})
}
