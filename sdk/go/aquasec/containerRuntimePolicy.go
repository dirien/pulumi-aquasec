// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aquasec

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-aquasec/sdk/go/aquasec/internal"
)

type ContainerRuntimePolicy struct {
	pulumi.CustomResourceState

	// Allowed executables configuration.
	AllowedExecutables ContainerRuntimePolicyAllowedExecutableArrayOutput `pulumi:"allowedExecutables"`
	// List of allowed registries.
	AllowedRegistries ContainerRuntimePolicyAllowedRegistryArrayOutput `pulumi:"allowedRegistries"`
	// Indicates the application scope of the service.
	ApplicationScopes pulumi.StringArrayOutput `pulumi:"applicationScopes"`
	// If true, all network activity will be audited.
	AuditAllNetworkActivity pulumi.BoolPtrOutput `pulumi:"auditAllNetworkActivity"`
	// If true, all process activity will be audited.
	AuditAllProcessesActivity pulumi.BoolPtrOutput `pulumi:"auditAllProcessesActivity"`
	// Detects brute force login attempts
	AuditBruteForceLogin pulumi.BoolPtrOutput `pulumi:"auditBruteForceLogin"`
	// If true, full command arguments will be audited.
	AuditFullCommandArguments pulumi.BoolPtrOutput                 `pulumi:"auditFullCommandArguments"`
	Auditing                  ContainerRuntimePolicyAuditingOutput `pulumi:"auditing"`
	// Username of the account that created the service.
	Author             pulumi.StringOutput                            `pulumi:"author"`
	BlacklistedOsUsers ContainerRuntimePolicyBlacklistedOsUsersOutput `pulumi:"blacklistedOsUsers"`
	// If true, prevent containers from running with access to host network.
	BlockAccessHostNetwork pulumi.BoolPtrOutput `pulumi:"blockAccessHostNetwork"`
	// If true, prevent containers from running with adding capabilities with `--cap-add` privilege.
	BlockAddingCapabilities pulumi.BoolPtrOutput `pulumi:"blockAddingCapabilities"`
	// If true, exec into a container is prevented.
	BlockContainerExec pulumi.BoolPtrOutput `pulumi:"blockContainerExec"`
	// Detect and prevent communication to DNS/IP addresses known to be used for Cryptocurrency Mining
	BlockCryptocurrencyMining pulumi.BoolPtrOutput `pulumi:"blockCryptocurrencyMining"`
	BlockDisallowedImages     pulumi.BoolPtrOutput `pulumi:"blockDisallowedImages"`
	// Detect and prevent running in-memory execution
	BlockFilelessExec pulumi.BoolPtrOutput `pulumi:"blockFilelessExec"`
	// If true, prevent containers from running with the capability to bind in port lower than 1024.
	BlockLowPortBinding pulumi.BoolPtrOutput `pulumi:"blockLowPortBinding"`
	// If true, running containers in non-compliant pods is prevented.
	BlockNonCompliantWorkloads pulumi.BoolPtrOutput `pulumi:"blockNonCompliantWorkloads"`
	// If true, running non-kubernetes containers is prevented.
	BlockNonK8sContainers pulumi.BoolPtrOutput `pulumi:"blockNonK8sContainers"`
	// If true, prevent containers from running with privileged container capability.
	BlockPrivilegedContainers pulumi.BoolPtrOutput `pulumi:"blockPrivilegedContainers"`
	// If true, prevent containers from running with root user.
	BlockRootUser pulumi.BoolPtrOutput `pulumi:"blockRootUser"`
	// If true, prevent containers from running with the privilege to use the IPC namespace.
	BlockUseIpcNamespace pulumi.BoolPtrOutput `pulumi:"blockUseIpcNamespace"`
	// If true, prevent containers from running with the privilege to use the PID namespace.
	BlockUsePidNamespace pulumi.BoolPtrOutput `pulumi:"blockUsePidNamespace"`
	// If true, prevent containers from running with the privilege to use the user namespace.
	BlockUseUserNamespace pulumi.BoolPtrOutput `pulumi:"blockUseUserNamespace"`
	// If true, prevent containers from running with the privilege to use the UTS namespace.
	BlockUseUtsNamespace pulumi.BoolPtrOutput `pulumi:"blockUseUtsNamespace"`
	// If true, prevents containers from using specific Unix capabilities.
	BlockedCapabilities pulumi.StringArrayOutput `pulumi:"blockedCapabilities"`
	// List of executables that are prevented from running in containers.
	BlockedExecutables pulumi.StringArrayOutput `pulumi:"blockedExecutables"`
	// List of files that are prevented from being read, modified and executed in the containers.
	BlockedFiles pulumi.StringArrayOutput `pulumi:"blockedFiles"`
	// List of blocked inbound ports.
	BlockedInboundPorts pulumi.StringArrayOutput `pulumi:"blockedInboundPorts"`
	// List of blocked outbound ports.
	BlockedOutboundPorts pulumi.StringArrayOutput `pulumi:"blockedOutboundPorts"`
	// Prevent containers from reading, writing, or executing all files in the list of packages.
	BlockedPackages pulumi.StringArrayOutput `pulumi:"blockedPackages"`
	// List of volumes that are prevented from being mounted in the containers.
	BlockedVolumes pulumi.StringArrayOutput `pulumi:"blockedVolumes"`
	// Bypass scope configuration.
	BypassScopes  ContainerRuntimePolicyBypassScopeArrayOutput `pulumi:"bypassScopes"`
	ContainerExec ContainerRuntimePolicyContainerExecOutput    `pulumi:"containerExec"`
	// List of processes that will be allowed.
	ContainerExecAllowedProcesses pulumi.StringArrayOutput `pulumi:"containerExecAllowedProcesses"`
	Created                       pulumi.StringOutput      `pulumi:"created"`
	Cve                           pulumi.StringPtrOutput   `pulumi:"cve"`
	DefaultSecurityProfile        pulumi.StringPtrOutput   `pulumi:"defaultSecurityProfile"`
	// The description of the container runtime policy
	Description pulumi.StringPtrOutput `pulumi:"description"`
	Digest      pulumi.StringPtrOutput `pulumi:"digest"`
	// Drift prevention configuration.
	DriftPreventions      ContainerRuntimePolicyDriftPreventionArrayOutput `pulumi:"driftPreventions"`
	EnableCryptoMiningDns pulumi.BoolPtrOutput                             `pulumi:"enableCryptoMiningDns"`
	// If true, fork bombs are prevented in the containers.
	EnableForkGuard          pulumi.BoolPtrOutput `pulumi:"enableForkGuard"`
	EnableIpReputation       pulumi.BoolPtrOutput `pulumi:"enableIpReputation"`
	EnablePortScanProtection pulumi.BoolPtrOutput `pulumi:"enablePortScanProtection"`
	// Whether allowed executables configuration is enabled.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Indicates that policy should effect container execution (not just for audit).
	Enforce pulumi.BoolPtrOutput `pulumi:"enforce"`
	// Indicates the number of days after which the runtime policy will be changed to enforce mode.
	EnforceAfterDays        pulumi.IntPtrOutput `pulumi:"enforceAfterDays"`
	EnforceSchedulerAddedOn pulumi.IntOutput    `pulumi:"enforceSchedulerAddedOn"`
	// List of excluded application scopes.
	ExcludeApplicationScopes pulumi.StringArrayOutput `pulumi:"excludeApplicationScopes"`
	// Executable blacklist configuration.
	ExecutableBlacklists   ContainerRuntimePolicyExecutableBlacklistArrayOutput `pulumi:"executableBlacklists"`
	FailedKubernetesChecks ContainerRuntimePolicyFailedKubernetesChecksOutput   `pulumi:"failedKubernetesChecks"`
	FileBlock              ContainerRuntimePolicyFileBlockOutput                `pulumi:"fileBlock"`
	// Configuration for file integrity monitoring.
	FileIntegrityMonitoring ContainerRuntimePolicyFileIntegrityMonitoringOutput `pulumi:"fileIntegrityMonitoring"`
	// Process limit for the fork guard.
	ForkGuardProcessLimit pulumi.IntPtrOutput    `pulumi:"forkGuardProcessLimit"`
	ImageName             pulumi.StringPtrOutput `pulumi:"imageName"`
	IsAuditChecked        pulumi.BoolPtrOutput   `pulumi:"isAuditChecked"`
	IsAutoGenerated       pulumi.BoolPtrOutput   `pulumi:"isAutoGenerated"`
	IsOotbPolicy          pulumi.BoolPtrOutput   `pulumi:"isOotbPolicy"`
	Lastupdate            pulumi.IntOutput       `pulumi:"lastupdate"`
	// Container privileges configuration.
	LimitContainerPrivileges ContainerRuntimePolicyLimitContainerPrivilegeArrayOutput `pulumi:"limitContainerPrivileges"`
	// If true, prevents the container from obtaining new privileges at runtime. (only enabled in enforce mode)
	LimitNewPrivileges pulumi.BoolPtrOutput                          `pulumi:"limitNewPrivileges"`
	LinuxCapabilities  ContainerRuntimePolicyLinuxCapabilitiesOutput `pulumi:"linuxCapabilities"`
	// Configuration for Real-Time Malware Protection.
	MalwareScanOptions ContainerRuntimePolicyMalwareScanOptionsOutput `pulumi:"malwareScanOptions"`
	// If true, system time changes will be monitored.
	MonitorSystemTimeChanges pulumi.BoolPtrOutput `pulumi:"monitorSystemTimeChanges"`
	// Name assigned to the attribute.
	Name                     pulumi.StringOutput                                  `pulumi:"name"`
	NoNewPrivileges          pulumi.BoolPtrOutput                                 `pulumi:"noNewPrivileges"`
	OnlyRegisteredImages     pulumi.BoolPtrOutput                                 `pulumi:"onlyRegisteredImages"`
	PackageBlock             ContainerRuntimePolicyPackageBlockOutput             `pulumi:"packageBlock"`
	Permission               pulumi.StringPtrOutput                               `pulumi:"permission"`
	PortBlock                ContainerRuntimePolicyPortBlockOutput                `pulumi:"portBlock"`
	ReadonlyFiles            ContainerRuntimePolicyReadonlyFilesOutput            `pulumi:"readonlyFiles"`
	ReadonlyRegistry         ContainerRuntimePolicyReadonlyRegistryOutput         `pulumi:"readonlyRegistry"`
	Registry                 pulumi.StringPtrOutput                               `pulumi:"registry"`
	RegistryAccessMonitoring ContainerRuntimePolicyRegistryAccessMonitoringOutput `pulumi:"registryAccessMonitoring"`
	RepoName                 pulumi.StringPtrOutput                               `pulumi:"repoName"`
	ResourceName             pulumi.StringPtrOutput                               `pulumi:"resourceName"`
	ResourceType             pulumi.StringPtrOutput                               `pulumi:"resourceType"`
	// Restricted volumes configuration.
	RestrictedVolumes ContainerRuntimePolicyRestrictedVolumeArrayOutput `pulumi:"restrictedVolumes"`
	ReverseShell      ContainerRuntimePolicyReverseShellOutput          `pulumi:"reverseShell"`
	RuntimeMode       pulumi.IntPtrOutput                               `pulumi:"runtimeMode"`
	RuntimeType       pulumi.StringPtrOutput                            `pulumi:"runtimeType"`
	// Logical expression of how to compute the dependency of the scope variables.
	ScopeExpression pulumi.StringOutput `pulumi:"scopeExpression"`
	// List of scope attributes.
	ScopeVariables ContainerRuntimePolicyScopeVariableArrayOutput `pulumi:"scopeVariables"`
	// Scope configuration.
	Scopes                    ContainerRuntimePolicyScopeArrayOutput                `pulumi:"scopes"`
	SystemIntegrityProtection ContainerRuntimePolicySystemIntegrityProtectionOutput `pulumi:"systemIntegrityProtection"`
	Tripwire                  ContainerRuntimePolicyTripwireOutput                  `pulumi:"tripwire"`
	Type                      pulumi.StringPtrOutput                                `pulumi:"type"`
	Updated                   pulumi.StringOutput                                   `pulumi:"updated"`
	Version                   pulumi.StringPtrOutput                                `pulumi:"version"`
	VpatchVersion             pulumi.StringPtrOutput                                `pulumi:"vpatchVersion"`
	WhitelistedOsUsers        ContainerRuntimePolicyWhitelistedOsUsersOutput        `pulumi:"whitelistedOsUsers"`
}

// NewContainerRuntimePolicy registers a new resource with the given unique name, arguments, and options.
func NewContainerRuntimePolicy(ctx *pulumi.Context,
	name string, args *ContainerRuntimePolicyArgs, opts ...pulumi.ResourceOption) (*ContainerRuntimePolicy, error) {
	if args == nil {
		args = &ContainerRuntimePolicyArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ContainerRuntimePolicy
	err := ctx.RegisterResource("aquasec:index/containerRuntimePolicy:ContainerRuntimePolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetContainerRuntimePolicy gets an existing ContainerRuntimePolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetContainerRuntimePolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ContainerRuntimePolicyState, opts ...pulumi.ResourceOption) (*ContainerRuntimePolicy, error) {
	var resource ContainerRuntimePolicy
	err := ctx.ReadResource("aquasec:index/containerRuntimePolicy:ContainerRuntimePolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ContainerRuntimePolicy resources.
type containerRuntimePolicyState struct {
	// Allowed executables configuration.
	AllowedExecutables []ContainerRuntimePolicyAllowedExecutable `pulumi:"allowedExecutables"`
	// List of allowed registries.
	AllowedRegistries []ContainerRuntimePolicyAllowedRegistry `pulumi:"allowedRegistries"`
	// Indicates the application scope of the service.
	ApplicationScopes []string `pulumi:"applicationScopes"`
	// If true, all network activity will be audited.
	AuditAllNetworkActivity *bool `pulumi:"auditAllNetworkActivity"`
	// If true, all process activity will be audited.
	AuditAllProcessesActivity *bool `pulumi:"auditAllProcessesActivity"`
	// Detects brute force login attempts
	AuditBruteForceLogin *bool `pulumi:"auditBruteForceLogin"`
	// If true, full command arguments will be audited.
	AuditFullCommandArguments *bool                           `pulumi:"auditFullCommandArguments"`
	Auditing                  *ContainerRuntimePolicyAuditing `pulumi:"auditing"`
	// Username of the account that created the service.
	Author             *string                                   `pulumi:"author"`
	BlacklistedOsUsers *ContainerRuntimePolicyBlacklistedOsUsers `pulumi:"blacklistedOsUsers"`
	// If true, prevent containers from running with access to host network.
	BlockAccessHostNetwork *bool `pulumi:"blockAccessHostNetwork"`
	// If true, prevent containers from running with adding capabilities with `--cap-add` privilege.
	BlockAddingCapabilities *bool `pulumi:"blockAddingCapabilities"`
	// If true, exec into a container is prevented.
	BlockContainerExec *bool `pulumi:"blockContainerExec"`
	// Detect and prevent communication to DNS/IP addresses known to be used for Cryptocurrency Mining
	BlockCryptocurrencyMining *bool `pulumi:"blockCryptocurrencyMining"`
	BlockDisallowedImages     *bool `pulumi:"blockDisallowedImages"`
	// Detect and prevent running in-memory execution
	BlockFilelessExec *bool `pulumi:"blockFilelessExec"`
	// If true, prevent containers from running with the capability to bind in port lower than 1024.
	BlockLowPortBinding *bool `pulumi:"blockLowPortBinding"`
	// If true, running containers in non-compliant pods is prevented.
	BlockNonCompliantWorkloads *bool `pulumi:"blockNonCompliantWorkloads"`
	// If true, running non-kubernetes containers is prevented.
	BlockNonK8sContainers *bool `pulumi:"blockNonK8sContainers"`
	// If true, prevent containers from running with privileged container capability.
	BlockPrivilegedContainers *bool `pulumi:"blockPrivilegedContainers"`
	// If true, prevent containers from running with root user.
	BlockRootUser *bool `pulumi:"blockRootUser"`
	// If true, prevent containers from running with the privilege to use the IPC namespace.
	BlockUseIpcNamespace *bool `pulumi:"blockUseIpcNamespace"`
	// If true, prevent containers from running with the privilege to use the PID namespace.
	BlockUsePidNamespace *bool `pulumi:"blockUsePidNamespace"`
	// If true, prevent containers from running with the privilege to use the user namespace.
	BlockUseUserNamespace *bool `pulumi:"blockUseUserNamespace"`
	// If true, prevent containers from running with the privilege to use the UTS namespace.
	BlockUseUtsNamespace *bool `pulumi:"blockUseUtsNamespace"`
	// If true, prevents containers from using specific Unix capabilities.
	BlockedCapabilities []string `pulumi:"blockedCapabilities"`
	// List of executables that are prevented from running in containers.
	BlockedExecutables []string `pulumi:"blockedExecutables"`
	// List of files that are prevented from being read, modified and executed in the containers.
	BlockedFiles []string `pulumi:"blockedFiles"`
	// List of blocked inbound ports.
	BlockedInboundPorts []string `pulumi:"blockedInboundPorts"`
	// List of blocked outbound ports.
	BlockedOutboundPorts []string `pulumi:"blockedOutboundPorts"`
	// Prevent containers from reading, writing, or executing all files in the list of packages.
	BlockedPackages []string `pulumi:"blockedPackages"`
	// List of volumes that are prevented from being mounted in the containers.
	BlockedVolumes []string `pulumi:"blockedVolumes"`
	// Bypass scope configuration.
	BypassScopes  []ContainerRuntimePolicyBypassScope  `pulumi:"bypassScopes"`
	ContainerExec *ContainerRuntimePolicyContainerExec `pulumi:"containerExec"`
	// List of processes that will be allowed.
	ContainerExecAllowedProcesses []string `pulumi:"containerExecAllowedProcesses"`
	Created                       *string  `pulumi:"created"`
	Cve                           *string  `pulumi:"cve"`
	DefaultSecurityProfile        *string  `pulumi:"defaultSecurityProfile"`
	// The description of the container runtime policy
	Description *string `pulumi:"description"`
	Digest      *string `pulumi:"digest"`
	// Drift prevention configuration.
	DriftPreventions      []ContainerRuntimePolicyDriftPrevention `pulumi:"driftPreventions"`
	EnableCryptoMiningDns *bool                                   `pulumi:"enableCryptoMiningDns"`
	// If true, fork bombs are prevented in the containers.
	EnableForkGuard          *bool `pulumi:"enableForkGuard"`
	EnableIpReputation       *bool `pulumi:"enableIpReputation"`
	EnablePortScanProtection *bool `pulumi:"enablePortScanProtection"`
	// Whether allowed executables configuration is enabled.
	Enabled *bool `pulumi:"enabled"`
	// Indicates that policy should effect container execution (not just for audit).
	Enforce *bool `pulumi:"enforce"`
	// Indicates the number of days after which the runtime policy will be changed to enforce mode.
	EnforceAfterDays        *int `pulumi:"enforceAfterDays"`
	EnforceSchedulerAddedOn *int `pulumi:"enforceSchedulerAddedOn"`
	// List of excluded application scopes.
	ExcludeApplicationScopes []string `pulumi:"excludeApplicationScopes"`
	// Executable blacklist configuration.
	ExecutableBlacklists   []ContainerRuntimePolicyExecutableBlacklist   `pulumi:"executableBlacklists"`
	FailedKubernetesChecks *ContainerRuntimePolicyFailedKubernetesChecks `pulumi:"failedKubernetesChecks"`
	FileBlock              *ContainerRuntimePolicyFileBlock              `pulumi:"fileBlock"`
	// Configuration for file integrity monitoring.
	FileIntegrityMonitoring *ContainerRuntimePolicyFileIntegrityMonitoring `pulumi:"fileIntegrityMonitoring"`
	// Process limit for the fork guard.
	ForkGuardProcessLimit *int    `pulumi:"forkGuardProcessLimit"`
	ImageName             *string `pulumi:"imageName"`
	IsAuditChecked        *bool   `pulumi:"isAuditChecked"`
	IsAutoGenerated       *bool   `pulumi:"isAutoGenerated"`
	IsOotbPolicy          *bool   `pulumi:"isOotbPolicy"`
	Lastupdate            *int    `pulumi:"lastupdate"`
	// Container privileges configuration.
	LimitContainerPrivileges []ContainerRuntimePolicyLimitContainerPrivilege `pulumi:"limitContainerPrivileges"`
	// If true, prevents the container from obtaining new privileges at runtime. (only enabled in enforce mode)
	LimitNewPrivileges *bool                                    `pulumi:"limitNewPrivileges"`
	LinuxCapabilities  *ContainerRuntimePolicyLinuxCapabilities `pulumi:"linuxCapabilities"`
	// Configuration for Real-Time Malware Protection.
	MalwareScanOptions *ContainerRuntimePolicyMalwareScanOptions `pulumi:"malwareScanOptions"`
	// If true, system time changes will be monitored.
	MonitorSystemTimeChanges *bool `pulumi:"monitorSystemTimeChanges"`
	// Name assigned to the attribute.
	Name                     *string                                         `pulumi:"name"`
	NoNewPrivileges          *bool                                           `pulumi:"noNewPrivileges"`
	OnlyRegisteredImages     *bool                                           `pulumi:"onlyRegisteredImages"`
	PackageBlock             *ContainerRuntimePolicyPackageBlock             `pulumi:"packageBlock"`
	Permission               *string                                         `pulumi:"permission"`
	PortBlock                *ContainerRuntimePolicyPortBlock                `pulumi:"portBlock"`
	ReadonlyFiles            *ContainerRuntimePolicyReadonlyFiles            `pulumi:"readonlyFiles"`
	ReadonlyRegistry         *ContainerRuntimePolicyReadonlyRegistry         `pulumi:"readonlyRegistry"`
	Registry                 *string                                         `pulumi:"registry"`
	RegistryAccessMonitoring *ContainerRuntimePolicyRegistryAccessMonitoring `pulumi:"registryAccessMonitoring"`
	RepoName                 *string                                         `pulumi:"repoName"`
	ResourceName             *string                                         `pulumi:"resourceName"`
	ResourceType             *string                                         `pulumi:"resourceType"`
	// Restricted volumes configuration.
	RestrictedVolumes []ContainerRuntimePolicyRestrictedVolume `pulumi:"restrictedVolumes"`
	ReverseShell      *ContainerRuntimePolicyReverseShell      `pulumi:"reverseShell"`
	RuntimeMode       *int                                     `pulumi:"runtimeMode"`
	RuntimeType       *string                                  `pulumi:"runtimeType"`
	// Logical expression of how to compute the dependency of the scope variables.
	ScopeExpression *string `pulumi:"scopeExpression"`
	// List of scope attributes.
	ScopeVariables []ContainerRuntimePolicyScopeVariable `pulumi:"scopeVariables"`
	// Scope configuration.
	Scopes                    []ContainerRuntimePolicyScope                    `pulumi:"scopes"`
	SystemIntegrityProtection *ContainerRuntimePolicySystemIntegrityProtection `pulumi:"systemIntegrityProtection"`
	Tripwire                  *ContainerRuntimePolicyTripwire                  `pulumi:"tripwire"`
	Type                      *string                                          `pulumi:"type"`
	Updated                   *string                                          `pulumi:"updated"`
	Version                   *string                                          `pulumi:"version"`
	VpatchVersion             *string                                          `pulumi:"vpatchVersion"`
	WhitelistedOsUsers        *ContainerRuntimePolicyWhitelistedOsUsers        `pulumi:"whitelistedOsUsers"`
}

type ContainerRuntimePolicyState struct {
	// Allowed executables configuration.
	AllowedExecutables ContainerRuntimePolicyAllowedExecutableArrayInput
	// List of allowed registries.
	AllowedRegistries ContainerRuntimePolicyAllowedRegistryArrayInput
	// Indicates the application scope of the service.
	ApplicationScopes pulumi.StringArrayInput
	// If true, all network activity will be audited.
	AuditAllNetworkActivity pulumi.BoolPtrInput
	// If true, all process activity will be audited.
	AuditAllProcessesActivity pulumi.BoolPtrInput
	// Detects brute force login attempts
	AuditBruteForceLogin pulumi.BoolPtrInput
	// If true, full command arguments will be audited.
	AuditFullCommandArguments pulumi.BoolPtrInput
	Auditing                  ContainerRuntimePolicyAuditingPtrInput
	// Username of the account that created the service.
	Author             pulumi.StringPtrInput
	BlacklistedOsUsers ContainerRuntimePolicyBlacklistedOsUsersPtrInput
	// If true, prevent containers from running with access to host network.
	BlockAccessHostNetwork pulumi.BoolPtrInput
	// If true, prevent containers from running with adding capabilities with `--cap-add` privilege.
	BlockAddingCapabilities pulumi.BoolPtrInput
	// If true, exec into a container is prevented.
	BlockContainerExec pulumi.BoolPtrInput
	// Detect and prevent communication to DNS/IP addresses known to be used for Cryptocurrency Mining
	BlockCryptocurrencyMining pulumi.BoolPtrInput
	BlockDisallowedImages     pulumi.BoolPtrInput
	// Detect and prevent running in-memory execution
	BlockFilelessExec pulumi.BoolPtrInput
	// If true, prevent containers from running with the capability to bind in port lower than 1024.
	BlockLowPortBinding pulumi.BoolPtrInput
	// If true, running containers in non-compliant pods is prevented.
	BlockNonCompliantWorkloads pulumi.BoolPtrInput
	// If true, running non-kubernetes containers is prevented.
	BlockNonK8sContainers pulumi.BoolPtrInput
	// If true, prevent containers from running with privileged container capability.
	BlockPrivilegedContainers pulumi.BoolPtrInput
	// If true, prevent containers from running with root user.
	BlockRootUser pulumi.BoolPtrInput
	// If true, prevent containers from running with the privilege to use the IPC namespace.
	BlockUseIpcNamespace pulumi.BoolPtrInput
	// If true, prevent containers from running with the privilege to use the PID namespace.
	BlockUsePidNamespace pulumi.BoolPtrInput
	// If true, prevent containers from running with the privilege to use the user namespace.
	BlockUseUserNamespace pulumi.BoolPtrInput
	// If true, prevent containers from running with the privilege to use the UTS namespace.
	BlockUseUtsNamespace pulumi.BoolPtrInput
	// If true, prevents containers from using specific Unix capabilities.
	BlockedCapabilities pulumi.StringArrayInput
	// List of executables that are prevented from running in containers.
	BlockedExecutables pulumi.StringArrayInput
	// List of files that are prevented from being read, modified and executed in the containers.
	BlockedFiles pulumi.StringArrayInput
	// List of blocked inbound ports.
	BlockedInboundPorts pulumi.StringArrayInput
	// List of blocked outbound ports.
	BlockedOutboundPorts pulumi.StringArrayInput
	// Prevent containers from reading, writing, or executing all files in the list of packages.
	BlockedPackages pulumi.StringArrayInput
	// List of volumes that are prevented from being mounted in the containers.
	BlockedVolumes pulumi.StringArrayInput
	// Bypass scope configuration.
	BypassScopes  ContainerRuntimePolicyBypassScopeArrayInput
	ContainerExec ContainerRuntimePolicyContainerExecPtrInput
	// List of processes that will be allowed.
	ContainerExecAllowedProcesses pulumi.StringArrayInput
	Created                       pulumi.StringPtrInput
	Cve                           pulumi.StringPtrInput
	DefaultSecurityProfile        pulumi.StringPtrInput
	// The description of the container runtime policy
	Description pulumi.StringPtrInput
	Digest      pulumi.StringPtrInput
	// Drift prevention configuration.
	DriftPreventions      ContainerRuntimePolicyDriftPreventionArrayInput
	EnableCryptoMiningDns pulumi.BoolPtrInput
	// If true, fork bombs are prevented in the containers.
	EnableForkGuard          pulumi.BoolPtrInput
	EnableIpReputation       pulumi.BoolPtrInput
	EnablePortScanProtection pulumi.BoolPtrInput
	// Whether allowed executables configuration is enabled.
	Enabled pulumi.BoolPtrInput
	// Indicates that policy should effect container execution (not just for audit).
	Enforce pulumi.BoolPtrInput
	// Indicates the number of days after which the runtime policy will be changed to enforce mode.
	EnforceAfterDays        pulumi.IntPtrInput
	EnforceSchedulerAddedOn pulumi.IntPtrInput
	// List of excluded application scopes.
	ExcludeApplicationScopes pulumi.StringArrayInput
	// Executable blacklist configuration.
	ExecutableBlacklists   ContainerRuntimePolicyExecutableBlacklistArrayInput
	FailedKubernetesChecks ContainerRuntimePolicyFailedKubernetesChecksPtrInput
	FileBlock              ContainerRuntimePolicyFileBlockPtrInput
	// Configuration for file integrity monitoring.
	FileIntegrityMonitoring ContainerRuntimePolicyFileIntegrityMonitoringPtrInput
	// Process limit for the fork guard.
	ForkGuardProcessLimit pulumi.IntPtrInput
	ImageName             pulumi.StringPtrInput
	IsAuditChecked        pulumi.BoolPtrInput
	IsAutoGenerated       pulumi.BoolPtrInput
	IsOotbPolicy          pulumi.BoolPtrInput
	Lastupdate            pulumi.IntPtrInput
	// Container privileges configuration.
	LimitContainerPrivileges ContainerRuntimePolicyLimitContainerPrivilegeArrayInput
	// If true, prevents the container from obtaining new privileges at runtime. (only enabled in enforce mode)
	LimitNewPrivileges pulumi.BoolPtrInput
	LinuxCapabilities  ContainerRuntimePolicyLinuxCapabilitiesPtrInput
	// Configuration for Real-Time Malware Protection.
	MalwareScanOptions ContainerRuntimePolicyMalwareScanOptionsPtrInput
	// If true, system time changes will be monitored.
	MonitorSystemTimeChanges pulumi.BoolPtrInput
	// Name assigned to the attribute.
	Name                     pulumi.StringPtrInput
	NoNewPrivileges          pulumi.BoolPtrInput
	OnlyRegisteredImages     pulumi.BoolPtrInput
	PackageBlock             ContainerRuntimePolicyPackageBlockPtrInput
	Permission               pulumi.StringPtrInput
	PortBlock                ContainerRuntimePolicyPortBlockPtrInput
	ReadonlyFiles            ContainerRuntimePolicyReadonlyFilesPtrInput
	ReadonlyRegistry         ContainerRuntimePolicyReadonlyRegistryPtrInput
	Registry                 pulumi.StringPtrInput
	RegistryAccessMonitoring ContainerRuntimePolicyRegistryAccessMonitoringPtrInput
	RepoName                 pulumi.StringPtrInput
	ResourceName             pulumi.StringPtrInput
	ResourceType             pulumi.StringPtrInput
	// Restricted volumes configuration.
	RestrictedVolumes ContainerRuntimePolicyRestrictedVolumeArrayInput
	ReverseShell      ContainerRuntimePolicyReverseShellPtrInput
	RuntimeMode       pulumi.IntPtrInput
	RuntimeType       pulumi.StringPtrInput
	// Logical expression of how to compute the dependency of the scope variables.
	ScopeExpression pulumi.StringPtrInput
	// List of scope attributes.
	ScopeVariables ContainerRuntimePolicyScopeVariableArrayInput
	// Scope configuration.
	Scopes                    ContainerRuntimePolicyScopeArrayInput
	SystemIntegrityProtection ContainerRuntimePolicySystemIntegrityProtectionPtrInput
	Tripwire                  ContainerRuntimePolicyTripwirePtrInput
	Type                      pulumi.StringPtrInput
	Updated                   pulumi.StringPtrInput
	Version                   pulumi.StringPtrInput
	VpatchVersion             pulumi.StringPtrInput
	WhitelistedOsUsers        ContainerRuntimePolicyWhitelistedOsUsersPtrInput
}

func (ContainerRuntimePolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*containerRuntimePolicyState)(nil)).Elem()
}

type containerRuntimePolicyArgs struct {
	// Allowed executables configuration.
	AllowedExecutables []ContainerRuntimePolicyAllowedExecutable `pulumi:"allowedExecutables"`
	// List of allowed registries.
	AllowedRegistries []ContainerRuntimePolicyAllowedRegistry `pulumi:"allowedRegistries"`
	// Indicates the application scope of the service.
	ApplicationScopes []string `pulumi:"applicationScopes"`
	// If true, all network activity will be audited.
	AuditAllNetworkActivity *bool `pulumi:"auditAllNetworkActivity"`
	// If true, all process activity will be audited.
	AuditAllProcessesActivity *bool `pulumi:"auditAllProcessesActivity"`
	// Detects brute force login attempts
	AuditBruteForceLogin *bool `pulumi:"auditBruteForceLogin"`
	// If true, full command arguments will be audited.
	AuditFullCommandArguments *bool                           `pulumi:"auditFullCommandArguments"`
	Auditing                  *ContainerRuntimePolicyAuditing `pulumi:"auditing"`
	// Username of the account that created the service.
	Author             *string                                   `pulumi:"author"`
	BlacklistedOsUsers *ContainerRuntimePolicyBlacklistedOsUsers `pulumi:"blacklistedOsUsers"`
	// If true, prevent containers from running with access to host network.
	BlockAccessHostNetwork *bool `pulumi:"blockAccessHostNetwork"`
	// If true, prevent containers from running with adding capabilities with `--cap-add` privilege.
	BlockAddingCapabilities *bool `pulumi:"blockAddingCapabilities"`
	// If true, exec into a container is prevented.
	BlockContainerExec *bool `pulumi:"blockContainerExec"`
	// Detect and prevent communication to DNS/IP addresses known to be used for Cryptocurrency Mining
	BlockCryptocurrencyMining *bool `pulumi:"blockCryptocurrencyMining"`
	BlockDisallowedImages     *bool `pulumi:"blockDisallowedImages"`
	// Detect and prevent running in-memory execution
	BlockFilelessExec *bool `pulumi:"blockFilelessExec"`
	// If true, prevent containers from running with the capability to bind in port lower than 1024.
	BlockLowPortBinding *bool `pulumi:"blockLowPortBinding"`
	// If true, running containers in non-compliant pods is prevented.
	BlockNonCompliantWorkloads *bool `pulumi:"blockNonCompliantWorkloads"`
	// If true, running non-kubernetes containers is prevented.
	BlockNonK8sContainers *bool `pulumi:"blockNonK8sContainers"`
	// If true, prevent containers from running with privileged container capability.
	BlockPrivilegedContainers *bool `pulumi:"blockPrivilegedContainers"`
	// If true, prevent containers from running with root user.
	BlockRootUser *bool `pulumi:"blockRootUser"`
	// If true, prevent containers from running with the privilege to use the IPC namespace.
	BlockUseIpcNamespace *bool `pulumi:"blockUseIpcNamespace"`
	// If true, prevent containers from running with the privilege to use the PID namespace.
	BlockUsePidNamespace *bool `pulumi:"blockUsePidNamespace"`
	// If true, prevent containers from running with the privilege to use the user namespace.
	BlockUseUserNamespace *bool `pulumi:"blockUseUserNamespace"`
	// If true, prevent containers from running with the privilege to use the UTS namespace.
	BlockUseUtsNamespace *bool `pulumi:"blockUseUtsNamespace"`
	// If true, prevents containers from using specific Unix capabilities.
	BlockedCapabilities []string `pulumi:"blockedCapabilities"`
	// List of executables that are prevented from running in containers.
	BlockedExecutables []string `pulumi:"blockedExecutables"`
	// List of files that are prevented from being read, modified and executed in the containers.
	BlockedFiles []string `pulumi:"blockedFiles"`
	// List of blocked inbound ports.
	BlockedInboundPorts []string `pulumi:"blockedInboundPorts"`
	// List of blocked outbound ports.
	BlockedOutboundPorts []string `pulumi:"blockedOutboundPorts"`
	// Prevent containers from reading, writing, or executing all files in the list of packages.
	BlockedPackages []string `pulumi:"blockedPackages"`
	// List of volumes that are prevented from being mounted in the containers.
	BlockedVolumes []string `pulumi:"blockedVolumes"`
	// Bypass scope configuration.
	BypassScopes  []ContainerRuntimePolicyBypassScope  `pulumi:"bypassScopes"`
	ContainerExec *ContainerRuntimePolicyContainerExec `pulumi:"containerExec"`
	// List of processes that will be allowed.
	ContainerExecAllowedProcesses []string `pulumi:"containerExecAllowedProcesses"`
	Created                       *string  `pulumi:"created"`
	Cve                           *string  `pulumi:"cve"`
	DefaultSecurityProfile        *string  `pulumi:"defaultSecurityProfile"`
	// The description of the container runtime policy
	Description *string `pulumi:"description"`
	Digest      *string `pulumi:"digest"`
	// Drift prevention configuration.
	DriftPreventions      []ContainerRuntimePolicyDriftPrevention `pulumi:"driftPreventions"`
	EnableCryptoMiningDns *bool                                   `pulumi:"enableCryptoMiningDns"`
	// If true, fork bombs are prevented in the containers.
	EnableForkGuard          *bool `pulumi:"enableForkGuard"`
	EnableIpReputation       *bool `pulumi:"enableIpReputation"`
	EnablePortScanProtection *bool `pulumi:"enablePortScanProtection"`
	// Whether allowed executables configuration is enabled.
	Enabled *bool `pulumi:"enabled"`
	// Indicates that policy should effect container execution (not just for audit).
	Enforce *bool `pulumi:"enforce"`
	// Indicates the number of days after which the runtime policy will be changed to enforce mode.
	EnforceAfterDays        *int `pulumi:"enforceAfterDays"`
	EnforceSchedulerAddedOn *int `pulumi:"enforceSchedulerAddedOn"`
	// List of excluded application scopes.
	ExcludeApplicationScopes []string `pulumi:"excludeApplicationScopes"`
	// Executable blacklist configuration.
	ExecutableBlacklists   []ContainerRuntimePolicyExecutableBlacklist   `pulumi:"executableBlacklists"`
	FailedKubernetesChecks *ContainerRuntimePolicyFailedKubernetesChecks `pulumi:"failedKubernetesChecks"`
	FileBlock              *ContainerRuntimePolicyFileBlock              `pulumi:"fileBlock"`
	// Configuration for file integrity monitoring.
	FileIntegrityMonitoring *ContainerRuntimePolicyFileIntegrityMonitoring `pulumi:"fileIntegrityMonitoring"`
	// Process limit for the fork guard.
	ForkGuardProcessLimit *int    `pulumi:"forkGuardProcessLimit"`
	ImageName             *string `pulumi:"imageName"`
	IsAuditChecked        *bool   `pulumi:"isAuditChecked"`
	IsAutoGenerated       *bool   `pulumi:"isAutoGenerated"`
	IsOotbPolicy          *bool   `pulumi:"isOotbPolicy"`
	Lastupdate            *int    `pulumi:"lastupdate"`
	// Container privileges configuration.
	LimitContainerPrivileges []ContainerRuntimePolicyLimitContainerPrivilege `pulumi:"limitContainerPrivileges"`
	// If true, prevents the container from obtaining new privileges at runtime. (only enabled in enforce mode)
	LimitNewPrivileges *bool                                    `pulumi:"limitNewPrivileges"`
	LinuxCapabilities  *ContainerRuntimePolicyLinuxCapabilities `pulumi:"linuxCapabilities"`
	// Configuration for Real-Time Malware Protection.
	MalwareScanOptions *ContainerRuntimePolicyMalwareScanOptions `pulumi:"malwareScanOptions"`
	// If true, system time changes will be monitored.
	MonitorSystemTimeChanges *bool `pulumi:"monitorSystemTimeChanges"`
	// Name assigned to the attribute.
	Name                     *string                                         `pulumi:"name"`
	NoNewPrivileges          *bool                                           `pulumi:"noNewPrivileges"`
	OnlyRegisteredImages     *bool                                           `pulumi:"onlyRegisteredImages"`
	PackageBlock             *ContainerRuntimePolicyPackageBlock             `pulumi:"packageBlock"`
	Permission               *string                                         `pulumi:"permission"`
	PortBlock                *ContainerRuntimePolicyPortBlock                `pulumi:"portBlock"`
	ReadonlyFiles            *ContainerRuntimePolicyReadonlyFiles            `pulumi:"readonlyFiles"`
	ReadonlyRegistry         *ContainerRuntimePolicyReadonlyRegistry         `pulumi:"readonlyRegistry"`
	Registry                 *string                                         `pulumi:"registry"`
	RegistryAccessMonitoring *ContainerRuntimePolicyRegistryAccessMonitoring `pulumi:"registryAccessMonitoring"`
	RepoName                 *string                                         `pulumi:"repoName"`
	ResourceName             *string                                         `pulumi:"resourceName"`
	ResourceType             *string                                         `pulumi:"resourceType"`
	// Restricted volumes configuration.
	RestrictedVolumes []ContainerRuntimePolicyRestrictedVolume `pulumi:"restrictedVolumes"`
	ReverseShell      *ContainerRuntimePolicyReverseShell      `pulumi:"reverseShell"`
	RuntimeMode       *int                                     `pulumi:"runtimeMode"`
	RuntimeType       *string                                  `pulumi:"runtimeType"`
	// Logical expression of how to compute the dependency of the scope variables.
	ScopeExpression *string `pulumi:"scopeExpression"`
	// List of scope attributes.
	ScopeVariables []ContainerRuntimePolicyScopeVariable `pulumi:"scopeVariables"`
	// Scope configuration.
	Scopes                    []ContainerRuntimePolicyScope                    `pulumi:"scopes"`
	SystemIntegrityProtection *ContainerRuntimePolicySystemIntegrityProtection `pulumi:"systemIntegrityProtection"`
	Tripwire                  *ContainerRuntimePolicyTripwire                  `pulumi:"tripwire"`
	Type                      *string                                          `pulumi:"type"`
	Updated                   *string                                          `pulumi:"updated"`
	Version                   *string                                          `pulumi:"version"`
	VpatchVersion             *string                                          `pulumi:"vpatchVersion"`
	WhitelistedOsUsers        *ContainerRuntimePolicyWhitelistedOsUsers        `pulumi:"whitelistedOsUsers"`
}

// The set of arguments for constructing a ContainerRuntimePolicy resource.
type ContainerRuntimePolicyArgs struct {
	// Allowed executables configuration.
	AllowedExecutables ContainerRuntimePolicyAllowedExecutableArrayInput
	// List of allowed registries.
	AllowedRegistries ContainerRuntimePolicyAllowedRegistryArrayInput
	// Indicates the application scope of the service.
	ApplicationScopes pulumi.StringArrayInput
	// If true, all network activity will be audited.
	AuditAllNetworkActivity pulumi.BoolPtrInput
	// If true, all process activity will be audited.
	AuditAllProcessesActivity pulumi.BoolPtrInput
	// Detects brute force login attempts
	AuditBruteForceLogin pulumi.BoolPtrInput
	// If true, full command arguments will be audited.
	AuditFullCommandArguments pulumi.BoolPtrInput
	Auditing                  ContainerRuntimePolicyAuditingPtrInput
	// Username of the account that created the service.
	Author             pulumi.StringPtrInput
	BlacklistedOsUsers ContainerRuntimePolicyBlacklistedOsUsersPtrInput
	// If true, prevent containers from running with access to host network.
	BlockAccessHostNetwork pulumi.BoolPtrInput
	// If true, prevent containers from running with adding capabilities with `--cap-add` privilege.
	BlockAddingCapabilities pulumi.BoolPtrInput
	// If true, exec into a container is prevented.
	BlockContainerExec pulumi.BoolPtrInput
	// Detect and prevent communication to DNS/IP addresses known to be used for Cryptocurrency Mining
	BlockCryptocurrencyMining pulumi.BoolPtrInput
	BlockDisallowedImages     pulumi.BoolPtrInput
	// Detect and prevent running in-memory execution
	BlockFilelessExec pulumi.BoolPtrInput
	// If true, prevent containers from running with the capability to bind in port lower than 1024.
	BlockLowPortBinding pulumi.BoolPtrInput
	// If true, running containers in non-compliant pods is prevented.
	BlockNonCompliantWorkloads pulumi.BoolPtrInput
	// If true, running non-kubernetes containers is prevented.
	BlockNonK8sContainers pulumi.BoolPtrInput
	// If true, prevent containers from running with privileged container capability.
	BlockPrivilegedContainers pulumi.BoolPtrInput
	// If true, prevent containers from running with root user.
	BlockRootUser pulumi.BoolPtrInput
	// If true, prevent containers from running with the privilege to use the IPC namespace.
	BlockUseIpcNamespace pulumi.BoolPtrInput
	// If true, prevent containers from running with the privilege to use the PID namespace.
	BlockUsePidNamespace pulumi.BoolPtrInput
	// If true, prevent containers from running with the privilege to use the user namespace.
	BlockUseUserNamespace pulumi.BoolPtrInput
	// If true, prevent containers from running with the privilege to use the UTS namespace.
	BlockUseUtsNamespace pulumi.BoolPtrInput
	// If true, prevents containers from using specific Unix capabilities.
	BlockedCapabilities pulumi.StringArrayInput
	// List of executables that are prevented from running in containers.
	BlockedExecutables pulumi.StringArrayInput
	// List of files that are prevented from being read, modified and executed in the containers.
	BlockedFiles pulumi.StringArrayInput
	// List of blocked inbound ports.
	BlockedInboundPorts pulumi.StringArrayInput
	// List of blocked outbound ports.
	BlockedOutboundPorts pulumi.StringArrayInput
	// Prevent containers from reading, writing, or executing all files in the list of packages.
	BlockedPackages pulumi.StringArrayInput
	// List of volumes that are prevented from being mounted in the containers.
	BlockedVolumes pulumi.StringArrayInput
	// Bypass scope configuration.
	BypassScopes  ContainerRuntimePolicyBypassScopeArrayInput
	ContainerExec ContainerRuntimePolicyContainerExecPtrInput
	// List of processes that will be allowed.
	ContainerExecAllowedProcesses pulumi.StringArrayInput
	Created                       pulumi.StringPtrInput
	Cve                           pulumi.StringPtrInput
	DefaultSecurityProfile        pulumi.StringPtrInput
	// The description of the container runtime policy
	Description pulumi.StringPtrInput
	Digest      pulumi.StringPtrInput
	// Drift prevention configuration.
	DriftPreventions      ContainerRuntimePolicyDriftPreventionArrayInput
	EnableCryptoMiningDns pulumi.BoolPtrInput
	// If true, fork bombs are prevented in the containers.
	EnableForkGuard          pulumi.BoolPtrInput
	EnableIpReputation       pulumi.BoolPtrInput
	EnablePortScanProtection pulumi.BoolPtrInput
	// Whether allowed executables configuration is enabled.
	Enabled pulumi.BoolPtrInput
	// Indicates that policy should effect container execution (not just for audit).
	Enforce pulumi.BoolPtrInput
	// Indicates the number of days after which the runtime policy will be changed to enforce mode.
	EnforceAfterDays        pulumi.IntPtrInput
	EnforceSchedulerAddedOn pulumi.IntPtrInput
	// List of excluded application scopes.
	ExcludeApplicationScopes pulumi.StringArrayInput
	// Executable blacklist configuration.
	ExecutableBlacklists   ContainerRuntimePolicyExecutableBlacklistArrayInput
	FailedKubernetesChecks ContainerRuntimePolicyFailedKubernetesChecksPtrInput
	FileBlock              ContainerRuntimePolicyFileBlockPtrInput
	// Configuration for file integrity monitoring.
	FileIntegrityMonitoring ContainerRuntimePolicyFileIntegrityMonitoringPtrInput
	// Process limit for the fork guard.
	ForkGuardProcessLimit pulumi.IntPtrInput
	ImageName             pulumi.StringPtrInput
	IsAuditChecked        pulumi.BoolPtrInput
	IsAutoGenerated       pulumi.BoolPtrInput
	IsOotbPolicy          pulumi.BoolPtrInput
	Lastupdate            pulumi.IntPtrInput
	// Container privileges configuration.
	LimitContainerPrivileges ContainerRuntimePolicyLimitContainerPrivilegeArrayInput
	// If true, prevents the container from obtaining new privileges at runtime. (only enabled in enforce mode)
	LimitNewPrivileges pulumi.BoolPtrInput
	LinuxCapabilities  ContainerRuntimePolicyLinuxCapabilitiesPtrInput
	// Configuration for Real-Time Malware Protection.
	MalwareScanOptions ContainerRuntimePolicyMalwareScanOptionsPtrInput
	// If true, system time changes will be monitored.
	MonitorSystemTimeChanges pulumi.BoolPtrInput
	// Name assigned to the attribute.
	Name                     pulumi.StringPtrInput
	NoNewPrivileges          pulumi.BoolPtrInput
	OnlyRegisteredImages     pulumi.BoolPtrInput
	PackageBlock             ContainerRuntimePolicyPackageBlockPtrInput
	Permission               pulumi.StringPtrInput
	PortBlock                ContainerRuntimePolicyPortBlockPtrInput
	ReadonlyFiles            ContainerRuntimePolicyReadonlyFilesPtrInput
	ReadonlyRegistry         ContainerRuntimePolicyReadonlyRegistryPtrInput
	Registry                 pulumi.StringPtrInput
	RegistryAccessMonitoring ContainerRuntimePolicyRegistryAccessMonitoringPtrInput
	RepoName                 pulumi.StringPtrInput
	ResourceName             pulumi.StringPtrInput
	ResourceType             pulumi.StringPtrInput
	// Restricted volumes configuration.
	RestrictedVolumes ContainerRuntimePolicyRestrictedVolumeArrayInput
	ReverseShell      ContainerRuntimePolicyReverseShellPtrInput
	RuntimeMode       pulumi.IntPtrInput
	RuntimeType       pulumi.StringPtrInput
	// Logical expression of how to compute the dependency of the scope variables.
	ScopeExpression pulumi.StringPtrInput
	// List of scope attributes.
	ScopeVariables ContainerRuntimePolicyScopeVariableArrayInput
	// Scope configuration.
	Scopes                    ContainerRuntimePolicyScopeArrayInput
	SystemIntegrityProtection ContainerRuntimePolicySystemIntegrityProtectionPtrInput
	Tripwire                  ContainerRuntimePolicyTripwirePtrInput
	Type                      pulumi.StringPtrInput
	Updated                   pulumi.StringPtrInput
	Version                   pulumi.StringPtrInput
	VpatchVersion             pulumi.StringPtrInput
	WhitelistedOsUsers        ContainerRuntimePolicyWhitelistedOsUsersPtrInput
}

func (ContainerRuntimePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*containerRuntimePolicyArgs)(nil)).Elem()
}

type ContainerRuntimePolicyInput interface {
	pulumi.Input

	ToContainerRuntimePolicyOutput() ContainerRuntimePolicyOutput
	ToContainerRuntimePolicyOutputWithContext(ctx context.Context) ContainerRuntimePolicyOutput
}

func (*ContainerRuntimePolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerRuntimePolicy)(nil)).Elem()
}

func (i *ContainerRuntimePolicy) ToContainerRuntimePolicyOutput() ContainerRuntimePolicyOutput {
	return i.ToContainerRuntimePolicyOutputWithContext(context.Background())
}

func (i *ContainerRuntimePolicy) ToContainerRuntimePolicyOutputWithContext(ctx context.Context) ContainerRuntimePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerRuntimePolicyOutput)
}

// ContainerRuntimePolicyArrayInput is an input type that accepts ContainerRuntimePolicyArray and ContainerRuntimePolicyArrayOutput values.
// You can construct a concrete instance of `ContainerRuntimePolicyArrayInput` via:
//
//	ContainerRuntimePolicyArray{ ContainerRuntimePolicyArgs{...} }
type ContainerRuntimePolicyArrayInput interface {
	pulumi.Input

	ToContainerRuntimePolicyArrayOutput() ContainerRuntimePolicyArrayOutput
	ToContainerRuntimePolicyArrayOutputWithContext(context.Context) ContainerRuntimePolicyArrayOutput
}

type ContainerRuntimePolicyArray []ContainerRuntimePolicyInput

func (ContainerRuntimePolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ContainerRuntimePolicy)(nil)).Elem()
}

func (i ContainerRuntimePolicyArray) ToContainerRuntimePolicyArrayOutput() ContainerRuntimePolicyArrayOutput {
	return i.ToContainerRuntimePolicyArrayOutputWithContext(context.Background())
}

func (i ContainerRuntimePolicyArray) ToContainerRuntimePolicyArrayOutputWithContext(ctx context.Context) ContainerRuntimePolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerRuntimePolicyArrayOutput)
}

// ContainerRuntimePolicyMapInput is an input type that accepts ContainerRuntimePolicyMap and ContainerRuntimePolicyMapOutput values.
// You can construct a concrete instance of `ContainerRuntimePolicyMapInput` via:
//
//	ContainerRuntimePolicyMap{ "key": ContainerRuntimePolicyArgs{...} }
type ContainerRuntimePolicyMapInput interface {
	pulumi.Input

	ToContainerRuntimePolicyMapOutput() ContainerRuntimePolicyMapOutput
	ToContainerRuntimePolicyMapOutputWithContext(context.Context) ContainerRuntimePolicyMapOutput
}

type ContainerRuntimePolicyMap map[string]ContainerRuntimePolicyInput

func (ContainerRuntimePolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ContainerRuntimePolicy)(nil)).Elem()
}

func (i ContainerRuntimePolicyMap) ToContainerRuntimePolicyMapOutput() ContainerRuntimePolicyMapOutput {
	return i.ToContainerRuntimePolicyMapOutputWithContext(context.Background())
}

func (i ContainerRuntimePolicyMap) ToContainerRuntimePolicyMapOutputWithContext(ctx context.Context) ContainerRuntimePolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerRuntimePolicyMapOutput)
}

type ContainerRuntimePolicyOutput struct{ *pulumi.OutputState }

func (ContainerRuntimePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerRuntimePolicy)(nil)).Elem()
}

func (o ContainerRuntimePolicyOutput) ToContainerRuntimePolicyOutput() ContainerRuntimePolicyOutput {
	return o
}

func (o ContainerRuntimePolicyOutput) ToContainerRuntimePolicyOutputWithContext(ctx context.Context) ContainerRuntimePolicyOutput {
	return o
}

// Allowed executables configuration.
func (o ContainerRuntimePolicyOutput) AllowedExecutables() ContainerRuntimePolicyAllowedExecutableArrayOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) ContainerRuntimePolicyAllowedExecutableArrayOutput {
		return v.AllowedExecutables
	}).(ContainerRuntimePolicyAllowedExecutableArrayOutput)
}

// List of allowed registries.
func (o ContainerRuntimePolicyOutput) AllowedRegistries() ContainerRuntimePolicyAllowedRegistryArrayOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) ContainerRuntimePolicyAllowedRegistryArrayOutput {
		return v.AllowedRegistries
	}).(ContainerRuntimePolicyAllowedRegistryArrayOutput)
}

// Indicates the application scope of the service.
func (o ContainerRuntimePolicyOutput) ApplicationScopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.StringArrayOutput { return v.ApplicationScopes }).(pulumi.StringArrayOutput)
}

// If true, all network activity will be audited.
func (o ContainerRuntimePolicyOutput) AuditAllNetworkActivity() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.BoolPtrOutput { return v.AuditAllNetworkActivity }).(pulumi.BoolPtrOutput)
}

// If true, all process activity will be audited.
func (o ContainerRuntimePolicyOutput) AuditAllProcessesActivity() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.BoolPtrOutput { return v.AuditAllProcessesActivity }).(pulumi.BoolPtrOutput)
}

// Detects brute force login attempts
func (o ContainerRuntimePolicyOutput) AuditBruteForceLogin() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.BoolPtrOutput { return v.AuditBruteForceLogin }).(pulumi.BoolPtrOutput)
}

// If true, full command arguments will be audited.
func (o ContainerRuntimePolicyOutput) AuditFullCommandArguments() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.BoolPtrOutput { return v.AuditFullCommandArguments }).(pulumi.BoolPtrOutput)
}

func (o ContainerRuntimePolicyOutput) Auditing() ContainerRuntimePolicyAuditingOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) ContainerRuntimePolicyAuditingOutput { return v.Auditing }).(ContainerRuntimePolicyAuditingOutput)
}

// Username of the account that created the service.
func (o ContainerRuntimePolicyOutput) Author() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.StringOutput { return v.Author }).(pulumi.StringOutput)
}

func (o ContainerRuntimePolicyOutput) BlacklistedOsUsers() ContainerRuntimePolicyBlacklistedOsUsersOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) ContainerRuntimePolicyBlacklistedOsUsersOutput {
		return v.BlacklistedOsUsers
	}).(ContainerRuntimePolicyBlacklistedOsUsersOutput)
}

// If true, prevent containers from running with access to host network.
func (o ContainerRuntimePolicyOutput) BlockAccessHostNetwork() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.BoolPtrOutput { return v.BlockAccessHostNetwork }).(pulumi.BoolPtrOutput)
}

// If true, prevent containers from running with adding capabilities with `--cap-add` privilege.
func (o ContainerRuntimePolicyOutput) BlockAddingCapabilities() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.BoolPtrOutput { return v.BlockAddingCapabilities }).(pulumi.BoolPtrOutput)
}

// If true, exec into a container is prevented.
func (o ContainerRuntimePolicyOutput) BlockContainerExec() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.BoolPtrOutput { return v.BlockContainerExec }).(pulumi.BoolPtrOutput)
}

// Detect and prevent communication to DNS/IP addresses known to be used for Cryptocurrency Mining
func (o ContainerRuntimePolicyOutput) BlockCryptocurrencyMining() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.BoolPtrOutput { return v.BlockCryptocurrencyMining }).(pulumi.BoolPtrOutput)
}

func (o ContainerRuntimePolicyOutput) BlockDisallowedImages() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.BoolPtrOutput { return v.BlockDisallowedImages }).(pulumi.BoolPtrOutput)
}

// Detect and prevent running in-memory execution
func (o ContainerRuntimePolicyOutput) BlockFilelessExec() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.BoolPtrOutput { return v.BlockFilelessExec }).(pulumi.BoolPtrOutput)
}

// If true, prevent containers from running with the capability to bind in port lower than 1024.
func (o ContainerRuntimePolicyOutput) BlockLowPortBinding() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.BoolPtrOutput { return v.BlockLowPortBinding }).(pulumi.BoolPtrOutput)
}

// If true, running containers in non-compliant pods is prevented.
func (o ContainerRuntimePolicyOutput) BlockNonCompliantWorkloads() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.BoolPtrOutput { return v.BlockNonCompliantWorkloads }).(pulumi.BoolPtrOutput)
}

// If true, running non-kubernetes containers is prevented.
func (o ContainerRuntimePolicyOutput) BlockNonK8sContainers() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.BoolPtrOutput { return v.BlockNonK8sContainers }).(pulumi.BoolPtrOutput)
}

// If true, prevent containers from running with privileged container capability.
func (o ContainerRuntimePolicyOutput) BlockPrivilegedContainers() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.BoolPtrOutput { return v.BlockPrivilegedContainers }).(pulumi.BoolPtrOutput)
}

// If true, prevent containers from running with root user.
func (o ContainerRuntimePolicyOutput) BlockRootUser() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.BoolPtrOutput { return v.BlockRootUser }).(pulumi.BoolPtrOutput)
}

// If true, prevent containers from running with the privilege to use the IPC namespace.
func (o ContainerRuntimePolicyOutput) BlockUseIpcNamespace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.BoolPtrOutput { return v.BlockUseIpcNamespace }).(pulumi.BoolPtrOutput)
}

// If true, prevent containers from running with the privilege to use the PID namespace.
func (o ContainerRuntimePolicyOutput) BlockUsePidNamespace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.BoolPtrOutput { return v.BlockUsePidNamespace }).(pulumi.BoolPtrOutput)
}

// If true, prevent containers from running with the privilege to use the user namespace.
func (o ContainerRuntimePolicyOutput) BlockUseUserNamespace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.BoolPtrOutput { return v.BlockUseUserNamespace }).(pulumi.BoolPtrOutput)
}

// If true, prevent containers from running with the privilege to use the UTS namespace.
func (o ContainerRuntimePolicyOutput) BlockUseUtsNamespace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.BoolPtrOutput { return v.BlockUseUtsNamespace }).(pulumi.BoolPtrOutput)
}

// If true, prevents containers from using specific Unix capabilities.
func (o ContainerRuntimePolicyOutput) BlockedCapabilities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.StringArrayOutput { return v.BlockedCapabilities }).(pulumi.StringArrayOutput)
}

// List of executables that are prevented from running in containers.
func (o ContainerRuntimePolicyOutput) BlockedExecutables() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.StringArrayOutput { return v.BlockedExecutables }).(pulumi.StringArrayOutput)
}

// List of files that are prevented from being read, modified and executed in the containers.
func (o ContainerRuntimePolicyOutput) BlockedFiles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.StringArrayOutput { return v.BlockedFiles }).(pulumi.StringArrayOutput)
}

// List of blocked inbound ports.
func (o ContainerRuntimePolicyOutput) BlockedInboundPorts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.StringArrayOutput { return v.BlockedInboundPorts }).(pulumi.StringArrayOutput)
}

// List of blocked outbound ports.
func (o ContainerRuntimePolicyOutput) BlockedOutboundPorts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.StringArrayOutput { return v.BlockedOutboundPorts }).(pulumi.StringArrayOutput)
}

// Prevent containers from reading, writing, or executing all files in the list of packages.
func (o ContainerRuntimePolicyOutput) BlockedPackages() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.StringArrayOutput { return v.BlockedPackages }).(pulumi.StringArrayOutput)
}

// List of volumes that are prevented from being mounted in the containers.
func (o ContainerRuntimePolicyOutput) BlockedVolumes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.StringArrayOutput { return v.BlockedVolumes }).(pulumi.StringArrayOutput)
}

// Bypass scope configuration.
func (o ContainerRuntimePolicyOutput) BypassScopes() ContainerRuntimePolicyBypassScopeArrayOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) ContainerRuntimePolicyBypassScopeArrayOutput { return v.BypassScopes }).(ContainerRuntimePolicyBypassScopeArrayOutput)
}

func (o ContainerRuntimePolicyOutput) ContainerExec() ContainerRuntimePolicyContainerExecOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) ContainerRuntimePolicyContainerExecOutput { return v.ContainerExec }).(ContainerRuntimePolicyContainerExecOutput)
}

// List of processes that will be allowed.
func (o ContainerRuntimePolicyOutput) ContainerExecAllowedProcesses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.StringArrayOutput { return v.ContainerExecAllowedProcesses }).(pulumi.StringArrayOutput)
}

func (o ContainerRuntimePolicyOutput) Created() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.StringOutput { return v.Created }).(pulumi.StringOutput)
}

func (o ContainerRuntimePolicyOutput) Cve() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.StringPtrOutput { return v.Cve }).(pulumi.StringPtrOutput)
}

func (o ContainerRuntimePolicyOutput) DefaultSecurityProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.StringPtrOutput { return v.DefaultSecurityProfile }).(pulumi.StringPtrOutput)
}

// The description of the container runtime policy
func (o ContainerRuntimePolicyOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ContainerRuntimePolicyOutput) Digest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.StringPtrOutput { return v.Digest }).(pulumi.StringPtrOutput)
}

// Drift prevention configuration.
func (o ContainerRuntimePolicyOutput) DriftPreventions() ContainerRuntimePolicyDriftPreventionArrayOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) ContainerRuntimePolicyDriftPreventionArrayOutput {
		return v.DriftPreventions
	}).(ContainerRuntimePolicyDriftPreventionArrayOutput)
}

func (o ContainerRuntimePolicyOutput) EnableCryptoMiningDns() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.BoolPtrOutput { return v.EnableCryptoMiningDns }).(pulumi.BoolPtrOutput)
}

// If true, fork bombs are prevented in the containers.
func (o ContainerRuntimePolicyOutput) EnableForkGuard() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.BoolPtrOutput { return v.EnableForkGuard }).(pulumi.BoolPtrOutput)
}

func (o ContainerRuntimePolicyOutput) EnableIpReputation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.BoolPtrOutput { return v.EnableIpReputation }).(pulumi.BoolPtrOutput)
}

func (o ContainerRuntimePolicyOutput) EnablePortScanProtection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.BoolPtrOutput { return v.EnablePortScanProtection }).(pulumi.BoolPtrOutput)
}

// Whether allowed executables configuration is enabled.
func (o ContainerRuntimePolicyOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Indicates that policy should effect container execution (not just for audit).
func (o ContainerRuntimePolicyOutput) Enforce() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.BoolPtrOutput { return v.Enforce }).(pulumi.BoolPtrOutput)
}

// Indicates the number of days after which the runtime policy will be changed to enforce mode.
func (o ContainerRuntimePolicyOutput) EnforceAfterDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.IntPtrOutput { return v.EnforceAfterDays }).(pulumi.IntPtrOutput)
}

func (o ContainerRuntimePolicyOutput) EnforceSchedulerAddedOn() pulumi.IntOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.IntOutput { return v.EnforceSchedulerAddedOn }).(pulumi.IntOutput)
}

// List of excluded application scopes.
func (o ContainerRuntimePolicyOutput) ExcludeApplicationScopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.StringArrayOutput { return v.ExcludeApplicationScopes }).(pulumi.StringArrayOutput)
}

// Executable blacklist configuration.
func (o ContainerRuntimePolicyOutput) ExecutableBlacklists() ContainerRuntimePolicyExecutableBlacklistArrayOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) ContainerRuntimePolicyExecutableBlacklistArrayOutput {
		return v.ExecutableBlacklists
	}).(ContainerRuntimePolicyExecutableBlacklistArrayOutput)
}

func (o ContainerRuntimePolicyOutput) FailedKubernetesChecks() ContainerRuntimePolicyFailedKubernetesChecksOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) ContainerRuntimePolicyFailedKubernetesChecksOutput {
		return v.FailedKubernetesChecks
	}).(ContainerRuntimePolicyFailedKubernetesChecksOutput)
}

func (o ContainerRuntimePolicyOutput) FileBlock() ContainerRuntimePolicyFileBlockOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) ContainerRuntimePolicyFileBlockOutput { return v.FileBlock }).(ContainerRuntimePolicyFileBlockOutput)
}

// Configuration for file integrity monitoring.
func (o ContainerRuntimePolicyOutput) FileIntegrityMonitoring() ContainerRuntimePolicyFileIntegrityMonitoringOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) ContainerRuntimePolicyFileIntegrityMonitoringOutput {
		return v.FileIntegrityMonitoring
	}).(ContainerRuntimePolicyFileIntegrityMonitoringOutput)
}

// Process limit for the fork guard.
func (o ContainerRuntimePolicyOutput) ForkGuardProcessLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.IntPtrOutput { return v.ForkGuardProcessLimit }).(pulumi.IntPtrOutput)
}

func (o ContainerRuntimePolicyOutput) ImageName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.StringPtrOutput { return v.ImageName }).(pulumi.StringPtrOutput)
}

func (o ContainerRuntimePolicyOutput) IsAuditChecked() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.BoolPtrOutput { return v.IsAuditChecked }).(pulumi.BoolPtrOutput)
}

func (o ContainerRuntimePolicyOutput) IsAutoGenerated() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.BoolPtrOutput { return v.IsAutoGenerated }).(pulumi.BoolPtrOutput)
}

func (o ContainerRuntimePolicyOutput) IsOotbPolicy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.BoolPtrOutput { return v.IsOotbPolicy }).(pulumi.BoolPtrOutput)
}

func (o ContainerRuntimePolicyOutput) Lastupdate() pulumi.IntOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.IntOutput { return v.Lastupdate }).(pulumi.IntOutput)
}

// Container privileges configuration.
func (o ContainerRuntimePolicyOutput) LimitContainerPrivileges() ContainerRuntimePolicyLimitContainerPrivilegeArrayOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) ContainerRuntimePolicyLimitContainerPrivilegeArrayOutput {
		return v.LimitContainerPrivileges
	}).(ContainerRuntimePolicyLimitContainerPrivilegeArrayOutput)
}

// If true, prevents the container from obtaining new privileges at runtime. (only enabled in enforce mode)
func (o ContainerRuntimePolicyOutput) LimitNewPrivileges() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.BoolPtrOutput { return v.LimitNewPrivileges }).(pulumi.BoolPtrOutput)
}

func (o ContainerRuntimePolicyOutput) LinuxCapabilities() ContainerRuntimePolicyLinuxCapabilitiesOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) ContainerRuntimePolicyLinuxCapabilitiesOutput {
		return v.LinuxCapabilities
	}).(ContainerRuntimePolicyLinuxCapabilitiesOutput)
}

// Configuration for Real-Time Malware Protection.
func (o ContainerRuntimePolicyOutput) MalwareScanOptions() ContainerRuntimePolicyMalwareScanOptionsOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) ContainerRuntimePolicyMalwareScanOptionsOutput {
		return v.MalwareScanOptions
	}).(ContainerRuntimePolicyMalwareScanOptionsOutput)
}

// If true, system time changes will be monitored.
func (o ContainerRuntimePolicyOutput) MonitorSystemTimeChanges() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.BoolPtrOutput { return v.MonitorSystemTimeChanges }).(pulumi.BoolPtrOutput)
}

// Name assigned to the attribute.
func (o ContainerRuntimePolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ContainerRuntimePolicyOutput) NoNewPrivileges() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.BoolPtrOutput { return v.NoNewPrivileges }).(pulumi.BoolPtrOutput)
}

func (o ContainerRuntimePolicyOutput) OnlyRegisteredImages() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.BoolPtrOutput { return v.OnlyRegisteredImages }).(pulumi.BoolPtrOutput)
}

func (o ContainerRuntimePolicyOutput) PackageBlock() ContainerRuntimePolicyPackageBlockOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) ContainerRuntimePolicyPackageBlockOutput { return v.PackageBlock }).(ContainerRuntimePolicyPackageBlockOutput)
}

func (o ContainerRuntimePolicyOutput) Permission() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.StringPtrOutput { return v.Permission }).(pulumi.StringPtrOutput)
}

func (o ContainerRuntimePolicyOutput) PortBlock() ContainerRuntimePolicyPortBlockOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) ContainerRuntimePolicyPortBlockOutput { return v.PortBlock }).(ContainerRuntimePolicyPortBlockOutput)
}

func (o ContainerRuntimePolicyOutput) ReadonlyFiles() ContainerRuntimePolicyReadonlyFilesOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) ContainerRuntimePolicyReadonlyFilesOutput { return v.ReadonlyFiles }).(ContainerRuntimePolicyReadonlyFilesOutput)
}

func (o ContainerRuntimePolicyOutput) ReadonlyRegistry() ContainerRuntimePolicyReadonlyRegistryOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) ContainerRuntimePolicyReadonlyRegistryOutput {
		return v.ReadonlyRegistry
	}).(ContainerRuntimePolicyReadonlyRegistryOutput)
}

func (o ContainerRuntimePolicyOutput) Registry() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.StringPtrOutput { return v.Registry }).(pulumi.StringPtrOutput)
}

func (o ContainerRuntimePolicyOutput) RegistryAccessMonitoring() ContainerRuntimePolicyRegistryAccessMonitoringOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) ContainerRuntimePolicyRegistryAccessMonitoringOutput {
		return v.RegistryAccessMonitoring
	}).(ContainerRuntimePolicyRegistryAccessMonitoringOutput)
}

func (o ContainerRuntimePolicyOutput) RepoName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.StringPtrOutput { return v.RepoName }).(pulumi.StringPtrOutput)
}

func (o ContainerRuntimePolicyOutput) ResourceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.StringPtrOutput { return v.ResourceName }).(pulumi.StringPtrOutput)
}

func (o ContainerRuntimePolicyOutput) ResourceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.StringPtrOutput { return v.ResourceType }).(pulumi.StringPtrOutput)
}

// Restricted volumes configuration.
func (o ContainerRuntimePolicyOutput) RestrictedVolumes() ContainerRuntimePolicyRestrictedVolumeArrayOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) ContainerRuntimePolicyRestrictedVolumeArrayOutput {
		return v.RestrictedVolumes
	}).(ContainerRuntimePolicyRestrictedVolumeArrayOutput)
}

func (o ContainerRuntimePolicyOutput) ReverseShell() ContainerRuntimePolicyReverseShellOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) ContainerRuntimePolicyReverseShellOutput { return v.ReverseShell }).(ContainerRuntimePolicyReverseShellOutput)
}

func (o ContainerRuntimePolicyOutput) RuntimeMode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.IntPtrOutput { return v.RuntimeMode }).(pulumi.IntPtrOutput)
}

func (o ContainerRuntimePolicyOutput) RuntimeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.StringPtrOutput { return v.RuntimeType }).(pulumi.StringPtrOutput)
}

// Logical expression of how to compute the dependency of the scope variables.
func (o ContainerRuntimePolicyOutput) ScopeExpression() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.StringOutput { return v.ScopeExpression }).(pulumi.StringOutput)
}

// List of scope attributes.
func (o ContainerRuntimePolicyOutput) ScopeVariables() ContainerRuntimePolicyScopeVariableArrayOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) ContainerRuntimePolicyScopeVariableArrayOutput {
		return v.ScopeVariables
	}).(ContainerRuntimePolicyScopeVariableArrayOutput)
}

// Scope configuration.
func (o ContainerRuntimePolicyOutput) Scopes() ContainerRuntimePolicyScopeArrayOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) ContainerRuntimePolicyScopeArrayOutput { return v.Scopes }).(ContainerRuntimePolicyScopeArrayOutput)
}

func (o ContainerRuntimePolicyOutput) SystemIntegrityProtection() ContainerRuntimePolicySystemIntegrityProtectionOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) ContainerRuntimePolicySystemIntegrityProtectionOutput {
		return v.SystemIntegrityProtection
	}).(ContainerRuntimePolicySystemIntegrityProtectionOutput)
}

func (o ContainerRuntimePolicyOutput) Tripwire() ContainerRuntimePolicyTripwireOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) ContainerRuntimePolicyTripwireOutput { return v.Tripwire }).(ContainerRuntimePolicyTripwireOutput)
}

func (o ContainerRuntimePolicyOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.StringPtrOutput { return v.Type }).(pulumi.StringPtrOutput)
}

func (o ContainerRuntimePolicyOutput) Updated() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.StringOutput { return v.Updated }).(pulumi.StringOutput)
}

func (o ContainerRuntimePolicyOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.StringPtrOutput { return v.Version }).(pulumi.StringPtrOutput)
}

func (o ContainerRuntimePolicyOutput) VpatchVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) pulumi.StringPtrOutput { return v.VpatchVersion }).(pulumi.StringPtrOutput)
}

func (o ContainerRuntimePolicyOutput) WhitelistedOsUsers() ContainerRuntimePolicyWhitelistedOsUsersOutput {
	return o.ApplyT(func(v *ContainerRuntimePolicy) ContainerRuntimePolicyWhitelistedOsUsersOutput {
		return v.WhitelistedOsUsers
	}).(ContainerRuntimePolicyWhitelistedOsUsersOutput)
}

type ContainerRuntimePolicyArrayOutput struct{ *pulumi.OutputState }

func (ContainerRuntimePolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ContainerRuntimePolicy)(nil)).Elem()
}

func (o ContainerRuntimePolicyArrayOutput) ToContainerRuntimePolicyArrayOutput() ContainerRuntimePolicyArrayOutput {
	return o
}

func (o ContainerRuntimePolicyArrayOutput) ToContainerRuntimePolicyArrayOutputWithContext(ctx context.Context) ContainerRuntimePolicyArrayOutput {
	return o
}

func (o ContainerRuntimePolicyArrayOutput) Index(i pulumi.IntInput) ContainerRuntimePolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ContainerRuntimePolicy {
		return vs[0].([]*ContainerRuntimePolicy)[vs[1].(int)]
	}).(ContainerRuntimePolicyOutput)
}

type ContainerRuntimePolicyMapOutput struct{ *pulumi.OutputState }

func (ContainerRuntimePolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ContainerRuntimePolicy)(nil)).Elem()
}

func (o ContainerRuntimePolicyMapOutput) ToContainerRuntimePolicyMapOutput() ContainerRuntimePolicyMapOutput {
	return o
}

func (o ContainerRuntimePolicyMapOutput) ToContainerRuntimePolicyMapOutputWithContext(ctx context.Context) ContainerRuntimePolicyMapOutput {
	return o
}

func (o ContainerRuntimePolicyMapOutput) MapIndex(k pulumi.StringInput) ContainerRuntimePolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ContainerRuntimePolicy {
		return vs[0].(map[string]*ContainerRuntimePolicy)[vs[1].(string)]
	}).(ContainerRuntimePolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerRuntimePolicyInput)(nil)).Elem(), &ContainerRuntimePolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerRuntimePolicyArrayInput)(nil)).Elem(), ContainerRuntimePolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerRuntimePolicyMapInput)(nil)).Elem(), ContainerRuntimePolicyMap{})
	pulumi.RegisterOutputType(ContainerRuntimePolicyOutput{})
	pulumi.RegisterOutputType(ContainerRuntimePolicyArrayOutput{})
	pulumi.RegisterOutputType(ContainerRuntimePolicyMapOutput{})
}
