// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aquasec

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aquasec/sdk/go/aquasec"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := aquasec.NewEnforcerGroups(ctx, "group", &aquasec.EnforcerGroupsArgs{
//				AntivirusProtection:          pulumi.Bool(true),
//				ContainerActivityProtection:  pulumi.Bool(true),
//				ContainerAntivirusProtection: pulumi.Bool(true),
//				Enforce:                      pulumi.Bool(true),
//				Forensics:                    pulumi.Bool(true),
//				GroupId:                      pulumi.String("tf-test-enforcer"),
//				HostAssurance:                pulumi.Bool(true),
//				HostForensics:                pulumi.Bool(true),
//				HostNetworkProtection:        pulumi.Bool(true),
//				HostProtection:               pulumi.Bool(true),
//				ImageAssurance:               pulumi.Bool(true),
//				NetworkProtection:            pulumi.Bool(true),
//				Orchestrators: EnforcerGroupsOrchestratorArray{
//					nil,
//				},
//				RiskExplorerAutoDiscovery: pulumi.Bool(true),
//				SyncHostImages:            pulumi.Bool(true),
//				Type:                      pulumi.String("agent"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = aquasec.NewEnforcerGroups(ctx, "group-kubeEnforcer", &aquasec.EnforcerGroupsArgs{
//				AdmissionControl:                          pulumi.Bool(true),
//				AutoCopySecrets:                           pulumi.Bool(true),
//				AutoDiscoverConfigureRegistries:           pulumi.Bool(true),
//				AutoDiscoveryEnabled:                      pulumi.Bool(true),
//				AutoScanDiscoveredImagesRunningContainers: pulumi.Bool(true),
//				BlockAdmissionControl:                     pulumi.Bool(true),
//				Enforce:                                   pulumi.Bool(true),
//				GroupId:                                   pulumi.String("tf-test-kube_enforcer"),
//				KubeBenchImageName:                        pulumi.String("registry.aquasec.com/kube-bench:v0.6.5"),
//				MicroEnforcerSecretsName:                  pulumi.String("aqua-registry"),
//				Orchestrators: EnforcerGroupsOrchestratorArray{
//					&EnforcerGroupsOrchestratorArgs{
//						Namespace: pulumi.String("aqua"),
//						Type:      pulumi.String("kubernetes"),
//					},
//				},
//				Type: pulumi.String("kube_enforcer"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type EnforcerGroups struct {
	pulumi.CustomResourceState

	// Selecting this option will allow the KubeEnforcer to block the deployment of container images that have failed any of these Container Runtime Policy controls:\
	// 			* Block Non-Compliant Images\
	// 			* Block Non-Compliant Workloads\
	// 			* Block Unregistered Images\
	// 			This functionality can work only when the KubeEnforcer is deployed in Enforce mode.
	AdmissionControl pulumi.BoolPtrOutput `pulumi:"admissionControl"`
	// Allow kube enforcer audit.
	AllowKubeEnforcerAudit pulumi.BoolPtrOutput `pulumi:"allowKubeEnforcerAudit"`
	// List of application names to allow on the hosts. if provided, only containers of the listed applications will be allowed to run.
	AllowedApplications pulumi.StringArrayOutput `pulumi:"allowedApplications"`
	// List of label names to allow on the hosts.
	AllowedLabels pulumi.StringArrayOutput `pulumi:"allowedLabels"`
	// List of registry names to allow on the hosts.
	AllowedRegistries pulumi.StringArrayOutput `pulumi:"allowedRegistries"`
	// This setting is available only when you have license for `Advanced Malware Protection`. Send true to make use of the license and enable the `Real-time Malware Protection` control in the Host Runtime policies.
	AntivirusProtection pulumi.BoolPtrOutput `pulumi:"antivirusProtection"`
	// Aqua server version
	AquaVersion pulumi.StringOutput `pulumi:"aquaVersion"`
	// Agent will send extra audit messages to the server for success operations from inside the container (runtime).
	AuditAll pulumi.BoolPtrOutput `pulumi:"auditAll"`
	// This option is applicable only if `Enable Pod Enforcer injection` is selected. Select this option if you want Aqua Enterprise to copy the secrets defined above to the Pod Enforcer namespace and container. Otherwise, you can choose to copy these secrets by other means.
	AutoCopySecrets pulumi.BoolOutput `pulumi:"autoCopySecrets"`
	// This option is available only if `Enable workload discovery` is selected. If selected, the KubeEnforcer will add previously unknown image registries from the cluster to Aqua.
	AutoDiscoverConfigureRegistries pulumi.BoolPtrOutput `pulumi:"autoDiscoverConfigureRegistries"`
	// When this option is selected, the KubeEnforcer will discover workloads on its cluster.
	AutoDiscoveryEnabled pulumi.BoolPtrOutput `pulumi:"autoDiscoveryEnabled"`
	// This option is available only if `Enable workload discovery` is selected. If selected, the KubeEnforcer will automatically register images running as workloads (and scan the discovered images for security issues).
	AutoScanDiscoveredImagesRunningContainers pulumi.BoolPtrOutput `pulumi:"autoScanDiscoveredImagesRunningContainers"`
	// Select Enabled to detect suspicious activity in your containers and display potential security threats in the Incidents and Audit pages.
	BehavioralEngine pulumi.BoolPtrOutput `pulumi:"behavioralEngine"`
	// This applies only if both `Enable admission control` and Enforce mode are set. This additional option must be selected for admission control to work if the KubeEnforcer is not connected to any Gateway. If this option is not selected, admission control will be disabled; this will have no effect on containers already running.
	BlockAdmissionControl pulumi.BoolPtrOutput `pulumi:"blockAdmissionControl"`
	// The installation command.
	Commands EnforcerGroupsCommandArrayOutput `pulumi:"commands"`
	// Number of connected enforcers in the enforcer group.
	ConnectedCount pulumi.IntOutput `pulumi:"connectedCount"`
	// Set `True` to apply Container Runtime Policies, Image Profiles, and Firewall Policies to containers.
	ContainerActivityProtection pulumi.BoolPtrOutput `pulumi:"containerActivityProtection"`
	// This setting is available only when you have license for `Advanced Malware Protection`. Send true to make use of the license and enable the `Real-time Malware Protection` control in the Container Runtime policies.
	ContainerAntivirusProtection pulumi.BoolPtrOutput `pulumi:"containerAntivirusProtection"`
	// A description of the Aqua Enforcer group.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Number of disconnected enforcers in the enforcer group.
	DisconnectedCount pulumi.IntOutput `pulumi:"disconnectedCount"`
	// Whether to enable enforce mode on the Enforcers, defaults to False.
	Enforce pulumi.BoolPtrOutput `pulumi:"enforce"`
	// The specific Aqua Enforcer product image (with image tag) to be deployed.
	EnforcerImageName pulumi.StringOutput `pulumi:"enforcerImageName"`
	// Select Enabled to send activity logs in your containers to the Aqua Server for forensics purposes.
	Forensics pulumi.BoolPtrOutput `pulumi:"forensics"`
	// Gateway Address
	GatewayAddress pulumi.StringOutput `pulumi:"gatewayAddress"`
	// Gateway Name
	GatewayName pulumi.StringOutput `pulumi:"gatewayName"`
	// List of Aqua gateway IDs for the Enforcers.
	Gateways pulumi.StringArrayOutput `pulumi:"gateways"`
	// The ID of the Enforcer group.
	GroupId pulumi.StringOutput `pulumi:"groupId"`
	// Number of high vulnerabilities in the enforcers that in this enforcer group.
	HighVulns pulumi.IntOutput `pulumi:"highVulns"`
	// Set `True` to enable host scanning and respective Host Assurance controls.
	HostAssurance pulumi.BoolPtrOutput `pulumi:"hostAssurance"`
	// Set `True` to enable these Host Runtime Policy controls: `OS Users and Groups Allowed` and `OS Users and Groups Blocked`
	HostBehavioralEngine pulumi.BoolPtrOutput `pulumi:"hostBehavioralEngine"`
	// Select Enabled to send activity logs in your host to the Aqua Server for forensics purposes.
	HostForensics pulumi.BoolPtrOutput `pulumi:"hostForensics"`
	// Set `True` to apply Firewall Policies to hosts, and allow recording network maps for Aqua services. The Network Firewall setting must be disabled when deploying the Aqua Enforcer on a machine running Rocky Linux. See https://docs.aquasec.com/docs/platform-support-limitations-rocky-linux for further information
	HostNetworkProtection pulumi.BoolPtrOutput `pulumi:"hostNetworkProtection"`
	// The OS type for the host
	HostOs pulumi.StringOutput `pulumi:"hostOs"`
	// Set `True` to enable all Host Runtime Policy controls except for `OS Users and Groups Allowed` and `OS Users and Groups Blocked`.
	HostProtection pulumi.BoolPtrOutput `pulumi:"hostProtection"`
	// Set `True` to enable these Host Runtime Policy controls: `OS Users and Groups Allowed` and `OS Users and Groups Blocked`
	HostUserProtection pulumi.BoolPtrOutput `pulumi:"hostUserProtection"`
	// The hostname
	Hostname pulumi.StringOutput `pulumi:"hostname"`
	// Number of enforcers in the enforcer group.
	HostsCount pulumi.IntOutput `pulumi:"hostsCount"`
	// Set `True` to enable selected controls: Container Runtime Policy (`Block Non-Compliant Images`, `Block Unregistered Images`, and `Registries Allowed`) and Default Image Assurance Policy (`Images Blocked`).
	ImageAssurance pulumi.BoolPtrOutput `pulumi:"imageAssurance"`
	// Enforcer install command
	InstallCommand pulumi.StringOutput `pulumi:"installCommand"`
	// See https://docs.aquasec.com/docs/securing-kubernetes-applications#section-configuration-hardening, The KubeEnforcer can deploy the Aqua Security kube-bench open-source product to perform Kubernetes CIS benchmark testing of nodes.
	// 			This field specifies the path and file name of the kube-bench product image for the KubeEnforcer to deploy; it will be filled in automatically. You can optionally enter a different value.
	KubeBenchImageName pulumi.StringOutput `pulumi:"kubeBenchImageName"`
	// The last date and time the batch token was updated in UNIX time.
	LastUpdate pulumi.IntOutput `pulumi:"lastUpdate"`
	// Name for the batch install record.
	LogicalName pulumi.StringOutput `pulumi:"logicalName"`
	// Number of low vulnerabilities in the enforcers that in this enforcer group.
	LowVulns pulumi.IntOutput `pulumi:"lowVulns"`
	// Number of medium vulnerabilities in the enforcers that in this enforcer group.
	MedVulns pulumi.IntOutput `pulumi:"medVulns"`
	// This option is applicable only if `Enable Pod Enforcer injection` is selected.
	MicroEnforcerCertsSecretsName pulumi.StringPtrOutput `pulumi:"microEnforcerCertsSecretsName"`
	// This option is applicable only if `Enable Pod Enforcer injection` is selected. This field specifies the path and file name of the KubeEnforcer product image to be deployed; it will be filled in automatically. You can optionally enter a different value.
	MicroEnforcerImageName pulumi.StringOutput `pulumi:"microEnforcerImageName"`
	// This applies only if both `Enable admission control` and Enforce mode are set. This additional option must be selected for admission control to work if the KubeEnforcer is not connected to any Gateway. If this option is not selected, admission control will be disabled; this will have no effect on containers already running.
	MicroEnforcerInjection pulumi.BoolPtrOutput `pulumi:"microEnforcerInjection"`
	// You can specify the name of the secret (in the Aqua namespace) that Aqua copies into the Pod Enforcer namespace and kube-bench, allowing them access to the Pod Enforcer and kube-bench product images, respectively.
	MicroEnforcerSecretsName pulumi.StringOutput `pulumi:"microEnforcerSecretsName"`
	// Number of negligible vulnerabilities in the enforcers that in this enforcer group.
	NegVulns pulumi.IntOutput `pulumi:"negVulns"`
	// Send true to apply Firewall Policies to containers, and allow recording network maps for Aqua services. The Network Firewall setting must be disabled when deploying the Aqua Enforcer on a machine running Rocky Linux. See https://docs.aquasec.com/docs/platform-support-limitations-rocky-linux for further information.
	NetworkProtection pulumi.BoolPtrOutput `pulumi:"networkProtection"`
	// The orchestrator for which you are creating the Enforcer group.
	Orchestrators EnforcerGroupsOrchestratorArrayOutput `pulumi:"orchestrators"`
	// pas deployment link
	PasDeploymentLink pulumi.StringOutput `pulumi:"pasDeploymentLink"`
	// Permission Action
	Permission pulumi.StringPtrOutput `pulumi:"permission"`
	// Set `True` to allow Enforcers to be discovered in the Risk Explorer.
	RiskExplorerAutoDiscovery pulumi.BoolPtrOutput `pulumi:"riskExplorerAutoDiscovery"`
	// Function Runtime Policy that will applay on the nano enforcer.
	RuntimePolicyName pulumi.StringOutput `pulumi:"runtimePolicyName"`
	// The container runtime environment.
	RuntimeType pulumi.StringOutput `pulumi:"runtimeType"`
	// Set `True` to configure Enforcers to discover local host images. Discovered images will be listed under Images > Host Images, as well as under Infrastructure (in the Images tab for applicable hosts).
	SyncHostImages pulumi.BoolPtrOutput `pulumi:"syncHostImages"`
	// Set `True` will allow profiling and monitoring system calls made by running containers.
	SyscallEnabled pulumi.BoolPtrOutput `pulumi:"syscallEnabled"`
	// The batch install token.
	Token pulumi.StringOutput `pulumi:"token"`
	// Enforcer Type.
	Type pulumi.StringOutput `pulumi:"type"`
	// Set `True` to apply User Access Control Policies to containers. Note that Aqua Enforcers must be deployed with the AQUA*RUNC*INTERCEPTION environment variable set to 0 in order to use User Access Control Policies.
	UserAccessControl pulumi.BoolPtrOutput `pulumi:"userAccessControl"`
}

// NewEnforcerGroups registers a new resource with the given unique name, arguments, and options.
func NewEnforcerGroups(ctx *pulumi.Context,
	name string, args *EnforcerGroupsArgs, opts ...pulumi.ResourceOption) (*EnforcerGroups, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GroupId == nil {
		return nil, errors.New("invalid value for required argument 'GroupId'")
	}
	if args.Orchestrators == nil {
		return nil, errors.New("invalid value for required argument 'Orchestrators'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource EnforcerGroups
	err := ctx.RegisterResource("aquasec:index/enforcerGroups:EnforcerGroups", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEnforcerGroups gets an existing EnforcerGroups resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEnforcerGroups(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EnforcerGroupsState, opts ...pulumi.ResourceOption) (*EnforcerGroups, error) {
	var resource EnforcerGroups
	err := ctx.ReadResource("aquasec:index/enforcerGroups:EnforcerGroups", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EnforcerGroups resources.
type enforcerGroupsState struct {
	// Selecting this option will allow the KubeEnforcer to block the deployment of container images that have failed any of these Container Runtime Policy controls:\
	// 			* Block Non-Compliant Images\
	// 			* Block Non-Compliant Workloads\
	// 			* Block Unregistered Images\
	// 			This functionality can work only when the KubeEnforcer is deployed in Enforce mode.
	AdmissionControl *bool `pulumi:"admissionControl"`
	// Allow kube enforcer audit.
	AllowKubeEnforcerAudit *bool `pulumi:"allowKubeEnforcerAudit"`
	// List of application names to allow on the hosts. if provided, only containers of the listed applications will be allowed to run.
	AllowedApplications []string `pulumi:"allowedApplications"`
	// List of label names to allow on the hosts.
	AllowedLabels []string `pulumi:"allowedLabels"`
	// List of registry names to allow on the hosts.
	AllowedRegistries []string `pulumi:"allowedRegistries"`
	// This setting is available only when you have license for `Advanced Malware Protection`. Send true to make use of the license and enable the `Real-time Malware Protection` control in the Host Runtime policies.
	AntivirusProtection *bool `pulumi:"antivirusProtection"`
	// Aqua server version
	AquaVersion *string `pulumi:"aquaVersion"`
	// Agent will send extra audit messages to the server for success operations from inside the container (runtime).
	AuditAll *bool `pulumi:"auditAll"`
	// This option is applicable only if `Enable Pod Enforcer injection` is selected. Select this option if you want Aqua Enterprise to copy the secrets defined above to the Pod Enforcer namespace and container. Otherwise, you can choose to copy these secrets by other means.
	AutoCopySecrets *bool `pulumi:"autoCopySecrets"`
	// This option is available only if `Enable workload discovery` is selected. If selected, the KubeEnforcer will add previously unknown image registries from the cluster to Aqua.
	AutoDiscoverConfigureRegistries *bool `pulumi:"autoDiscoverConfigureRegistries"`
	// When this option is selected, the KubeEnforcer will discover workloads on its cluster.
	AutoDiscoveryEnabled *bool `pulumi:"autoDiscoveryEnabled"`
	// This option is available only if `Enable workload discovery` is selected. If selected, the KubeEnforcer will automatically register images running as workloads (and scan the discovered images for security issues).
	AutoScanDiscoveredImagesRunningContainers *bool `pulumi:"autoScanDiscoveredImagesRunningContainers"`
	// Select Enabled to detect suspicious activity in your containers and display potential security threats in the Incidents and Audit pages.
	BehavioralEngine *bool `pulumi:"behavioralEngine"`
	// This applies only if both `Enable admission control` and Enforce mode are set. This additional option must be selected for admission control to work if the KubeEnforcer is not connected to any Gateway. If this option is not selected, admission control will be disabled; this will have no effect on containers already running.
	BlockAdmissionControl *bool `pulumi:"blockAdmissionControl"`
	// The installation command.
	Commands []EnforcerGroupsCommand `pulumi:"commands"`
	// Number of connected enforcers in the enforcer group.
	ConnectedCount *int `pulumi:"connectedCount"`
	// Set `True` to apply Container Runtime Policies, Image Profiles, and Firewall Policies to containers.
	ContainerActivityProtection *bool `pulumi:"containerActivityProtection"`
	// This setting is available only when you have license for `Advanced Malware Protection`. Send true to make use of the license and enable the `Real-time Malware Protection` control in the Container Runtime policies.
	ContainerAntivirusProtection *bool `pulumi:"containerAntivirusProtection"`
	// A description of the Aqua Enforcer group.
	Description *string `pulumi:"description"`
	// Number of disconnected enforcers in the enforcer group.
	DisconnectedCount *int `pulumi:"disconnectedCount"`
	// Whether to enable enforce mode on the Enforcers, defaults to False.
	Enforce *bool `pulumi:"enforce"`
	// The specific Aqua Enforcer product image (with image tag) to be deployed.
	EnforcerImageName *string `pulumi:"enforcerImageName"`
	// Select Enabled to send activity logs in your containers to the Aqua Server for forensics purposes.
	Forensics *bool `pulumi:"forensics"`
	// Gateway Address
	GatewayAddress *string `pulumi:"gatewayAddress"`
	// Gateway Name
	GatewayName *string `pulumi:"gatewayName"`
	// List of Aqua gateway IDs for the Enforcers.
	Gateways []string `pulumi:"gateways"`
	// The ID of the Enforcer group.
	GroupId *string `pulumi:"groupId"`
	// Number of high vulnerabilities in the enforcers that in this enforcer group.
	HighVulns *int `pulumi:"highVulns"`
	// Set `True` to enable host scanning and respective Host Assurance controls.
	HostAssurance *bool `pulumi:"hostAssurance"`
	// Set `True` to enable these Host Runtime Policy controls: `OS Users and Groups Allowed` and `OS Users and Groups Blocked`
	HostBehavioralEngine *bool `pulumi:"hostBehavioralEngine"`
	// Select Enabled to send activity logs in your host to the Aqua Server for forensics purposes.
	HostForensics *bool `pulumi:"hostForensics"`
	// Set `True` to apply Firewall Policies to hosts, and allow recording network maps for Aqua services. The Network Firewall setting must be disabled when deploying the Aqua Enforcer on a machine running Rocky Linux. See https://docs.aquasec.com/docs/platform-support-limitations-rocky-linux for further information
	HostNetworkProtection *bool `pulumi:"hostNetworkProtection"`
	// The OS type for the host
	HostOs *string `pulumi:"hostOs"`
	// Set `True` to enable all Host Runtime Policy controls except for `OS Users and Groups Allowed` and `OS Users and Groups Blocked`.
	HostProtection *bool `pulumi:"hostProtection"`
	// Set `True` to enable these Host Runtime Policy controls: `OS Users and Groups Allowed` and `OS Users and Groups Blocked`
	HostUserProtection *bool `pulumi:"hostUserProtection"`
	// The hostname
	Hostname *string `pulumi:"hostname"`
	// Number of enforcers in the enforcer group.
	HostsCount *int `pulumi:"hostsCount"`
	// Set `True` to enable selected controls: Container Runtime Policy (`Block Non-Compliant Images`, `Block Unregistered Images`, and `Registries Allowed`) and Default Image Assurance Policy (`Images Blocked`).
	ImageAssurance *bool `pulumi:"imageAssurance"`
	// Enforcer install command
	InstallCommand *string `pulumi:"installCommand"`
	// See https://docs.aquasec.com/docs/securing-kubernetes-applications#section-configuration-hardening, The KubeEnforcer can deploy the Aqua Security kube-bench open-source product to perform Kubernetes CIS benchmark testing of nodes.
	// 			This field specifies the path and file name of the kube-bench product image for the KubeEnforcer to deploy; it will be filled in automatically. You can optionally enter a different value.
	KubeBenchImageName *string `pulumi:"kubeBenchImageName"`
	// The last date and time the batch token was updated in UNIX time.
	LastUpdate *int `pulumi:"lastUpdate"`
	// Name for the batch install record.
	LogicalName *string `pulumi:"logicalName"`
	// Number of low vulnerabilities in the enforcers that in this enforcer group.
	LowVulns *int `pulumi:"lowVulns"`
	// Number of medium vulnerabilities in the enforcers that in this enforcer group.
	MedVulns *int `pulumi:"medVulns"`
	// This option is applicable only if `Enable Pod Enforcer injection` is selected.
	MicroEnforcerCertsSecretsName *string `pulumi:"microEnforcerCertsSecretsName"`
	// This option is applicable only if `Enable Pod Enforcer injection` is selected. This field specifies the path and file name of the KubeEnforcer product image to be deployed; it will be filled in automatically. You can optionally enter a different value.
	MicroEnforcerImageName *string `pulumi:"microEnforcerImageName"`
	// This applies only if both `Enable admission control` and Enforce mode are set. This additional option must be selected for admission control to work if the KubeEnforcer is not connected to any Gateway. If this option is not selected, admission control will be disabled; this will have no effect on containers already running.
	MicroEnforcerInjection *bool `pulumi:"microEnforcerInjection"`
	// You can specify the name of the secret (in the Aqua namespace) that Aqua copies into the Pod Enforcer namespace and kube-bench, allowing them access to the Pod Enforcer and kube-bench product images, respectively.
	MicroEnforcerSecretsName *string `pulumi:"microEnforcerSecretsName"`
	// Number of negligible vulnerabilities in the enforcers that in this enforcer group.
	NegVulns *int `pulumi:"negVulns"`
	// Send true to apply Firewall Policies to containers, and allow recording network maps for Aqua services. The Network Firewall setting must be disabled when deploying the Aqua Enforcer on a machine running Rocky Linux. See https://docs.aquasec.com/docs/platform-support-limitations-rocky-linux for further information.
	NetworkProtection *bool `pulumi:"networkProtection"`
	// The orchestrator for which you are creating the Enforcer group.
	Orchestrators []EnforcerGroupsOrchestrator `pulumi:"orchestrators"`
	// pas deployment link
	PasDeploymentLink *string `pulumi:"pasDeploymentLink"`
	// Permission Action
	Permission *string `pulumi:"permission"`
	// Set `True` to allow Enforcers to be discovered in the Risk Explorer.
	RiskExplorerAutoDiscovery *bool `pulumi:"riskExplorerAutoDiscovery"`
	// Function Runtime Policy that will applay on the nano enforcer.
	RuntimePolicyName *string `pulumi:"runtimePolicyName"`
	// The container runtime environment.
	RuntimeType *string `pulumi:"runtimeType"`
	// Set `True` to configure Enforcers to discover local host images. Discovered images will be listed under Images > Host Images, as well as under Infrastructure (in the Images tab for applicable hosts).
	SyncHostImages *bool `pulumi:"syncHostImages"`
	// Set `True` will allow profiling and monitoring system calls made by running containers.
	SyscallEnabled *bool `pulumi:"syscallEnabled"`
	// The batch install token.
	Token *string `pulumi:"token"`
	// Enforcer Type.
	Type *string `pulumi:"type"`
	// Set `True` to apply User Access Control Policies to containers. Note that Aqua Enforcers must be deployed with the AQUA*RUNC*INTERCEPTION environment variable set to 0 in order to use User Access Control Policies.
	UserAccessControl *bool `pulumi:"userAccessControl"`
}

type EnforcerGroupsState struct {
	// Selecting this option will allow the KubeEnforcer to block the deployment of container images that have failed any of these Container Runtime Policy controls:\
	// 			* Block Non-Compliant Images\
	// 			* Block Non-Compliant Workloads\
	// 			* Block Unregistered Images\
	// 			This functionality can work only when the KubeEnforcer is deployed in Enforce mode.
	AdmissionControl pulumi.BoolPtrInput
	// Allow kube enforcer audit.
	AllowKubeEnforcerAudit pulumi.BoolPtrInput
	// List of application names to allow on the hosts. if provided, only containers of the listed applications will be allowed to run.
	AllowedApplications pulumi.StringArrayInput
	// List of label names to allow on the hosts.
	AllowedLabels pulumi.StringArrayInput
	// List of registry names to allow on the hosts.
	AllowedRegistries pulumi.StringArrayInput
	// This setting is available only when you have license for `Advanced Malware Protection`. Send true to make use of the license and enable the `Real-time Malware Protection` control in the Host Runtime policies.
	AntivirusProtection pulumi.BoolPtrInput
	// Aqua server version
	AquaVersion pulumi.StringPtrInput
	// Agent will send extra audit messages to the server for success operations from inside the container (runtime).
	AuditAll pulumi.BoolPtrInput
	// This option is applicable only if `Enable Pod Enforcer injection` is selected. Select this option if you want Aqua Enterprise to copy the secrets defined above to the Pod Enforcer namespace and container. Otherwise, you can choose to copy these secrets by other means.
	AutoCopySecrets pulumi.BoolPtrInput
	// This option is available only if `Enable workload discovery` is selected. If selected, the KubeEnforcer will add previously unknown image registries from the cluster to Aqua.
	AutoDiscoverConfigureRegistries pulumi.BoolPtrInput
	// When this option is selected, the KubeEnforcer will discover workloads on its cluster.
	AutoDiscoveryEnabled pulumi.BoolPtrInput
	// This option is available only if `Enable workload discovery` is selected. If selected, the KubeEnforcer will automatically register images running as workloads (and scan the discovered images for security issues).
	AutoScanDiscoveredImagesRunningContainers pulumi.BoolPtrInput
	// Select Enabled to detect suspicious activity in your containers and display potential security threats in the Incidents and Audit pages.
	BehavioralEngine pulumi.BoolPtrInput
	// This applies only if both `Enable admission control` and Enforce mode are set. This additional option must be selected for admission control to work if the KubeEnforcer is not connected to any Gateway. If this option is not selected, admission control will be disabled; this will have no effect on containers already running.
	BlockAdmissionControl pulumi.BoolPtrInput
	// The installation command.
	Commands EnforcerGroupsCommandArrayInput
	// Number of connected enforcers in the enforcer group.
	ConnectedCount pulumi.IntPtrInput
	// Set `True` to apply Container Runtime Policies, Image Profiles, and Firewall Policies to containers.
	ContainerActivityProtection pulumi.BoolPtrInput
	// This setting is available only when you have license for `Advanced Malware Protection`. Send true to make use of the license and enable the `Real-time Malware Protection` control in the Container Runtime policies.
	ContainerAntivirusProtection pulumi.BoolPtrInput
	// A description of the Aqua Enforcer group.
	Description pulumi.StringPtrInput
	// Number of disconnected enforcers in the enforcer group.
	DisconnectedCount pulumi.IntPtrInput
	// Whether to enable enforce mode on the Enforcers, defaults to False.
	Enforce pulumi.BoolPtrInput
	// The specific Aqua Enforcer product image (with image tag) to be deployed.
	EnforcerImageName pulumi.StringPtrInput
	// Select Enabled to send activity logs in your containers to the Aqua Server for forensics purposes.
	Forensics pulumi.BoolPtrInput
	// Gateway Address
	GatewayAddress pulumi.StringPtrInput
	// Gateway Name
	GatewayName pulumi.StringPtrInput
	// List of Aqua gateway IDs for the Enforcers.
	Gateways pulumi.StringArrayInput
	// The ID of the Enforcer group.
	GroupId pulumi.StringPtrInput
	// Number of high vulnerabilities in the enforcers that in this enforcer group.
	HighVulns pulumi.IntPtrInput
	// Set `True` to enable host scanning and respective Host Assurance controls.
	HostAssurance pulumi.BoolPtrInput
	// Set `True` to enable these Host Runtime Policy controls: `OS Users and Groups Allowed` and `OS Users and Groups Blocked`
	HostBehavioralEngine pulumi.BoolPtrInput
	// Select Enabled to send activity logs in your host to the Aqua Server for forensics purposes.
	HostForensics pulumi.BoolPtrInput
	// Set `True` to apply Firewall Policies to hosts, and allow recording network maps for Aqua services. The Network Firewall setting must be disabled when deploying the Aqua Enforcer on a machine running Rocky Linux. See https://docs.aquasec.com/docs/platform-support-limitations-rocky-linux for further information
	HostNetworkProtection pulumi.BoolPtrInput
	// The OS type for the host
	HostOs pulumi.StringPtrInput
	// Set `True` to enable all Host Runtime Policy controls except for `OS Users and Groups Allowed` and `OS Users and Groups Blocked`.
	HostProtection pulumi.BoolPtrInput
	// Set `True` to enable these Host Runtime Policy controls: `OS Users and Groups Allowed` and `OS Users and Groups Blocked`
	HostUserProtection pulumi.BoolPtrInput
	// The hostname
	Hostname pulumi.StringPtrInput
	// Number of enforcers in the enforcer group.
	HostsCount pulumi.IntPtrInput
	// Set `True` to enable selected controls: Container Runtime Policy (`Block Non-Compliant Images`, `Block Unregistered Images`, and `Registries Allowed`) and Default Image Assurance Policy (`Images Blocked`).
	ImageAssurance pulumi.BoolPtrInput
	// Enforcer install command
	InstallCommand pulumi.StringPtrInput
	// See https://docs.aquasec.com/docs/securing-kubernetes-applications#section-configuration-hardening, The KubeEnforcer can deploy the Aqua Security kube-bench open-source product to perform Kubernetes CIS benchmark testing of nodes.
	// 			This field specifies the path and file name of the kube-bench product image for the KubeEnforcer to deploy; it will be filled in automatically. You can optionally enter a different value.
	KubeBenchImageName pulumi.StringPtrInput
	// The last date and time the batch token was updated in UNIX time.
	LastUpdate pulumi.IntPtrInput
	// Name for the batch install record.
	LogicalName pulumi.StringPtrInput
	// Number of low vulnerabilities in the enforcers that in this enforcer group.
	LowVulns pulumi.IntPtrInput
	// Number of medium vulnerabilities in the enforcers that in this enforcer group.
	MedVulns pulumi.IntPtrInput
	// This option is applicable only if `Enable Pod Enforcer injection` is selected.
	MicroEnforcerCertsSecretsName pulumi.StringPtrInput
	// This option is applicable only if `Enable Pod Enforcer injection` is selected. This field specifies the path and file name of the KubeEnforcer product image to be deployed; it will be filled in automatically. You can optionally enter a different value.
	MicroEnforcerImageName pulumi.StringPtrInput
	// This applies only if both `Enable admission control` and Enforce mode are set. This additional option must be selected for admission control to work if the KubeEnforcer is not connected to any Gateway. If this option is not selected, admission control will be disabled; this will have no effect on containers already running.
	MicroEnforcerInjection pulumi.BoolPtrInput
	// You can specify the name of the secret (in the Aqua namespace) that Aqua copies into the Pod Enforcer namespace and kube-bench, allowing them access to the Pod Enforcer and kube-bench product images, respectively.
	MicroEnforcerSecretsName pulumi.StringPtrInput
	// Number of negligible vulnerabilities in the enforcers that in this enforcer group.
	NegVulns pulumi.IntPtrInput
	// Send true to apply Firewall Policies to containers, and allow recording network maps for Aqua services. The Network Firewall setting must be disabled when deploying the Aqua Enforcer on a machine running Rocky Linux. See https://docs.aquasec.com/docs/platform-support-limitations-rocky-linux for further information.
	NetworkProtection pulumi.BoolPtrInput
	// The orchestrator for which you are creating the Enforcer group.
	Orchestrators EnforcerGroupsOrchestratorArrayInput
	// pas deployment link
	PasDeploymentLink pulumi.StringPtrInput
	// Permission Action
	Permission pulumi.StringPtrInput
	// Set `True` to allow Enforcers to be discovered in the Risk Explorer.
	RiskExplorerAutoDiscovery pulumi.BoolPtrInput
	// Function Runtime Policy that will applay on the nano enforcer.
	RuntimePolicyName pulumi.StringPtrInput
	// The container runtime environment.
	RuntimeType pulumi.StringPtrInput
	// Set `True` to configure Enforcers to discover local host images. Discovered images will be listed under Images > Host Images, as well as under Infrastructure (in the Images tab for applicable hosts).
	SyncHostImages pulumi.BoolPtrInput
	// Set `True` will allow profiling and monitoring system calls made by running containers.
	SyscallEnabled pulumi.BoolPtrInput
	// The batch install token.
	Token pulumi.StringPtrInput
	// Enforcer Type.
	Type pulumi.StringPtrInput
	// Set `True` to apply User Access Control Policies to containers. Note that Aqua Enforcers must be deployed with the AQUA*RUNC*INTERCEPTION environment variable set to 0 in order to use User Access Control Policies.
	UserAccessControl pulumi.BoolPtrInput
}

func (EnforcerGroupsState) ElementType() reflect.Type {
	return reflect.TypeOf((*enforcerGroupsState)(nil)).Elem()
}

type enforcerGroupsArgs struct {
	// Selecting this option will allow the KubeEnforcer to block the deployment of container images that have failed any of these Container Runtime Policy controls:\
	// 			* Block Non-Compliant Images\
	// 			* Block Non-Compliant Workloads\
	// 			* Block Unregistered Images\
	// 			This functionality can work only when the KubeEnforcer is deployed in Enforce mode.
	AdmissionControl *bool `pulumi:"admissionControl"`
	// Allow kube enforcer audit.
	AllowKubeEnforcerAudit *bool `pulumi:"allowKubeEnforcerAudit"`
	// List of application names to allow on the hosts. if provided, only containers of the listed applications will be allowed to run.
	AllowedApplications []string `pulumi:"allowedApplications"`
	// List of label names to allow on the hosts.
	AllowedLabels []string `pulumi:"allowedLabels"`
	// List of registry names to allow on the hosts.
	AllowedRegistries []string `pulumi:"allowedRegistries"`
	// This setting is available only when you have license for `Advanced Malware Protection`. Send true to make use of the license and enable the `Real-time Malware Protection` control in the Host Runtime policies.
	AntivirusProtection *bool `pulumi:"antivirusProtection"`
	// Agent will send extra audit messages to the server for success operations from inside the container (runtime).
	AuditAll *bool `pulumi:"auditAll"`
	// This option is applicable only if `Enable Pod Enforcer injection` is selected. Select this option if you want Aqua Enterprise to copy the secrets defined above to the Pod Enforcer namespace and container. Otherwise, you can choose to copy these secrets by other means.
	AutoCopySecrets *bool `pulumi:"autoCopySecrets"`
	// This option is available only if `Enable workload discovery` is selected. If selected, the KubeEnforcer will add previously unknown image registries from the cluster to Aqua.
	AutoDiscoverConfigureRegistries *bool `pulumi:"autoDiscoverConfigureRegistries"`
	// When this option is selected, the KubeEnforcer will discover workloads on its cluster.
	AutoDiscoveryEnabled *bool `pulumi:"autoDiscoveryEnabled"`
	// This option is available only if `Enable workload discovery` is selected. If selected, the KubeEnforcer will automatically register images running as workloads (and scan the discovered images for security issues).
	AutoScanDiscoveredImagesRunningContainers *bool `pulumi:"autoScanDiscoveredImagesRunningContainers"`
	// Select Enabled to detect suspicious activity in your containers and display potential security threats in the Incidents and Audit pages.
	BehavioralEngine *bool `pulumi:"behavioralEngine"`
	// This applies only if both `Enable admission control` and Enforce mode are set. This additional option must be selected for admission control to work if the KubeEnforcer is not connected to any Gateway. If this option is not selected, admission control will be disabled; this will have no effect on containers already running.
	BlockAdmissionControl *bool `pulumi:"blockAdmissionControl"`
	// Set `True` to apply Container Runtime Policies, Image Profiles, and Firewall Policies to containers.
	ContainerActivityProtection *bool `pulumi:"containerActivityProtection"`
	// This setting is available only when you have license for `Advanced Malware Protection`. Send true to make use of the license and enable the `Real-time Malware Protection` control in the Container Runtime policies.
	ContainerAntivirusProtection *bool `pulumi:"containerAntivirusProtection"`
	// A description of the Aqua Enforcer group.
	Description *string `pulumi:"description"`
	// Whether to enable enforce mode on the Enforcers, defaults to False.
	Enforce *bool `pulumi:"enforce"`
	// Select Enabled to send activity logs in your containers to the Aqua Server for forensics purposes.
	Forensics *bool `pulumi:"forensics"`
	// List of Aqua gateway IDs for the Enforcers.
	Gateways []string `pulumi:"gateways"`
	// The ID of the Enforcer group.
	GroupId string `pulumi:"groupId"`
	// Set `True` to enable host scanning and respective Host Assurance controls.
	HostAssurance *bool `pulumi:"hostAssurance"`
	// Set `True` to enable these Host Runtime Policy controls: `OS Users and Groups Allowed` and `OS Users and Groups Blocked`
	HostBehavioralEngine *bool `pulumi:"hostBehavioralEngine"`
	// Select Enabled to send activity logs in your host to the Aqua Server for forensics purposes.
	HostForensics *bool `pulumi:"hostForensics"`
	// Set `True` to apply Firewall Policies to hosts, and allow recording network maps for Aqua services. The Network Firewall setting must be disabled when deploying the Aqua Enforcer on a machine running Rocky Linux. See https://docs.aquasec.com/docs/platform-support-limitations-rocky-linux for further information
	HostNetworkProtection *bool `pulumi:"hostNetworkProtection"`
	// The OS type for the host
	HostOs *string `pulumi:"hostOs"`
	// Set `True` to enable all Host Runtime Policy controls except for `OS Users and Groups Allowed` and `OS Users and Groups Blocked`.
	HostProtection *bool `pulumi:"hostProtection"`
	// Set `True` to enable these Host Runtime Policy controls: `OS Users and Groups Allowed` and `OS Users and Groups Blocked`
	HostUserProtection *bool `pulumi:"hostUserProtection"`
	// Set `True` to enable selected controls: Container Runtime Policy (`Block Non-Compliant Images`, `Block Unregistered Images`, and `Registries Allowed`) and Default Image Assurance Policy (`Images Blocked`).
	ImageAssurance *bool `pulumi:"imageAssurance"`
	// See https://docs.aquasec.com/docs/securing-kubernetes-applications#section-configuration-hardening, The KubeEnforcer can deploy the Aqua Security kube-bench open-source product to perform Kubernetes CIS benchmark testing of nodes.
	// 			This field specifies the path and file name of the kube-bench product image for the KubeEnforcer to deploy; it will be filled in automatically. You can optionally enter a different value.
	KubeBenchImageName *string `pulumi:"kubeBenchImageName"`
	// Name for the batch install record.
	LogicalName *string `pulumi:"logicalName"`
	// This option is applicable only if `Enable Pod Enforcer injection` is selected.
	MicroEnforcerCertsSecretsName *string `pulumi:"microEnforcerCertsSecretsName"`
	// This option is applicable only if `Enable Pod Enforcer injection` is selected. This field specifies the path and file name of the KubeEnforcer product image to be deployed; it will be filled in automatically. You can optionally enter a different value.
	MicroEnforcerImageName *string `pulumi:"microEnforcerImageName"`
	// This applies only if both `Enable admission control` and Enforce mode are set. This additional option must be selected for admission control to work if the KubeEnforcer is not connected to any Gateway. If this option is not selected, admission control will be disabled; this will have no effect on containers already running.
	MicroEnforcerInjection *bool `pulumi:"microEnforcerInjection"`
	// You can specify the name of the secret (in the Aqua namespace) that Aqua copies into the Pod Enforcer namespace and kube-bench, allowing them access to the Pod Enforcer and kube-bench product images, respectively.
	MicroEnforcerSecretsName *string `pulumi:"microEnforcerSecretsName"`
	// Send true to apply Firewall Policies to containers, and allow recording network maps for Aqua services. The Network Firewall setting must be disabled when deploying the Aqua Enforcer on a machine running Rocky Linux. See https://docs.aquasec.com/docs/platform-support-limitations-rocky-linux for further information.
	NetworkProtection *bool `pulumi:"networkProtection"`
	// The orchestrator for which you are creating the Enforcer group.
	Orchestrators []EnforcerGroupsOrchestrator `pulumi:"orchestrators"`
	// Permission Action
	Permission *string `pulumi:"permission"`
	// Set `True` to allow Enforcers to be discovered in the Risk Explorer.
	RiskExplorerAutoDiscovery *bool `pulumi:"riskExplorerAutoDiscovery"`
	// The container runtime environment.
	RuntimeType *string `pulumi:"runtimeType"`
	// Set `True` to configure Enforcers to discover local host images. Discovered images will be listed under Images > Host Images, as well as under Infrastructure (in the Images tab for applicable hosts).
	SyncHostImages *bool `pulumi:"syncHostImages"`
	// Set `True` will allow profiling and monitoring system calls made by running containers.
	SyscallEnabled *bool `pulumi:"syscallEnabled"`
	// Enforcer Type.
	Type string `pulumi:"type"`
	// Set `True` to apply User Access Control Policies to containers. Note that Aqua Enforcers must be deployed with the AQUA*RUNC*INTERCEPTION environment variable set to 0 in order to use User Access Control Policies.
	UserAccessControl *bool `pulumi:"userAccessControl"`
}

// The set of arguments for constructing a EnforcerGroups resource.
type EnforcerGroupsArgs struct {
	// Selecting this option will allow the KubeEnforcer to block the deployment of container images that have failed any of these Container Runtime Policy controls:\
	// 			* Block Non-Compliant Images\
	// 			* Block Non-Compliant Workloads\
	// 			* Block Unregistered Images\
	// 			This functionality can work only when the KubeEnforcer is deployed in Enforce mode.
	AdmissionControl pulumi.BoolPtrInput
	// Allow kube enforcer audit.
	AllowKubeEnforcerAudit pulumi.BoolPtrInput
	// List of application names to allow on the hosts. if provided, only containers of the listed applications will be allowed to run.
	AllowedApplications pulumi.StringArrayInput
	// List of label names to allow on the hosts.
	AllowedLabels pulumi.StringArrayInput
	// List of registry names to allow on the hosts.
	AllowedRegistries pulumi.StringArrayInput
	// This setting is available only when you have license for `Advanced Malware Protection`. Send true to make use of the license and enable the `Real-time Malware Protection` control in the Host Runtime policies.
	AntivirusProtection pulumi.BoolPtrInput
	// Agent will send extra audit messages to the server for success operations from inside the container (runtime).
	AuditAll pulumi.BoolPtrInput
	// This option is applicable only if `Enable Pod Enforcer injection` is selected. Select this option if you want Aqua Enterprise to copy the secrets defined above to the Pod Enforcer namespace and container. Otherwise, you can choose to copy these secrets by other means.
	AutoCopySecrets pulumi.BoolPtrInput
	// This option is available only if `Enable workload discovery` is selected. If selected, the KubeEnforcer will add previously unknown image registries from the cluster to Aqua.
	AutoDiscoverConfigureRegistries pulumi.BoolPtrInput
	// When this option is selected, the KubeEnforcer will discover workloads on its cluster.
	AutoDiscoveryEnabled pulumi.BoolPtrInput
	// This option is available only if `Enable workload discovery` is selected. If selected, the KubeEnforcer will automatically register images running as workloads (and scan the discovered images for security issues).
	AutoScanDiscoveredImagesRunningContainers pulumi.BoolPtrInput
	// Select Enabled to detect suspicious activity in your containers and display potential security threats in the Incidents and Audit pages.
	BehavioralEngine pulumi.BoolPtrInput
	// This applies only if both `Enable admission control` and Enforce mode are set. This additional option must be selected for admission control to work if the KubeEnforcer is not connected to any Gateway. If this option is not selected, admission control will be disabled; this will have no effect on containers already running.
	BlockAdmissionControl pulumi.BoolPtrInput
	// Set `True` to apply Container Runtime Policies, Image Profiles, and Firewall Policies to containers.
	ContainerActivityProtection pulumi.BoolPtrInput
	// This setting is available only when you have license for `Advanced Malware Protection`. Send true to make use of the license and enable the `Real-time Malware Protection` control in the Container Runtime policies.
	ContainerAntivirusProtection pulumi.BoolPtrInput
	// A description of the Aqua Enforcer group.
	Description pulumi.StringPtrInput
	// Whether to enable enforce mode on the Enforcers, defaults to False.
	Enforce pulumi.BoolPtrInput
	// Select Enabled to send activity logs in your containers to the Aqua Server for forensics purposes.
	Forensics pulumi.BoolPtrInput
	// List of Aqua gateway IDs for the Enforcers.
	Gateways pulumi.StringArrayInput
	// The ID of the Enforcer group.
	GroupId pulumi.StringInput
	// Set `True` to enable host scanning and respective Host Assurance controls.
	HostAssurance pulumi.BoolPtrInput
	// Set `True` to enable these Host Runtime Policy controls: `OS Users and Groups Allowed` and `OS Users and Groups Blocked`
	HostBehavioralEngine pulumi.BoolPtrInput
	// Select Enabled to send activity logs in your host to the Aqua Server for forensics purposes.
	HostForensics pulumi.BoolPtrInput
	// Set `True` to apply Firewall Policies to hosts, and allow recording network maps for Aqua services. The Network Firewall setting must be disabled when deploying the Aqua Enforcer on a machine running Rocky Linux. See https://docs.aquasec.com/docs/platform-support-limitations-rocky-linux for further information
	HostNetworkProtection pulumi.BoolPtrInput
	// The OS type for the host
	HostOs pulumi.StringPtrInput
	// Set `True` to enable all Host Runtime Policy controls except for `OS Users and Groups Allowed` and `OS Users and Groups Blocked`.
	HostProtection pulumi.BoolPtrInput
	// Set `True` to enable these Host Runtime Policy controls: `OS Users and Groups Allowed` and `OS Users and Groups Blocked`
	HostUserProtection pulumi.BoolPtrInput
	// Set `True` to enable selected controls: Container Runtime Policy (`Block Non-Compliant Images`, `Block Unregistered Images`, and `Registries Allowed`) and Default Image Assurance Policy (`Images Blocked`).
	ImageAssurance pulumi.BoolPtrInput
	// See https://docs.aquasec.com/docs/securing-kubernetes-applications#section-configuration-hardening, The KubeEnforcer can deploy the Aqua Security kube-bench open-source product to perform Kubernetes CIS benchmark testing of nodes.
	// 			This field specifies the path and file name of the kube-bench product image for the KubeEnforcer to deploy; it will be filled in automatically. You can optionally enter a different value.
	KubeBenchImageName pulumi.StringPtrInput
	// Name for the batch install record.
	LogicalName pulumi.StringPtrInput
	// This option is applicable only if `Enable Pod Enforcer injection` is selected.
	MicroEnforcerCertsSecretsName pulumi.StringPtrInput
	// This option is applicable only if `Enable Pod Enforcer injection` is selected. This field specifies the path and file name of the KubeEnforcer product image to be deployed; it will be filled in automatically. You can optionally enter a different value.
	MicroEnforcerImageName pulumi.StringPtrInput
	// This applies only if both `Enable admission control` and Enforce mode are set. This additional option must be selected for admission control to work if the KubeEnforcer is not connected to any Gateway. If this option is not selected, admission control will be disabled; this will have no effect on containers already running.
	MicroEnforcerInjection pulumi.BoolPtrInput
	// You can specify the name of the secret (in the Aqua namespace) that Aqua copies into the Pod Enforcer namespace and kube-bench, allowing them access to the Pod Enforcer and kube-bench product images, respectively.
	MicroEnforcerSecretsName pulumi.StringPtrInput
	// Send true to apply Firewall Policies to containers, and allow recording network maps for Aqua services. The Network Firewall setting must be disabled when deploying the Aqua Enforcer on a machine running Rocky Linux. See https://docs.aquasec.com/docs/platform-support-limitations-rocky-linux for further information.
	NetworkProtection pulumi.BoolPtrInput
	// The orchestrator for which you are creating the Enforcer group.
	Orchestrators EnforcerGroupsOrchestratorArrayInput
	// Permission Action
	Permission pulumi.StringPtrInput
	// Set `True` to allow Enforcers to be discovered in the Risk Explorer.
	RiskExplorerAutoDiscovery pulumi.BoolPtrInput
	// The container runtime environment.
	RuntimeType pulumi.StringPtrInput
	// Set `True` to configure Enforcers to discover local host images. Discovered images will be listed under Images > Host Images, as well as under Infrastructure (in the Images tab for applicable hosts).
	SyncHostImages pulumi.BoolPtrInput
	// Set `True` will allow profiling and monitoring system calls made by running containers.
	SyscallEnabled pulumi.BoolPtrInput
	// Enforcer Type.
	Type pulumi.StringInput
	// Set `True` to apply User Access Control Policies to containers. Note that Aqua Enforcers must be deployed with the AQUA*RUNC*INTERCEPTION environment variable set to 0 in order to use User Access Control Policies.
	UserAccessControl pulumi.BoolPtrInput
}

func (EnforcerGroupsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*enforcerGroupsArgs)(nil)).Elem()
}

type EnforcerGroupsInput interface {
	pulumi.Input

	ToEnforcerGroupsOutput() EnforcerGroupsOutput
	ToEnforcerGroupsOutputWithContext(ctx context.Context) EnforcerGroupsOutput
}

func (*EnforcerGroups) ElementType() reflect.Type {
	return reflect.TypeOf((**EnforcerGroups)(nil)).Elem()
}

func (i *EnforcerGroups) ToEnforcerGroupsOutput() EnforcerGroupsOutput {
	return i.ToEnforcerGroupsOutputWithContext(context.Background())
}

func (i *EnforcerGroups) ToEnforcerGroupsOutputWithContext(ctx context.Context) EnforcerGroupsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnforcerGroupsOutput)
}

// EnforcerGroupsArrayInput is an input type that accepts EnforcerGroupsArray and EnforcerGroupsArrayOutput values.
// You can construct a concrete instance of `EnforcerGroupsArrayInput` via:
//
//	EnforcerGroupsArray{ EnforcerGroupsArgs{...} }
type EnforcerGroupsArrayInput interface {
	pulumi.Input

	ToEnforcerGroupsArrayOutput() EnforcerGroupsArrayOutput
	ToEnforcerGroupsArrayOutputWithContext(context.Context) EnforcerGroupsArrayOutput
}

type EnforcerGroupsArray []EnforcerGroupsInput

func (EnforcerGroupsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EnforcerGroups)(nil)).Elem()
}

func (i EnforcerGroupsArray) ToEnforcerGroupsArrayOutput() EnforcerGroupsArrayOutput {
	return i.ToEnforcerGroupsArrayOutputWithContext(context.Background())
}

func (i EnforcerGroupsArray) ToEnforcerGroupsArrayOutputWithContext(ctx context.Context) EnforcerGroupsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnforcerGroupsArrayOutput)
}

// EnforcerGroupsMapInput is an input type that accepts EnforcerGroupsMap and EnforcerGroupsMapOutput values.
// You can construct a concrete instance of `EnforcerGroupsMapInput` via:
//
//	EnforcerGroupsMap{ "key": EnforcerGroupsArgs{...} }
type EnforcerGroupsMapInput interface {
	pulumi.Input

	ToEnforcerGroupsMapOutput() EnforcerGroupsMapOutput
	ToEnforcerGroupsMapOutputWithContext(context.Context) EnforcerGroupsMapOutput
}

type EnforcerGroupsMap map[string]EnforcerGroupsInput

func (EnforcerGroupsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EnforcerGroups)(nil)).Elem()
}

func (i EnforcerGroupsMap) ToEnforcerGroupsMapOutput() EnforcerGroupsMapOutput {
	return i.ToEnforcerGroupsMapOutputWithContext(context.Background())
}

func (i EnforcerGroupsMap) ToEnforcerGroupsMapOutputWithContext(ctx context.Context) EnforcerGroupsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnforcerGroupsMapOutput)
}

type EnforcerGroupsOutput struct{ *pulumi.OutputState }

func (EnforcerGroupsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnforcerGroups)(nil)).Elem()
}

func (o EnforcerGroupsOutput) ToEnforcerGroupsOutput() EnforcerGroupsOutput {
	return o
}

func (o EnforcerGroupsOutput) ToEnforcerGroupsOutputWithContext(ctx context.Context) EnforcerGroupsOutput {
	return o
}

// Selecting this option will allow the KubeEnforcer to block the deployment of container images that have failed any of these Container Runtime Policy controls:\
//   - Block Non-Compliant Images\
//   - Block Non-Compliant Workloads\
//   - Block Unregistered Images\
//     This functionality can work only when the KubeEnforcer is deployed in Enforce mode.
func (o EnforcerGroupsOutput) AdmissionControl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EnforcerGroups) pulumi.BoolPtrOutput { return v.AdmissionControl }).(pulumi.BoolPtrOutput)
}

// Allow kube enforcer audit.
func (o EnforcerGroupsOutput) AllowKubeEnforcerAudit() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EnforcerGroups) pulumi.BoolPtrOutput { return v.AllowKubeEnforcerAudit }).(pulumi.BoolPtrOutput)
}

// List of application names to allow on the hosts. if provided, only containers of the listed applications will be allowed to run.
func (o EnforcerGroupsOutput) AllowedApplications() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EnforcerGroups) pulumi.StringArrayOutput { return v.AllowedApplications }).(pulumi.StringArrayOutput)
}

// List of label names to allow on the hosts.
func (o EnforcerGroupsOutput) AllowedLabels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EnforcerGroups) pulumi.StringArrayOutput { return v.AllowedLabels }).(pulumi.StringArrayOutput)
}

// List of registry names to allow on the hosts.
func (o EnforcerGroupsOutput) AllowedRegistries() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EnforcerGroups) pulumi.StringArrayOutput { return v.AllowedRegistries }).(pulumi.StringArrayOutput)
}

// This setting is available only when you have license for `Advanced Malware Protection`. Send true to make use of the license and enable the `Real-time Malware Protection` control in the Host Runtime policies.
func (o EnforcerGroupsOutput) AntivirusProtection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EnforcerGroups) pulumi.BoolPtrOutput { return v.AntivirusProtection }).(pulumi.BoolPtrOutput)
}

// Aqua server version
func (o EnforcerGroupsOutput) AquaVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *EnforcerGroups) pulumi.StringOutput { return v.AquaVersion }).(pulumi.StringOutput)
}

// Agent will send extra audit messages to the server for success operations from inside the container (runtime).
func (o EnforcerGroupsOutput) AuditAll() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EnforcerGroups) pulumi.BoolPtrOutput { return v.AuditAll }).(pulumi.BoolPtrOutput)
}

// This option is applicable only if `Enable Pod Enforcer injection` is selected. Select this option if you want Aqua Enterprise to copy the secrets defined above to the Pod Enforcer namespace and container. Otherwise, you can choose to copy these secrets by other means.
func (o EnforcerGroupsOutput) AutoCopySecrets() pulumi.BoolOutput {
	return o.ApplyT(func(v *EnforcerGroups) pulumi.BoolOutput { return v.AutoCopySecrets }).(pulumi.BoolOutput)
}

// This option is available only if `Enable workload discovery` is selected. If selected, the KubeEnforcer will add previously unknown image registries from the cluster to Aqua.
func (o EnforcerGroupsOutput) AutoDiscoverConfigureRegistries() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EnforcerGroups) pulumi.BoolPtrOutput { return v.AutoDiscoverConfigureRegistries }).(pulumi.BoolPtrOutput)
}

// When this option is selected, the KubeEnforcer will discover workloads on its cluster.
func (o EnforcerGroupsOutput) AutoDiscoveryEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EnforcerGroups) pulumi.BoolPtrOutput { return v.AutoDiscoveryEnabled }).(pulumi.BoolPtrOutput)
}

// This option is available only if `Enable workload discovery` is selected. If selected, the KubeEnforcer will automatically register images running as workloads (and scan the discovered images for security issues).
func (o EnforcerGroupsOutput) AutoScanDiscoveredImagesRunningContainers() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EnforcerGroups) pulumi.BoolPtrOutput { return v.AutoScanDiscoveredImagesRunningContainers }).(pulumi.BoolPtrOutput)
}

// Select Enabled to detect suspicious activity in your containers and display potential security threats in the Incidents and Audit pages.
func (o EnforcerGroupsOutput) BehavioralEngine() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EnforcerGroups) pulumi.BoolPtrOutput { return v.BehavioralEngine }).(pulumi.BoolPtrOutput)
}

// This applies only if both `Enable admission control` and Enforce mode are set. This additional option must be selected for admission control to work if the KubeEnforcer is not connected to any Gateway. If this option is not selected, admission control will be disabled; this will have no effect on containers already running.
func (o EnforcerGroupsOutput) BlockAdmissionControl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EnforcerGroups) pulumi.BoolPtrOutput { return v.BlockAdmissionControl }).(pulumi.BoolPtrOutput)
}

// The installation command.
func (o EnforcerGroupsOutput) Commands() EnforcerGroupsCommandArrayOutput {
	return o.ApplyT(func(v *EnforcerGroups) EnforcerGroupsCommandArrayOutput { return v.Commands }).(EnforcerGroupsCommandArrayOutput)
}

// Number of connected enforcers in the enforcer group.
func (o EnforcerGroupsOutput) ConnectedCount() pulumi.IntOutput {
	return o.ApplyT(func(v *EnforcerGroups) pulumi.IntOutput { return v.ConnectedCount }).(pulumi.IntOutput)
}

// Set `True` to apply Container Runtime Policies, Image Profiles, and Firewall Policies to containers.
func (o EnforcerGroupsOutput) ContainerActivityProtection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EnforcerGroups) pulumi.BoolPtrOutput { return v.ContainerActivityProtection }).(pulumi.BoolPtrOutput)
}

// This setting is available only when you have license for `Advanced Malware Protection`. Send true to make use of the license and enable the `Real-time Malware Protection` control in the Container Runtime policies.
func (o EnforcerGroupsOutput) ContainerAntivirusProtection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EnforcerGroups) pulumi.BoolPtrOutput { return v.ContainerAntivirusProtection }).(pulumi.BoolPtrOutput)
}

// A description of the Aqua Enforcer group.
func (o EnforcerGroupsOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnforcerGroups) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Number of disconnected enforcers in the enforcer group.
func (o EnforcerGroupsOutput) DisconnectedCount() pulumi.IntOutput {
	return o.ApplyT(func(v *EnforcerGroups) pulumi.IntOutput { return v.DisconnectedCount }).(pulumi.IntOutput)
}

// Whether to enable enforce mode on the Enforcers, defaults to False.
func (o EnforcerGroupsOutput) Enforce() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EnforcerGroups) pulumi.BoolPtrOutput { return v.Enforce }).(pulumi.BoolPtrOutput)
}

// The specific Aqua Enforcer product image (with image tag) to be deployed.
func (o EnforcerGroupsOutput) EnforcerImageName() pulumi.StringOutput {
	return o.ApplyT(func(v *EnforcerGroups) pulumi.StringOutput { return v.EnforcerImageName }).(pulumi.StringOutput)
}

// Select Enabled to send activity logs in your containers to the Aqua Server for forensics purposes.
func (o EnforcerGroupsOutput) Forensics() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EnforcerGroups) pulumi.BoolPtrOutput { return v.Forensics }).(pulumi.BoolPtrOutput)
}

// Gateway Address
func (o EnforcerGroupsOutput) GatewayAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *EnforcerGroups) pulumi.StringOutput { return v.GatewayAddress }).(pulumi.StringOutput)
}

// Gateway Name
func (o EnforcerGroupsOutput) GatewayName() pulumi.StringOutput {
	return o.ApplyT(func(v *EnforcerGroups) pulumi.StringOutput { return v.GatewayName }).(pulumi.StringOutput)
}

// List of Aqua gateway IDs for the Enforcers.
func (o EnforcerGroupsOutput) Gateways() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EnforcerGroups) pulumi.StringArrayOutput { return v.Gateways }).(pulumi.StringArrayOutput)
}

// The ID of the Enforcer group.
func (o EnforcerGroupsOutput) GroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *EnforcerGroups) pulumi.StringOutput { return v.GroupId }).(pulumi.StringOutput)
}

// Number of high vulnerabilities in the enforcers that in this enforcer group.
func (o EnforcerGroupsOutput) HighVulns() pulumi.IntOutput {
	return o.ApplyT(func(v *EnforcerGroups) pulumi.IntOutput { return v.HighVulns }).(pulumi.IntOutput)
}

// Set `True` to enable host scanning and respective Host Assurance controls.
func (o EnforcerGroupsOutput) HostAssurance() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EnforcerGroups) pulumi.BoolPtrOutput { return v.HostAssurance }).(pulumi.BoolPtrOutput)
}

// Set `True` to enable these Host Runtime Policy controls: `OS Users and Groups Allowed` and `OS Users and Groups Blocked`
func (o EnforcerGroupsOutput) HostBehavioralEngine() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EnforcerGroups) pulumi.BoolPtrOutput { return v.HostBehavioralEngine }).(pulumi.BoolPtrOutput)
}

// Select Enabled to send activity logs in your host to the Aqua Server for forensics purposes.
func (o EnforcerGroupsOutput) HostForensics() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EnforcerGroups) pulumi.BoolPtrOutput { return v.HostForensics }).(pulumi.BoolPtrOutput)
}

// Set `True` to apply Firewall Policies to hosts, and allow recording network maps for Aqua services. The Network Firewall setting must be disabled when deploying the Aqua Enforcer on a machine running Rocky Linux. See https://docs.aquasec.com/docs/platform-support-limitations-rocky-linux for further information
func (o EnforcerGroupsOutput) HostNetworkProtection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EnforcerGroups) pulumi.BoolPtrOutput { return v.HostNetworkProtection }).(pulumi.BoolPtrOutput)
}

// The OS type for the host
func (o EnforcerGroupsOutput) HostOs() pulumi.StringOutput {
	return o.ApplyT(func(v *EnforcerGroups) pulumi.StringOutput { return v.HostOs }).(pulumi.StringOutput)
}

// Set `True` to enable all Host Runtime Policy controls except for `OS Users and Groups Allowed` and `OS Users and Groups Blocked`.
func (o EnforcerGroupsOutput) HostProtection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EnforcerGroups) pulumi.BoolPtrOutput { return v.HostProtection }).(pulumi.BoolPtrOutput)
}

// Set `True` to enable these Host Runtime Policy controls: `OS Users and Groups Allowed` and `OS Users and Groups Blocked`
func (o EnforcerGroupsOutput) HostUserProtection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EnforcerGroups) pulumi.BoolPtrOutput { return v.HostUserProtection }).(pulumi.BoolPtrOutput)
}

// The hostname
func (o EnforcerGroupsOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v *EnforcerGroups) pulumi.StringOutput { return v.Hostname }).(pulumi.StringOutput)
}

// Number of enforcers in the enforcer group.
func (o EnforcerGroupsOutput) HostsCount() pulumi.IntOutput {
	return o.ApplyT(func(v *EnforcerGroups) pulumi.IntOutput { return v.HostsCount }).(pulumi.IntOutput)
}

// Set `True` to enable selected controls: Container Runtime Policy (`Block Non-Compliant Images`, `Block Unregistered Images`, and `Registries Allowed`) and Default Image Assurance Policy (`Images Blocked`).
func (o EnforcerGroupsOutput) ImageAssurance() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EnforcerGroups) pulumi.BoolPtrOutput { return v.ImageAssurance }).(pulumi.BoolPtrOutput)
}

// Enforcer install command
func (o EnforcerGroupsOutput) InstallCommand() pulumi.StringOutput {
	return o.ApplyT(func(v *EnforcerGroups) pulumi.StringOutput { return v.InstallCommand }).(pulumi.StringOutput)
}

// See https://docs.aquasec.com/docs/securing-kubernetes-applications#section-configuration-hardening, The KubeEnforcer can deploy the Aqua Security kube-bench open-source product to perform Kubernetes CIS benchmark testing of nodes.
//
//	This field specifies the path and file name of the kube-bench product image for the KubeEnforcer to deploy; it will be filled in automatically. You can optionally enter a different value.
func (o EnforcerGroupsOutput) KubeBenchImageName() pulumi.StringOutput {
	return o.ApplyT(func(v *EnforcerGroups) pulumi.StringOutput { return v.KubeBenchImageName }).(pulumi.StringOutput)
}

// The last date and time the batch token was updated in UNIX time.
func (o EnforcerGroupsOutput) LastUpdate() pulumi.IntOutput {
	return o.ApplyT(func(v *EnforcerGroups) pulumi.IntOutput { return v.LastUpdate }).(pulumi.IntOutput)
}

// Name for the batch install record.
func (o EnforcerGroupsOutput) LogicalName() pulumi.StringOutput {
	return o.ApplyT(func(v *EnforcerGroups) pulumi.StringOutput { return v.LogicalName }).(pulumi.StringOutput)
}

// Number of low vulnerabilities in the enforcers that in this enforcer group.
func (o EnforcerGroupsOutput) LowVulns() pulumi.IntOutput {
	return o.ApplyT(func(v *EnforcerGroups) pulumi.IntOutput { return v.LowVulns }).(pulumi.IntOutput)
}

// Number of medium vulnerabilities in the enforcers that in this enforcer group.
func (o EnforcerGroupsOutput) MedVulns() pulumi.IntOutput {
	return o.ApplyT(func(v *EnforcerGroups) pulumi.IntOutput { return v.MedVulns }).(pulumi.IntOutput)
}

// This option is applicable only if `Enable Pod Enforcer injection` is selected.
func (o EnforcerGroupsOutput) MicroEnforcerCertsSecretsName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnforcerGroups) pulumi.StringPtrOutput { return v.MicroEnforcerCertsSecretsName }).(pulumi.StringPtrOutput)
}

// This option is applicable only if `Enable Pod Enforcer injection` is selected. This field specifies the path and file name of the KubeEnforcer product image to be deployed; it will be filled in automatically. You can optionally enter a different value.
func (o EnforcerGroupsOutput) MicroEnforcerImageName() pulumi.StringOutput {
	return o.ApplyT(func(v *EnforcerGroups) pulumi.StringOutput { return v.MicroEnforcerImageName }).(pulumi.StringOutput)
}

// This applies only if both `Enable admission control` and Enforce mode are set. This additional option must be selected for admission control to work if the KubeEnforcer is not connected to any Gateway. If this option is not selected, admission control will be disabled; this will have no effect on containers already running.
func (o EnforcerGroupsOutput) MicroEnforcerInjection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EnforcerGroups) pulumi.BoolPtrOutput { return v.MicroEnforcerInjection }).(pulumi.BoolPtrOutput)
}

// You can specify the name of the secret (in the Aqua namespace) that Aqua copies into the Pod Enforcer namespace and kube-bench, allowing them access to the Pod Enforcer and kube-bench product images, respectively.
func (o EnforcerGroupsOutput) MicroEnforcerSecretsName() pulumi.StringOutput {
	return o.ApplyT(func(v *EnforcerGroups) pulumi.StringOutput { return v.MicroEnforcerSecretsName }).(pulumi.StringOutput)
}

// Number of negligible vulnerabilities in the enforcers that in this enforcer group.
func (o EnforcerGroupsOutput) NegVulns() pulumi.IntOutput {
	return o.ApplyT(func(v *EnforcerGroups) pulumi.IntOutput { return v.NegVulns }).(pulumi.IntOutput)
}

// Send true to apply Firewall Policies to containers, and allow recording network maps for Aqua services. The Network Firewall setting must be disabled when deploying the Aqua Enforcer on a machine running Rocky Linux. See https://docs.aquasec.com/docs/platform-support-limitations-rocky-linux for further information.
func (o EnforcerGroupsOutput) NetworkProtection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EnforcerGroups) pulumi.BoolPtrOutput { return v.NetworkProtection }).(pulumi.BoolPtrOutput)
}

// The orchestrator for which you are creating the Enforcer group.
func (o EnforcerGroupsOutput) Orchestrators() EnforcerGroupsOrchestratorArrayOutput {
	return o.ApplyT(func(v *EnforcerGroups) EnforcerGroupsOrchestratorArrayOutput { return v.Orchestrators }).(EnforcerGroupsOrchestratorArrayOutput)
}

// pas deployment link
func (o EnforcerGroupsOutput) PasDeploymentLink() pulumi.StringOutput {
	return o.ApplyT(func(v *EnforcerGroups) pulumi.StringOutput { return v.PasDeploymentLink }).(pulumi.StringOutput)
}

// Permission Action
func (o EnforcerGroupsOutput) Permission() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnforcerGroups) pulumi.StringPtrOutput { return v.Permission }).(pulumi.StringPtrOutput)
}

// Set `True` to allow Enforcers to be discovered in the Risk Explorer.
func (o EnforcerGroupsOutput) RiskExplorerAutoDiscovery() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EnforcerGroups) pulumi.BoolPtrOutput { return v.RiskExplorerAutoDiscovery }).(pulumi.BoolPtrOutput)
}

// Function Runtime Policy that will applay on the nano enforcer.
func (o EnforcerGroupsOutput) RuntimePolicyName() pulumi.StringOutput {
	return o.ApplyT(func(v *EnforcerGroups) pulumi.StringOutput { return v.RuntimePolicyName }).(pulumi.StringOutput)
}

// The container runtime environment.
func (o EnforcerGroupsOutput) RuntimeType() pulumi.StringOutput {
	return o.ApplyT(func(v *EnforcerGroups) pulumi.StringOutput { return v.RuntimeType }).(pulumi.StringOutput)
}

// Set `True` to configure Enforcers to discover local host images. Discovered images will be listed under Images > Host Images, as well as under Infrastructure (in the Images tab for applicable hosts).
func (o EnforcerGroupsOutput) SyncHostImages() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EnforcerGroups) pulumi.BoolPtrOutput { return v.SyncHostImages }).(pulumi.BoolPtrOutput)
}

// Set `True` will allow profiling and monitoring system calls made by running containers.
func (o EnforcerGroupsOutput) SyscallEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EnforcerGroups) pulumi.BoolPtrOutput { return v.SyscallEnabled }).(pulumi.BoolPtrOutput)
}

// The batch install token.
func (o EnforcerGroupsOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v *EnforcerGroups) pulumi.StringOutput { return v.Token }).(pulumi.StringOutput)
}

// Enforcer Type.
func (o EnforcerGroupsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *EnforcerGroups) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Set `True` to apply User Access Control Policies to containers. Note that Aqua Enforcers must be deployed with the AQUA*RUNC*INTERCEPTION environment variable set to 0 in order to use User Access Control Policies.
func (o EnforcerGroupsOutput) UserAccessControl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EnforcerGroups) pulumi.BoolPtrOutput { return v.UserAccessControl }).(pulumi.BoolPtrOutput)
}

type EnforcerGroupsArrayOutput struct{ *pulumi.OutputState }

func (EnforcerGroupsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EnforcerGroups)(nil)).Elem()
}

func (o EnforcerGroupsArrayOutput) ToEnforcerGroupsArrayOutput() EnforcerGroupsArrayOutput {
	return o
}

func (o EnforcerGroupsArrayOutput) ToEnforcerGroupsArrayOutputWithContext(ctx context.Context) EnforcerGroupsArrayOutput {
	return o
}

func (o EnforcerGroupsArrayOutput) Index(i pulumi.IntInput) EnforcerGroupsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EnforcerGroups {
		return vs[0].([]*EnforcerGroups)[vs[1].(int)]
	}).(EnforcerGroupsOutput)
}

type EnforcerGroupsMapOutput struct{ *pulumi.OutputState }

func (EnforcerGroupsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EnforcerGroups)(nil)).Elem()
}

func (o EnforcerGroupsMapOutput) ToEnforcerGroupsMapOutput() EnforcerGroupsMapOutput {
	return o
}

func (o EnforcerGroupsMapOutput) ToEnforcerGroupsMapOutputWithContext(ctx context.Context) EnforcerGroupsMapOutput {
	return o
}

func (o EnforcerGroupsMapOutput) MapIndex(k pulumi.StringInput) EnforcerGroupsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EnforcerGroups {
		return vs[0].(map[string]*EnforcerGroups)[vs[1].(string)]
	}).(EnforcerGroupsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EnforcerGroupsInput)(nil)).Elem(), &EnforcerGroups{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnforcerGroupsArrayInput)(nil)).Elem(), EnforcerGroupsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnforcerGroupsMapInput)(nil)).Elem(), EnforcerGroupsMap{})
	pulumi.RegisterOutputType(EnforcerGroupsOutput{})
	pulumi.RegisterOutputType(EnforcerGroupsArrayOutput{})
	pulumi.RegisterOutputType(EnforcerGroupsMapOutput{})
}
