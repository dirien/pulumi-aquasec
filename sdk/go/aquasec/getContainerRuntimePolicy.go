// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aquasec

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-aquasec/sdk/go/aquasec"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			containerRuntimePolicy, err := aquasec.LookupContainerRuntimePolicy(ctx, &GetContainerRuntimePolicyArgs{
//				Name: "FunctionRuntimePolicyName",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("containerRuntimePolicyDetails", containerRuntimePolicy)
//			return nil
//		})
//	}
//
// ```
func LookupContainerRuntimePolicy(ctx *pulumi.Context, args *LookupContainerRuntimePolicyArgs, opts ...pulumi.InvokeOption) (*LookupContainerRuntimePolicyResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv LookupContainerRuntimePolicyResult
	err := ctx.Invoke("aquasec:index/getContainerRuntimePolicy:getContainerRuntimePolicy", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getContainerRuntimePolicy.
type LookupContainerRuntimePolicyArgs struct {
	// Configuration for Real-Time Malware Protection.
	MalwareScanOptions []GetContainerRuntimePolicyMalwareScanOption `pulumi:"malwareScanOptions"`
	// Name of the container runtime policy
	Name string `pulumi:"name"`
}

// A collection of values returned by getContainerRuntimePolicy.
type LookupContainerRuntimePolicyResult struct {
	// List of executables that are allowed for the user.
	AllowedExecutables []string `pulumi:"allowedExecutables"`
	// List of registries that allowed for running containers.
	AllowedRegistries []string `pulumi:"allowedRegistries"`
	// Indicates the application scope of the service.
	ApplicationScopes []string `pulumi:"applicationScopes"`
	// If true, all network activity will be audited.
	AuditAllNetworkActivity bool `pulumi:"auditAllNetworkActivity"`
	// If true, all process activity will be audited.
	AuditAllProcessesActivity bool `pulumi:"auditAllProcessesActivity"`
	// If true, full command arguments will be audited.
	AuditFullCommandArguments bool `pulumi:"auditFullCommandArguments"`
	// Username of the account that created the service.
	Author string `pulumi:"author"`
	// If true, prevent containers from running with access to host network.
	BlockAccessHostNetwork bool `pulumi:"blockAccessHostNetwork"`
	// If true, prevent containers from running with adding capabilities with `--cap-add` privilege.
	BlockAddingCapabilities bool `pulumi:"blockAddingCapabilities"`
	// If true, exec into a container is prevented.
	BlockContainerExec bool `pulumi:"blockContainerExec"`
	// Detect and prevent communication to DNS/IP addresses known to be used for Cryptocurrency Mining
	BlockCryptocurrencyMining bool `pulumi:"blockCryptocurrencyMining"`
	// Detect and prevent running in-memory execution
	BlockFilelessExec bool `pulumi:"blockFilelessExec"`
	// If true, prevent containers from running with the capability to bind in port lower than 1024.
	BlockLowPortBinding bool `pulumi:"blockLowPortBinding"`
	// If true, running non-compliant image in the container is prevented.
	BlockNonCompliantImages bool `pulumi:"blockNonCompliantImages"`
	// If true, running containers in non-compliant pods is prevented.
	BlockNonCompliantWorkloads bool `pulumi:"blockNonCompliantWorkloads"`
	// If true, running non-kubernetes containers is prevented.
	BlockNonK8sContainers bool `pulumi:"blockNonK8sContainers"`
	// If true, prevent containers from running with privileged container capability.
	BlockPrivilegedContainers bool `pulumi:"blockPrivilegedContainers"`
	// If true, reverse shell is prevented.
	BlockReverseShell bool `pulumi:"blockReverseShell"`
	// If true, prevent containers from running with root user.
	BlockRootUser bool `pulumi:"blockRootUser"`
	// If true, running images in the container that are not registered in Aqua is prevented.
	BlockUnregisteredImages bool `pulumi:"blockUnregisteredImages"`
	// If true, prevent containers from running with the privilege to use the IPC namespace.
	BlockUseIpcNamespace bool `pulumi:"blockUseIpcNamespace"`
	// If true, prevent containers from running with the privilege to use the PID namespace.
	BlockUsePidNamespace bool `pulumi:"blockUsePidNamespace"`
	// If true, prevent containers from running with the privilege to use the user namespace.
	BlockUseUserNamespace bool `pulumi:"blockUseUserNamespace"`
	// If true, prevent containers from running with the privilege to use the UTS namespace.
	BlockUseUtsNamespace bool `pulumi:"blockUseUtsNamespace"`
	// If true, prevents containers from using specific Unix capabilities.
	BlockedCapabilities []string `pulumi:"blockedCapabilities"`
	// List of executables that are prevented from running in containers.
	BlockedExecutables []string `pulumi:"blockedExecutables"`
	// List of files that are prevented from being read, modified and executed in the containers.
	BlockedFiles []string `pulumi:"blockedFiles"`
	// List of blocked inbound ports.
	BlockedInboundPorts []string `pulumi:"blockedInboundPorts"`
	// List of blocked outbound ports.
	BlockedOutboundPorts []string `pulumi:"blockedOutboundPorts"`
	// Prevent containers from reading, writing, or executing all files in the list of packages.
	BlockedPackages []string `pulumi:"blockedPackages"`
	// List of volumes that are prevented from being mounted in the containers.
	BlockedVolumes []string `pulumi:"blockedVolumes"`
	// List of processes that will be allowed.
	ContainerExecAllowedProcesses []string `pulumi:"containerExecAllowedProcesses"`
	// The description of the container runtime policy
	Description string `pulumi:"description"`
	// If true, executables that are not in the original image is prevented from running.
	EnableDriftPrevention bool `pulumi:"enableDriftPrevention"`
	// If true, fork bombs are prevented in the containers.
	EnableForkGuard bool `pulumi:"enableForkGuard"`
	// If true, detect and prevent communication from containers to IP addresses known to have a bad reputation.
	EnableIpReputationSecurity bool `pulumi:"enableIpReputationSecurity"`
	// If true, detects port scanning behavior in the container.
	EnablePortScanDetection bool `pulumi:"enablePortScanDetection"`
	// Indicates if the runtime policy is enabled or not.
	Enabled bool `pulumi:"enabled"`
	// Indicates that policy should effect container execution (not just for audit).
	Enforce bool `pulumi:"enforce"`
	// Indicates the number of days after which the runtime policy will be changed to enforce mode.
	EnforceAfterDays int `pulumi:"enforceAfterDays"`
	// List of files and directories to be excluded from the read-only list.
	ExceptionalReadonlyFilesAndDirectories []string `pulumi:"exceptionalReadonlyFilesAndDirectories"`
	// Configuration for file integrity monitoring.
	FileIntegrityMonitorings []GetContainerRuntimePolicyFileIntegrityMonitoring `pulumi:"fileIntegrityMonitorings"`
	// Process limit for the fork guard.
	ForkGuardProcessLimit int `pulumi:"forkGuardProcessLimit"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// If true, prevents the container from obtaining new privileges at runtime. (only enabled in enforce mode)
	LimitNewPrivileges bool `pulumi:"limitNewPrivileges"`
	// Configuration for Real-Time Malware Protection.
	MalwareScanOptions []GetContainerRuntimePolicyMalwareScanOption `pulumi:"malwareScanOptions"`
	// If true, system time changes will be monitored.
	MonitorSystemTimeChanges bool `pulumi:"monitorSystemTimeChanges"`
	// Name of the container runtime policy
	Name string `pulumi:"name"`
	// List of files and directories to be restricted as read-only
	ReadonlyFilesAndDirectories []string `pulumi:"readonlyFilesAndDirectories"`
	// List of IPs/ CIDRs that will be allowed
	ReverseShellAllowedIps []string `pulumi:"reverseShellAllowedIps"`
	// List of processes that will be allowed
	ReverseShellAllowedProcesses []string `pulumi:"reverseShellAllowedProcesses"`
	// Logical expression of how to compute the dependency of the scope variables.
	ScopeExpression string `pulumi:"scopeExpression"`
	// List of scope attributes.
	ScopeVariables []GetContainerRuntimePolicyScopeVariable `pulumi:"scopeVariables"`
}

func LookupContainerRuntimePolicyOutput(ctx *pulumi.Context, args LookupContainerRuntimePolicyOutputArgs, opts ...pulumi.InvokeOption) LookupContainerRuntimePolicyResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupContainerRuntimePolicyResult, error) {
			args := v.(LookupContainerRuntimePolicyArgs)
			r, err := LookupContainerRuntimePolicy(ctx, &args, opts...)
			var s LookupContainerRuntimePolicyResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupContainerRuntimePolicyResultOutput)
}

// A collection of arguments for invoking getContainerRuntimePolicy.
type LookupContainerRuntimePolicyOutputArgs struct {
	// Configuration for Real-Time Malware Protection.
	MalwareScanOptions GetContainerRuntimePolicyMalwareScanOptionArrayInput `pulumi:"malwareScanOptions"`
	// Name of the container runtime policy
	Name pulumi.StringInput `pulumi:"name"`
}

func (LookupContainerRuntimePolicyOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupContainerRuntimePolicyArgs)(nil)).Elem()
}

// A collection of values returned by getContainerRuntimePolicy.
type LookupContainerRuntimePolicyResultOutput struct{ *pulumi.OutputState }

func (LookupContainerRuntimePolicyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupContainerRuntimePolicyResult)(nil)).Elem()
}

func (o LookupContainerRuntimePolicyResultOutput) ToLookupContainerRuntimePolicyResultOutput() LookupContainerRuntimePolicyResultOutput {
	return o
}

func (o LookupContainerRuntimePolicyResultOutput) ToLookupContainerRuntimePolicyResultOutputWithContext(ctx context.Context) LookupContainerRuntimePolicyResultOutput {
	return o
}

// List of executables that are allowed for the user.
func (o LookupContainerRuntimePolicyResultOutput) AllowedExecutables() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupContainerRuntimePolicyResult) []string { return v.AllowedExecutables }).(pulumi.StringArrayOutput)
}

// List of registries that allowed for running containers.
func (o LookupContainerRuntimePolicyResultOutput) AllowedRegistries() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupContainerRuntimePolicyResult) []string { return v.AllowedRegistries }).(pulumi.StringArrayOutput)
}

// Indicates the application scope of the service.
func (o LookupContainerRuntimePolicyResultOutput) ApplicationScopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupContainerRuntimePolicyResult) []string { return v.ApplicationScopes }).(pulumi.StringArrayOutput)
}

// If true, all network activity will be audited.
func (o LookupContainerRuntimePolicyResultOutput) AuditAllNetworkActivity() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupContainerRuntimePolicyResult) bool { return v.AuditAllNetworkActivity }).(pulumi.BoolOutput)
}

// If true, all process activity will be audited.
func (o LookupContainerRuntimePolicyResultOutput) AuditAllProcessesActivity() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupContainerRuntimePolicyResult) bool { return v.AuditAllProcessesActivity }).(pulumi.BoolOutput)
}

// If true, full command arguments will be audited.
func (o LookupContainerRuntimePolicyResultOutput) AuditFullCommandArguments() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupContainerRuntimePolicyResult) bool { return v.AuditFullCommandArguments }).(pulumi.BoolOutput)
}

// Username of the account that created the service.
func (o LookupContainerRuntimePolicyResultOutput) Author() pulumi.StringOutput {
	return o.ApplyT(func(v LookupContainerRuntimePolicyResult) string { return v.Author }).(pulumi.StringOutput)
}

// If true, prevent containers from running with access to host network.
func (o LookupContainerRuntimePolicyResultOutput) BlockAccessHostNetwork() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupContainerRuntimePolicyResult) bool { return v.BlockAccessHostNetwork }).(pulumi.BoolOutput)
}

// If true, prevent containers from running with adding capabilities with `--cap-add` privilege.
func (o LookupContainerRuntimePolicyResultOutput) BlockAddingCapabilities() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupContainerRuntimePolicyResult) bool { return v.BlockAddingCapabilities }).(pulumi.BoolOutput)
}

// If true, exec into a container is prevented.
func (o LookupContainerRuntimePolicyResultOutput) BlockContainerExec() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupContainerRuntimePolicyResult) bool { return v.BlockContainerExec }).(pulumi.BoolOutput)
}

// Detect and prevent communication to DNS/IP addresses known to be used for Cryptocurrency Mining
func (o LookupContainerRuntimePolicyResultOutput) BlockCryptocurrencyMining() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupContainerRuntimePolicyResult) bool { return v.BlockCryptocurrencyMining }).(pulumi.BoolOutput)
}

// Detect and prevent running in-memory execution
func (o LookupContainerRuntimePolicyResultOutput) BlockFilelessExec() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupContainerRuntimePolicyResult) bool { return v.BlockFilelessExec }).(pulumi.BoolOutput)
}

// If true, prevent containers from running with the capability to bind in port lower than 1024.
func (o LookupContainerRuntimePolicyResultOutput) BlockLowPortBinding() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupContainerRuntimePolicyResult) bool { return v.BlockLowPortBinding }).(pulumi.BoolOutput)
}

// If true, running non-compliant image in the container is prevented.
func (o LookupContainerRuntimePolicyResultOutput) BlockNonCompliantImages() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupContainerRuntimePolicyResult) bool { return v.BlockNonCompliantImages }).(pulumi.BoolOutput)
}

// If true, running containers in non-compliant pods is prevented.
func (o LookupContainerRuntimePolicyResultOutput) BlockNonCompliantWorkloads() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupContainerRuntimePolicyResult) bool { return v.BlockNonCompliantWorkloads }).(pulumi.BoolOutput)
}

// If true, running non-kubernetes containers is prevented.
func (o LookupContainerRuntimePolicyResultOutput) BlockNonK8sContainers() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupContainerRuntimePolicyResult) bool { return v.BlockNonK8sContainers }).(pulumi.BoolOutput)
}

// If true, prevent containers from running with privileged container capability.
func (o LookupContainerRuntimePolicyResultOutput) BlockPrivilegedContainers() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupContainerRuntimePolicyResult) bool { return v.BlockPrivilegedContainers }).(pulumi.BoolOutput)
}

// If true, reverse shell is prevented.
func (o LookupContainerRuntimePolicyResultOutput) BlockReverseShell() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupContainerRuntimePolicyResult) bool { return v.BlockReverseShell }).(pulumi.BoolOutput)
}

// If true, prevent containers from running with root user.
func (o LookupContainerRuntimePolicyResultOutput) BlockRootUser() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupContainerRuntimePolicyResult) bool { return v.BlockRootUser }).(pulumi.BoolOutput)
}

// If true, running images in the container that are not registered in Aqua is prevented.
func (o LookupContainerRuntimePolicyResultOutput) BlockUnregisteredImages() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupContainerRuntimePolicyResult) bool { return v.BlockUnregisteredImages }).(pulumi.BoolOutput)
}

// If true, prevent containers from running with the privilege to use the IPC namespace.
func (o LookupContainerRuntimePolicyResultOutput) BlockUseIpcNamespace() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupContainerRuntimePolicyResult) bool { return v.BlockUseIpcNamespace }).(pulumi.BoolOutput)
}

// If true, prevent containers from running with the privilege to use the PID namespace.
func (o LookupContainerRuntimePolicyResultOutput) BlockUsePidNamespace() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupContainerRuntimePolicyResult) bool { return v.BlockUsePidNamespace }).(pulumi.BoolOutput)
}

// If true, prevent containers from running with the privilege to use the user namespace.
func (o LookupContainerRuntimePolicyResultOutput) BlockUseUserNamespace() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupContainerRuntimePolicyResult) bool { return v.BlockUseUserNamespace }).(pulumi.BoolOutput)
}

// If true, prevent containers from running with the privilege to use the UTS namespace.
func (o LookupContainerRuntimePolicyResultOutput) BlockUseUtsNamespace() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupContainerRuntimePolicyResult) bool { return v.BlockUseUtsNamespace }).(pulumi.BoolOutput)
}

// If true, prevents containers from using specific Unix capabilities.
func (o LookupContainerRuntimePolicyResultOutput) BlockedCapabilities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupContainerRuntimePolicyResult) []string { return v.BlockedCapabilities }).(pulumi.StringArrayOutput)
}

// List of executables that are prevented from running in containers.
func (o LookupContainerRuntimePolicyResultOutput) BlockedExecutables() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupContainerRuntimePolicyResult) []string { return v.BlockedExecutables }).(pulumi.StringArrayOutput)
}

// List of files that are prevented from being read, modified and executed in the containers.
func (o LookupContainerRuntimePolicyResultOutput) BlockedFiles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupContainerRuntimePolicyResult) []string { return v.BlockedFiles }).(pulumi.StringArrayOutput)
}

// List of blocked inbound ports.
func (o LookupContainerRuntimePolicyResultOutput) BlockedInboundPorts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupContainerRuntimePolicyResult) []string { return v.BlockedInboundPorts }).(pulumi.StringArrayOutput)
}

// List of blocked outbound ports.
func (o LookupContainerRuntimePolicyResultOutput) BlockedOutboundPorts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupContainerRuntimePolicyResult) []string { return v.BlockedOutboundPorts }).(pulumi.StringArrayOutput)
}

// Prevent containers from reading, writing, or executing all files in the list of packages.
func (o LookupContainerRuntimePolicyResultOutput) BlockedPackages() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupContainerRuntimePolicyResult) []string { return v.BlockedPackages }).(pulumi.StringArrayOutput)
}

// List of volumes that are prevented from being mounted in the containers.
func (o LookupContainerRuntimePolicyResultOutput) BlockedVolumes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupContainerRuntimePolicyResult) []string { return v.BlockedVolumes }).(pulumi.StringArrayOutput)
}

// List of processes that will be allowed.
func (o LookupContainerRuntimePolicyResultOutput) ContainerExecAllowedProcesses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupContainerRuntimePolicyResult) []string { return v.ContainerExecAllowedProcesses }).(pulumi.StringArrayOutput)
}

// The description of the container runtime policy
func (o LookupContainerRuntimePolicyResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupContainerRuntimePolicyResult) string { return v.Description }).(pulumi.StringOutput)
}

// If true, executables that are not in the original image is prevented from running.
func (o LookupContainerRuntimePolicyResultOutput) EnableDriftPrevention() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupContainerRuntimePolicyResult) bool { return v.EnableDriftPrevention }).(pulumi.BoolOutput)
}

// If true, fork bombs are prevented in the containers.
func (o LookupContainerRuntimePolicyResultOutput) EnableForkGuard() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupContainerRuntimePolicyResult) bool { return v.EnableForkGuard }).(pulumi.BoolOutput)
}

// If true, detect and prevent communication from containers to IP addresses known to have a bad reputation.
func (o LookupContainerRuntimePolicyResultOutput) EnableIpReputationSecurity() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupContainerRuntimePolicyResult) bool { return v.EnableIpReputationSecurity }).(pulumi.BoolOutput)
}

// If true, detects port scanning behavior in the container.
func (o LookupContainerRuntimePolicyResultOutput) EnablePortScanDetection() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupContainerRuntimePolicyResult) bool { return v.EnablePortScanDetection }).(pulumi.BoolOutput)
}

// Indicates if the runtime policy is enabled or not.
func (o LookupContainerRuntimePolicyResultOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupContainerRuntimePolicyResult) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Indicates that policy should effect container execution (not just for audit).
func (o LookupContainerRuntimePolicyResultOutput) Enforce() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupContainerRuntimePolicyResult) bool { return v.Enforce }).(pulumi.BoolOutput)
}

// Indicates the number of days after which the runtime policy will be changed to enforce mode.
func (o LookupContainerRuntimePolicyResultOutput) EnforceAfterDays() pulumi.IntOutput {
	return o.ApplyT(func(v LookupContainerRuntimePolicyResult) int { return v.EnforceAfterDays }).(pulumi.IntOutput)
}

// List of files and directories to be excluded from the read-only list.
func (o LookupContainerRuntimePolicyResultOutput) ExceptionalReadonlyFilesAndDirectories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupContainerRuntimePolicyResult) []string { return v.ExceptionalReadonlyFilesAndDirectories }).(pulumi.StringArrayOutput)
}

// Configuration for file integrity monitoring.
func (o LookupContainerRuntimePolicyResultOutput) FileIntegrityMonitorings() GetContainerRuntimePolicyFileIntegrityMonitoringArrayOutput {
	return o.ApplyT(func(v LookupContainerRuntimePolicyResult) []GetContainerRuntimePolicyFileIntegrityMonitoring {
		return v.FileIntegrityMonitorings
	}).(GetContainerRuntimePolicyFileIntegrityMonitoringArrayOutput)
}

// Process limit for the fork guard.
func (o LookupContainerRuntimePolicyResultOutput) ForkGuardProcessLimit() pulumi.IntOutput {
	return o.ApplyT(func(v LookupContainerRuntimePolicyResult) int { return v.ForkGuardProcessLimit }).(pulumi.IntOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupContainerRuntimePolicyResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupContainerRuntimePolicyResult) string { return v.Id }).(pulumi.StringOutput)
}

// If true, prevents the container from obtaining new privileges at runtime. (only enabled in enforce mode)
func (o LookupContainerRuntimePolicyResultOutput) LimitNewPrivileges() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupContainerRuntimePolicyResult) bool { return v.LimitNewPrivileges }).(pulumi.BoolOutput)
}

// Configuration for Real-Time Malware Protection.
func (o LookupContainerRuntimePolicyResultOutput) MalwareScanOptions() GetContainerRuntimePolicyMalwareScanOptionArrayOutput {
	return o.ApplyT(func(v LookupContainerRuntimePolicyResult) []GetContainerRuntimePolicyMalwareScanOption {
		return v.MalwareScanOptions
	}).(GetContainerRuntimePolicyMalwareScanOptionArrayOutput)
}

// If true, system time changes will be monitored.
func (o LookupContainerRuntimePolicyResultOutput) MonitorSystemTimeChanges() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupContainerRuntimePolicyResult) bool { return v.MonitorSystemTimeChanges }).(pulumi.BoolOutput)
}

// Name of the container runtime policy
func (o LookupContainerRuntimePolicyResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupContainerRuntimePolicyResult) string { return v.Name }).(pulumi.StringOutput)
}

// List of files and directories to be restricted as read-only
func (o LookupContainerRuntimePolicyResultOutput) ReadonlyFilesAndDirectories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupContainerRuntimePolicyResult) []string { return v.ReadonlyFilesAndDirectories }).(pulumi.StringArrayOutput)
}

// List of IPs/ CIDRs that will be allowed
func (o LookupContainerRuntimePolicyResultOutput) ReverseShellAllowedIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupContainerRuntimePolicyResult) []string { return v.ReverseShellAllowedIps }).(pulumi.StringArrayOutput)
}

// List of processes that will be allowed
func (o LookupContainerRuntimePolicyResultOutput) ReverseShellAllowedProcesses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupContainerRuntimePolicyResult) []string { return v.ReverseShellAllowedProcesses }).(pulumi.StringArrayOutput)
}

// Logical expression of how to compute the dependency of the scope variables.
func (o LookupContainerRuntimePolicyResultOutput) ScopeExpression() pulumi.StringOutput {
	return o.ApplyT(func(v LookupContainerRuntimePolicyResult) string { return v.ScopeExpression }).(pulumi.StringOutput)
}

// List of scope attributes.
func (o LookupContainerRuntimePolicyResultOutput) ScopeVariables() GetContainerRuntimePolicyScopeVariableArrayOutput {
	return o.ApplyT(func(v LookupContainerRuntimePolicyResult) []GetContainerRuntimePolicyScopeVariable {
		return v.ScopeVariables
	}).(GetContainerRuntimePolicyScopeVariableArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupContainerRuntimePolicyResultOutput{})
}
