// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aquasec

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-aquasec/sdk/go/aquasec/internal"
)

// The data source `EnforcerGroups` provides an Enforcer group template that generates a configuration file, which is subsequently used to generate one or more Enforcers using a Docker command.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-aquasec/sdk/go/aquasec"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			groups, err := aquasec.LookupEnforcerGroups(ctx, &aquasec.LookupEnforcerGroupsArgs{
//				GroupId: "IacGroup",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("groupDetails", groups)
//			return nil
//		})
//	}
//
// ```
func LookupEnforcerGroups(ctx *pulumi.Context, args *LookupEnforcerGroupsArgs, opts ...pulumi.InvokeOption) (*LookupEnforcerGroupsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupEnforcerGroupsResult
	err := ctx.Invoke("aquasec:index/getEnforcerGroups:getEnforcerGroups", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getEnforcerGroups.
type LookupEnforcerGroupsArgs struct {
	// Select Enabled to send activity logs in your containers to the Aqua Server for forensics purposes.
	Forensics *bool `pulumi:"forensics"`
	// The ID of the Enforcer group.
	GroupId string `pulumi:"groupId"`
	// Select Enabled to send activity logs in your host to the Aqua Server for forensics purposes.
	HostForensics *bool `pulumi:"hostForensics"`
}

// A collection of values returned by getEnforcerGroups.
type LookupEnforcerGroupsResult struct {
	// Selecting this option will allow the KubeEnforcer to block the deployment of container images that have failed any of these Container Runtime Policy controls:\
	// 			* Block Non-Compliant Images\
	// 			* Block Non-Compliant Workloads\
	// 			* Block Unregistered Images\
	// 			This functionality can work only when the KubeEnforcer is deployed in Enforce mode.
	AdmissionControl bool `pulumi:"admissionControl"`
	// Allow kube enforcer audit.
	AllowKubeEnforcerAudit bool `pulumi:"allowKubeEnforcerAudit"`
	// List of application names to allow on the hosts. if provided, only containers of the listed applications will be allowed to run.
	AllowedApplications []string `pulumi:"allowedApplications"`
	// List of label names to allow on the hosts.
	AllowedLabels []string `pulumi:"allowedLabels"`
	// List of registry names to allow on the hosts.
	AllowedRegistries []string `pulumi:"allowedRegistries"`
	// This setting is available only when you have license for `Advanced Malware Protection`. Send true to make use of the license and enable the `Real-time Malware Protection` control in the Host Runtime policies.
	AntivirusProtection bool `pulumi:"antivirusProtection"`
	// Aqua server version
	AquaVersion string `pulumi:"aquaVersion"`
	// Agent will send extra audit messages to the server for success operations from inside the container (runtime).
	AuditAll bool `pulumi:"auditAll"`
	// This option is applicable only if `Enable Pod Enforcer injection` is selected. Select this option if you want Aqua Enterprise to copy the secrets defined above to the Pod Enforcer namespace and container. Otherwise, you can choose to copy these secrets by other means.
	AutoCopySecrets bool `pulumi:"autoCopySecrets"`
	// This option is available only if `Enable workload discovery` is selected. If selected, the KubeEnforcer will add previously unknown image registries from the cluster to Aqua.
	AutoDiscoverConfigureRegistries bool `pulumi:"autoDiscoverConfigureRegistries"`
	// When this option is selected, the KubeEnforcer will discover workloads on its cluster.
	AutoDiscoveryEnabled bool `pulumi:"autoDiscoveryEnabled"`
	// This option is available only if `Enable workload discovery` is selected. If selected, the KubeEnforcer will automatically register images running as workloads (and scan the discovered images for security issues).
	AutoScanDiscoveredImagesRunningContainers bool `pulumi:"autoScanDiscoveredImagesRunningContainers"`
	// If `Enabled`, detects suspicious activity in your containers and displays potential security threats in the Incidents and Audits pages.
	BehavioralEngine bool `pulumi:"behavioralEngine"`
	// This applies only if both `Enable admission control` and Enforce mode are set. This additional option must be selected for admission control to work if the KubeEnforcer is not connected to any Gateway. If this option is not selected, admission control will be disabled; this will have no effect on containers already running.
	BlockAdmissionControl bool `pulumi:"blockAdmissionControl"`
	// The installation command.
	Commands []GetEnforcerGroupsCommand `pulumi:"commands"`
	// Number of connected enforcers in the enforcer group.
	ConnectedCount int `pulumi:"connectedCount"`
	// When set to `True` applies Container Runtime Policies, Image Profiles, and Firewall Policies to containers.
	ContainerActivityProtection bool `pulumi:"containerActivityProtection"`
	// This setting is available only when you have license for `Advanced Malware Protection`. Send true to make use of the license and enable the `Real-time Malware Protection` control in the Container Runtime policies.
	ContainerAntivirusProtection bool `pulumi:"containerAntivirusProtection"`
	// A description for the Aqua Enforcer group.
	Description string `pulumi:"description"`
	// Number of disconnected enforcers in the enforcer group.
	DisconnectedCount int `pulumi:"disconnectedCount"`
	// Whether the enforce mode is enabled on the Enforcers.
	Enforce bool `pulumi:"enforce"`
	// The specific Aqua Enforcer product image (with image tag) to be deployed.
	EnforcerImageName string `pulumi:"enforcerImageName"`
	// Select Enabled to send activity logs in your containers to the Aqua Server for forensics purposes.
	Forensics *bool `pulumi:"forensics"`
	// Gateway Address
	GatewayAddress string `pulumi:"gatewayAddress"`
	// Gateway Name
	GatewayName string `pulumi:"gatewayName"`
	// List of Aqua gateway IDs for the Enforcers.
	Gateways []string `pulumi:"gateways"`
	// The ID of the Enforcer group.
	GroupId string `pulumi:"groupId"`
	// Number of high vulnerabilities in the enforcers that in this enforcer group.
	HighVulns int `pulumi:"highVulns"`
	// When set to `True` enables host scanning and respective Host Assurance controls.
	HostAssurance bool `pulumi:"hostAssurance"`
	// When set to `True` enables these Host Runtime Policy controls: `OS Users and Groups Allowed` and `OS Users and Groups Blocked`
	HostBehavioralEngine bool `pulumi:"hostBehavioralEngine"`
	// Select Enabled to send activity logs in your host to the Aqua Server for forensics purposes.
	HostForensics *bool `pulumi:"hostForensics"`
	// When set to `True` applies Firewall Policies to hosts, and allows recording network maps for Aqua services. The Network Firewall setting must be disabled when deploying the Aqua Enforcer on a machine running Rocky Linux. See https://docs.aquasec.com/docs/platform-support-limitations-rocky-linux for further information
	HostNetworkProtection bool `pulumi:"hostNetworkProtection"`
	// The OS type for the host
	HostOs string `pulumi:"hostOs"`
	// When set to `True` enables all Host Runtime Policy controls except for `OS Users and Groups Allowed` and `OS Users and Groups Blocked`.
	HostProtection bool `pulumi:"hostProtection"`
	// When set to `True` enables these Host Runtime Policy controls: `OS Users and Groups Allowed` and `OS Users and Groups Blocked`
	HostUserProtection bool `pulumi:"hostUserProtection"`
	// Number of enforcers in the enforcer group.
	HostsCount int `pulumi:"hostsCount"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// When Set to `True` enables selected controls: Container Runtime Policy (`Block Non-Compliant Images`, `Block Unregistered Images`, and `Registries Allowed`) and Default Image Assurance Policy (`Images Blocked`).
	ImageAssurance bool `pulumi:"imageAssurance"`
	// Enforcer install command
	InstallCommand string `pulumi:"installCommand"`
	// See https://docs.aquasec.com/docs/securing-kubernetes-applications#section-configuration-hardening, The KubeEnforcer can deploy the Aqua Security kube-bench open-source product to perform Kubernetes CIS benchmark testing of nodes.
	// 			This field specifies the path and file name of the kube-bench product image for the KubeEnforcer to deploy; it will be filled in automatically. You can optionally enter a different value.
	KubeBenchImageName string `pulumi:"kubeBenchImageName"`
	// The last date and time the batch token was updated in UNIX time.
	LastUpdate int `pulumi:"lastUpdate"`
	// Name for the batch install record.
	LogicalName string `pulumi:"logicalName"`
	// Number of low vulnerabilities in the enforcers that in this enforcer group.
	LowVulns int `pulumi:"lowVulns"`
	// Number of medium vulnerabilities in the enforcers that in this enforcer group.
	MedVulns int `pulumi:"medVulns"`
	// This option is applicable only if `Enable Pod Enforcer injection` is selected.
	MicroEnforcerCertsSecretsName string `pulumi:"microEnforcerCertsSecretsName"`
	// This option is applicable only if `Enable Pod Enforcer injection` is selected. This field specifies the path and file name of the KubeEnforcer product image to be deployed; it will be filled in automatically. You can optionally enter a different value.
	MicroEnforcerImageName string `pulumi:"microEnforcerImageName"`
	// This applies only if both `Enable admission control` and Enforce mode are set. This additional option must be selected for admission control to work if the KubeEnforcer is not connected to any Gateway. If this option is not selected, admission control will be disabled; this will have no effect on containers already running.
	MicroEnforcerInjection bool `pulumi:"microEnforcerInjection"`
	// This option is applicable only if `Enable Pod Enforcer injection` is selected.
	MicroEnforcerSecretsName string `pulumi:"microEnforcerSecretsName"`
	// Number of negligible vulnerabilities in the enforcers that in this enforcer group.
	NegVulns int `pulumi:"negVulns"`
	// When set to `True` applies Firewall Policies to containers, and allows recording network maps for Aqua services. The Network Firewall setting must be disabled when deploying the Aqua Enforcer on a machine running Rocky Linux. See https://docs.aquasec.com/docs/platform-support-limitations-rocky-linux for further information.
	NetworkProtection bool `pulumi:"networkProtection"`
	// The orchestrator for which you are creating the Enforcer group.
	Orchestrators []GetEnforcerGroupsOrchestrator `pulumi:"orchestrators"`
	// pas deployment link
	PasDeploymentLink string `pulumi:"pasDeploymentLink"`
	// Permission Action
	Permission string `pulumi:"permission"`
	// When set to `True` allows Enforcers to be discovered in the Risk Explorer.
	RiskExplorerAutoDiscovery bool `pulumi:"riskExplorerAutoDiscovery"`
	// Function Runtime Policy that will applay on the nano enforcer.
	RuntimePolicyName string `pulumi:"runtimePolicyName"`
	// The container runtime environment.
	RuntimeType string `pulumi:"runtimeType"`
	// When set to `True` configures Enforcers to discover local host images. Discovered images will be listed under Images > Host Images, as well as under Infrastructure (in the Images tab for applicable hosts).
	SyncHostImages bool `pulumi:"syncHostImages"`
	// When set to `True` allows profiling and monitoring system calls made by running containers.
	SyscallEnabled bool `pulumi:"syscallEnabled"`
	// The batch install token.
	Token string `pulumi:"token"`
	// Enforcer Type.
	Type string `pulumi:"type"`
	// When set to `True` applies User Access Control Policies to containers. Note that Aqua Enforcers must be deployed with the AQUA*RUNC*INTERCEPTION environment variable set to 0 in order to use User Access Control Policies.
	UserAccessControl bool `pulumi:"userAccessControl"`
}

func LookupEnforcerGroupsOutput(ctx *pulumi.Context, args LookupEnforcerGroupsOutputArgs, opts ...pulumi.InvokeOption) LookupEnforcerGroupsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupEnforcerGroupsResult, error) {
			args := v.(LookupEnforcerGroupsArgs)
			r, err := LookupEnforcerGroups(ctx, &args, opts...)
			var s LookupEnforcerGroupsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupEnforcerGroupsResultOutput)
}

// A collection of arguments for invoking getEnforcerGroups.
type LookupEnforcerGroupsOutputArgs struct {
	// Select Enabled to send activity logs in your containers to the Aqua Server for forensics purposes.
	Forensics pulumi.BoolPtrInput `pulumi:"forensics"`
	// The ID of the Enforcer group.
	GroupId pulumi.StringInput `pulumi:"groupId"`
	// Select Enabled to send activity logs in your host to the Aqua Server for forensics purposes.
	HostForensics pulumi.BoolPtrInput `pulumi:"hostForensics"`
}

func (LookupEnforcerGroupsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupEnforcerGroupsArgs)(nil)).Elem()
}

// A collection of values returned by getEnforcerGroups.
type LookupEnforcerGroupsResultOutput struct{ *pulumi.OutputState }

func (LookupEnforcerGroupsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupEnforcerGroupsResult)(nil)).Elem()
}

func (o LookupEnforcerGroupsResultOutput) ToLookupEnforcerGroupsResultOutput() LookupEnforcerGroupsResultOutput {
	return o
}

func (o LookupEnforcerGroupsResultOutput) ToLookupEnforcerGroupsResultOutputWithContext(ctx context.Context) LookupEnforcerGroupsResultOutput {
	return o
}

// Selecting this option will allow the KubeEnforcer to block the deployment of container images that have failed any of these Container Runtime Policy controls:\
//   - Block Non-Compliant Images\
//   - Block Non-Compliant Workloads\
//   - Block Unregistered Images\
//     This functionality can work only when the KubeEnforcer is deployed in Enforce mode.
func (o LookupEnforcerGroupsResultOutput) AdmissionControl() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupEnforcerGroupsResult) bool { return v.AdmissionControl }).(pulumi.BoolOutput)
}

// Allow kube enforcer audit.
func (o LookupEnforcerGroupsResultOutput) AllowKubeEnforcerAudit() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupEnforcerGroupsResult) bool { return v.AllowKubeEnforcerAudit }).(pulumi.BoolOutput)
}

// List of application names to allow on the hosts. if provided, only containers of the listed applications will be allowed to run.
func (o LookupEnforcerGroupsResultOutput) AllowedApplications() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupEnforcerGroupsResult) []string { return v.AllowedApplications }).(pulumi.StringArrayOutput)
}

// List of label names to allow on the hosts.
func (o LookupEnforcerGroupsResultOutput) AllowedLabels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupEnforcerGroupsResult) []string { return v.AllowedLabels }).(pulumi.StringArrayOutput)
}

// List of registry names to allow on the hosts.
func (o LookupEnforcerGroupsResultOutput) AllowedRegistries() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupEnforcerGroupsResult) []string { return v.AllowedRegistries }).(pulumi.StringArrayOutput)
}

// This setting is available only when you have license for `Advanced Malware Protection`. Send true to make use of the license and enable the `Real-time Malware Protection` control in the Host Runtime policies.
func (o LookupEnforcerGroupsResultOutput) AntivirusProtection() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupEnforcerGroupsResult) bool { return v.AntivirusProtection }).(pulumi.BoolOutput)
}

// Aqua server version
func (o LookupEnforcerGroupsResultOutput) AquaVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEnforcerGroupsResult) string { return v.AquaVersion }).(pulumi.StringOutput)
}

// Agent will send extra audit messages to the server for success operations from inside the container (runtime).
func (o LookupEnforcerGroupsResultOutput) AuditAll() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupEnforcerGroupsResult) bool { return v.AuditAll }).(pulumi.BoolOutput)
}

// This option is applicable only if `Enable Pod Enforcer injection` is selected. Select this option if you want Aqua Enterprise to copy the secrets defined above to the Pod Enforcer namespace and container. Otherwise, you can choose to copy these secrets by other means.
func (o LookupEnforcerGroupsResultOutput) AutoCopySecrets() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupEnforcerGroupsResult) bool { return v.AutoCopySecrets }).(pulumi.BoolOutput)
}

// This option is available only if `Enable workload discovery` is selected. If selected, the KubeEnforcer will add previously unknown image registries from the cluster to Aqua.
func (o LookupEnforcerGroupsResultOutput) AutoDiscoverConfigureRegistries() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupEnforcerGroupsResult) bool { return v.AutoDiscoverConfigureRegistries }).(pulumi.BoolOutput)
}

// When this option is selected, the KubeEnforcer will discover workloads on its cluster.
func (o LookupEnforcerGroupsResultOutput) AutoDiscoveryEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupEnforcerGroupsResult) bool { return v.AutoDiscoveryEnabled }).(pulumi.BoolOutput)
}

// This option is available only if `Enable workload discovery` is selected. If selected, the KubeEnforcer will automatically register images running as workloads (and scan the discovered images for security issues).
func (o LookupEnforcerGroupsResultOutput) AutoScanDiscoveredImagesRunningContainers() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupEnforcerGroupsResult) bool { return v.AutoScanDiscoveredImagesRunningContainers }).(pulumi.BoolOutput)
}

// If `Enabled`, detects suspicious activity in your containers and displays potential security threats in the Incidents and Audits pages.
func (o LookupEnforcerGroupsResultOutput) BehavioralEngine() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupEnforcerGroupsResult) bool { return v.BehavioralEngine }).(pulumi.BoolOutput)
}

// This applies only if both `Enable admission control` and Enforce mode are set. This additional option must be selected for admission control to work if the KubeEnforcer is not connected to any Gateway. If this option is not selected, admission control will be disabled; this will have no effect on containers already running.
func (o LookupEnforcerGroupsResultOutput) BlockAdmissionControl() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupEnforcerGroupsResult) bool { return v.BlockAdmissionControl }).(pulumi.BoolOutput)
}

// The installation command.
func (o LookupEnforcerGroupsResultOutput) Commands() GetEnforcerGroupsCommandArrayOutput {
	return o.ApplyT(func(v LookupEnforcerGroupsResult) []GetEnforcerGroupsCommand { return v.Commands }).(GetEnforcerGroupsCommandArrayOutput)
}

// Number of connected enforcers in the enforcer group.
func (o LookupEnforcerGroupsResultOutput) ConnectedCount() pulumi.IntOutput {
	return o.ApplyT(func(v LookupEnforcerGroupsResult) int { return v.ConnectedCount }).(pulumi.IntOutput)
}

// When set to `True` applies Container Runtime Policies, Image Profiles, and Firewall Policies to containers.
func (o LookupEnforcerGroupsResultOutput) ContainerActivityProtection() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupEnforcerGroupsResult) bool { return v.ContainerActivityProtection }).(pulumi.BoolOutput)
}

// This setting is available only when you have license for `Advanced Malware Protection`. Send true to make use of the license and enable the `Real-time Malware Protection` control in the Container Runtime policies.
func (o LookupEnforcerGroupsResultOutput) ContainerAntivirusProtection() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupEnforcerGroupsResult) bool { return v.ContainerAntivirusProtection }).(pulumi.BoolOutput)
}

// A description for the Aqua Enforcer group.
func (o LookupEnforcerGroupsResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEnforcerGroupsResult) string { return v.Description }).(pulumi.StringOutput)
}

// Number of disconnected enforcers in the enforcer group.
func (o LookupEnforcerGroupsResultOutput) DisconnectedCount() pulumi.IntOutput {
	return o.ApplyT(func(v LookupEnforcerGroupsResult) int { return v.DisconnectedCount }).(pulumi.IntOutput)
}

// Whether the enforce mode is enabled on the Enforcers.
func (o LookupEnforcerGroupsResultOutput) Enforce() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupEnforcerGroupsResult) bool { return v.Enforce }).(pulumi.BoolOutput)
}

// The specific Aqua Enforcer product image (with image tag) to be deployed.
func (o LookupEnforcerGroupsResultOutput) EnforcerImageName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEnforcerGroupsResult) string { return v.EnforcerImageName }).(pulumi.StringOutput)
}

// Select Enabled to send activity logs in your containers to the Aqua Server for forensics purposes.
func (o LookupEnforcerGroupsResultOutput) Forensics() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupEnforcerGroupsResult) *bool { return v.Forensics }).(pulumi.BoolPtrOutput)
}

// Gateway Address
func (o LookupEnforcerGroupsResultOutput) GatewayAddress() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEnforcerGroupsResult) string { return v.GatewayAddress }).(pulumi.StringOutput)
}

// Gateway Name
func (o LookupEnforcerGroupsResultOutput) GatewayName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEnforcerGroupsResult) string { return v.GatewayName }).(pulumi.StringOutput)
}

// List of Aqua gateway IDs for the Enforcers.
func (o LookupEnforcerGroupsResultOutput) Gateways() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupEnforcerGroupsResult) []string { return v.Gateways }).(pulumi.StringArrayOutput)
}

// The ID of the Enforcer group.
func (o LookupEnforcerGroupsResultOutput) GroupId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEnforcerGroupsResult) string { return v.GroupId }).(pulumi.StringOutput)
}

// Number of high vulnerabilities in the enforcers that in this enforcer group.
func (o LookupEnforcerGroupsResultOutput) HighVulns() pulumi.IntOutput {
	return o.ApplyT(func(v LookupEnforcerGroupsResult) int { return v.HighVulns }).(pulumi.IntOutput)
}

// When set to `True` enables host scanning and respective Host Assurance controls.
func (o LookupEnforcerGroupsResultOutput) HostAssurance() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupEnforcerGroupsResult) bool { return v.HostAssurance }).(pulumi.BoolOutput)
}

// When set to `True` enables these Host Runtime Policy controls: `OS Users and Groups Allowed` and `OS Users and Groups Blocked`
func (o LookupEnforcerGroupsResultOutput) HostBehavioralEngine() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupEnforcerGroupsResult) bool { return v.HostBehavioralEngine }).(pulumi.BoolOutput)
}

// Select Enabled to send activity logs in your host to the Aqua Server for forensics purposes.
func (o LookupEnforcerGroupsResultOutput) HostForensics() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupEnforcerGroupsResult) *bool { return v.HostForensics }).(pulumi.BoolPtrOutput)
}

// When set to `True` applies Firewall Policies to hosts, and allows recording network maps for Aqua services. The Network Firewall setting must be disabled when deploying the Aqua Enforcer on a machine running Rocky Linux. See https://docs.aquasec.com/docs/platform-support-limitations-rocky-linux for further information
func (o LookupEnforcerGroupsResultOutput) HostNetworkProtection() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupEnforcerGroupsResult) bool { return v.HostNetworkProtection }).(pulumi.BoolOutput)
}

// The OS type for the host
func (o LookupEnforcerGroupsResultOutput) HostOs() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEnforcerGroupsResult) string { return v.HostOs }).(pulumi.StringOutput)
}

// When set to `True` enables all Host Runtime Policy controls except for `OS Users and Groups Allowed` and `OS Users and Groups Blocked`.
func (o LookupEnforcerGroupsResultOutput) HostProtection() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupEnforcerGroupsResult) bool { return v.HostProtection }).(pulumi.BoolOutput)
}

// When set to `True` enables these Host Runtime Policy controls: `OS Users and Groups Allowed` and `OS Users and Groups Blocked`
func (o LookupEnforcerGroupsResultOutput) HostUserProtection() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupEnforcerGroupsResult) bool { return v.HostUserProtection }).(pulumi.BoolOutput)
}

// Number of enforcers in the enforcer group.
func (o LookupEnforcerGroupsResultOutput) HostsCount() pulumi.IntOutput {
	return o.ApplyT(func(v LookupEnforcerGroupsResult) int { return v.HostsCount }).(pulumi.IntOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupEnforcerGroupsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEnforcerGroupsResult) string { return v.Id }).(pulumi.StringOutput)
}

// When Set to `True` enables selected controls: Container Runtime Policy (`Block Non-Compliant Images`, `Block Unregistered Images`, and `Registries Allowed`) and Default Image Assurance Policy (`Images Blocked`).
func (o LookupEnforcerGroupsResultOutput) ImageAssurance() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupEnforcerGroupsResult) bool { return v.ImageAssurance }).(pulumi.BoolOutput)
}

// Enforcer install command
func (o LookupEnforcerGroupsResultOutput) InstallCommand() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEnforcerGroupsResult) string { return v.InstallCommand }).(pulumi.StringOutput)
}

// See https://docs.aquasec.com/docs/securing-kubernetes-applications#section-configuration-hardening, The KubeEnforcer can deploy the Aqua Security kube-bench open-source product to perform Kubernetes CIS benchmark testing of nodes.
//
//	This field specifies the path and file name of the kube-bench product image for the KubeEnforcer to deploy; it will be filled in automatically. You can optionally enter a different value.
func (o LookupEnforcerGroupsResultOutput) KubeBenchImageName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEnforcerGroupsResult) string { return v.KubeBenchImageName }).(pulumi.StringOutput)
}

// The last date and time the batch token was updated in UNIX time.
func (o LookupEnforcerGroupsResultOutput) LastUpdate() pulumi.IntOutput {
	return o.ApplyT(func(v LookupEnforcerGroupsResult) int { return v.LastUpdate }).(pulumi.IntOutput)
}

// Name for the batch install record.
func (o LookupEnforcerGroupsResultOutput) LogicalName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEnforcerGroupsResult) string { return v.LogicalName }).(pulumi.StringOutput)
}

// Number of low vulnerabilities in the enforcers that in this enforcer group.
func (o LookupEnforcerGroupsResultOutput) LowVulns() pulumi.IntOutput {
	return o.ApplyT(func(v LookupEnforcerGroupsResult) int { return v.LowVulns }).(pulumi.IntOutput)
}

// Number of medium vulnerabilities in the enforcers that in this enforcer group.
func (o LookupEnforcerGroupsResultOutput) MedVulns() pulumi.IntOutput {
	return o.ApplyT(func(v LookupEnforcerGroupsResult) int { return v.MedVulns }).(pulumi.IntOutput)
}

// This option is applicable only if `Enable Pod Enforcer injection` is selected.
func (o LookupEnforcerGroupsResultOutput) MicroEnforcerCertsSecretsName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEnforcerGroupsResult) string { return v.MicroEnforcerCertsSecretsName }).(pulumi.StringOutput)
}

// This option is applicable only if `Enable Pod Enforcer injection` is selected. This field specifies the path and file name of the KubeEnforcer product image to be deployed; it will be filled in automatically. You can optionally enter a different value.
func (o LookupEnforcerGroupsResultOutput) MicroEnforcerImageName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEnforcerGroupsResult) string { return v.MicroEnforcerImageName }).(pulumi.StringOutput)
}

// This applies only if both `Enable admission control` and Enforce mode are set. This additional option must be selected for admission control to work if the KubeEnforcer is not connected to any Gateway. If this option is not selected, admission control will be disabled; this will have no effect on containers already running.
func (o LookupEnforcerGroupsResultOutput) MicroEnforcerInjection() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupEnforcerGroupsResult) bool { return v.MicroEnforcerInjection }).(pulumi.BoolOutput)
}

// This option is applicable only if `Enable Pod Enforcer injection` is selected.
func (o LookupEnforcerGroupsResultOutput) MicroEnforcerSecretsName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEnforcerGroupsResult) string { return v.MicroEnforcerSecretsName }).(pulumi.StringOutput)
}

// Number of negligible vulnerabilities in the enforcers that in this enforcer group.
func (o LookupEnforcerGroupsResultOutput) NegVulns() pulumi.IntOutput {
	return o.ApplyT(func(v LookupEnforcerGroupsResult) int { return v.NegVulns }).(pulumi.IntOutput)
}

// When set to `True` applies Firewall Policies to containers, and allows recording network maps for Aqua services. The Network Firewall setting must be disabled when deploying the Aqua Enforcer on a machine running Rocky Linux. See https://docs.aquasec.com/docs/platform-support-limitations-rocky-linux for further information.
func (o LookupEnforcerGroupsResultOutput) NetworkProtection() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupEnforcerGroupsResult) bool { return v.NetworkProtection }).(pulumi.BoolOutput)
}

// The orchestrator for which you are creating the Enforcer group.
func (o LookupEnforcerGroupsResultOutput) Orchestrators() GetEnforcerGroupsOrchestratorArrayOutput {
	return o.ApplyT(func(v LookupEnforcerGroupsResult) []GetEnforcerGroupsOrchestrator { return v.Orchestrators }).(GetEnforcerGroupsOrchestratorArrayOutput)
}

// pas deployment link
func (o LookupEnforcerGroupsResultOutput) PasDeploymentLink() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEnforcerGroupsResult) string { return v.PasDeploymentLink }).(pulumi.StringOutput)
}

// Permission Action
func (o LookupEnforcerGroupsResultOutput) Permission() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEnforcerGroupsResult) string { return v.Permission }).(pulumi.StringOutput)
}

// When set to `True` allows Enforcers to be discovered in the Risk Explorer.
func (o LookupEnforcerGroupsResultOutput) RiskExplorerAutoDiscovery() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupEnforcerGroupsResult) bool { return v.RiskExplorerAutoDiscovery }).(pulumi.BoolOutput)
}

// Function Runtime Policy that will applay on the nano enforcer.
func (o LookupEnforcerGroupsResultOutput) RuntimePolicyName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEnforcerGroupsResult) string { return v.RuntimePolicyName }).(pulumi.StringOutput)
}

// The container runtime environment.
func (o LookupEnforcerGroupsResultOutput) RuntimeType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEnforcerGroupsResult) string { return v.RuntimeType }).(pulumi.StringOutput)
}

// When set to `True` configures Enforcers to discover local host images. Discovered images will be listed under Images > Host Images, as well as under Infrastructure (in the Images tab for applicable hosts).
func (o LookupEnforcerGroupsResultOutput) SyncHostImages() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupEnforcerGroupsResult) bool { return v.SyncHostImages }).(pulumi.BoolOutput)
}

// When set to `True` allows profiling and monitoring system calls made by running containers.
func (o LookupEnforcerGroupsResultOutput) SyscallEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupEnforcerGroupsResult) bool { return v.SyscallEnabled }).(pulumi.BoolOutput)
}

// The batch install token.
func (o LookupEnforcerGroupsResultOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEnforcerGroupsResult) string { return v.Token }).(pulumi.StringOutput)
}

// Enforcer Type.
func (o LookupEnforcerGroupsResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEnforcerGroupsResult) string { return v.Type }).(pulumi.StringOutput)
}

// When set to `True` applies User Access Control Policies to containers. Note that Aqua Enforcers must be deployed with the AQUA*RUNC*INTERCEPTION environment variable set to 0 in order to use User Access Control Policies.
func (o LookupEnforcerGroupsResultOutput) UserAccessControl() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupEnforcerGroupsResult) bool { return v.UserAccessControl }).(pulumi.BoolOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupEnforcerGroupsResultOutput{})
}
