// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aquasec

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func LookupHostAssurancePolicy(ctx *pulumi.Context, args *LookupHostAssurancePolicyArgs, opts ...pulumi.InvokeOption) (*LookupHostAssurancePolicyResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv LookupHostAssurancePolicyResult
	err := ctx.Invoke("aquasec:index/getHostAssurancePolicy:getHostAssurancePolicy", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getHostAssurancePolicy.
type LookupHostAssurancePolicyArgs struct {
	// Indicates that policy should ignore cases that do not have a known fix.
	MaximumScoreExcludeNoFix *bool  `pulumi:"maximumScoreExcludeNoFix"`
	Name                     string `pulumi:"name"`
}

// A collection of values returned by getHostAssurancePolicy.
type LookupHostAssurancePolicyResult struct {
	// List of explicitly allowed images.
	AllowedImages     []string `pulumi:"allowedImages"`
	ApplicationScopes []string `pulumi:"applicationScopes"`
	// What type of assurance policy is described.
	AssuranceType string `pulumi:"assuranceType"`
	// Indicates if auditing for failures.
	AuditOnFailure bool `pulumi:"auditOnFailure"`
	// Name of user account that created the policy.
	Author             string                               `pulumi:"author"`
	AutoScanConfigured bool                                 `pulumi:"autoScanConfigured"`
	AutoScanEnabled    bool                                 `pulumi:"autoScanEnabled"`
	AutoScanTimes      []GetHostAssurancePolicyAutoScanTime `pulumi:"autoScanTimes"`
	// List of function's forbidden permissions.
	BlacklistPermissions []string `pulumi:"blacklistPermissions"`
	// Indicates if blacklist permissions is relevant.
	BlacklistPermissionsEnabled bool `pulumi:"blacklistPermissionsEnabled"`
	// List of blacklisted licenses.
	BlacklistedLicenses []string `pulumi:"blacklistedLicenses"`
	// Lndicates if license blacklist is relevant.
	BlacklistedLicensesEnabled bool `pulumi:"blacklistedLicensesEnabled"`
	// Indicates if failed images are blocked.
	BlockFailed         bool `pulumi:"blockFailed"`
	ControlExcludeNoFix bool `pulumi:"controlExcludeNoFix"`
	// List of Custom user scripts for checks.
	CustomChecks []GetHostAssurancePolicyCustomCheck `pulumi:"customChecks"`
	// Indicates if scanning should include custom checks.
	CustomChecksEnabled   bool `pulumi:"customChecksEnabled"`
	CustomSeverityEnabled bool `pulumi:"customSeverityEnabled"`
	// Indicates if cves blacklist is relevant.
	CvesBlackListEnabled bool `pulumi:"cvesBlackListEnabled"`
	// List of cves blacklisted items.
	CvesBlackLists []string `pulumi:"cvesBlackLists"`
	// Indicates if cves whitelist is relevant.
	CvesWhiteListEnabled bool `pulumi:"cvesWhiteListEnabled"`
	// List of cves whitelisted licenses
	CvesWhiteLists []string `pulumi:"cvesWhiteLists"`
	// Identifier of the cvss severity.
	CvssSeverity string `pulumi:"cvssSeverity"`
	// Indicates if the cvss severity is scanned.
	CvssSeverityEnabled bool `pulumi:"cvssSeverityEnabled"`
	// Indicates that policy should ignore cvss cases that do not have a known fix.
	CvssSeverityExcludeNoFix bool   `pulumi:"cvssSeverityExcludeNoFix"`
	Description              string `pulumi:"description"`
	// Indicates if malware should block the image.
	DisallowMalware  bool `pulumi:"disallowMalware"`
	DockerCisEnabled bool `pulumi:"dockerCisEnabled"`
	// Name of the container image.
	Domain                           string   `pulumi:"domain"`
	DomainName                       string   `pulumi:"domainName"`
	DtaEnabled                       bool     `pulumi:"dtaEnabled"`
	DtaSeverity                      string   `pulumi:"dtaSeverity"`
	Enabled                          bool     `pulumi:"enabled"`
	Enforce                          bool     `pulumi:"enforce"`
	EnforceAfterDays                 int      `pulumi:"enforceAfterDays"`
	EnforceExcessivePermissions      bool     `pulumi:"enforceExcessivePermissions"`
	ExceptionalMonitoredMalwarePaths []string `pulumi:"exceptionalMonitoredMalwarePaths"`
	// Indicates if cicd failures will fail the image.
	FailCicd                 bool                                   `pulumi:"failCicd"`
	ForbiddenLabels          []GetHostAssurancePolicyForbiddenLabel `pulumi:"forbiddenLabels"`
	ForbiddenLabelsEnabled   bool                                   `pulumi:"forbiddenLabelsEnabled"`
	ForceMicroenforcer       bool                                   `pulumi:"forceMicroenforcer"`
	FunctionIntegrityEnabled bool                                   `pulumi:"functionIntegrityEnabled"`
	// The ID of this resource.
	Id                               string `pulumi:"id"`
	IgnoreRecentlyPublishedVln       bool   `pulumi:"ignoreRecentlyPublishedVln"`
	IgnoreRecentlyPublishedVlnPeriod int    `pulumi:"ignoreRecentlyPublishedVlnPeriod"`
	// Indicates if risk resources are ignored.
	IgnoreRiskResourcesEnabled bool `pulumi:"ignoreRiskResourcesEnabled"`
	// List of ignored risk resources.
	IgnoredRiskResources []string `pulumi:"ignoredRiskResources"`
	// List of images.
	Images         []string `pulumi:"images"`
	KubeCisEnabled bool     `pulumi:"kubeCisEnabled"`
	// List of labels.
	Labels        []string `pulumi:"labels"`
	MalwareAction string   `pulumi:"malwareAction"`
	// Value of allowed maximum score.
	MaximumScore float64 `pulumi:"maximumScore"`
	// Indicates if exceeding the maximum score is scanned.
	MaximumScoreEnabled bool `pulumi:"maximumScoreEnabled"`
	// Indicates that policy should ignore cases that do not have a known fix.
	MaximumScoreExcludeNoFix *bool    `pulumi:"maximumScoreExcludeNoFix"`
	MonitoredMalwarePaths    []string `pulumi:"monitoredMalwarePaths"`
	Name                     string   `pulumi:"name"`
	// Indicates if raise a warning for images that should only be run as root.
	OnlyNoneRootUsers bool `pulumi:"onlyNoneRootUsers"`
	// Indicates if packages blacklist is relevant.
	PackagesBlackListEnabled bool `pulumi:"packagesBlackListEnabled"`
	// List of backlisted images.
	PackagesBlackLists []GetHostAssurancePolicyPackagesBlackList `pulumi:"packagesBlackLists"`
	// Indicates if packages whitelist is relevant.
	PackagesWhiteListEnabled bool `pulumi:"packagesWhiteListEnabled"`
	// List of whitelisted images.
	PackagesWhiteLists      []GetHostAssurancePolicyPackagesWhiteList `pulumi:"packagesWhiteLists"`
	PartialResultsImageFail bool                                      `pulumi:"partialResultsImageFail"`
	ReadOnly                bool                                      `pulumi:"readOnly"`
	// List of registries.
	Registries            []string                              `pulumi:"registries"`
	Registry              string                                `pulumi:"registry"`
	RequiredLabels        []GetHostAssurancePolicyRequiredLabel `pulumi:"requiredLabels"`
	RequiredLabelsEnabled bool                                  `pulumi:"requiredLabelsEnabled"`
	ScanNfsMounts         bool                                  `pulumi:"scanNfsMounts"`
	// Indicates if scan should include sensitive data in the image.
	ScanSensitiveData bool `pulumi:"scanSensitiveData"`
	// Indicates if scanning should include scap.
	ScapEnabled bool `pulumi:"scapEnabled"`
	// List of SCAP user scripts for checks.
	ScapFiles []string                      `pulumi:"scapFiles"`
	Scopes    []GetHostAssurancePolicyScope `pulumi:"scopes"`
	// List of trusted images.
	TrustedBaseImages []GetHostAssurancePolicyTrustedBaseImage `pulumi:"trustedBaseImages"`
	// Indicates if list of trusted base images is relevant.
	TrustedBaseImagesEnabled bool `pulumi:"trustedBaseImagesEnabled"`
	// List of whitelisted licenses.
	WhitelistedLicenses []string `pulumi:"whitelistedLicenses"`
	// Indicates if license blacklist is relevant.
	WhitelistedLicensesEnabled bool `pulumi:"whitelistedLicensesEnabled"`
}

func LookupHostAssurancePolicyOutput(ctx *pulumi.Context, args LookupHostAssurancePolicyOutputArgs, opts ...pulumi.InvokeOption) LookupHostAssurancePolicyResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupHostAssurancePolicyResult, error) {
			args := v.(LookupHostAssurancePolicyArgs)
			r, err := LookupHostAssurancePolicy(ctx, &args, opts...)
			var s LookupHostAssurancePolicyResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupHostAssurancePolicyResultOutput)
}

// A collection of arguments for invoking getHostAssurancePolicy.
type LookupHostAssurancePolicyOutputArgs struct {
	// Indicates that policy should ignore cases that do not have a known fix.
	MaximumScoreExcludeNoFix pulumi.BoolPtrInput `pulumi:"maximumScoreExcludeNoFix"`
	Name                     pulumi.StringInput  `pulumi:"name"`
}

func (LookupHostAssurancePolicyOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupHostAssurancePolicyArgs)(nil)).Elem()
}

// A collection of values returned by getHostAssurancePolicy.
type LookupHostAssurancePolicyResultOutput struct{ *pulumi.OutputState }

func (LookupHostAssurancePolicyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupHostAssurancePolicyResult)(nil)).Elem()
}

func (o LookupHostAssurancePolicyResultOutput) ToLookupHostAssurancePolicyResultOutput() LookupHostAssurancePolicyResultOutput {
	return o
}

func (o LookupHostAssurancePolicyResultOutput) ToLookupHostAssurancePolicyResultOutputWithContext(ctx context.Context) LookupHostAssurancePolicyResultOutput {
	return o
}

// List of explicitly allowed images.
func (o LookupHostAssurancePolicyResultOutput) AllowedImages() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupHostAssurancePolicyResult) []string { return v.AllowedImages }).(pulumi.StringArrayOutput)
}

func (o LookupHostAssurancePolicyResultOutput) ApplicationScopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupHostAssurancePolicyResult) []string { return v.ApplicationScopes }).(pulumi.StringArrayOutput)
}

// What type of assurance policy is described.
func (o LookupHostAssurancePolicyResultOutput) AssuranceType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupHostAssurancePolicyResult) string { return v.AssuranceType }).(pulumi.StringOutput)
}

// Indicates if auditing for failures.
func (o LookupHostAssurancePolicyResultOutput) AuditOnFailure() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupHostAssurancePolicyResult) bool { return v.AuditOnFailure }).(pulumi.BoolOutput)
}

// Name of user account that created the policy.
func (o LookupHostAssurancePolicyResultOutput) Author() pulumi.StringOutput {
	return o.ApplyT(func(v LookupHostAssurancePolicyResult) string { return v.Author }).(pulumi.StringOutput)
}

func (o LookupHostAssurancePolicyResultOutput) AutoScanConfigured() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupHostAssurancePolicyResult) bool { return v.AutoScanConfigured }).(pulumi.BoolOutput)
}

func (o LookupHostAssurancePolicyResultOutput) AutoScanEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupHostAssurancePolicyResult) bool { return v.AutoScanEnabled }).(pulumi.BoolOutput)
}

func (o LookupHostAssurancePolicyResultOutput) AutoScanTimes() GetHostAssurancePolicyAutoScanTimeArrayOutput {
	return o.ApplyT(func(v LookupHostAssurancePolicyResult) []GetHostAssurancePolicyAutoScanTime { return v.AutoScanTimes }).(GetHostAssurancePolicyAutoScanTimeArrayOutput)
}

// List of function's forbidden permissions.
func (o LookupHostAssurancePolicyResultOutput) BlacklistPermissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupHostAssurancePolicyResult) []string { return v.BlacklistPermissions }).(pulumi.StringArrayOutput)
}

// Indicates if blacklist permissions is relevant.
func (o LookupHostAssurancePolicyResultOutput) BlacklistPermissionsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupHostAssurancePolicyResult) bool { return v.BlacklistPermissionsEnabled }).(pulumi.BoolOutput)
}

// List of blacklisted licenses.
func (o LookupHostAssurancePolicyResultOutput) BlacklistedLicenses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupHostAssurancePolicyResult) []string { return v.BlacklistedLicenses }).(pulumi.StringArrayOutput)
}

// Lndicates if license blacklist is relevant.
func (o LookupHostAssurancePolicyResultOutput) BlacklistedLicensesEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupHostAssurancePolicyResult) bool { return v.BlacklistedLicensesEnabled }).(pulumi.BoolOutput)
}

// Indicates if failed images are blocked.
func (o LookupHostAssurancePolicyResultOutput) BlockFailed() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupHostAssurancePolicyResult) bool { return v.BlockFailed }).(pulumi.BoolOutput)
}

func (o LookupHostAssurancePolicyResultOutput) ControlExcludeNoFix() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupHostAssurancePolicyResult) bool { return v.ControlExcludeNoFix }).(pulumi.BoolOutput)
}

// List of Custom user scripts for checks.
func (o LookupHostAssurancePolicyResultOutput) CustomChecks() GetHostAssurancePolicyCustomCheckArrayOutput {
	return o.ApplyT(func(v LookupHostAssurancePolicyResult) []GetHostAssurancePolicyCustomCheck { return v.CustomChecks }).(GetHostAssurancePolicyCustomCheckArrayOutput)
}

// Indicates if scanning should include custom checks.
func (o LookupHostAssurancePolicyResultOutput) CustomChecksEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupHostAssurancePolicyResult) bool { return v.CustomChecksEnabled }).(pulumi.BoolOutput)
}

func (o LookupHostAssurancePolicyResultOutput) CustomSeverityEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupHostAssurancePolicyResult) bool { return v.CustomSeverityEnabled }).(pulumi.BoolOutput)
}

// Indicates if cves blacklist is relevant.
func (o LookupHostAssurancePolicyResultOutput) CvesBlackListEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupHostAssurancePolicyResult) bool { return v.CvesBlackListEnabled }).(pulumi.BoolOutput)
}

// List of cves blacklisted items.
func (o LookupHostAssurancePolicyResultOutput) CvesBlackLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupHostAssurancePolicyResult) []string { return v.CvesBlackLists }).(pulumi.StringArrayOutput)
}

// Indicates if cves whitelist is relevant.
func (o LookupHostAssurancePolicyResultOutput) CvesWhiteListEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupHostAssurancePolicyResult) bool { return v.CvesWhiteListEnabled }).(pulumi.BoolOutput)
}

// List of cves whitelisted licenses
func (o LookupHostAssurancePolicyResultOutput) CvesWhiteLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupHostAssurancePolicyResult) []string { return v.CvesWhiteLists }).(pulumi.StringArrayOutput)
}

// Identifier of the cvss severity.
func (o LookupHostAssurancePolicyResultOutput) CvssSeverity() pulumi.StringOutput {
	return o.ApplyT(func(v LookupHostAssurancePolicyResult) string { return v.CvssSeverity }).(pulumi.StringOutput)
}

// Indicates if the cvss severity is scanned.
func (o LookupHostAssurancePolicyResultOutput) CvssSeverityEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupHostAssurancePolicyResult) bool { return v.CvssSeverityEnabled }).(pulumi.BoolOutput)
}

// Indicates that policy should ignore cvss cases that do not have a known fix.
func (o LookupHostAssurancePolicyResultOutput) CvssSeverityExcludeNoFix() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupHostAssurancePolicyResult) bool { return v.CvssSeverityExcludeNoFix }).(pulumi.BoolOutput)
}

func (o LookupHostAssurancePolicyResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupHostAssurancePolicyResult) string { return v.Description }).(pulumi.StringOutput)
}

// Indicates if malware should block the image.
func (o LookupHostAssurancePolicyResultOutput) DisallowMalware() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupHostAssurancePolicyResult) bool { return v.DisallowMalware }).(pulumi.BoolOutput)
}

func (o LookupHostAssurancePolicyResultOutput) DockerCisEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupHostAssurancePolicyResult) bool { return v.DockerCisEnabled }).(pulumi.BoolOutput)
}

// Name of the container image.
func (o LookupHostAssurancePolicyResultOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v LookupHostAssurancePolicyResult) string { return v.Domain }).(pulumi.StringOutput)
}

func (o LookupHostAssurancePolicyResultOutput) DomainName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupHostAssurancePolicyResult) string { return v.DomainName }).(pulumi.StringOutput)
}

func (o LookupHostAssurancePolicyResultOutput) DtaEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupHostAssurancePolicyResult) bool { return v.DtaEnabled }).(pulumi.BoolOutput)
}

func (o LookupHostAssurancePolicyResultOutput) DtaSeverity() pulumi.StringOutput {
	return o.ApplyT(func(v LookupHostAssurancePolicyResult) string { return v.DtaSeverity }).(pulumi.StringOutput)
}

func (o LookupHostAssurancePolicyResultOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupHostAssurancePolicyResult) bool { return v.Enabled }).(pulumi.BoolOutput)
}

func (o LookupHostAssurancePolicyResultOutput) Enforce() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupHostAssurancePolicyResult) bool { return v.Enforce }).(pulumi.BoolOutput)
}

func (o LookupHostAssurancePolicyResultOutput) EnforceAfterDays() pulumi.IntOutput {
	return o.ApplyT(func(v LookupHostAssurancePolicyResult) int { return v.EnforceAfterDays }).(pulumi.IntOutput)
}

func (o LookupHostAssurancePolicyResultOutput) EnforceExcessivePermissions() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupHostAssurancePolicyResult) bool { return v.EnforceExcessivePermissions }).(pulumi.BoolOutput)
}

func (o LookupHostAssurancePolicyResultOutput) ExceptionalMonitoredMalwarePaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupHostAssurancePolicyResult) []string { return v.ExceptionalMonitoredMalwarePaths }).(pulumi.StringArrayOutput)
}

// Indicates if cicd failures will fail the image.
func (o LookupHostAssurancePolicyResultOutput) FailCicd() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupHostAssurancePolicyResult) bool { return v.FailCicd }).(pulumi.BoolOutput)
}

func (o LookupHostAssurancePolicyResultOutput) ForbiddenLabels() GetHostAssurancePolicyForbiddenLabelArrayOutput {
	return o.ApplyT(func(v LookupHostAssurancePolicyResult) []GetHostAssurancePolicyForbiddenLabel {
		return v.ForbiddenLabels
	}).(GetHostAssurancePolicyForbiddenLabelArrayOutput)
}

func (o LookupHostAssurancePolicyResultOutput) ForbiddenLabelsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupHostAssurancePolicyResult) bool { return v.ForbiddenLabelsEnabled }).(pulumi.BoolOutput)
}

func (o LookupHostAssurancePolicyResultOutput) ForceMicroenforcer() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupHostAssurancePolicyResult) bool { return v.ForceMicroenforcer }).(pulumi.BoolOutput)
}

func (o LookupHostAssurancePolicyResultOutput) FunctionIntegrityEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupHostAssurancePolicyResult) bool { return v.FunctionIntegrityEnabled }).(pulumi.BoolOutput)
}

// The ID of this resource.
func (o LookupHostAssurancePolicyResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupHostAssurancePolicyResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupHostAssurancePolicyResultOutput) IgnoreRecentlyPublishedVln() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupHostAssurancePolicyResult) bool { return v.IgnoreRecentlyPublishedVln }).(pulumi.BoolOutput)
}

func (o LookupHostAssurancePolicyResultOutput) IgnoreRecentlyPublishedVlnPeriod() pulumi.IntOutput {
	return o.ApplyT(func(v LookupHostAssurancePolicyResult) int { return v.IgnoreRecentlyPublishedVlnPeriod }).(pulumi.IntOutput)
}

// Indicates if risk resources are ignored.
func (o LookupHostAssurancePolicyResultOutput) IgnoreRiskResourcesEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupHostAssurancePolicyResult) bool { return v.IgnoreRiskResourcesEnabled }).(pulumi.BoolOutput)
}

// List of ignored risk resources.
func (o LookupHostAssurancePolicyResultOutput) IgnoredRiskResources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupHostAssurancePolicyResult) []string { return v.IgnoredRiskResources }).(pulumi.StringArrayOutput)
}

// List of images.
func (o LookupHostAssurancePolicyResultOutput) Images() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupHostAssurancePolicyResult) []string { return v.Images }).(pulumi.StringArrayOutput)
}

func (o LookupHostAssurancePolicyResultOutput) KubeCisEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupHostAssurancePolicyResult) bool { return v.KubeCisEnabled }).(pulumi.BoolOutput)
}

// List of labels.
func (o LookupHostAssurancePolicyResultOutput) Labels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupHostAssurancePolicyResult) []string { return v.Labels }).(pulumi.StringArrayOutput)
}

func (o LookupHostAssurancePolicyResultOutput) MalwareAction() pulumi.StringOutput {
	return o.ApplyT(func(v LookupHostAssurancePolicyResult) string { return v.MalwareAction }).(pulumi.StringOutput)
}

// Value of allowed maximum score.
func (o LookupHostAssurancePolicyResultOutput) MaximumScore() pulumi.Float64Output {
	return o.ApplyT(func(v LookupHostAssurancePolicyResult) float64 { return v.MaximumScore }).(pulumi.Float64Output)
}

// Indicates if exceeding the maximum score is scanned.
func (o LookupHostAssurancePolicyResultOutput) MaximumScoreEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupHostAssurancePolicyResult) bool { return v.MaximumScoreEnabled }).(pulumi.BoolOutput)
}

// Indicates that policy should ignore cases that do not have a known fix.
func (o LookupHostAssurancePolicyResultOutput) MaximumScoreExcludeNoFix() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupHostAssurancePolicyResult) *bool { return v.MaximumScoreExcludeNoFix }).(pulumi.BoolPtrOutput)
}

func (o LookupHostAssurancePolicyResultOutput) MonitoredMalwarePaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupHostAssurancePolicyResult) []string { return v.MonitoredMalwarePaths }).(pulumi.StringArrayOutput)
}

func (o LookupHostAssurancePolicyResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupHostAssurancePolicyResult) string { return v.Name }).(pulumi.StringOutput)
}

// Indicates if raise a warning for images that should only be run as root.
func (o LookupHostAssurancePolicyResultOutput) OnlyNoneRootUsers() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupHostAssurancePolicyResult) bool { return v.OnlyNoneRootUsers }).(pulumi.BoolOutput)
}

// Indicates if packages blacklist is relevant.
func (o LookupHostAssurancePolicyResultOutput) PackagesBlackListEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupHostAssurancePolicyResult) bool { return v.PackagesBlackListEnabled }).(pulumi.BoolOutput)
}

// List of backlisted images.
func (o LookupHostAssurancePolicyResultOutput) PackagesBlackLists() GetHostAssurancePolicyPackagesBlackListArrayOutput {
	return o.ApplyT(func(v LookupHostAssurancePolicyResult) []GetHostAssurancePolicyPackagesBlackList {
		return v.PackagesBlackLists
	}).(GetHostAssurancePolicyPackagesBlackListArrayOutput)
}

// Indicates if packages whitelist is relevant.
func (o LookupHostAssurancePolicyResultOutput) PackagesWhiteListEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupHostAssurancePolicyResult) bool { return v.PackagesWhiteListEnabled }).(pulumi.BoolOutput)
}

// List of whitelisted images.
func (o LookupHostAssurancePolicyResultOutput) PackagesWhiteLists() GetHostAssurancePolicyPackagesWhiteListArrayOutput {
	return o.ApplyT(func(v LookupHostAssurancePolicyResult) []GetHostAssurancePolicyPackagesWhiteList {
		return v.PackagesWhiteLists
	}).(GetHostAssurancePolicyPackagesWhiteListArrayOutput)
}

func (o LookupHostAssurancePolicyResultOutput) PartialResultsImageFail() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupHostAssurancePolicyResult) bool { return v.PartialResultsImageFail }).(pulumi.BoolOutput)
}

func (o LookupHostAssurancePolicyResultOutput) ReadOnly() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupHostAssurancePolicyResult) bool { return v.ReadOnly }).(pulumi.BoolOutput)
}

// List of registries.
func (o LookupHostAssurancePolicyResultOutput) Registries() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupHostAssurancePolicyResult) []string { return v.Registries }).(pulumi.StringArrayOutput)
}

func (o LookupHostAssurancePolicyResultOutput) Registry() pulumi.StringOutput {
	return o.ApplyT(func(v LookupHostAssurancePolicyResult) string { return v.Registry }).(pulumi.StringOutput)
}

func (o LookupHostAssurancePolicyResultOutput) RequiredLabels() GetHostAssurancePolicyRequiredLabelArrayOutput {
	return o.ApplyT(func(v LookupHostAssurancePolicyResult) []GetHostAssurancePolicyRequiredLabel { return v.RequiredLabels }).(GetHostAssurancePolicyRequiredLabelArrayOutput)
}

func (o LookupHostAssurancePolicyResultOutput) RequiredLabelsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupHostAssurancePolicyResult) bool { return v.RequiredLabelsEnabled }).(pulumi.BoolOutput)
}

func (o LookupHostAssurancePolicyResultOutput) ScanNfsMounts() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupHostAssurancePolicyResult) bool { return v.ScanNfsMounts }).(pulumi.BoolOutput)
}

// Indicates if scan should include sensitive data in the image.
func (o LookupHostAssurancePolicyResultOutput) ScanSensitiveData() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupHostAssurancePolicyResult) bool { return v.ScanSensitiveData }).(pulumi.BoolOutput)
}

// Indicates if scanning should include scap.
func (o LookupHostAssurancePolicyResultOutput) ScapEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupHostAssurancePolicyResult) bool { return v.ScapEnabled }).(pulumi.BoolOutput)
}

// List of SCAP user scripts for checks.
func (o LookupHostAssurancePolicyResultOutput) ScapFiles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupHostAssurancePolicyResult) []string { return v.ScapFiles }).(pulumi.StringArrayOutput)
}

func (o LookupHostAssurancePolicyResultOutput) Scopes() GetHostAssurancePolicyScopeArrayOutput {
	return o.ApplyT(func(v LookupHostAssurancePolicyResult) []GetHostAssurancePolicyScope { return v.Scopes }).(GetHostAssurancePolicyScopeArrayOutput)
}

// List of trusted images.
func (o LookupHostAssurancePolicyResultOutput) TrustedBaseImages() GetHostAssurancePolicyTrustedBaseImageArrayOutput {
	return o.ApplyT(func(v LookupHostAssurancePolicyResult) []GetHostAssurancePolicyTrustedBaseImage {
		return v.TrustedBaseImages
	}).(GetHostAssurancePolicyTrustedBaseImageArrayOutput)
}

// Indicates if list of trusted base images is relevant.
func (o LookupHostAssurancePolicyResultOutput) TrustedBaseImagesEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupHostAssurancePolicyResult) bool { return v.TrustedBaseImagesEnabled }).(pulumi.BoolOutput)
}

// List of whitelisted licenses.
func (o LookupHostAssurancePolicyResultOutput) WhitelistedLicenses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupHostAssurancePolicyResult) []string { return v.WhitelistedLicenses }).(pulumi.StringArrayOutput)
}

// Indicates if license blacklist is relevant.
func (o LookupHostAssurancePolicyResultOutput) WhitelistedLicensesEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupHostAssurancePolicyResult) bool { return v.WhitelistedLicensesEnabled }).(pulumi.BoolOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupHostAssurancePolicyResultOutput{})
}
