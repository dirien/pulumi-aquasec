// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aquasec

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type HostAssurancePolic struct {
	pulumi.CustomResourceState

	// List of explicitly allowed images.
	AllowedImages     pulumi.StringArrayOutput `pulumi:"allowedImages"`
	ApplicationScopes pulumi.StringArrayOutput `pulumi:"applicationScopes"`
	// What type of assurance policy is described.
	AssuranceType pulumi.StringPtrOutput `pulumi:"assuranceType"`
	// Indicates if auditing for failures.
	AuditOnFailure pulumi.BoolPtrOutput `pulumi:"auditOnFailure"`
	// Name of user account that created the policy.
	Author             pulumi.StringOutput                       `pulumi:"author"`
	AutoScanConfigured pulumi.BoolPtrOutput                      `pulumi:"autoScanConfigured"`
	AutoScanEnabled    pulumi.BoolPtrOutput                      `pulumi:"autoScanEnabled"`
	AutoScanTimes      HostAssurancePolicAutoScanTimeArrayOutput `pulumi:"autoScanTimes"`
	// List of function's forbidden permissions.
	BlacklistPermissions pulumi.StringArrayOutput `pulumi:"blacklistPermissions"`
	// Indicates if blacklist permissions is relevant.
	BlacklistPermissionsEnabled pulumi.BoolPtrOutput `pulumi:"blacklistPermissionsEnabled"`
	// List of blacklisted licenses.
	BlacklistedLicenses pulumi.StringArrayOutput `pulumi:"blacklistedLicenses"`
	// Lndicates if license blacklist is relevant.
	BlacklistedLicensesEnabled pulumi.BoolPtrOutput `pulumi:"blacklistedLicensesEnabled"`
	// Indicates if failed images are blocked.
	BlockFailed         pulumi.BoolPtrOutput `pulumi:"blockFailed"`
	ControlExcludeNoFix pulumi.BoolPtrOutput `pulumi:"controlExcludeNoFix"`
	// List of Custom user scripts for checks.
	CustomChecks HostAssurancePolicCustomCheckArrayOutput `pulumi:"customChecks"`
	// Indicates if scanning should include custom checks.
	CustomChecksEnabled   pulumi.BoolPtrOutput `pulumi:"customChecksEnabled"`
	CustomSeverityEnabled pulumi.BoolPtrOutput `pulumi:"customSeverityEnabled"`
	// Indicates if cves blacklist is relevant.
	CvesBlackListEnabled pulumi.BoolPtrOutput `pulumi:"cvesBlackListEnabled"`
	// List of cves blacklisted items.
	CvesBlackLists pulumi.StringArrayOutput `pulumi:"cvesBlackLists"`
	// Indicates if cves whitelist is relevant.
	CvesWhiteListEnabled pulumi.BoolPtrOutput `pulumi:"cvesWhiteListEnabled"`
	// List of cves whitelisted licenses
	CvesWhiteLists pulumi.StringArrayOutput `pulumi:"cvesWhiteLists"`
	// Identifier of the cvss severity.
	CvssSeverity pulumi.StringPtrOutput `pulumi:"cvssSeverity"`
	// Indicates if the cvss severity is scanned.
	CvssSeverityEnabled pulumi.BoolPtrOutput `pulumi:"cvssSeverityEnabled"`
	// Indicates that policy should ignore cvss cases that do not have a known fix.
	CvssSeverityExcludeNoFix pulumi.BoolPtrOutput   `pulumi:"cvssSeverityExcludeNoFix"`
	Description              pulumi.StringPtrOutput `pulumi:"description"`
	// Indicates if malware should block the image.
	DisallowMalware  pulumi.BoolPtrOutput `pulumi:"disallowMalware"`
	DockerCisEnabled pulumi.BoolPtrOutput `pulumi:"dockerCisEnabled"`
	// Name of the container image.
	Domain                           pulumi.StringPtrOutput   `pulumi:"domain"`
	DomainName                       pulumi.StringPtrOutput   `pulumi:"domainName"`
	DtaEnabled                       pulumi.BoolPtrOutput     `pulumi:"dtaEnabled"`
	DtaSeverity                      pulumi.StringPtrOutput   `pulumi:"dtaSeverity"`
	Enabled                          pulumi.BoolPtrOutput     `pulumi:"enabled"`
	Enforce                          pulumi.BoolPtrOutput     `pulumi:"enforce"`
	EnforceAfterDays                 pulumi.IntPtrOutput      `pulumi:"enforceAfterDays"`
	EnforceExcessivePermissions      pulumi.BoolPtrOutput     `pulumi:"enforceExcessivePermissions"`
	ExceptionalMonitoredMalwarePaths pulumi.StringArrayOutput `pulumi:"exceptionalMonitoredMalwarePaths"`
	// Indicates if cicd failures will fail the image.
	FailCicd                         pulumi.BoolPtrOutput                        `pulumi:"failCicd"`
	ForbiddenLabels                  HostAssurancePolicForbiddenLabelArrayOutput `pulumi:"forbiddenLabels"`
	ForbiddenLabelsEnabled           pulumi.BoolPtrOutput                        `pulumi:"forbiddenLabelsEnabled"`
	ForceMicroenforcer               pulumi.BoolPtrOutput                        `pulumi:"forceMicroenforcer"`
	FunctionIntegrityEnabled         pulumi.BoolPtrOutput                        `pulumi:"functionIntegrityEnabled"`
	IgnoreRecentlyPublishedVln       pulumi.BoolPtrOutput                        `pulumi:"ignoreRecentlyPublishedVln"`
	IgnoreRecentlyPublishedVlnPeriod pulumi.IntOutput                            `pulumi:"ignoreRecentlyPublishedVlnPeriod"`
	// Indicates if risk resources are ignored.
	IgnoreRiskResourcesEnabled pulumi.BoolPtrOutput `pulumi:"ignoreRiskResourcesEnabled"`
	// List of ignored risk resources.
	IgnoredRiskResources pulumi.StringArrayOutput `pulumi:"ignoredRiskResources"`
	// List of images.
	Images         pulumi.StringArrayOutput `pulumi:"images"`
	KubeCisEnabled pulumi.BoolPtrOutput     `pulumi:"kubeCisEnabled"`
	// List of labels.
	Labels        pulumi.StringArrayOutput `pulumi:"labels"`
	MalwareAction pulumi.StringPtrOutput   `pulumi:"malwareAction"`
	// Value of allowed maximum score.
	MaximumScore pulumi.Float64PtrOutput `pulumi:"maximumScore"`
	// Indicates if exceeding the maximum score is scanned.
	MaximumScoreEnabled pulumi.BoolPtrOutput `pulumi:"maximumScoreEnabled"`
	// Indicates that policy should ignore cases that do not have a known fix.
	MaximumScoreExcludeNoFix pulumi.BoolPtrOutput     `pulumi:"maximumScoreExcludeNoFix"`
	MonitoredMalwarePaths    pulumi.StringArrayOutput `pulumi:"monitoredMalwarePaths"`
	Name                     pulumi.StringOutput      `pulumi:"name"`
	// Indicates if raise a warning for images that should only be run as root.
	OnlyNoneRootUsers pulumi.BoolPtrOutput `pulumi:"onlyNoneRootUsers"`
	// Indicates if packages blacklist is relevant.
	PackagesBlackListEnabled pulumi.BoolPtrOutput `pulumi:"packagesBlackListEnabled"`
	// List of backlisted images.
	PackagesBlackLists HostAssurancePolicPackagesBlackListArrayOutput `pulumi:"packagesBlackLists"`
	// Indicates if packages whitelist is relevant.
	PackagesWhiteListEnabled pulumi.BoolPtrOutput `pulumi:"packagesWhiteListEnabled"`
	// List of whitelisted images.
	PackagesWhiteLists      HostAssurancePolicPackagesWhiteListArrayOutput `pulumi:"packagesWhiteLists"`
	PartialResultsImageFail pulumi.BoolPtrOutput                           `pulumi:"partialResultsImageFail"`
	ReadOnly                pulumi.BoolPtrOutput                           `pulumi:"readOnly"`
	// List of registries.
	Registries            pulumi.StringArrayOutput                   `pulumi:"registries"`
	Registry              pulumi.StringPtrOutput                     `pulumi:"registry"`
	RequiredLabels        HostAssurancePolicRequiredLabelArrayOutput `pulumi:"requiredLabels"`
	RequiredLabelsEnabled pulumi.BoolPtrOutput                       `pulumi:"requiredLabelsEnabled"`
	ScanNfsMounts         pulumi.BoolPtrOutput                       `pulumi:"scanNfsMounts"`
	// Indicates if scan should include sensitive data in the image.
	ScanSensitiveData pulumi.BoolPtrOutput `pulumi:"scanSensitiveData"`
	// Indicates if scanning should include scap.
	ScapEnabled pulumi.BoolPtrOutput `pulumi:"scapEnabled"`
	// List of SCAP user scripts for checks.
	ScapFiles pulumi.StringArrayOutput           `pulumi:"scapFiles"`
	Scopes    HostAssurancePolicScopeArrayOutput `pulumi:"scopes"`
	// List of trusted images.
	TrustedBaseImages HostAssurancePolicTrustedBaseImageArrayOutput `pulumi:"trustedBaseImages"`
	// Indicates if list of trusted base images is relevant.
	TrustedBaseImagesEnabled pulumi.BoolPtrOutput `pulumi:"trustedBaseImagesEnabled"`
	// List of whitelisted licenses.
	WhitelistedLicenses pulumi.StringArrayOutput `pulumi:"whitelistedLicenses"`
	// Indicates if license blacklist is relevant.
	WhitelistedLicensesEnabled pulumi.BoolPtrOutput `pulumi:"whitelistedLicensesEnabled"`
}

// NewHostAssurancePolic registers a new resource with the given unique name, arguments, and options.
func NewHostAssurancePolic(ctx *pulumi.Context,
	name string, args *HostAssurancePolicArgs, opts ...pulumi.ResourceOption) (*HostAssurancePolic, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApplicationScopes == nil {
		return nil, errors.New("invalid value for required argument 'ApplicationScopes'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource HostAssurancePolic
	err := ctx.RegisterResource("aquasec:index/hostAssurancePolic:HostAssurancePolic", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHostAssurancePolic gets an existing HostAssurancePolic resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHostAssurancePolic(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HostAssurancePolicState, opts ...pulumi.ResourceOption) (*HostAssurancePolic, error) {
	var resource HostAssurancePolic
	err := ctx.ReadResource("aquasec:index/hostAssurancePolic:HostAssurancePolic", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HostAssurancePolic resources.
type hostAssurancePolicState struct {
	// List of explicitly allowed images.
	AllowedImages     []string `pulumi:"allowedImages"`
	ApplicationScopes []string `pulumi:"applicationScopes"`
	// What type of assurance policy is described.
	AssuranceType *string `pulumi:"assuranceType"`
	// Indicates if auditing for failures.
	AuditOnFailure *bool `pulumi:"auditOnFailure"`
	// Name of user account that created the policy.
	Author             *string                          `pulumi:"author"`
	AutoScanConfigured *bool                            `pulumi:"autoScanConfigured"`
	AutoScanEnabled    *bool                            `pulumi:"autoScanEnabled"`
	AutoScanTimes      []HostAssurancePolicAutoScanTime `pulumi:"autoScanTimes"`
	// List of function's forbidden permissions.
	BlacklistPermissions []string `pulumi:"blacklistPermissions"`
	// Indicates if blacklist permissions is relevant.
	BlacklistPermissionsEnabled *bool `pulumi:"blacklistPermissionsEnabled"`
	// List of blacklisted licenses.
	BlacklistedLicenses []string `pulumi:"blacklistedLicenses"`
	// Lndicates if license blacklist is relevant.
	BlacklistedLicensesEnabled *bool `pulumi:"blacklistedLicensesEnabled"`
	// Indicates if failed images are blocked.
	BlockFailed         *bool `pulumi:"blockFailed"`
	ControlExcludeNoFix *bool `pulumi:"controlExcludeNoFix"`
	// List of Custom user scripts for checks.
	CustomChecks []HostAssurancePolicCustomCheck `pulumi:"customChecks"`
	// Indicates if scanning should include custom checks.
	CustomChecksEnabled   *bool `pulumi:"customChecksEnabled"`
	CustomSeverityEnabled *bool `pulumi:"customSeverityEnabled"`
	// Indicates if cves blacklist is relevant.
	CvesBlackListEnabled *bool `pulumi:"cvesBlackListEnabled"`
	// List of cves blacklisted items.
	CvesBlackLists []string `pulumi:"cvesBlackLists"`
	// Indicates if cves whitelist is relevant.
	CvesWhiteListEnabled *bool `pulumi:"cvesWhiteListEnabled"`
	// List of cves whitelisted licenses
	CvesWhiteLists []string `pulumi:"cvesWhiteLists"`
	// Identifier of the cvss severity.
	CvssSeverity *string `pulumi:"cvssSeverity"`
	// Indicates if the cvss severity is scanned.
	CvssSeverityEnabled *bool `pulumi:"cvssSeverityEnabled"`
	// Indicates that policy should ignore cvss cases that do not have a known fix.
	CvssSeverityExcludeNoFix *bool   `pulumi:"cvssSeverityExcludeNoFix"`
	Description              *string `pulumi:"description"`
	// Indicates if malware should block the image.
	DisallowMalware  *bool `pulumi:"disallowMalware"`
	DockerCisEnabled *bool `pulumi:"dockerCisEnabled"`
	// Name of the container image.
	Domain                           *string  `pulumi:"domain"`
	DomainName                       *string  `pulumi:"domainName"`
	DtaEnabled                       *bool    `pulumi:"dtaEnabled"`
	DtaSeverity                      *string  `pulumi:"dtaSeverity"`
	Enabled                          *bool    `pulumi:"enabled"`
	Enforce                          *bool    `pulumi:"enforce"`
	EnforceAfterDays                 *int     `pulumi:"enforceAfterDays"`
	EnforceExcessivePermissions      *bool    `pulumi:"enforceExcessivePermissions"`
	ExceptionalMonitoredMalwarePaths []string `pulumi:"exceptionalMonitoredMalwarePaths"`
	// Indicates if cicd failures will fail the image.
	FailCicd                         *bool                              `pulumi:"failCicd"`
	ForbiddenLabels                  []HostAssurancePolicForbiddenLabel `pulumi:"forbiddenLabels"`
	ForbiddenLabelsEnabled           *bool                              `pulumi:"forbiddenLabelsEnabled"`
	ForceMicroenforcer               *bool                              `pulumi:"forceMicroenforcer"`
	FunctionIntegrityEnabled         *bool                              `pulumi:"functionIntegrityEnabled"`
	IgnoreRecentlyPublishedVln       *bool                              `pulumi:"ignoreRecentlyPublishedVln"`
	IgnoreRecentlyPublishedVlnPeriod *int                               `pulumi:"ignoreRecentlyPublishedVlnPeriod"`
	// Indicates if risk resources are ignored.
	IgnoreRiskResourcesEnabled *bool `pulumi:"ignoreRiskResourcesEnabled"`
	// List of ignored risk resources.
	IgnoredRiskResources []string `pulumi:"ignoredRiskResources"`
	// List of images.
	Images         []string `pulumi:"images"`
	KubeCisEnabled *bool    `pulumi:"kubeCisEnabled"`
	// List of labels.
	Labels        []string `pulumi:"labels"`
	MalwareAction *string  `pulumi:"malwareAction"`
	// Value of allowed maximum score.
	MaximumScore *float64 `pulumi:"maximumScore"`
	// Indicates if exceeding the maximum score is scanned.
	MaximumScoreEnabled *bool `pulumi:"maximumScoreEnabled"`
	// Indicates that policy should ignore cases that do not have a known fix.
	MaximumScoreExcludeNoFix *bool    `pulumi:"maximumScoreExcludeNoFix"`
	MonitoredMalwarePaths    []string `pulumi:"monitoredMalwarePaths"`
	Name                     *string  `pulumi:"name"`
	// Indicates if raise a warning for images that should only be run as root.
	OnlyNoneRootUsers *bool `pulumi:"onlyNoneRootUsers"`
	// Indicates if packages blacklist is relevant.
	PackagesBlackListEnabled *bool `pulumi:"packagesBlackListEnabled"`
	// List of backlisted images.
	PackagesBlackLists []HostAssurancePolicPackagesBlackList `pulumi:"packagesBlackLists"`
	// Indicates if packages whitelist is relevant.
	PackagesWhiteListEnabled *bool `pulumi:"packagesWhiteListEnabled"`
	// List of whitelisted images.
	PackagesWhiteLists      []HostAssurancePolicPackagesWhiteList `pulumi:"packagesWhiteLists"`
	PartialResultsImageFail *bool                                 `pulumi:"partialResultsImageFail"`
	ReadOnly                *bool                                 `pulumi:"readOnly"`
	// List of registries.
	Registries            []string                          `pulumi:"registries"`
	Registry              *string                           `pulumi:"registry"`
	RequiredLabels        []HostAssurancePolicRequiredLabel `pulumi:"requiredLabels"`
	RequiredLabelsEnabled *bool                             `pulumi:"requiredLabelsEnabled"`
	ScanNfsMounts         *bool                             `pulumi:"scanNfsMounts"`
	// Indicates if scan should include sensitive data in the image.
	ScanSensitiveData *bool `pulumi:"scanSensitiveData"`
	// Indicates if scanning should include scap.
	ScapEnabled *bool `pulumi:"scapEnabled"`
	// List of SCAP user scripts for checks.
	ScapFiles []string                  `pulumi:"scapFiles"`
	Scopes    []HostAssurancePolicScope `pulumi:"scopes"`
	// List of trusted images.
	TrustedBaseImages []HostAssurancePolicTrustedBaseImage `pulumi:"trustedBaseImages"`
	// Indicates if list of trusted base images is relevant.
	TrustedBaseImagesEnabled *bool `pulumi:"trustedBaseImagesEnabled"`
	// List of whitelisted licenses.
	WhitelistedLicenses []string `pulumi:"whitelistedLicenses"`
	// Indicates if license blacklist is relevant.
	WhitelistedLicensesEnabled *bool `pulumi:"whitelistedLicensesEnabled"`
}

type HostAssurancePolicState struct {
	// List of explicitly allowed images.
	AllowedImages     pulumi.StringArrayInput
	ApplicationScopes pulumi.StringArrayInput
	// What type of assurance policy is described.
	AssuranceType pulumi.StringPtrInput
	// Indicates if auditing for failures.
	AuditOnFailure pulumi.BoolPtrInput
	// Name of user account that created the policy.
	Author             pulumi.StringPtrInput
	AutoScanConfigured pulumi.BoolPtrInput
	AutoScanEnabled    pulumi.BoolPtrInput
	AutoScanTimes      HostAssurancePolicAutoScanTimeArrayInput
	// List of function's forbidden permissions.
	BlacklistPermissions pulumi.StringArrayInput
	// Indicates if blacklist permissions is relevant.
	BlacklistPermissionsEnabled pulumi.BoolPtrInput
	// List of blacklisted licenses.
	BlacklistedLicenses pulumi.StringArrayInput
	// Lndicates if license blacklist is relevant.
	BlacklistedLicensesEnabled pulumi.BoolPtrInput
	// Indicates if failed images are blocked.
	BlockFailed         pulumi.BoolPtrInput
	ControlExcludeNoFix pulumi.BoolPtrInput
	// List of Custom user scripts for checks.
	CustomChecks HostAssurancePolicCustomCheckArrayInput
	// Indicates if scanning should include custom checks.
	CustomChecksEnabled   pulumi.BoolPtrInput
	CustomSeverityEnabled pulumi.BoolPtrInput
	// Indicates if cves blacklist is relevant.
	CvesBlackListEnabled pulumi.BoolPtrInput
	// List of cves blacklisted items.
	CvesBlackLists pulumi.StringArrayInput
	// Indicates if cves whitelist is relevant.
	CvesWhiteListEnabled pulumi.BoolPtrInput
	// List of cves whitelisted licenses
	CvesWhiteLists pulumi.StringArrayInput
	// Identifier of the cvss severity.
	CvssSeverity pulumi.StringPtrInput
	// Indicates if the cvss severity is scanned.
	CvssSeverityEnabled pulumi.BoolPtrInput
	// Indicates that policy should ignore cvss cases that do not have a known fix.
	CvssSeverityExcludeNoFix pulumi.BoolPtrInput
	Description              pulumi.StringPtrInput
	// Indicates if malware should block the image.
	DisallowMalware  pulumi.BoolPtrInput
	DockerCisEnabled pulumi.BoolPtrInput
	// Name of the container image.
	Domain                           pulumi.StringPtrInput
	DomainName                       pulumi.StringPtrInput
	DtaEnabled                       pulumi.BoolPtrInput
	DtaSeverity                      pulumi.StringPtrInput
	Enabled                          pulumi.BoolPtrInput
	Enforce                          pulumi.BoolPtrInput
	EnforceAfterDays                 pulumi.IntPtrInput
	EnforceExcessivePermissions      pulumi.BoolPtrInput
	ExceptionalMonitoredMalwarePaths pulumi.StringArrayInput
	// Indicates if cicd failures will fail the image.
	FailCicd                         pulumi.BoolPtrInput
	ForbiddenLabels                  HostAssurancePolicForbiddenLabelArrayInput
	ForbiddenLabelsEnabled           pulumi.BoolPtrInput
	ForceMicroenforcer               pulumi.BoolPtrInput
	FunctionIntegrityEnabled         pulumi.BoolPtrInput
	IgnoreRecentlyPublishedVln       pulumi.BoolPtrInput
	IgnoreRecentlyPublishedVlnPeriod pulumi.IntPtrInput
	// Indicates if risk resources are ignored.
	IgnoreRiskResourcesEnabled pulumi.BoolPtrInput
	// List of ignored risk resources.
	IgnoredRiskResources pulumi.StringArrayInput
	// List of images.
	Images         pulumi.StringArrayInput
	KubeCisEnabled pulumi.BoolPtrInput
	// List of labels.
	Labels        pulumi.StringArrayInput
	MalwareAction pulumi.StringPtrInput
	// Value of allowed maximum score.
	MaximumScore pulumi.Float64PtrInput
	// Indicates if exceeding the maximum score is scanned.
	MaximumScoreEnabled pulumi.BoolPtrInput
	// Indicates that policy should ignore cases that do not have a known fix.
	MaximumScoreExcludeNoFix pulumi.BoolPtrInput
	MonitoredMalwarePaths    pulumi.StringArrayInput
	Name                     pulumi.StringPtrInput
	// Indicates if raise a warning for images that should only be run as root.
	OnlyNoneRootUsers pulumi.BoolPtrInput
	// Indicates if packages blacklist is relevant.
	PackagesBlackListEnabled pulumi.BoolPtrInput
	// List of backlisted images.
	PackagesBlackLists HostAssurancePolicPackagesBlackListArrayInput
	// Indicates if packages whitelist is relevant.
	PackagesWhiteListEnabled pulumi.BoolPtrInput
	// List of whitelisted images.
	PackagesWhiteLists      HostAssurancePolicPackagesWhiteListArrayInput
	PartialResultsImageFail pulumi.BoolPtrInput
	ReadOnly                pulumi.BoolPtrInput
	// List of registries.
	Registries            pulumi.StringArrayInput
	Registry              pulumi.StringPtrInput
	RequiredLabels        HostAssurancePolicRequiredLabelArrayInput
	RequiredLabelsEnabled pulumi.BoolPtrInput
	ScanNfsMounts         pulumi.BoolPtrInput
	// Indicates if scan should include sensitive data in the image.
	ScanSensitiveData pulumi.BoolPtrInput
	// Indicates if scanning should include scap.
	ScapEnabled pulumi.BoolPtrInput
	// List of SCAP user scripts for checks.
	ScapFiles pulumi.StringArrayInput
	Scopes    HostAssurancePolicScopeArrayInput
	// List of trusted images.
	TrustedBaseImages HostAssurancePolicTrustedBaseImageArrayInput
	// Indicates if list of trusted base images is relevant.
	TrustedBaseImagesEnabled pulumi.BoolPtrInput
	// List of whitelisted licenses.
	WhitelistedLicenses pulumi.StringArrayInput
	// Indicates if license blacklist is relevant.
	WhitelistedLicensesEnabled pulumi.BoolPtrInput
}

func (HostAssurancePolicState) ElementType() reflect.Type {
	return reflect.TypeOf((*hostAssurancePolicState)(nil)).Elem()
}

type hostAssurancePolicArgs struct {
	// List of explicitly allowed images.
	AllowedImages     []string `pulumi:"allowedImages"`
	ApplicationScopes []string `pulumi:"applicationScopes"`
	// What type of assurance policy is described.
	AssuranceType *string `pulumi:"assuranceType"`
	// Indicates if auditing for failures.
	AuditOnFailure     *bool                            `pulumi:"auditOnFailure"`
	AutoScanConfigured *bool                            `pulumi:"autoScanConfigured"`
	AutoScanEnabled    *bool                            `pulumi:"autoScanEnabled"`
	AutoScanTimes      []HostAssurancePolicAutoScanTime `pulumi:"autoScanTimes"`
	// List of function's forbidden permissions.
	BlacklistPermissions []string `pulumi:"blacklistPermissions"`
	// Indicates if blacklist permissions is relevant.
	BlacklistPermissionsEnabled *bool `pulumi:"blacklistPermissionsEnabled"`
	// List of blacklisted licenses.
	BlacklistedLicenses []string `pulumi:"blacklistedLicenses"`
	// Lndicates if license blacklist is relevant.
	BlacklistedLicensesEnabled *bool `pulumi:"blacklistedLicensesEnabled"`
	// Indicates if failed images are blocked.
	BlockFailed         *bool `pulumi:"blockFailed"`
	ControlExcludeNoFix *bool `pulumi:"controlExcludeNoFix"`
	// List of Custom user scripts for checks.
	CustomChecks []HostAssurancePolicCustomCheck `pulumi:"customChecks"`
	// Indicates if scanning should include custom checks.
	CustomChecksEnabled   *bool `pulumi:"customChecksEnabled"`
	CustomSeverityEnabled *bool `pulumi:"customSeverityEnabled"`
	// Indicates if cves blacklist is relevant.
	CvesBlackListEnabled *bool `pulumi:"cvesBlackListEnabled"`
	// List of cves blacklisted items.
	CvesBlackLists []string `pulumi:"cvesBlackLists"`
	// Indicates if cves whitelist is relevant.
	CvesWhiteListEnabled *bool `pulumi:"cvesWhiteListEnabled"`
	// List of cves whitelisted licenses
	CvesWhiteLists []string `pulumi:"cvesWhiteLists"`
	// Identifier of the cvss severity.
	CvssSeverity *string `pulumi:"cvssSeverity"`
	// Indicates if the cvss severity is scanned.
	CvssSeverityEnabled *bool `pulumi:"cvssSeverityEnabled"`
	// Indicates that policy should ignore cvss cases that do not have a known fix.
	CvssSeverityExcludeNoFix *bool   `pulumi:"cvssSeverityExcludeNoFix"`
	Description              *string `pulumi:"description"`
	// Indicates if malware should block the image.
	DisallowMalware  *bool `pulumi:"disallowMalware"`
	DockerCisEnabled *bool `pulumi:"dockerCisEnabled"`
	// Name of the container image.
	Domain                           *string  `pulumi:"domain"`
	DomainName                       *string  `pulumi:"domainName"`
	DtaEnabled                       *bool    `pulumi:"dtaEnabled"`
	DtaSeverity                      *string  `pulumi:"dtaSeverity"`
	Enabled                          *bool    `pulumi:"enabled"`
	Enforce                          *bool    `pulumi:"enforce"`
	EnforceAfterDays                 *int     `pulumi:"enforceAfterDays"`
	EnforceExcessivePermissions      *bool    `pulumi:"enforceExcessivePermissions"`
	ExceptionalMonitoredMalwarePaths []string `pulumi:"exceptionalMonitoredMalwarePaths"`
	// Indicates if cicd failures will fail the image.
	FailCicd                   *bool                              `pulumi:"failCicd"`
	ForbiddenLabels            []HostAssurancePolicForbiddenLabel `pulumi:"forbiddenLabels"`
	ForbiddenLabelsEnabled     *bool                              `pulumi:"forbiddenLabelsEnabled"`
	ForceMicroenforcer         *bool                              `pulumi:"forceMicroenforcer"`
	FunctionIntegrityEnabled   *bool                              `pulumi:"functionIntegrityEnabled"`
	IgnoreRecentlyPublishedVln *bool                              `pulumi:"ignoreRecentlyPublishedVln"`
	// Indicates if risk resources are ignored.
	IgnoreRiskResourcesEnabled *bool `pulumi:"ignoreRiskResourcesEnabled"`
	// List of ignored risk resources.
	IgnoredRiskResources []string `pulumi:"ignoredRiskResources"`
	// List of images.
	Images         []string `pulumi:"images"`
	KubeCisEnabled *bool    `pulumi:"kubeCisEnabled"`
	// List of labels.
	Labels        []string `pulumi:"labels"`
	MalwareAction *string  `pulumi:"malwareAction"`
	// Value of allowed maximum score.
	MaximumScore *float64 `pulumi:"maximumScore"`
	// Indicates if exceeding the maximum score is scanned.
	MaximumScoreEnabled *bool `pulumi:"maximumScoreEnabled"`
	// Indicates that policy should ignore cases that do not have a known fix.
	MaximumScoreExcludeNoFix *bool    `pulumi:"maximumScoreExcludeNoFix"`
	MonitoredMalwarePaths    []string `pulumi:"monitoredMalwarePaths"`
	Name                     *string  `pulumi:"name"`
	// Indicates if raise a warning for images that should only be run as root.
	OnlyNoneRootUsers *bool `pulumi:"onlyNoneRootUsers"`
	// Indicates if packages blacklist is relevant.
	PackagesBlackListEnabled *bool `pulumi:"packagesBlackListEnabled"`
	// List of backlisted images.
	PackagesBlackLists []HostAssurancePolicPackagesBlackList `pulumi:"packagesBlackLists"`
	// Indicates if packages whitelist is relevant.
	PackagesWhiteListEnabled *bool `pulumi:"packagesWhiteListEnabled"`
	// List of whitelisted images.
	PackagesWhiteLists      []HostAssurancePolicPackagesWhiteList `pulumi:"packagesWhiteLists"`
	PartialResultsImageFail *bool                                 `pulumi:"partialResultsImageFail"`
	ReadOnly                *bool                                 `pulumi:"readOnly"`
	// List of registries.
	Registries            []string                          `pulumi:"registries"`
	Registry              *string                           `pulumi:"registry"`
	RequiredLabels        []HostAssurancePolicRequiredLabel `pulumi:"requiredLabels"`
	RequiredLabelsEnabled *bool                             `pulumi:"requiredLabelsEnabled"`
	ScanNfsMounts         *bool                             `pulumi:"scanNfsMounts"`
	// Indicates if scan should include sensitive data in the image.
	ScanSensitiveData *bool `pulumi:"scanSensitiveData"`
	// Indicates if scanning should include scap.
	ScapEnabled *bool `pulumi:"scapEnabled"`
	// List of SCAP user scripts for checks.
	ScapFiles []string                  `pulumi:"scapFiles"`
	Scopes    []HostAssurancePolicScope `pulumi:"scopes"`
	// List of trusted images.
	TrustedBaseImages []HostAssurancePolicTrustedBaseImage `pulumi:"trustedBaseImages"`
	// Indicates if list of trusted base images is relevant.
	TrustedBaseImagesEnabled *bool `pulumi:"trustedBaseImagesEnabled"`
	// List of whitelisted licenses.
	WhitelistedLicenses []string `pulumi:"whitelistedLicenses"`
	// Indicates if license blacklist is relevant.
	WhitelistedLicensesEnabled *bool `pulumi:"whitelistedLicensesEnabled"`
}

// The set of arguments for constructing a HostAssurancePolic resource.
type HostAssurancePolicArgs struct {
	// List of explicitly allowed images.
	AllowedImages     pulumi.StringArrayInput
	ApplicationScopes pulumi.StringArrayInput
	// What type of assurance policy is described.
	AssuranceType pulumi.StringPtrInput
	// Indicates if auditing for failures.
	AuditOnFailure     pulumi.BoolPtrInput
	AutoScanConfigured pulumi.BoolPtrInput
	AutoScanEnabled    pulumi.BoolPtrInput
	AutoScanTimes      HostAssurancePolicAutoScanTimeArrayInput
	// List of function's forbidden permissions.
	BlacklistPermissions pulumi.StringArrayInput
	// Indicates if blacklist permissions is relevant.
	BlacklistPermissionsEnabled pulumi.BoolPtrInput
	// List of blacklisted licenses.
	BlacklistedLicenses pulumi.StringArrayInput
	// Lndicates if license blacklist is relevant.
	BlacklistedLicensesEnabled pulumi.BoolPtrInput
	// Indicates if failed images are blocked.
	BlockFailed         pulumi.BoolPtrInput
	ControlExcludeNoFix pulumi.BoolPtrInput
	// List of Custom user scripts for checks.
	CustomChecks HostAssurancePolicCustomCheckArrayInput
	// Indicates if scanning should include custom checks.
	CustomChecksEnabled   pulumi.BoolPtrInput
	CustomSeverityEnabled pulumi.BoolPtrInput
	// Indicates if cves blacklist is relevant.
	CvesBlackListEnabled pulumi.BoolPtrInput
	// List of cves blacklisted items.
	CvesBlackLists pulumi.StringArrayInput
	// Indicates if cves whitelist is relevant.
	CvesWhiteListEnabled pulumi.BoolPtrInput
	// List of cves whitelisted licenses
	CvesWhiteLists pulumi.StringArrayInput
	// Identifier of the cvss severity.
	CvssSeverity pulumi.StringPtrInput
	// Indicates if the cvss severity is scanned.
	CvssSeverityEnabled pulumi.BoolPtrInput
	// Indicates that policy should ignore cvss cases that do not have a known fix.
	CvssSeverityExcludeNoFix pulumi.BoolPtrInput
	Description              pulumi.StringPtrInput
	// Indicates if malware should block the image.
	DisallowMalware  pulumi.BoolPtrInput
	DockerCisEnabled pulumi.BoolPtrInput
	// Name of the container image.
	Domain                           pulumi.StringPtrInput
	DomainName                       pulumi.StringPtrInput
	DtaEnabled                       pulumi.BoolPtrInput
	DtaSeverity                      pulumi.StringPtrInput
	Enabled                          pulumi.BoolPtrInput
	Enforce                          pulumi.BoolPtrInput
	EnforceAfterDays                 pulumi.IntPtrInput
	EnforceExcessivePermissions      pulumi.BoolPtrInput
	ExceptionalMonitoredMalwarePaths pulumi.StringArrayInput
	// Indicates if cicd failures will fail the image.
	FailCicd                   pulumi.BoolPtrInput
	ForbiddenLabels            HostAssurancePolicForbiddenLabelArrayInput
	ForbiddenLabelsEnabled     pulumi.BoolPtrInput
	ForceMicroenforcer         pulumi.BoolPtrInput
	FunctionIntegrityEnabled   pulumi.BoolPtrInput
	IgnoreRecentlyPublishedVln pulumi.BoolPtrInput
	// Indicates if risk resources are ignored.
	IgnoreRiskResourcesEnabled pulumi.BoolPtrInput
	// List of ignored risk resources.
	IgnoredRiskResources pulumi.StringArrayInput
	// List of images.
	Images         pulumi.StringArrayInput
	KubeCisEnabled pulumi.BoolPtrInput
	// List of labels.
	Labels        pulumi.StringArrayInput
	MalwareAction pulumi.StringPtrInput
	// Value of allowed maximum score.
	MaximumScore pulumi.Float64PtrInput
	// Indicates if exceeding the maximum score is scanned.
	MaximumScoreEnabled pulumi.BoolPtrInput
	// Indicates that policy should ignore cases that do not have a known fix.
	MaximumScoreExcludeNoFix pulumi.BoolPtrInput
	MonitoredMalwarePaths    pulumi.StringArrayInput
	Name                     pulumi.StringPtrInput
	// Indicates if raise a warning for images that should only be run as root.
	OnlyNoneRootUsers pulumi.BoolPtrInput
	// Indicates if packages blacklist is relevant.
	PackagesBlackListEnabled pulumi.BoolPtrInput
	// List of backlisted images.
	PackagesBlackLists HostAssurancePolicPackagesBlackListArrayInput
	// Indicates if packages whitelist is relevant.
	PackagesWhiteListEnabled pulumi.BoolPtrInput
	// List of whitelisted images.
	PackagesWhiteLists      HostAssurancePolicPackagesWhiteListArrayInput
	PartialResultsImageFail pulumi.BoolPtrInput
	ReadOnly                pulumi.BoolPtrInput
	// List of registries.
	Registries            pulumi.StringArrayInput
	Registry              pulumi.StringPtrInput
	RequiredLabels        HostAssurancePolicRequiredLabelArrayInput
	RequiredLabelsEnabled pulumi.BoolPtrInput
	ScanNfsMounts         pulumi.BoolPtrInput
	// Indicates if scan should include sensitive data in the image.
	ScanSensitiveData pulumi.BoolPtrInput
	// Indicates if scanning should include scap.
	ScapEnabled pulumi.BoolPtrInput
	// List of SCAP user scripts for checks.
	ScapFiles pulumi.StringArrayInput
	Scopes    HostAssurancePolicScopeArrayInput
	// List of trusted images.
	TrustedBaseImages HostAssurancePolicTrustedBaseImageArrayInput
	// Indicates if list of trusted base images is relevant.
	TrustedBaseImagesEnabled pulumi.BoolPtrInput
	// List of whitelisted licenses.
	WhitelistedLicenses pulumi.StringArrayInput
	// Indicates if license blacklist is relevant.
	WhitelistedLicensesEnabled pulumi.BoolPtrInput
}

func (HostAssurancePolicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hostAssurancePolicArgs)(nil)).Elem()
}

type HostAssurancePolicInput interface {
	pulumi.Input

	ToHostAssurancePolicOutput() HostAssurancePolicOutput
	ToHostAssurancePolicOutputWithContext(ctx context.Context) HostAssurancePolicOutput
}

func (*HostAssurancePolic) ElementType() reflect.Type {
	return reflect.TypeOf((**HostAssurancePolic)(nil)).Elem()
}

func (i *HostAssurancePolic) ToHostAssurancePolicOutput() HostAssurancePolicOutput {
	return i.ToHostAssurancePolicOutputWithContext(context.Background())
}

func (i *HostAssurancePolic) ToHostAssurancePolicOutputWithContext(ctx context.Context) HostAssurancePolicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostAssurancePolicOutput)
}

// HostAssurancePolicArrayInput is an input type that accepts HostAssurancePolicArray and HostAssurancePolicArrayOutput values.
// You can construct a concrete instance of `HostAssurancePolicArrayInput` via:
//
//	HostAssurancePolicArray{ HostAssurancePolicArgs{...} }
type HostAssurancePolicArrayInput interface {
	pulumi.Input

	ToHostAssurancePolicArrayOutput() HostAssurancePolicArrayOutput
	ToHostAssurancePolicArrayOutputWithContext(context.Context) HostAssurancePolicArrayOutput
}

type HostAssurancePolicArray []HostAssurancePolicInput

func (HostAssurancePolicArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HostAssurancePolic)(nil)).Elem()
}

func (i HostAssurancePolicArray) ToHostAssurancePolicArrayOutput() HostAssurancePolicArrayOutput {
	return i.ToHostAssurancePolicArrayOutputWithContext(context.Background())
}

func (i HostAssurancePolicArray) ToHostAssurancePolicArrayOutputWithContext(ctx context.Context) HostAssurancePolicArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostAssurancePolicArrayOutput)
}

// HostAssurancePolicMapInput is an input type that accepts HostAssurancePolicMap and HostAssurancePolicMapOutput values.
// You can construct a concrete instance of `HostAssurancePolicMapInput` via:
//
//	HostAssurancePolicMap{ "key": HostAssurancePolicArgs{...} }
type HostAssurancePolicMapInput interface {
	pulumi.Input

	ToHostAssurancePolicMapOutput() HostAssurancePolicMapOutput
	ToHostAssurancePolicMapOutputWithContext(context.Context) HostAssurancePolicMapOutput
}

type HostAssurancePolicMap map[string]HostAssurancePolicInput

func (HostAssurancePolicMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HostAssurancePolic)(nil)).Elem()
}

func (i HostAssurancePolicMap) ToHostAssurancePolicMapOutput() HostAssurancePolicMapOutput {
	return i.ToHostAssurancePolicMapOutputWithContext(context.Background())
}

func (i HostAssurancePolicMap) ToHostAssurancePolicMapOutputWithContext(ctx context.Context) HostAssurancePolicMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostAssurancePolicMapOutput)
}

type HostAssurancePolicOutput struct{ *pulumi.OutputState }

func (HostAssurancePolicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HostAssurancePolic)(nil)).Elem()
}

func (o HostAssurancePolicOutput) ToHostAssurancePolicOutput() HostAssurancePolicOutput {
	return o
}

func (o HostAssurancePolicOutput) ToHostAssurancePolicOutputWithContext(ctx context.Context) HostAssurancePolicOutput {
	return o
}

// List of explicitly allowed images.
func (o HostAssurancePolicOutput) AllowedImages() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HostAssurancePolic) pulumi.StringArrayOutput { return v.AllowedImages }).(pulumi.StringArrayOutput)
}

func (o HostAssurancePolicOutput) ApplicationScopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HostAssurancePolic) pulumi.StringArrayOutput { return v.ApplicationScopes }).(pulumi.StringArrayOutput)
}

// What type of assurance policy is described.
func (o HostAssurancePolicOutput) AssuranceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolic) pulumi.StringPtrOutput { return v.AssuranceType }).(pulumi.StringPtrOutput)
}

// Indicates if auditing for failures.
func (o HostAssurancePolicOutput) AuditOnFailure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolic) pulumi.BoolPtrOutput { return v.AuditOnFailure }).(pulumi.BoolPtrOutput)
}

// Name of user account that created the policy.
func (o HostAssurancePolicOutput) Author() pulumi.StringOutput {
	return o.ApplyT(func(v *HostAssurancePolic) pulumi.StringOutput { return v.Author }).(pulumi.StringOutput)
}

func (o HostAssurancePolicOutput) AutoScanConfigured() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolic) pulumi.BoolPtrOutput { return v.AutoScanConfigured }).(pulumi.BoolPtrOutput)
}

func (o HostAssurancePolicOutput) AutoScanEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolic) pulumi.BoolPtrOutput { return v.AutoScanEnabled }).(pulumi.BoolPtrOutput)
}

func (o HostAssurancePolicOutput) AutoScanTimes() HostAssurancePolicAutoScanTimeArrayOutput {
	return o.ApplyT(func(v *HostAssurancePolic) HostAssurancePolicAutoScanTimeArrayOutput { return v.AutoScanTimes }).(HostAssurancePolicAutoScanTimeArrayOutput)
}

// List of function's forbidden permissions.
func (o HostAssurancePolicOutput) BlacklistPermissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HostAssurancePolic) pulumi.StringArrayOutput { return v.BlacklistPermissions }).(pulumi.StringArrayOutput)
}

// Indicates if blacklist permissions is relevant.
func (o HostAssurancePolicOutput) BlacklistPermissionsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolic) pulumi.BoolPtrOutput { return v.BlacklistPermissionsEnabled }).(pulumi.BoolPtrOutput)
}

// List of blacklisted licenses.
func (o HostAssurancePolicOutput) BlacklistedLicenses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HostAssurancePolic) pulumi.StringArrayOutput { return v.BlacklistedLicenses }).(pulumi.StringArrayOutput)
}

// Lndicates if license blacklist is relevant.
func (o HostAssurancePolicOutput) BlacklistedLicensesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolic) pulumi.BoolPtrOutput { return v.BlacklistedLicensesEnabled }).(pulumi.BoolPtrOutput)
}

// Indicates if failed images are blocked.
func (o HostAssurancePolicOutput) BlockFailed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolic) pulumi.BoolPtrOutput { return v.BlockFailed }).(pulumi.BoolPtrOutput)
}

func (o HostAssurancePolicOutput) ControlExcludeNoFix() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolic) pulumi.BoolPtrOutput { return v.ControlExcludeNoFix }).(pulumi.BoolPtrOutput)
}

// List of Custom user scripts for checks.
func (o HostAssurancePolicOutput) CustomChecks() HostAssurancePolicCustomCheckArrayOutput {
	return o.ApplyT(func(v *HostAssurancePolic) HostAssurancePolicCustomCheckArrayOutput { return v.CustomChecks }).(HostAssurancePolicCustomCheckArrayOutput)
}

// Indicates if scanning should include custom checks.
func (o HostAssurancePolicOutput) CustomChecksEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolic) pulumi.BoolPtrOutput { return v.CustomChecksEnabled }).(pulumi.BoolPtrOutput)
}

func (o HostAssurancePolicOutput) CustomSeverityEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolic) pulumi.BoolPtrOutput { return v.CustomSeverityEnabled }).(pulumi.BoolPtrOutput)
}

// Indicates if cves blacklist is relevant.
func (o HostAssurancePolicOutput) CvesBlackListEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolic) pulumi.BoolPtrOutput { return v.CvesBlackListEnabled }).(pulumi.BoolPtrOutput)
}

// List of cves blacklisted items.
func (o HostAssurancePolicOutput) CvesBlackLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HostAssurancePolic) pulumi.StringArrayOutput { return v.CvesBlackLists }).(pulumi.StringArrayOutput)
}

// Indicates if cves whitelist is relevant.
func (o HostAssurancePolicOutput) CvesWhiteListEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolic) pulumi.BoolPtrOutput { return v.CvesWhiteListEnabled }).(pulumi.BoolPtrOutput)
}

// List of cves whitelisted licenses
func (o HostAssurancePolicOutput) CvesWhiteLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HostAssurancePolic) pulumi.StringArrayOutput { return v.CvesWhiteLists }).(pulumi.StringArrayOutput)
}

// Identifier of the cvss severity.
func (o HostAssurancePolicOutput) CvssSeverity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolic) pulumi.StringPtrOutput { return v.CvssSeverity }).(pulumi.StringPtrOutput)
}

// Indicates if the cvss severity is scanned.
func (o HostAssurancePolicOutput) CvssSeverityEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolic) pulumi.BoolPtrOutput { return v.CvssSeverityEnabled }).(pulumi.BoolPtrOutput)
}

// Indicates that policy should ignore cvss cases that do not have a known fix.
func (o HostAssurancePolicOutput) CvssSeverityExcludeNoFix() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolic) pulumi.BoolPtrOutput { return v.CvssSeverityExcludeNoFix }).(pulumi.BoolPtrOutput)
}

func (o HostAssurancePolicOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolic) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Indicates if malware should block the image.
func (o HostAssurancePolicOutput) DisallowMalware() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolic) pulumi.BoolPtrOutput { return v.DisallowMalware }).(pulumi.BoolPtrOutput)
}

func (o HostAssurancePolicOutput) DockerCisEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolic) pulumi.BoolPtrOutput { return v.DockerCisEnabled }).(pulumi.BoolPtrOutput)
}

// Name of the container image.
func (o HostAssurancePolicOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolic) pulumi.StringPtrOutput { return v.Domain }).(pulumi.StringPtrOutput)
}

func (o HostAssurancePolicOutput) DomainName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolic) pulumi.StringPtrOutput { return v.DomainName }).(pulumi.StringPtrOutput)
}

func (o HostAssurancePolicOutput) DtaEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolic) pulumi.BoolPtrOutput { return v.DtaEnabled }).(pulumi.BoolPtrOutput)
}

func (o HostAssurancePolicOutput) DtaSeverity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolic) pulumi.StringPtrOutput { return v.DtaSeverity }).(pulumi.StringPtrOutput)
}

func (o HostAssurancePolicOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolic) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o HostAssurancePolicOutput) Enforce() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolic) pulumi.BoolPtrOutput { return v.Enforce }).(pulumi.BoolPtrOutput)
}

func (o HostAssurancePolicOutput) EnforceAfterDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolic) pulumi.IntPtrOutput { return v.EnforceAfterDays }).(pulumi.IntPtrOutput)
}

func (o HostAssurancePolicOutput) EnforceExcessivePermissions() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolic) pulumi.BoolPtrOutput { return v.EnforceExcessivePermissions }).(pulumi.BoolPtrOutput)
}

func (o HostAssurancePolicOutput) ExceptionalMonitoredMalwarePaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HostAssurancePolic) pulumi.StringArrayOutput { return v.ExceptionalMonitoredMalwarePaths }).(pulumi.StringArrayOutput)
}

// Indicates if cicd failures will fail the image.
func (o HostAssurancePolicOutput) FailCicd() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolic) pulumi.BoolPtrOutput { return v.FailCicd }).(pulumi.BoolPtrOutput)
}

func (o HostAssurancePolicOutput) ForbiddenLabels() HostAssurancePolicForbiddenLabelArrayOutput {
	return o.ApplyT(func(v *HostAssurancePolic) HostAssurancePolicForbiddenLabelArrayOutput { return v.ForbiddenLabels }).(HostAssurancePolicForbiddenLabelArrayOutput)
}

func (o HostAssurancePolicOutput) ForbiddenLabelsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolic) pulumi.BoolPtrOutput { return v.ForbiddenLabelsEnabled }).(pulumi.BoolPtrOutput)
}

func (o HostAssurancePolicOutput) ForceMicroenforcer() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolic) pulumi.BoolPtrOutput { return v.ForceMicroenforcer }).(pulumi.BoolPtrOutput)
}

func (o HostAssurancePolicOutput) FunctionIntegrityEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolic) pulumi.BoolPtrOutput { return v.FunctionIntegrityEnabled }).(pulumi.BoolPtrOutput)
}

func (o HostAssurancePolicOutput) IgnoreRecentlyPublishedVln() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolic) pulumi.BoolPtrOutput { return v.IgnoreRecentlyPublishedVln }).(pulumi.BoolPtrOutput)
}

func (o HostAssurancePolicOutput) IgnoreRecentlyPublishedVlnPeriod() pulumi.IntOutput {
	return o.ApplyT(func(v *HostAssurancePolic) pulumi.IntOutput { return v.IgnoreRecentlyPublishedVlnPeriod }).(pulumi.IntOutput)
}

// Indicates if risk resources are ignored.
func (o HostAssurancePolicOutput) IgnoreRiskResourcesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolic) pulumi.BoolPtrOutput { return v.IgnoreRiskResourcesEnabled }).(pulumi.BoolPtrOutput)
}

// List of ignored risk resources.
func (o HostAssurancePolicOutput) IgnoredRiskResources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HostAssurancePolic) pulumi.StringArrayOutput { return v.IgnoredRiskResources }).(pulumi.StringArrayOutput)
}

// List of images.
func (o HostAssurancePolicOutput) Images() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HostAssurancePolic) pulumi.StringArrayOutput { return v.Images }).(pulumi.StringArrayOutput)
}

func (o HostAssurancePolicOutput) KubeCisEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolic) pulumi.BoolPtrOutput { return v.KubeCisEnabled }).(pulumi.BoolPtrOutput)
}

// List of labels.
func (o HostAssurancePolicOutput) Labels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HostAssurancePolic) pulumi.StringArrayOutput { return v.Labels }).(pulumi.StringArrayOutput)
}

func (o HostAssurancePolicOutput) MalwareAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolic) pulumi.StringPtrOutput { return v.MalwareAction }).(pulumi.StringPtrOutput)
}

// Value of allowed maximum score.
func (o HostAssurancePolicOutput) MaximumScore() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *HostAssurancePolic) pulumi.Float64PtrOutput { return v.MaximumScore }).(pulumi.Float64PtrOutput)
}

// Indicates if exceeding the maximum score is scanned.
func (o HostAssurancePolicOutput) MaximumScoreEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolic) pulumi.BoolPtrOutput { return v.MaximumScoreEnabled }).(pulumi.BoolPtrOutput)
}

// Indicates that policy should ignore cases that do not have a known fix.
func (o HostAssurancePolicOutput) MaximumScoreExcludeNoFix() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolic) pulumi.BoolPtrOutput { return v.MaximumScoreExcludeNoFix }).(pulumi.BoolPtrOutput)
}

func (o HostAssurancePolicOutput) MonitoredMalwarePaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HostAssurancePolic) pulumi.StringArrayOutput { return v.MonitoredMalwarePaths }).(pulumi.StringArrayOutput)
}

func (o HostAssurancePolicOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *HostAssurancePolic) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Indicates if raise a warning for images that should only be run as root.
func (o HostAssurancePolicOutput) OnlyNoneRootUsers() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolic) pulumi.BoolPtrOutput { return v.OnlyNoneRootUsers }).(pulumi.BoolPtrOutput)
}

// Indicates if packages blacklist is relevant.
func (o HostAssurancePolicOutput) PackagesBlackListEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolic) pulumi.BoolPtrOutput { return v.PackagesBlackListEnabled }).(pulumi.BoolPtrOutput)
}

// List of backlisted images.
func (o HostAssurancePolicOutput) PackagesBlackLists() HostAssurancePolicPackagesBlackListArrayOutput {
	return o.ApplyT(func(v *HostAssurancePolic) HostAssurancePolicPackagesBlackListArrayOutput {
		return v.PackagesBlackLists
	}).(HostAssurancePolicPackagesBlackListArrayOutput)
}

// Indicates if packages whitelist is relevant.
func (o HostAssurancePolicOutput) PackagesWhiteListEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolic) pulumi.BoolPtrOutput { return v.PackagesWhiteListEnabled }).(pulumi.BoolPtrOutput)
}

// List of whitelisted images.
func (o HostAssurancePolicOutput) PackagesWhiteLists() HostAssurancePolicPackagesWhiteListArrayOutput {
	return o.ApplyT(func(v *HostAssurancePolic) HostAssurancePolicPackagesWhiteListArrayOutput {
		return v.PackagesWhiteLists
	}).(HostAssurancePolicPackagesWhiteListArrayOutput)
}

func (o HostAssurancePolicOutput) PartialResultsImageFail() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolic) pulumi.BoolPtrOutput { return v.PartialResultsImageFail }).(pulumi.BoolPtrOutput)
}

func (o HostAssurancePolicOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolic) pulumi.BoolPtrOutput { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// List of registries.
func (o HostAssurancePolicOutput) Registries() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HostAssurancePolic) pulumi.StringArrayOutput { return v.Registries }).(pulumi.StringArrayOutput)
}

func (o HostAssurancePolicOutput) Registry() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolic) pulumi.StringPtrOutput { return v.Registry }).(pulumi.StringPtrOutput)
}

func (o HostAssurancePolicOutput) RequiredLabels() HostAssurancePolicRequiredLabelArrayOutput {
	return o.ApplyT(func(v *HostAssurancePolic) HostAssurancePolicRequiredLabelArrayOutput { return v.RequiredLabels }).(HostAssurancePolicRequiredLabelArrayOutput)
}

func (o HostAssurancePolicOutput) RequiredLabelsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolic) pulumi.BoolPtrOutput { return v.RequiredLabelsEnabled }).(pulumi.BoolPtrOutput)
}

func (o HostAssurancePolicOutput) ScanNfsMounts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolic) pulumi.BoolPtrOutput { return v.ScanNfsMounts }).(pulumi.BoolPtrOutput)
}

// Indicates if scan should include sensitive data in the image.
func (o HostAssurancePolicOutput) ScanSensitiveData() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolic) pulumi.BoolPtrOutput { return v.ScanSensitiveData }).(pulumi.BoolPtrOutput)
}

// Indicates if scanning should include scap.
func (o HostAssurancePolicOutput) ScapEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolic) pulumi.BoolPtrOutput { return v.ScapEnabled }).(pulumi.BoolPtrOutput)
}

// List of SCAP user scripts for checks.
func (o HostAssurancePolicOutput) ScapFiles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HostAssurancePolic) pulumi.StringArrayOutput { return v.ScapFiles }).(pulumi.StringArrayOutput)
}

func (o HostAssurancePolicOutput) Scopes() HostAssurancePolicScopeArrayOutput {
	return o.ApplyT(func(v *HostAssurancePolic) HostAssurancePolicScopeArrayOutput { return v.Scopes }).(HostAssurancePolicScopeArrayOutput)
}

// List of trusted images.
func (o HostAssurancePolicOutput) TrustedBaseImages() HostAssurancePolicTrustedBaseImageArrayOutput {
	return o.ApplyT(func(v *HostAssurancePolic) HostAssurancePolicTrustedBaseImageArrayOutput { return v.TrustedBaseImages }).(HostAssurancePolicTrustedBaseImageArrayOutput)
}

// Indicates if list of trusted base images is relevant.
func (o HostAssurancePolicOutput) TrustedBaseImagesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolic) pulumi.BoolPtrOutput { return v.TrustedBaseImagesEnabled }).(pulumi.BoolPtrOutput)
}

// List of whitelisted licenses.
func (o HostAssurancePolicOutput) WhitelistedLicenses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HostAssurancePolic) pulumi.StringArrayOutput { return v.WhitelistedLicenses }).(pulumi.StringArrayOutput)
}

// Indicates if license blacklist is relevant.
func (o HostAssurancePolicOutput) WhitelistedLicensesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolic) pulumi.BoolPtrOutput { return v.WhitelistedLicensesEnabled }).(pulumi.BoolPtrOutput)
}

type HostAssurancePolicArrayOutput struct{ *pulumi.OutputState }

func (HostAssurancePolicArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HostAssurancePolic)(nil)).Elem()
}

func (o HostAssurancePolicArrayOutput) ToHostAssurancePolicArrayOutput() HostAssurancePolicArrayOutput {
	return o
}

func (o HostAssurancePolicArrayOutput) ToHostAssurancePolicArrayOutputWithContext(ctx context.Context) HostAssurancePolicArrayOutput {
	return o
}

func (o HostAssurancePolicArrayOutput) Index(i pulumi.IntInput) HostAssurancePolicOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *HostAssurancePolic {
		return vs[0].([]*HostAssurancePolic)[vs[1].(int)]
	}).(HostAssurancePolicOutput)
}

type HostAssurancePolicMapOutput struct{ *pulumi.OutputState }

func (HostAssurancePolicMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HostAssurancePolic)(nil)).Elem()
}

func (o HostAssurancePolicMapOutput) ToHostAssurancePolicMapOutput() HostAssurancePolicMapOutput {
	return o
}

func (o HostAssurancePolicMapOutput) ToHostAssurancePolicMapOutputWithContext(ctx context.Context) HostAssurancePolicMapOutput {
	return o
}

func (o HostAssurancePolicMapOutput) MapIndex(k pulumi.StringInput) HostAssurancePolicOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *HostAssurancePolic {
		return vs[0].(map[string]*HostAssurancePolic)[vs[1].(string)]
	}).(HostAssurancePolicOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HostAssurancePolicInput)(nil)).Elem(), &HostAssurancePolic{})
	pulumi.RegisterInputType(reflect.TypeOf((*HostAssurancePolicArrayInput)(nil)).Elem(), HostAssurancePolicArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HostAssurancePolicMapInput)(nil)).Elem(), HostAssurancePolicMap{})
	pulumi.RegisterOutputType(HostAssurancePolicOutput{})
	pulumi.RegisterOutputType(HostAssurancePolicArrayOutput{})
	pulumi.RegisterOutputType(HostAssurancePolicMapOutput{})
}
