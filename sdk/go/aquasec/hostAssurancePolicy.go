// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aquasec

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-aquasec/sdk/go/aquasec/internal"
)

// Host Assurance is a subsystem of Aqua. It is responsible for:
//
//	Scans host VMs and Kubernetes nodes' file system for security issues, vulnerabilities in OS and programming language packages, open-source licenses, and compliance with CIS benchmarks.
//
// Evaluates scan findings according to defined Host Assurance Policies.
// Determines host compliance based on these policies.
// Generates an audit event for host assurance failure.
type HostAssurancePolicy struct {
	pulumi.CustomResourceState

	// Aggregated vulnerability information.
	AggregatedVulnerability pulumi.StringMapOutput `pulumi:"aggregatedVulnerability"`
	// List of explicitly allowed images.
	AllowedImages     pulumi.StringArrayOutput `pulumi:"allowedImages"`
	ApplicationScopes pulumi.StringArrayOutput `pulumi:"applicationScopes"`
	// What type of assurance policy is described.
	AssuranceType pulumi.StringOutput `pulumi:"assuranceType"`
	// Indicates if auditing for failures.
	AuditOnFailure pulumi.BoolPtrOutput `pulumi:"auditOnFailure"`
	// Name of user account that created the policy.
	Author             pulumi.StringOutput                        `pulumi:"author"`
	AutoScanConfigured pulumi.BoolPtrOutput                       `pulumi:"autoScanConfigured"`
	AutoScanEnabled    pulumi.BoolPtrOutput                       `pulumi:"autoScanEnabled"`
	AutoScanTimes      HostAssurancePolicyAutoScanTimeArrayOutput `pulumi:"autoScanTimes"`
	// List of function's forbidden permissions.
	BlacklistPermissions pulumi.StringArrayOutput `pulumi:"blacklistPermissions"`
	// Indicates if blacklist permissions is relevant.
	BlacklistPermissionsEnabled pulumi.BoolPtrOutput `pulumi:"blacklistPermissionsEnabled"`
	// List of blacklisted licenses.
	BlacklistedLicenses pulumi.StringArrayOutput `pulumi:"blacklistedLicenses"`
	// Indicates if license blacklist is relevant.
	BlacklistedLicensesEnabled pulumi.BoolPtrOutput `pulumi:"blacklistedLicensesEnabled"`
	// Indicates if failed images are blocked.
	BlockFailed         pulumi.BoolPtrOutput `pulumi:"blockFailed"`
	ControlExcludeNoFix pulumi.BoolPtrOutput `pulumi:"controlExcludeNoFix"`
	// List of Custom user scripts for checks.
	CustomChecks HostAssurancePolicyCustomCheckArrayOutput `pulumi:"customChecks"`
	// Indicates if scanning should include custom checks.
	CustomChecksEnabled   pulumi.BoolPtrOutput `pulumi:"customChecksEnabled"`
	CustomSeverity        pulumi.StringOutput  `pulumi:"customSeverity"`
	CustomSeverityEnabled pulumi.BoolPtrOutput `pulumi:"customSeverityEnabled"`
	// Indicates if CVEs blacklist is relevant.
	CvesBlackListEnabled pulumi.BoolPtrOutput `pulumi:"cvesBlackListEnabled"`
	// List of CVEs blacklisted items.
	CvesBlackLists pulumi.StringArrayOutput `pulumi:"cvesBlackLists"`
	// Indicates if CVEs whitelist is relevant.
	CvesWhiteListEnabled pulumi.BoolPtrOutput `pulumi:"cvesWhiteListEnabled"`
	// List of cves whitelisted licenses
	CvesWhiteLists pulumi.StringArrayOutput `pulumi:"cvesWhiteLists"`
	// Identifier of the cvss severity.
	CvssSeverity pulumi.StringPtrOutput `pulumi:"cvssSeverity"`
	// Indicates if the cvss severity is scanned.
	CvssSeverityEnabled pulumi.BoolPtrOutput `pulumi:"cvssSeverityEnabled"`
	// Indicates that policy should ignore cvss cases that do not have a known fix.
	CvssSeverityExcludeNoFix pulumi.BoolPtrOutput     `pulumi:"cvssSeverityExcludeNoFix"`
	Description              pulumi.StringPtrOutput   `pulumi:"description"`
	DisallowExploitTypes     pulumi.StringArrayOutput `pulumi:"disallowExploitTypes"`
	// Indicates if malware should block the image.
	DisallowMalware pulumi.BoolPtrOutput `pulumi:"disallowMalware"`
	// Checks the host according to the Docker CIS benchmark, if Docker is found on the host.
	DockerCisEnabled pulumi.BoolPtrOutput `pulumi:"dockerCisEnabled"`
	// Name of the container image.
	Domain                           pulumi.StringPtrOutput   `pulumi:"domain"`
	DomainName                       pulumi.StringPtrOutput   `pulumi:"domainName"`
	DtaEnabled                       pulumi.BoolPtrOutput     `pulumi:"dtaEnabled"`
	DtaSeverity                      pulumi.StringPtrOutput   `pulumi:"dtaSeverity"`
	Enabled                          pulumi.BoolPtrOutput     `pulumi:"enabled"`
	Enforce                          pulumi.BoolPtrOutput     `pulumi:"enforce"`
	EnforceAfterDays                 pulumi.IntPtrOutput      `pulumi:"enforceAfterDays"`
	EnforceExcessivePermissions      pulumi.BoolPtrOutput     `pulumi:"enforceExcessivePermissions"`
	ExceptionalMonitoredMalwarePaths pulumi.StringArrayOutput `pulumi:"exceptionalMonitoredMalwarePaths"`
	ExcludeApplicationScopes         pulumi.StringArrayOutput `pulumi:"excludeApplicationScopes"`
	// Indicates if cicd failures will fail the image.
	FailCicd                         pulumi.BoolPtrOutput                         `pulumi:"failCicd"`
	ForbiddenLabels                  HostAssurancePolicyForbiddenLabelArrayOutput `pulumi:"forbiddenLabels"`
	ForbiddenLabelsEnabled           pulumi.BoolPtrOutput                         `pulumi:"forbiddenLabelsEnabled"`
	ForceMicroenforcer               pulumi.BoolPtrOutput                         `pulumi:"forceMicroenforcer"`
	FunctionIntegrityEnabled         pulumi.BoolPtrOutput                         `pulumi:"functionIntegrityEnabled"`
	IgnoreBaseImageVln               pulumi.BoolPtrOutput                         `pulumi:"ignoreBaseImageVln"`
	IgnoreRecentlyPublishedVln       pulumi.BoolPtrOutput                         `pulumi:"ignoreRecentlyPublishedVln"`
	IgnoreRecentlyPublishedVlnPeriod pulumi.IntOutput                             `pulumi:"ignoreRecentlyPublishedVlnPeriod"`
	// Indicates if risk resources are ignored.
	IgnoreRiskResourcesEnabled pulumi.BoolPtrOutput `pulumi:"ignoreRiskResourcesEnabled"`
	// List of ignored risk resources.
	IgnoredRiskResources      pulumi.StringArrayOutput `pulumi:"ignoredRiskResources"`
	IgnoredSensitiveResources pulumi.StringArrayOutput `pulumi:"ignoredSensitiveResources"`
	// List of images.
	Images pulumi.StringArrayOutput `pulumi:"images"`
	// Performs a Kubernetes CIS benchmark check for the host.
	KubeCisEnabled           pulumi.BoolPtrOutput     `pulumi:"kubeCisEnabled"`
	KubernetesControls       pulumi.StringArrayOutput `pulumi:"kubernetesControls"`
	KubernetesControlsAvdIds pulumi.StringArrayOutput `pulumi:"kubernetesControlsAvdIds"`
	KubernetesControlsNames  pulumi.StringArrayOutput `pulumi:"kubernetesControlsNames"`
	// List of labels.
	Labels          pulumi.StringArrayOutput `pulumi:"labels"`
	Lastupdate      pulumi.StringOutput      `pulumi:"lastupdate"`
	LinuxCisEnabled pulumi.BoolPtrOutput     `pulumi:"linuxCisEnabled"`
	MalwareAction   pulumi.StringPtrOutput   `pulumi:"malwareAction"`
	// Value of allowed maximum score.
	MaximumScore pulumi.Float64PtrOutput `pulumi:"maximumScore"`
	// Indicates if exceeding the maximum score is scanned.
	MaximumScoreEnabled pulumi.BoolPtrOutput `pulumi:"maximumScoreEnabled"`
	// Indicates that policy should ignore cases that do not have a known fix.
	MaximumScoreExcludeNoFix pulumi.BoolPtrOutput     `pulumi:"maximumScoreExcludeNoFix"`
	MonitoredMalwarePaths    pulumi.StringArrayOutput `pulumi:"monitoredMalwarePaths"`
	Name                     pulumi.StringOutput      `pulumi:"name"`
	// Indicates if raise a warning for images that should only be run as root.
	OnlyNoneRootUsers         pulumi.BoolPtrOutput `pulumi:"onlyNoneRootUsers"`
	OpenshiftHardeningEnabled pulumi.BoolPtrOutput `pulumi:"openshiftHardeningEnabled"`
	// Indicates if packages blacklist is relevant.
	PackagesBlackListEnabled pulumi.BoolPtrOutput `pulumi:"packagesBlackListEnabled"`
	// List of blacklisted images.
	PackagesBlackLists HostAssurancePolicyPackagesBlackListArrayOutput `pulumi:"packagesBlackLists"`
	// Indicates if packages whitelist is relevant.
	PackagesWhiteListEnabled pulumi.BoolPtrOutput `pulumi:"packagesWhiteListEnabled"`
	// List of whitelisted images.
	PackagesWhiteLists      HostAssurancePolicyPackagesWhiteListArrayOutput `pulumi:"packagesWhiteLists"`
	PartialResultsImageFail pulumi.BoolPtrOutput                            `pulumi:"partialResultsImageFail"`
	Permission              pulumi.StringOutput                             `pulumi:"permission"`
	PolicySettings          HostAssurancePolicyPolicySettingsOutput         `pulumi:"policySettings"`
	ReadOnly                pulumi.BoolPtrOutput                            `pulumi:"readOnly"`
	// List of registries.
	Registries            pulumi.StringArrayOutput                    `pulumi:"registries"`
	Registry              pulumi.StringPtrOutput                      `pulumi:"registry"`
	RequiredLabels        HostAssurancePolicyRequiredLabelArrayOutput `pulumi:"requiredLabels"`
	RequiredLabelsEnabled pulumi.BoolPtrOutput                        `pulumi:"requiredLabelsEnabled"`
	ScanMalwareInArchives pulumi.BoolPtrOutput                        `pulumi:"scanMalwareInArchives"`
	ScanNfsMounts         pulumi.BoolPtrOutput                        `pulumi:"scanNfsMounts"`
	ScanProcessMemory     pulumi.BoolPtrOutput                        `pulumi:"scanProcessMemory"`
	// Indicates if scan should include sensitive data in the image.
	ScanSensitiveData   pulumi.BoolPtrOutput `pulumi:"scanSensitiveData"`
	ScanWindowsRegistry pulumi.BoolPtrOutput `pulumi:"scanWindowsRegistry"`
	// Indicates if scanning should include scap.
	ScapEnabled pulumi.BoolPtrOutput `pulumi:"scapEnabled"`
	// List of SCAP user scripts for checks.
	ScapFiles pulumi.StringArrayOutput            `pulumi:"scapFiles"`
	Scopes    HostAssurancePolicyScopeArrayOutput `pulumi:"scopes"`
	// List of trusted images.
	TrustedBaseImages HostAssurancePolicyTrustedBaseImageArrayOutput `pulumi:"trustedBaseImages"`
	// Indicates if list of trusted base images is relevant.
	TrustedBaseImagesEnabled    pulumi.BoolPtrOutput  `pulumi:"trustedBaseImagesEnabled"`
	VulnerabilityExploitability pulumi.BoolPtrOutput  `pulumi:"vulnerabilityExploitability"`
	VulnerabilityScoreRanges    pulumi.IntArrayOutput `pulumi:"vulnerabilityScoreRanges"`
	// List of whitelisted licenses.
	WhitelistedLicenses pulumi.StringArrayOutput `pulumi:"whitelistedLicenses"`
	// Indicates if license blacklist is relevant.
	WhitelistedLicensesEnabled pulumi.BoolPtrOutput `pulumi:"whitelistedLicensesEnabled"`
	// Checks the host according to the Windows CIS benchmark (relevant for hosts running Windows).
	WindowsCisEnabled pulumi.BoolPtrOutput `pulumi:"windowsCisEnabled"`
}

// NewHostAssurancePolicy registers a new resource with the given unique name, arguments, and options.
func NewHostAssurancePolicy(ctx *pulumi.Context,
	name string, args *HostAssurancePolicyArgs, opts ...pulumi.ResourceOption) (*HostAssurancePolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApplicationScopes == nil {
		return nil, errors.New("invalid value for required argument 'ApplicationScopes'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource HostAssurancePolicy
	err := ctx.RegisterResource("aquasec:index/hostAssurancePolicy:HostAssurancePolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHostAssurancePolicy gets an existing HostAssurancePolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHostAssurancePolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HostAssurancePolicyState, opts ...pulumi.ResourceOption) (*HostAssurancePolicy, error) {
	var resource HostAssurancePolicy
	err := ctx.ReadResource("aquasec:index/hostAssurancePolicy:HostAssurancePolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HostAssurancePolicy resources.
type hostAssurancePolicyState struct {
	// Aggregated vulnerability information.
	AggregatedVulnerability map[string]string `pulumi:"aggregatedVulnerability"`
	// List of explicitly allowed images.
	AllowedImages     []string `pulumi:"allowedImages"`
	ApplicationScopes []string `pulumi:"applicationScopes"`
	// What type of assurance policy is described.
	AssuranceType *string `pulumi:"assuranceType"`
	// Indicates if auditing for failures.
	AuditOnFailure *bool `pulumi:"auditOnFailure"`
	// Name of user account that created the policy.
	Author             *string                           `pulumi:"author"`
	AutoScanConfigured *bool                             `pulumi:"autoScanConfigured"`
	AutoScanEnabled    *bool                             `pulumi:"autoScanEnabled"`
	AutoScanTimes      []HostAssurancePolicyAutoScanTime `pulumi:"autoScanTimes"`
	// List of function's forbidden permissions.
	BlacklistPermissions []string `pulumi:"blacklistPermissions"`
	// Indicates if blacklist permissions is relevant.
	BlacklistPermissionsEnabled *bool `pulumi:"blacklistPermissionsEnabled"`
	// List of blacklisted licenses.
	BlacklistedLicenses []string `pulumi:"blacklistedLicenses"`
	// Indicates if license blacklist is relevant.
	BlacklistedLicensesEnabled *bool `pulumi:"blacklistedLicensesEnabled"`
	// Indicates if failed images are blocked.
	BlockFailed         *bool `pulumi:"blockFailed"`
	ControlExcludeNoFix *bool `pulumi:"controlExcludeNoFix"`
	// List of Custom user scripts for checks.
	CustomChecks []HostAssurancePolicyCustomCheck `pulumi:"customChecks"`
	// Indicates if scanning should include custom checks.
	CustomChecksEnabled   *bool   `pulumi:"customChecksEnabled"`
	CustomSeverity        *string `pulumi:"customSeverity"`
	CustomSeverityEnabled *bool   `pulumi:"customSeverityEnabled"`
	// Indicates if CVEs blacklist is relevant.
	CvesBlackListEnabled *bool `pulumi:"cvesBlackListEnabled"`
	// List of CVEs blacklisted items.
	CvesBlackLists []string `pulumi:"cvesBlackLists"`
	// Indicates if CVEs whitelist is relevant.
	CvesWhiteListEnabled *bool `pulumi:"cvesWhiteListEnabled"`
	// List of cves whitelisted licenses
	CvesWhiteLists []string `pulumi:"cvesWhiteLists"`
	// Identifier of the cvss severity.
	CvssSeverity *string `pulumi:"cvssSeverity"`
	// Indicates if the cvss severity is scanned.
	CvssSeverityEnabled *bool `pulumi:"cvssSeverityEnabled"`
	// Indicates that policy should ignore cvss cases that do not have a known fix.
	CvssSeverityExcludeNoFix *bool    `pulumi:"cvssSeverityExcludeNoFix"`
	Description              *string  `pulumi:"description"`
	DisallowExploitTypes     []string `pulumi:"disallowExploitTypes"`
	// Indicates if malware should block the image.
	DisallowMalware *bool `pulumi:"disallowMalware"`
	// Checks the host according to the Docker CIS benchmark, if Docker is found on the host.
	DockerCisEnabled *bool `pulumi:"dockerCisEnabled"`
	// Name of the container image.
	Domain                           *string  `pulumi:"domain"`
	DomainName                       *string  `pulumi:"domainName"`
	DtaEnabled                       *bool    `pulumi:"dtaEnabled"`
	DtaSeverity                      *string  `pulumi:"dtaSeverity"`
	Enabled                          *bool    `pulumi:"enabled"`
	Enforce                          *bool    `pulumi:"enforce"`
	EnforceAfterDays                 *int     `pulumi:"enforceAfterDays"`
	EnforceExcessivePermissions      *bool    `pulumi:"enforceExcessivePermissions"`
	ExceptionalMonitoredMalwarePaths []string `pulumi:"exceptionalMonitoredMalwarePaths"`
	ExcludeApplicationScopes         []string `pulumi:"excludeApplicationScopes"`
	// Indicates if cicd failures will fail the image.
	FailCicd                         *bool                               `pulumi:"failCicd"`
	ForbiddenLabels                  []HostAssurancePolicyForbiddenLabel `pulumi:"forbiddenLabels"`
	ForbiddenLabelsEnabled           *bool                               `pulumi:"forbiddenLabelsEnabled"`
	ForceMicroenforcer               *bool                               `pulumi:"forceMicroenforcer"`
	FunctionIntegrityEnabled         *bool                               `pulumi:"functionIntegrityEnabled"`
	IgnoreBaseImageVln               *bool                               `pulumi:"ignoreBaseImageVln"`
	IgnoreRecentlyPublishedVln       *bool                               `pulumi:"ignoreRecentlyPublishedVln"`
	IgnoreRecentlyPublishedVlnPeriod *int                                `pulumi:"ignoreRecentlyPublishedVlnPeriod"`
	// Indicates if risk resources are ignored.
	IgnoreRiskResourcesEnabled *bool `pulumi:"ignoreRiskResourcesEnabled"`
	// List of ignored risk resources.
	IgnoredRiskResources      []string `pulumi:"ignoredRiskResources"`
	IgnoredSensitiveResources []string `pulumi:"ignoredSensitiveResources"`
	// List of images.
	Images []string `pulumi:"images"`
	// Performs a Kubernetes CIS benchmark check for the host.
	KubeCisEnabled           *bool    `pulumi:"kubeCisEnabled"`
	KubernetesControls       []string `pulumi:"kubernetesControls"`
	KubernetesControlsAvdIds []string `pulumi:"kubernetesControlsAvdIds"`
	KubernetesControlsNames  []string `pulumi:"kubernetesControlsNames"`
	// List of labels.
	Labels          []string `pulumi:"labels"`
	Lastupdate      *string  `pulumi:"lastupdate"`
	LinuxCisEnabled *bool    `pulumi:"linuxCisEnabled"`
	MalwareAction   *string  `pulumi:"malwareAction"`
	// Value of allowed maximum score.
	MaximumScore *float64 `pulumi:"maximumScore"`
	// Indicates if exceeding the maximum score is scanned.
	MaximumScoreEnabled *bool `pulumi:"maximumScoreEnabled"`
	// Indicates that policy should ignore cases that do not have a known fix.
	MaximumScoreExcludeNoFix *bool    `pulumi:"maximumScoreExcludeNoFix"`
	MonitoredMalwarePaths    []string `pulumi:"monitoredMalwarePaths"`
	Name                     *string  `pulumi:"name"`
	// Indicates if raise a warning for images that should only be run as root.
	OnlyNoneRootUsers         *bool `pulumi:"onlyNoneRootUsers"`
	OpenshiftHardeningEnabled *bool `pulumi:"openshiftHardeningEnabled"`
	// Indicates if packages blacklist is relevant.
	PackagesBlackListEnabled *bool `pulumi:"packagesBlackListEnabled"`
	// List of blacklisted images.
	PackagesBlackLists []HostAssurancePolicyPackagesBlackList `pulumi:"packagesBlackLists"`
	// Indicates if packages whitelist is relevant.
	PackagesWhiteListEnabled *bool `pulumi:"packagesWhiteListEnabled"`
	// List of whitelisted images.
	PackagesWhiteLists      []HostAssurancePolicyPackagesWhiteList `pulumi:"packagesWhiteLists"`
	PartialResultsImageFail *bool                                  `pulumi:"partialResultsImageFail"`
	Permission              *string                                `pulumi:"permission"`
	PolicySettings          *HostAssurancePolicyPolicySettings     `pulumi:"policySettings"`
	ReadOnly                *bool                                  `pulumi:"readOnly"`
	// List of registries.
	Registries            []string                           `pulumi:"registries"`
	Registry              *string                            `pulumi:"registry"`
	RequiredLabels        []HostAssurancePolicyRequiredLabel `pulumi:"requiredLabels"`
	RequiredLabelsEnabled *bool                              `pulumi:"requiredLabelsEnabled"`
	ScanMalwareInArchives *bool                              `pulumi:"scanMalwareInArchives"`
	ScanNfsMounts         *bool                              `pulumi:"scanNfsMounts"`
	ScanProcessMemory     *bool                              `pulumi:"scanProcessMemory"`
	// Indicates if scan should include sensitive data in the image.
	ScanSensitiveData   *bool `pulumi:"scanSensitiveData"`
	ScanWindowsRegistry *bool `pulumi:"scanWindowsRegistry"`
	// Indicates if scanning should include scap.
	ScapEnabled *bool `pulumi:"scapEnabled"`
	// List of SCAP user scripts for checks.
	ScapFiles []string                   `pulumi:"scapFiles"`
	Scopes    []HostAssurancePolicyScope `pulumi:"scopes"`
	// List of trusted images.
	TrustedBaseImages []HostAssurancePolicyTrustedBaseImage `pulumi:"trustedBaseImages"`
	// Indicates if list of trusted base images is relevant.
	TrustedBaseImagesEnabled    *bool `pulumi:"trustedBaseImagesEnabled"`
	VulnerabilityExploitability *bool `pulumi:"vulnerabilityExploitability"`
	VulnerabilityScoreRanges    []int `pulumi:"vulnerabilityScoreRanges"`
	// List of whitelisted licenses.
	WhitelistedLicenses []string `pulumi:"whitelistedLicenses"`
	// Indicates if license blacklist is relevant.
	WhitelistedLicensesEnabled *bool `pulumi:"whitelistedLicensesEnabled"`
	// Checks the host according to the Windows CIS benchmark (relevant for hosts running Windows).
	WindowsCisEnabled *bool `pulumi:"windowsCisEnabled"`
}

type HostAssurancePolicyState struct {
	// Aggregated vulnerability information.
	AggregatedVulnerability pulumi.StringMapInput
	// List of explicitly allowed images.
	AllowedImages     pulumi.StringArrayInput
	ApplicationScopes pulumi.StringArrayInput
	// What type of assurance policy is described.
	AssuranceType pulumi.StringPtrInput
	// Indicates if auditing for failures.
	AuditOnFailure pulumi.BoolPtrInput
	// Name of user account that created the policy.
	Author             pulumi.StringPtrInput
	AutoScanConfigured pulumi.BoolPtrInput
	AutoScanEnabled    pulumi.BoolPtrInput
	AutoScanTimes      HostAssurancePolicyAutoScanTimeArrayInput
	// List of function's forbidden permissions.
	BlacklistPermissions pulumi.StringArrayInput
	// Indicates if blacklist permissions is relevant.
	BlacklistPermissionsEnabled pulumi.BoolPtrInput
	// List of blacklisted licenses.
	BlacklistedLicenses pulumi.StringArrayInput
	// Indicates if license blacklist is relevant.
	BlacklistedLicensesEnabled pulumi.BoolPtrInput
	// Indicates if failed images are blocked.
	BlockFailed         pulumi.BoolPtrInput
	ControlExcludeNoFix pulumi.BoolPtrInput
	// List of Custom user scripts for checks.
	CustomChecks HostAssurancePolicyCustomCheckArrayInput
	// Indicates if scanning should include custom checks.
	CustomChecksEnabled   pulumi.BoolPtrInput
	CustomSeverity        pulumi.StringPtrInput
	CustomSeverityEnabled pulumi.BoolPtrInput
	// Indicates if CVEs blacklist is relevant.
	CvesBlackListEnabled pulumi.BoolPtrInput
	// List of CVEs blacklisted items.
	CvesBlackLists pulumi.StringArrayInput
	// Indicates if CVEs whitelist is relevant.
	CvesWhiteListEnabled pulumi.BoolPtrInput
	// List of cves whitelisted licenses
	CvesWhiteLists pulumi.StringArrayInput
	// Identifier of the cvss severity.
	CvssSeverity pulumi.StringPtrInput
	// Indicates if the cvss severity is scanned.
	CvssSeverityEnabled pulumi.BoolPtrInput
	// Indicates that policy should ignore cvss cases that do not have a known fix.
	CvssSeverityExcludeNoFix pulumi.BoolPtrInput
	Description              pulumi.StringPtrInput
	DisallowExploitTypes     pulumi.StringArrayInput
	// Indicates if malware should block the image.
	DisallowMalware pulumi.BoolPtrInput
	// Checks the host according to the Docker CIS benchmark, if Docker is found on the host.
	DockerCisEnabled pulumi.BoolPtrInput
	// Name of the container image.
	Domain                           pulumi.StringPtrInput
	DomainName                       pulumi.StringPtrInput
	DtaEnabled                       pulumi.BoolPtrInput
	DtaSeverity                      pulumi.StringPtrInput
	Enabled                          pulumi.BoolPtrInput
	Enforce                          pulumi.BoolPtrInput
	EnforceAfterDays                 pulumi.IntPtrInput
	EnforceExcessivePermissions      pulumi.BoolPtrInput
	ExceptionalMonitoredMalwarePaths pulumi.StringArrayInput
	ExcludeApplicationScopes         pulumi.StringArrayInput
	// Indicates if cicd failures will fail the image.
	FailCicd                         pulumi.BoolPtrInput
	ForbiddenLabels                  HostAssurancePolicyForbiddenLabelArrayInput
	ForbiddenLabelsEnabled           pulumi.BoolPtrInput
	ForceMicroenforcer               pulumi.BoolPtrInput
	FunctionIntegrityEnabled         pulumi.BoolPtrInput
	IgnoreBaseImageVln               pulumi.BoolPtrInput
	IgnoreRecentlyPublishedVln       pulumi.BoolPtrInput
	IgnoreRecentlyPublishedVlnPeriod pulumi.IntPtrInput
	// Indicates if risk resources are ignored.
	IgnoreRiskResourcesEnabled pulumi.BoolPtrInput
	// List of ignored risk resources.
	IgnoredRiskResources      pulumi.StringArrayInput
	IgnoredSensitiveResources pulumi.StringArrayInput
	// List of images.
	Images pulumi.StringArrayInput
	// Performs a Kubernetes CIS benchmark check for the host.
	KubeCisEnabled           pulumi.BoolPtrInput
	KubernetesControls       pulumi.StringArrayInput
	KubernetesControlsAvdIds pulumi.StringArrayInput
	KubernetesControlsNames  pulumi.StringArrayInput
	// List of labels.
	Labels          pulumi.StringArrayInput
	Lastupdate      pulumi.StringPtrInput
	LinuxCisEnabled pulumi.BoolPtrInput
	MalwareAction   pulumi.StringPtrInput
	// Value of allowed maximum score.
	MaximumScore pulumi.Float64PtrInput
	// Indicates if exceeding the maximum score is scanned.
	MaximumScoreEnabled pulumi.BoolPtrInput
	// Indicates that policy should ignore cases that do not have a known fix.
	MaximumScoreExcludeNoFix pulumi.BoolPtrInput
	MonitoredMalwarePaths    pulumi.StringArrayInput
	Name                     pulumi.StringPtrInput
	// Indicates if raise a warning for images that should only be run as root.
	OnlyNoneRootUsers         pulumi.BoolPtrInput
	OpenshiftHardeningEnabled pulumi.BoolPtrInput
	// Indicates if packages blacklist is relevant.
	PackagesBlackListEnabled pulumi.BoolPtrInput
	// List of blacklisted images.
	PackagesBlackLists HostAssurancePolicyPackagesBlackListArrayInput
	// Indicates if packages whitelist is relevant.
	PackagesWhiteListEnabled pulumi.BoolPtrInput
	// List of whitelisted images.
	PackagesWhiteLists      HostAssurancePolicyPackagesWhiteListArrayInput
	PartialResultsImageFail pulumi.BoolPtrInput
	Permission              pulumi.StringPtrInput
	PolicySettings          HostAssurancePolicyPolicySettingsPtrInput
	ReadOnly                pulumi.BoolPtrInput
	// List of registries.
	Registries            pulumi.StringArrayInput
	Registry              pulumi.StringPtrInput
	RequiredLabels        HostAssurancePolicyRequiredLabelArrayInput
	RequiredLabelsEnabled pulumi.BoolPtrInput
	ScanMalwareInArchives pulumi.BoolPtrInput
	ScanNfsMounts         pulumi.BoolPtrInput
	ScanProcessMemory     pulumi.BoolPtrInput
	// Indicates if scan should include sensitive data in the image.
	ScanSensitiveData   pulumi.BoolPtrInput
	ScanWindowsRegistry pulumi.BoolPtrInput
	// Indicates if scanning should include scap.
	ScapEnabled pulumi.BoolPtrInput
	// List of SCAP user scripts for checks.
	ScapFiles pulumi.StringArrayInput
	Scopes    HostAssurancePolicyScopeArrayInput
	// List of trusted images.
	TrustedBaseImages HostAssurancePolicyTrustedBaseImageArrayInput
	// Indicates if list of trusted base images is relevant.
	TrustedBaseImagesEnabled    pulumi.BoolPtrInput
	VulnerabilityExploitability pulumi.BoolPtrInput
	VulnerabilityScoreRanges    pulumi.IntArrayInput
	// List of whitelisted licenses.
	WhitelistedLicenses pulumi.StringArrayInput
	// Indicates if license blacklist is relevant.
	WhitelistedLicensesEnabled pulumi.BoolPtrInput
	// Checks the host according to the Windows CIS benchmark (relevant for hosts running Windows).
	WindowsCisEnabled pulumi.BoolPtrInput
}

func (HostAssurancePolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*hostAssurancePolicyState)(nil)).Elem()
}

type hostAssurancePolicyArgs struct {
	// Aggregated vulnerability information.
	AggregatedVulnerability map[string]string `pulumi:"aggregatedVulnerability"`
	// List of explicitly allowed images.
	AllowedImages     []string `pulumi:"allowedImages"`
	ApplicationScopes []string `pulumi:"applicationScopes"`
	// What type of assurance policy is described.
	AssuranceType *string `pulumi:"assuranceType"`
	// Indicates if auditing for failures.
	AuditOnFailure *bool `pulumi:"auditOnFailure"`
	// Name of user account that created the policy.
	Author             *string                           `pulumi:"author"`
	AutoScanConfigured *bool                             `pulumi:"autoScanConfigured"`
	AutoScanEnabled    *bool                             `pulumi:"autoScanEnabled"`
	AutoScanTimes      []HostAssurancePolicyAutoScanTime `pulumi:"autoScanTimes"`
	// List of function's forbidden permissions.
	BlacklistPermissions []string `pulumi:"blacklistPermissions"`
	// Indicates if blacklist permissions is relevant.
	BlacklistPermissionsEnabled *bool `pulumi:"blacklistPermissionsEnabled"`
	// List of blacklisted licenses.
	BlacklistedLicenses []string `pulumi:"blacklistedLicenses"`
	// Indicates if license blacklist is relevant.
	BlacklistedLicensesEnabled *bool `pulumi:"blacklistedLicensesEnabled"`
	// Indicates if failed images are blocked.
	BlockFailed         *bool `pulumi:"blockFailed"`
	ControlExcludeNoFix *bool `pulumi:"controlExcludeNoFix"`
	// List of Custom user scripts for checks.
	CustomChecks []HostAssurancePolicyCustomCheck `pulumi:"customChecks"`
	// Indicates if scanning should include custom checks.
	CustomChecksEnabled   *bool   `pulumi:"customChecksEnabled"`
	CustomSeverity        *string `pulumi:"customSeverity"`
	CustomSeverityEnabled *bool   `pulumi:"customSeverityEnabled"`
	// Indicates if CVEs blacklist is relevant.
	CvesBlackListEnabled *bool `pulumi:"cvesBlackListEnabled"`
	// List of CVEs blacklisted items.
	CvesBlackLists []string `pulumi:"cvesBlackLists"`
	// Indicates if CVEs whitelist is relevant.
	CvesWhiteListEnabled *bool `pulumi:"cvesWhiteListEnabled"`
	// List of cves whitelisted licenses
	CvesWhiteLists []string `pulumi:"cvesWhiteLists"`
	// Identifier of the cvss severity.
	CvssSeverity *string `pulumi:"cvssSeverity"`
	// Indicates if the cvss severity is scanned.
	CvssSeverityEnabled *bool `pulumi:"cvssSeverityEnabled"`
	// Indicates that policy should ignore cvss cases that do not have a known fix.
	CvssSeverityExcludeNoFix *bool    `pulumi:"cvssSeverityExcludeNoFix"`
	Description              *string  `pulumi:"description"`
	DisallowExploitTypes     []string `pulumi:"disallowExploitTypes"`
	// Indicates if malware should block the image.
	DisallowMalware *bool `pulumi:"disallowMalware"`
	// Checks the host according to the Docker CIS benchmark, if Docker is found on the host.
	DockerCisEnabled *bool `pulumi:"dockerCisEnabled"`
	// Name of the container image.
	Domain                           *string  `pulumi:"domain"`
	DomainName                       *string  `pulumi:"domainName"`
	DtaEnabled                       *bool    `pulumi:"dtaEnabled"`
	DtaSeverity                      *string  `pulumi:"dtaSeverity"`
	Enabled                          *bool    `pulumi:"enabled"`
	Enforce                          *bool    `pulumi:"enforce"`
	EnforceAfterDays                 *int     `pulumi:"enforceAfterDays"`
	EnforceExcessivePermissions      *bool    `pulumi:"enforceExcessivePermissions"`
	ExceptionalMonitoredMalwarePaths []string `pulumi:"exceptionalMonitoredMalwarePaths"`
	ExcludeApplicationScopes         []string `pulumi:"excludeApplicationScopes"`
	// Indicates if cicd failures will fail the image.
	FailCicd                         *bool                               `pulumi:"failCicd"`
	ForbiddenLabels                  []HostAssurancePolicyForbiddenLabel `pulumi:"forbiddenLabels"`
	ForbiddenLabelsEnabled           *bool                               `pulumi:"forbiddenLabelsEnabled"`
	ForceMicroenforcer               *bool                               `pulumi:"forceMicroenforcer"`
	FunctionIntegrityEnabled         *bool                               `pulumi:"functionIntegrityEnabled"`
	IgnoreBaseImageVln               *bool                               `pulumi:"ignoreBaseImageVln"`
	IgnoreRecentlyPublishedVln       *bool                               `pulumi:"ignoreRecentlyPublishedVln"`
	IgnoreRecentlyPublishedVlnPeriod *int                                `pulumi:"ignoreRecentlyPublishedVlnPeriod"`
	// Indicates if risk resources are ignored.
	IgnoreRiskResourcesEnabled *bool `pulumi:"ignoreRiskResourcesEnabled"`
	// List of ignored risk resources.
	IgnoredRiskResources      []string `pulumi:"ignoredRiskResources"`
	IgnoredSensitiveResources []string `pulumi:"ignoredSensitiveResources"`
	// List of images.
	Images []string `pulumi:"images"`
	// Performs a Kubernetes CIS benchmark check for the host.
	KubeCisEnabled           *bool    `pulumi:"kubeCisEnabled"`
	KubernetesControls       []string `pulumi:"kubernetesControls"`
	KubernetesControlsAvdIds []string `pulumi:"kubernetesControlsAvdIds"`
	KubernetesControlsNames  []string `pulumi:"kubernetesControlsNames"`
	// List of labels.
	Labels          []string `pulumi:"labels"`
	Lastupdate      *string  `pulumi:"lastupdate"`
	LinuxCisEnabled *bool    `pulumi:"linuxCisEnabled"`
	MalwareAction   *string  `pulumi:"malwareAction"`
	// Value of allowed maximum score.
	MaximumScore *float64 `pulumi:"maximumScore"`
	// Indicates if exceeding the maximum score is scanned.
	MaximumScoreEnabled *bool `pulumi:"maximumScoreEnabled"`
	// Indicates that policy should ignore cases that do not have a known fix.
	MaximumScoreExcludeNoFix *bool    `pulumi:"maximumScoreExcludeNoFix"`
	MonitoredMalwarePaths    []string `pulumi:"monitoredMalwarePaths"`
	Name                     *string  `pulumi:"name"`
	// Indicates if raise a warning for images that should only be run as root.
	OnlyNoneRootUsers         *bool `pulumi:"onlyNoneRootUsers"`
	OpenshiftHardeningEnabled *bool `pulumi:"openshiftHardeningEnabled"`
	// Indicates if packages blacklist is relevant.
	PackagesBlackListEnabled *bool `pulumi:"packagesBlackListEnabled"`
	// List of blacklisted images.
	PackagesBlackLists []HostAssurancePolicyPackagesBlackList `pulumi:"packagesBlackLists"`
	// Indicates if packages whitelist is relevant.
	PackagesWhiteListEnabled *bool `pulumi:"packagesWhiteListEnabled"`
	// List of whitelisted images.
	PackagesWhiteLists      []HostAssurancePolicyPackagesWhiteList `pulumi:"packagesWhiteLists"`
	PartialResultsImageFail *bool                                  `pulumi:"partialResultsImageFail"`
	Permission              *string                                `pulumi:"permission"`
	PolicySettings          *HostAssurancePolicyPolicySettings     `pulumi:"policySettings"`
	ReadOnly                *bool                                  `pulumi:"readOnly"`
	// List of registries.
	Registries            []string                           `pulumi:"registries"`
	Registry              *string                            `pulumi:"registry"`
	RequiredLabels        []HostAssurancePolicyRequiredLabel `pulumi:"requiredLabels"`
	RequiredLabelsEnabled *bool                              `pulumi:"requiredLabelsEnabled"`
	ScanMalwareInArchives *bool                              `pulumi:"scanMalwareInArchives"`
	ScanNfsMounts         *bool                              `pulumi:"scanNfsMounts"`
	ScanProcessMemory     *bool                              `pulumi:"scanProcessMemory"`
	// Indicates if scan should include sensitive data in the image.
	ScanSensitiveData   *bool `pulumi:"scanSensitiveData"`
	ScanWindowsRegistry *bool `pulumi:"scanWindowsRegistry"`
	// Indicates if scanning should include scap.
	ScapEnabled *bool `pulumi:"scapEnabled"`
	// List of SCAP user scripts for checks.
	ScapFiles []string                   `pulumi:"scapFiles"`
	Scopes    []HostAssurancePolicyScope `pulumi:"scopes"`
	// List of trusted images.
	TrustedBaseImages []HostAssurancePolicyTrustedBaseImage `pulumi:"trustedBaseImages"`
	// Indicates if list of trusted base images is relevant.
	TrustedBaseImagesEnabled    *bool `pulumi:"trustedBaseImagesEnabled"`
	VulnerabilityExploitability *bool `pulumi:"vulnerabilityExploitability"`
	VulnerabilityScoreRanges    []int `pulumi:"vulnerabilityScoreRanges"`
	// List of whitelisted licenses.
	WhitelistedLicenses []string `pulumi:"whitelistedLicenses"`
	// Indicates if license blacklist is relevant.
	WhitelistedLicensesEnabled *bool `pulumi:"whitelistedLicensesEnabled"`
	// Checks the host according to the Windows CIS benchmark (relevant for hosts running Windows).
	WindowsCisEnabled *bool `pulumi:"windowsCisEnabled"`
}

// The set of arguments for constructing a HostAssurancePolicy resource.
type HostAssurancePolicyArgs struct {
	// Aggregated vulnerability information.
	AggregatedVulnerability pulumi.StringMapInput
	// List of explicitly allowed images.
	AllowedImages     pulumi.StringArrayInput
	ApplicationScopes pulumi.StringArrayInput
	// What type of assurance policy is described.
	AssuranceType pulumi.StringPtrInput
	// Indicates if auditing for failures.
	AuditOnFailure pulumi.BoolPtrInput
	// Name of user account that created the policy.
	Author             pulumi.StringPtrInput
	AutoScanConfigured pulumi.BoolPtrInput
	AutoScanEnabled    pulumi.BoolPtrInput
	AutoScanTimes      HostAssurancePolicyAutoScanTimeArrayInput
	// List of function's forbidden permissions.
	BlacklistPermissions pulumi.StringArrayInput
	// Indicates if blacklist permissions is relevant.
	BlacklistPermissionsEnabled pulumi.BoolPtrInput
	// List of blacklisted licenses.
	BlacklistedLicenses pulumi.StringArrayInput
	// Indicates if license blacklist is relevant.
	BlacklistedLicensesEnabled pulumi.BoolPtrInput
	// Indicates if failed images are blocked.
	BlockFailed         pulumi.BoolPtrInput
	ControlExcludeNoFix pulumi.BoolPtrInput
	// List of Custom user scripts for checks.
	CustomChecks HostAssurancePolicyCustomCheckArrayInput
	// Indicates if scanning should include custom checks.
	CustomChecksEnabled   pulumi.BoolPtrInput
	CustomSeverity        pulumi.StringPtrInput
	CustomSeverityEnabled pulumi.BoolPtrInput
	// Indicates if CVEs blacklist is relevant.
	CvesBlackListEnabled pulumi.BoolPtrInput
	// List of CVEs blacklisted items.
	CvesBlackLists pulumi.StringArrayInput
	// Indicates if CVEs whitelist is relevant.
	CvesWhiteListEnabled pulumi.BoolPtrInput
	// List of cves whitelisted licenses
	CvesWhiteLists pulumi.StringArrayInput
	// Identifier of the cvss severity.
	CvssSeverity pulumi.StringPtrInput
	// Indicates if the cvss severity is scanned.
	CvssSeverityEnabled pulumi.BoolPtrInput
	// Indicates that policy should ignore cvss cases that do not have a known fix.
	CvssSeverityExcludeNoFix pulumi.BoolPtrInput
	Description              pulumi.StringPtrInput
	DisallowExploitTypes     pulumi.StringArrayInput
	// Indicates if malware should block the image.
	DisallowMalware pulumi.BoolPtrInput
	// Checks the host according to the Docker CIS benchmark, if Docker is found on the host.
	DockerCisEnabled pulumi.BoolPtrInput
	// Name of the container image.
	Domain                           pulumi.StringPtrInput
	DomainName                       pulumi.StringPtrInput
	DtaEnabled                       pulumi.BoolPtrInput
	DtaSeverity                      pulumi.StringPtrInput
	Enabled                          pulumi.BoolPtrInput
	Enforce                          pulumi.BoolPtrInput
	EnforceAfterDays                 pulumi.IntPtrInput
	EnforceExcessivePermissions      pulumi.BoolPtrInput
	ExceptionalMonitoredMalwarePaths pulumi.StringArrayInput
	ExcludeApplicationScopes         pulumi.StringArrayInput
	// Indicates if cicd failures will fail the image.
	FailCicd                         pulumi.BoolPtrInput
	ForbiddenLabels                  HostAssurancePolicyForbiddenLabelArrayInput
	ForbiddenLabelsEnabled           pulumi.BoolPtrInput
	ForceMicroenforcer               pulumi.BoolPtrInput
	FunctionIntegrityEnabled         pulumi.BoolPtrInput
	IgnoreBaseImageVln               pulumi.BoolPtrInput
	IgnoreRecentlyPublishedVln       pulumi.BoolPtrInput
	IgnoreRecentlyPublishedVlnPeriod pulumi.IntPtrInput
	// Indicates if risk resources are ignored.
	IgnoreRiskResourcesEnabled pulumi.BoolPtrInput
	// List of ignored risk resources.
	IgnoredRiskResources      pulumi.StringArrayInput
	IgnoredSensitiveResources pulumi.StringArrayInput
	// List of images.
	Images pulumi.StringArrayInput
	// Performs a Kubernetes CIS benchmark check for the host.
	KubeCisEnabled           pulumi.BoolPtrInput
	KubernetesControls       pulumi.StringArrayInput
	KubernetesControlsAvdIds pulumi.StringArrayInput
	KubernetesControlsNames  pulumi.StringArrayInput
	// List of labels.
	Labels          pulumi.StringArrayInput
	Lastupdate      pulumi.StringPtrInput
	LinuxCisEnabled pulumi.BoolPtrInput
	MalwareAction   pulumi.StringPtrInput
	// Value of allowed maximum score.
	MaximumScore pulumi.Float64PtrInput
	// Indicates if exceeding the maximum score is scanned.
	MaximumScoreEnabled pulumi.BoolPtrInput
	// Indicates that policy should ignore cases that do not have a known fix.
	MaximumScoreExcludeNoFix pulumi.BoolPtrInput
	MonitoredMalwarePaths    pulumi.StringArrayInput
	Name                     pulumi.StringPtrInput
	// Indicates if raise a warning for images that should only be run as root.
	OnlyNoneRootUsers         pulumi.BoolPtrInput
	OpenshiftHardeningEnabled pulumi.BoolPtrInput
	// Indicates if packages blacklist is relevant.
	PackagesBlackListEnabled pulumi.BoolPtrInput
	// List of blacklisted images.
	PackagesBlackLists HostAssurancePolicyPackagesBlackListArrayInput
	// Indicates if packages whitelist is relevant.
	PackagesWhiteListEnabled pulumi.BoolPtrInput
	// List of whitelisted images.
	PackagesWhiteLists      HostAssurancePolicyPackagesWhiteListArrayInput
	PartialResultsImageFail pulumi.BoolPtrInput
	Permission              pulumi.StringPtrInput
	PolicySettings          HostAssurancePolicyPolicySettingsPtrInput
	ReadOnly                pulumi.BoolPtrInput
	// List of registries.
	Registries            pulumi.StringArrayInput
	Registry              pulumi.StringPtrInput
	RequiredLabels        HostAssurancePolicyRequiredLabelArrayInput
	RequiredLabelsEnabled pulumi.BoolPtrInput
	ScanMalwareInArchives pulumi.BoolPtrInput
	ScanNfsMounts         pulumi.BoolPtrInput
	ScanProcessMemory     pulumi.BoolPtrInput
	// Indicates if scan should include sensitive data in the image.
	ScanSensitiveData   pulumi.BoolPtrInput
	ScanWindowsRegistry pulumi.BoolPtrInput
	// Indicates if scanning should include scap.
	ScapEnabled pulumi.BoolPtrInput
	// List of SCAP user scripts for checks.
	ScapFiles pulumi.StringArrayInput
	Scopes    HostAssurancePolicyScopeArrayInput
	// List of trusted images.
	TrustedBaseImages HostAssurancePolicyTrustedBaseImageArrayInput
	// Indicates if list of trusted base images is relevant.
	TrustedBaseImagesEnabled    pulumi.BoolPtrInput
	VulnerabilityExploitability pulumi.BoolPtrInput
	VulnerabilityScoreRanges    pulumi.IntArrayInput
	// List of whitelisted licenses.
	WhitelistedLicenses pulumi.StringArrayInput
	// Indicates if license blacklist is relevant.
	WhitelistedLicensesEnabled pulumi.BoolPtrInput
	// Checks the host according to the Windows CIS benchmark (relevant for hosts running Windows).
	WindowsCisEnabled pulumi.BoolPtrInput
}

func (HostAssurancePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hostAssurancePolicyArgs)(nil)).Elem()
}

type HostAssurancePolicyInput interface {
	pulumi.Input

	ToHostAssurancePolicyOutput() HostAssurancePolicyOutput
	ToHostAssurancePolicyOutputWithContext(ctx context.Context) HostAssurancePolicyOutput
}

func (*HostAssurancePolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**HostAssurancePolicy)(nil)).Elem()
}

func (i *HostAssurancePolicy) ToHostAssurancePolicyOutput() HostAssurancePolicyOutput {
	return i.ToHostAssurancePolicyOutputWithContext(context.Background())
}

func (i *HostAssurancePolicy) ToHostAssurancePolicyOutputWithContext(ctx context.Context) HostAssurancePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostAssurancePolicyOutput)
}

// HostAssurancePolicyArrayInput is an input type that accepts HostAssurancePolicyArray and HostAssurancePolicyArrayOutput values.
// You can construct a concrete instance of `HostAssurancePolicyArrayInput` via:
//
//	HostAssurancePolicyArray{ HostAssurancePolicyArgs{...} }
type HostAssurancePolicyArrayInput interface {
	pulumi.Input

	ToHostAssurancePolicyArrayOutput() HostAssurancePolicyArrayOutput
	ToHostAssurancePolicyArrayOutputWithContext(context.Context) HostAssurancePolicyArrayOutput
}

type HostAssurancePolicyArray []HostAssurancePolicyInput

func (HostAssurancePolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HostAssurancePolicy)(nil)).Elem()
}

func (i HostAssurancePolicyArray) ToHostAssurancePolicyArrayOutput() HostAssurancePolicyArrayOutput {
	return i.ToHostAssurancePolicyArrayOutputWithContext(context.Background())
}

func (i HostAssurancePolicyArray) ToHostAssurancePolicyArrayOutputWithContext(ctx context.Context) HostAssurancePolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostAssurancePolicyArrayOutput)
}

// HostAssurancePolicyMapInput is an input type that accepts HostAssurancePolicyMap and HostAssurancePolicyMapOutput values.
// You can construct a concrete instance of `HostAssurancePolicyMapInput` via:
//
//	HostAssurancePolicyMap{ "key": HostAssurancePolicyArgs{...} }
type HostAssurancePolicyMapInput interface {
	pulumi.Input

	ToHostAssurancePolicyMapOutput() HostAssurancePolicyMapOutput
	ToHostAssurancePolicyMapOutputWithContext(context.Context) HostAssurancePolicyMapOutput
}

type HostAssurancePolicyMap map[string]HostAssurancePolicyInput

func (HostAssurancePolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HostAssurancePolicy)(nil)).Elem()
}

func (i HostAssurancePolicyMap) ToHostAssurancePolicyMapOutput() HostAssurancePolicyMapOutput {
	return i.ToHostAssurancePolicyMapOutputWithContext(context.Background())
}

func (i HostAssurancePolicyMap) ToHostAssurancePolicyMapOutputWithContext(ctx context.Context) HostAssurancePolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostAssurancePolicyMapOutput)
}

type HostAssurancePolicyOutput struct{ *pulumi.OutputState }

func (HostAssurancePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HostAssurancePolicy)(nil)).Elem()
}

func (o HostAssurancePolicyOutput) ToHostAssurancePolicyOutput() HostAssurancePolicyOutput {
	return o
}

func (o HostAssurancePolicyOutput) ToHostAssurancePolicyOutputWithContext(ctx context.Context) HostAssurancePolicyOutput {
	return o
}

// Aggregated vulnerability information.
func (o HostAssurancePolicyOutput) AggregatedVulnerability() pulumi.StringMapOutput {
	return o.ApplyT(func(v *HostAssurancePolicy) pulumi.StringMapOutput { return v.AggregatedVulnerability }).(pulumi.StringMapOutput)
}

// List of explicitly allowed images.
func (o HostAssurancePolicyOutput) AllowedImages() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HostAssurancePolicy) pulumi.StringArrayOutput { return v.AllowedImages }).(pulumi.StringArrayOutput)
}

func (o HostAssurancePolicyOutput) ApplicationScopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HostAssurancePolicy) pulumi.StringArrayOutput { return v.ApplicationScopes }).(pulumi.StringArrayOutput)
}

// What type of assurance policy is described.
func (o HostAssurancePolicyOutput) AssuranceType() pulumi.StringOutput {
	return o.ApplyT(func(v *HostAssurancePolicy) pulumi.StringOutput { return v.AssuranceType }).(pulumi.StringOutput)
}

// Indicates if auditing for failures.
func (o HostAssurancePolicyOutput) AuditOnFailure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolicy) pulumi.BoolPtrOutput { return v.AuditOnFailure }).(pulumi.BoolPtrOutput)
}

// Name of user account that created the policy.
func (o HostAssurancePolicyOutput) Author() pulumi.StringOutput {
	return o.ApplyT(func(v *HostAssurancePolicy) pulumi.StringOutput { return v.Author }).(pulumi.StringOutput)
}

func (o HostAssurancePolicyOutput) AutoScanConfigured() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolicy) pulumi.BoolPtrOutput { return v.AutoScanConfigured }).(pulumi.BoolPtrOutput)
}

func (o HostAssurancePolicyOutput) AutoScanEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolicy) pulumi.BoolPtrOutput { return v.AutoScanEnabled }).(pulumi.BoolPtrOutput)
}

func (o HostAssurancePolicyOutput) AutoScanTimes() HostAssurancePolicyAutoScanTimeArrayOutput {
	return o.ApplyT(func(v *HostAssurancePolicy) HostAssurancePolicyAutoScanTimeArrayOutput { return v.AutoScanTimes }).(HostAssurancePolicyAutoScanTimeArrayOutput)
}

// List of function's forbidden permissions.
func (o HostAssurancePolicyOutput) BlacklistPermissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HostAssurancePolicy) pulumi.StringArrayOutput { return v.BlacklistPermissions }).(pulumi.StringArrayOutput)
}

// Indicates if blacklist permissions is relevant.
func (o HostAssurancePolicyOutput) BlacklistPermissionsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolicy) pulumi.BoolPtrOutput { return v.BlacklistPermissionsEnabled }).(pulumi.BoolPtrOutput)
}

// List of blacklisted licenses.
func (o HostAssurancePolicyOutput) BlacklistedLicenses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HostAssurancePolicy) pulumi.StringArrayOutput { return v.BlacklistedLicenses }).(pulumi.StringArrayOutput)
}

// Indicates if license blacklist is relevant.
func (o HostAssurancePolicyOutput) BlacklistedLicensesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolicy) pulumi.BoolPtrOutput { return v.BlacklistedLicensesEnabled }).(pulumi.BoolPtrOutput)
}

// Indicates if failed images are blocked.
func (o HostAssurancePolicyOutput) BlockFailed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolicy) pulumi.BoolPtrOutput { return v.BlockFailed }).(pulumi.BoolPtrOutput)
}

func (o HostAssurancePolicyOutput) ControlExcludeNoFix() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolicy) pulumi.BoolPtrOutput { return v.ControlExcludeNoFix }).(pulumi.BoolPtrOutput)
}

// List of Custom user scripts for checks.
func (o HostAssurancePolicyOutput) CustomChecks() HostAssurancePolicyCustomCheckArrayOutput {
	return o.ApplyT(func(v *HostAssurancePolicy) HostAssurancePolicyCustomCheckArrayOutput { return v.CustomChecks }).(HostAssurancePolicyCustomCheckArrayOutput)
}

// Indicates if scanning should include custom checks.
func (o HostAssurancePolicyOutput) CustomChecksEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolicy) pulumi.BoolPtrOutput { return v.CustomChecksEnabled }).(pulumi.BoolPtrOutput)
}

func (o HostAssurancePolicyOutput) CustomSeverity() pulumi.StringOutput {
	return o.ApplyT(func(v *HostAssurancePolicy) pulumi.StringOutput { return v.CustomSeverity }).(pulumi.StringOutput)
}

func (o HostAssurancePolicyOutput) CustomSeverityEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolicy) pulumi.BoolPtrOutput { return v.CustomSeverityEnabled }).(pulumi.BoolPtrOutput)
}

// Indicates if CVEs blacklist is relevant.
func (o HostAssurancePolicyOutput) CvesBlackListEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolicy) pulumi.BoolPtrOutput { return v.CvesBlackListEnabled }).(pulumi.BoolPtrOutput)
}

// List of CVEs blacklisted items.
func (o HostAssurancePolicyOutput) CvesBlackLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HostAssurancePolicy) pulumi.StringArrayOutput { return v.CvesBlackLists }).(pulumi.StringArrayOutput)
}

// Indicates if CVEs whitelist is relevant.
func (o HostAssurancePolicyOutput) CvesWhiteListEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolicy) pulumi.BoolPtrOutput { return v.CvesWhiteListEnabled }).(pulumi.BoolPtrOutput)
}

// List of cves whitelisted licenses
func (o HostAssurancePolicyOutput) CvesWhiteLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HostAssurancePolicy) pulumi.StringArrayOutput { return v.CvesWhiteLists }).(pulumi.StringArrayOutput)
}

// Identifier of the cvss severity.
func (o HostAssurancePolicyOutput) CvssSeverity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolicy) pulumi.StringPtrOutput { return v.CvssSeverity }).(pulumi.StringPtrOutput)
}

// Indicates if the cvss severity is scanned.
func (o HostAssurancePolicyOutput) CvssSeverityEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolicy) pulumi.BoolPtrOutput { return v.CvssSeverityEnabled }).(pulumi.BoolPtrOutput)
}

// Indicates that policy should ignore cvss cases that do not have a known fix.
func (o HostAssurancePolicyOutput) CvssSeverityExcludeNoFix() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolicy) pulumi.BoolPtrOutput { return v.CvssSeverityExcludeNoFix }).(pulumi.BoolPtrOutput)
}

func (o HostAssurancePolicyOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolicy) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o HostAssurancePolicyOutput) DisallowExploitTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HostAssurancePolicy) pulumi.StringArrayOutput { return v.DisallowExploitTypes }).(pulumi.StringArrayOutput)
}

// Indicates if malware should block the image.
func (o HostAssurancePolicyOutput) DisallowMalware() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolicy) pulumi.BoolPtrOutput { return v.DisallowMalware }).(pulumi.BoolPtrOutput)
}

// Checks the host according to the Docker CIS benchmark, if Docker is found on the host.
func (o HostAssurancePolicyOutput) DockerCisEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolicy) pulumi.BoolPtrOutput { return v.DockerCisEnabled }).(pulumi.BoolPtrOutput)
}

// Name of the container image.
func (o HostAssurancePolicyOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolicy) pulumi.StringPtrOutput { return v.Domain }).(pulumi.StringPtrOutput)
}

func (o HostAssurancePolicyOutput) DomainName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolicy) pulumi.StringPtrOutput { return v.DomainName }).(pulumi.StringPtrOutput)
}

func (o HostAssurancePolicyOutput) DtaEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolicy) pulumi.BoolPtrOutput { return v.DtaEnabled }).(pulumi.BoolPtrOutput)
}

func (o HostAssurancePolicyOutput) DtaSeverity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolicy) pulumi.StringPtrOutput { return v.DtaSeverity }).(pulumi.StringPtrOutput)
}

func (o HostAssurancePolicyOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolicy) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o HostAssurancePolicyOutput) Enforce() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolicy) pulumi.BoolPtrOutput { return v.Enforce }).(pulumi.BoolPtrOutput)
}

func (o HostAssurancePolicyOutput) EnforceAfterDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolicy) pulumi.IntPtrOutput { return v.EnforceAfterDays }).(pulumi.IntPtrOutput)
}

func (o HostAssurancePolicyOutput) EnforceExcessivePermissions() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolicy) pulumi.BoolPtrOutput { return v.EnforceExcessivePermissions }).(pulumi.BoolPtrOutput)
}

func (o HostAssurancePolicyOutput) ExceptionalMonitoredMalwarePaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HostAssurancePolicy) pulumi.StringArrayOutput { return v.ExceptionalMonitoredMalwarePaths }).(pulumi.StringArrayOutput)
}

func (o HostAssurancePolicyOutput) ExcludeApplicationScopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HostAssurancePolicy) pulumi.StringArrayOutput { return v.ExcludeApplicationScopes }).(pulumi.StringArrayOutput)
}

// Indicates if cicd failures will fail the image.
func (o HostAssurancePolicyOutput) FailCicd() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolicy) pulumi.BoolPtrOutput { return v.FailCicd }).(pulumi.BoolPtrOutput)
}

func (o HostAssurancePolicyOutput) ForbiddenLabels() HostAssurancePolicyForbiddenLabelArrayOutput {
	return o.ApplyT(func(v *HostAssurancePolicy) HostAssurancePolicyForbiddenLabelArrayOutput { return v.ForbiddenLabels }).(HostAssurancePolicyForbiddenLabelArrayOutput)
}

func (o HostAssurancePolicyOutput) ForbiddenLabelsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolicy) pulumi.BoolPtrOutput { return v.ForbiddenLabelsEnabled }).(pulumi.BoolPtrOutput)
}

func (o HostAssurancePolicyOutput) ForceMicroenforcer() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolicy) pulumi.BoolPtrOutput { return v.ForceMicroenforcer }).(pulumi.BoolPtrOutput)
}

func (o HostAssurancePolicyOutput) FunctionIntegrityEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolicy) pulumi.BoolPtrOutput { return v.FunctionIntegrityEnabled }).(pulumi.BoolPtrOutput)
}

func (o HostAssurancePolicyOutput) IgnoreBaseImageVln() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolicy) pulumi.BoolPtrOutput { return v.IgnoreBaseImageVln }).(pulumi.BoolPtrOutput)
}

func (o HostAssurancePolicyOutput) IgnoreRecentlyPublishedVln() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolicy) pulumi.BoolPtrOutput { return v.IgnoreRecentlyPublishedVln }).(pulumi.BoolPtrOutput)
}

func (o HostAssurancePolicyOutput) IgnoreRecentlyPublishedVlnPeriod() pulumi.IntOutput {
	return o.ApplyT(func(v *HostAssurancePolicy) pulumi.IntOutput { return v.IgnoreRecentlyPublishedVlnPeriod }).(pulumi.IntOutput)
}

// Indicates if risk resources are ignored.
func (o HostAssurancePolicyOutput) IgnoreRiskResourcesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolicy) pulumi.BoolPtrOutput { return v.IgnoreRiskResourcesEnabled }).(pulumi.BoolPtrOutput)
}

// List of ignored risk resources.
func (o HostAssurancePolicyOutput) IgnoredRiskResources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HostAssurancePolicy) pulumi.StringArrayOutput { return v.IgnoredRiskResources }).(pulumi.StringArrayOutput)
}

func (o HostAssurancePolicyOutput) IgnoredSensitiveResources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HostAssurancePolicy) pulumi.StringArrayOutput { return v.IgnoredSensitiveResources }).(pulumi.StringArrayOutput)
}

// List of images.
func (o HostAssurancePolicyOutput) Images() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HostAssurancePolicy) pulumi.StringArrayOutput { return v.Images }).(pulumi.StringArrayOutput)
}

// Performs a Kubernetes CIS benchmark check for the host.
func (o HostAssurancePolicyOutput) KubeCisEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolicy) pulumi.BoolPtrOutput { return v.KubeCisEnabled }).(pulumi.BoolPtrOutput)
}

func (o HostAssurancePolicyOutput) KubernetesControls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HostAssurancePolicy) pulumi.StringArrayOutput { return v.KubernetesControls }).(pulumi.StringArrayOutput)
}

func (o HostAssurancePolicyOutput) KubernetesControlsAvdIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HostAssurancePolicy) pulumi.StringArrayOutput { return v.KubernetesControlsAvdIds }).(pulumi.StringArrayOutput)
}

func (o HostAssurancePolicyOutput) KubernetesControlsNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HostAssurancePolicy) pulumi.StringArrayOutput { return v.KubernetesControlsNames }).(pulumi.StringArrayOutput)
}

// List of labels.
func (o HostAssurancePolicyOutput) Labels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HostAssurancePolicy) pulumi.StringArrayOutput { return v.Labels }).(pulumi.StringArrayOutput)
}

func (o HostAssurancePolicyOutput) Lastupdate() pulumi.StringOutput {
	return o.ApplyT(func(v *HostAssurancePolicy) pulumi.StringOutput { return v.Lastupdate }).(pulumi.StringOutput)
}

func (o HostAssurancePolicyOutput) LinuxCisEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolicy) pulumi.BoolPtrOutput { return v.LinuxCisEnabled }).(pulumi.BoolPtrOutput)
}

func (o HostAssurancePolicyOutput) MalwareAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolicy) pulumi.StringPtrOutput { return v.MalwareAction }).(pulumi.StringPtrOutput)
}

// Value of allowed maximum score.
func (o HostAssurancePolicyOutput) MaximumScore() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *HostAssurancePolicy) pulumi.Float64PtrOutput { return v.MaximumScore }).(pulumi.Float64PtrOutput)
}

// Indicates if exceeding the maximum score is scanned.
func (o HostAssurancePolicyOutput) MaximumScoreEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolicy) pulumi.BoolPtrOutput { return v.MaximumScoreEnabled }).(pulumi.BoolPtrOutput)
}

// Indicates that policy should ignore cases that do not have a known fix.
func (o HostAssurancePolicyOutput) MaximumScoreExcludeNoFix() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolicy) pulumi.BoolPtrOutput { return v.MaximumScoreExcludeNoFix }).(pulumi.BoolPtrOutput)
}

func (o HostAssurancePolicyOutput) MonitoredMalwarePaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HostAssurancePolicy) pulumi.StringArrayOutput { return v.MonitoredMalwarePaths }).(pulumi.StringArrayOutput)
}

func (o HostAssurancePolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *HostAssurancePolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Indicates if raise a warning for images that should only be run as root.
func (o HostAssurancePolicyOutput) OnlyNoneRootUsers() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolicy) pulumi.BoolPtrOutput { return v.OnlyNoneRootUsers }).(pulumi.BoolPtrOutput)
}

func (o HostAssurancePolicyOutput) OpenshiftHardeningEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolicy) pulumi.BoolPtrOutput { return v.OpenshiftHardeningEnabled }).(pulumi.BoolPtrOutput)
}

// Indicates if packages blacklist is relevant.
func (o HostAssurancePolicyOutput) PackagesBlackListEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolicy) pulumi.BoolPtrOutput { return v.PackagesBlackListEnabled }).(pulumi.BoolPtrOutput)
}

// List of blacklisted images.
func (o HostAssurancePolicyOutput) PackagesBlackLists() HostAssurancePolicyPackagesBlackListArrayOutput {
	return o.ApplyT(func(v *HostAssurancePolicy) HostAssurancePolicyPackagesBlackListArrayOutput {
		return v.PackagesBlackLists
	}).(HostAssurancePolicyPackagesBlackListArrayOutput)
}

// Indicates if packages whitelist is relevant.
func (o HostAssurancePolicyOutput) PackagesWhiteListEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolicy) pulumi.BoolPtrOutput { return v.PackagesWhiteListEnabled }).(pulumi.BoolPtrOutput)
}

// List of whitelisted images.
func (o HostAssurancePolicyOutput) PackagesWhiteLists() HostAssurancePolicyPackagesWhiteListArrayOutput {
	return o.ApplyT(func(v *HostAssurancePolicy) HostAssurancePolicyPackagesWhiteListArrayOutput {
		return v.PackagesWhiteLists
	}).(HostAssurancePolicyPackagesWhiteListArrayOutput)
}

func (o HostAssurancePolicyOutput) PartialResultsImageFail() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolicy) pulumi.BoolPtrOutput { return v.PartialResultsImageFail }).(pulumi.BoolPtrOutput)
}

func (o HostAssurancePolicyOutput) Permission() pulumi.StringOutput {
	return o.ApplyT(func(v *HostAssurancePolicy) pulumi.StringOutput { return v.Permission }).(pulumi.StringOutput)
}

func (o HostAssurancePolicyOutput) PolicySettings() HostAssurancePolicyPolicySettingsOutput {
	return o.ApplyT(func(v *HostAssurancePolicy) HostAssurancePolicyPolicySettingsOutput { return v.PolicySettings }).(HostAssurancePolicyPolicySettingsOutput)
}

func (o HostAssurancePolicyOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolicy) pulumi.BoolPtrOutput { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// List of registries.
func (o HostAssurancePolicyOutput) Registries() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HostAssurancePolicy) pulumi.StringArrayOutput { return v.Registries }).(pulumi.StringArrayOutput)
}

func (o HostAssurancePolicyOutput) Registry() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolicy) pulumi.StringPtrOutput { return v.Registry }).(pulumi.StringPtrOutput)
}

func (o HostAssurancePolicyOutput) RequiredLabels() HostAssurancePolicyRequiredLabelArrayOutput {
	return o.ApplyT(func(v *HostAssurancePolicy) HostAssurancePolicyRequiredLabelArrayOutput { return v.RequiredLabels }).(HostAssurancePolicyRequiredLabelArrayOutput)
}

func (o HostAssurancePolicyOutput) RequiredLabelsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolicy) pulumi.BoolPtrOutput { return v.RequiredLabelsEnabled }).(pulumi.BoolPtrOutput)
}

func (o HostAssurancePolicyOutput) ScanMalwareInArchives() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolicy) pulumi.BoolPtrOutput { return v.ScanMalwareInArchives }).(pulumi.BoolPtrOutput)
}

func (o HostAssurancePolicyOutput) ScanNfsMounts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolicy) pulumi.BoolPtrOutput { return v.ScanNfsMounts }).(pulumi.BoolPtrOutput)
}

func (o HostAssurancePolicyOutput) ScanProcessMemory() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolicy) pulumi.BoolPtrOutput { return v.ScanProcessMemory }).(pulumi.BoolPtrOutput)
}

// Indicates if scan should include sensitive data in the image.
func (o HostAssurancePolicyOutput) ScanSensitiveData() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolicy) pulumi.BoolPtrOutput { return v.ScanSensitiveData }).(pulumi.BoolPtrOutput)
}

func (o HostAssurancePolicyOutput) ScanWindowsRegistry() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolicy) pulumi.BoolPtrOutput { return v.ScanWindowsRegistry }).(pulumi.BoolPtrOutput)
}

// Indicates if scanning should include scap.
func (o HostAssurancePolicyOutput) ScapEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolicy) pulumi.BoolPtrOutput { return v.ScapEnabled }).(pulumi.BoolPtrOutput)
}

// List of SCAP user scripts for checks.
func (o HostAssurancePolicyOutput) ScapFiles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HostAssurancePolicy) pulumi.StringArrayOutput { return v.ScapFiles }).(pulumi.StringArrayOutput)
}

func (o HostAssurancePolicyOutput) Scopes() HostAssurancePolicyScopeArrayOutput {
	return o.ApplyT(func(v *HostAssurancePolicy) HostAssurancePolicyScopeArrayOutput { return v.Scopes }).(HostAssurancePolicyScopeArrayOutput)
}

// List of trusted images.
func (o HostAssurancePolicyOutput) TrustedBaseImages() HostAssurancePolicyTrustedBaseImageArrayOutput {
	return o.ApplyT(func(v *HostAssurancePolicy) HostAssurancePolicyTrustedBaseImageArrayOutput {
		return v.TrustedBaseImages
	}).(HostAssurancePolicyTrustedBaseImageArrayOutput)
}

// Indicates if list of trusted base images is relevant.
func (o HostAssurancePolicyOutput) TrustedBaseImagesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolicy) pulumi.BoolPtrOutput { return v.TrustedBaseImagesEnabled }).(pulumi.BoolPtrOutput)
}

func (o HostAssurancePolicyOutput) VulnerabilityExploitability() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolicy) pulumi.BoolPtrOutput { return v.VulnerabilityExploitability }).(pulumi.BoolPtrOutput)
}

func (o HostAssurancePolicyOutput) VulnerabilityScoreRanges() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *HostAssurancePolicy) pulumi.IntArrayOutput { return v.VulnerabilityScoreRanges }).(pulumi.IntArrayOutput)
}

// List of whitelisted licenses.
func (o HostAssurancePolicyOutput) WhitelistedLicenses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HostAssurancePolicy) pulumi.StringArrayOutput { return v.WhitelistedLicenses }).(pulumi.StringArrayOutput)
}

// Indicates if license blacklist is relevant.
func (o HostAssurancePolicyOutput) WhitelistedLicensesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolicy) pulumi.BoolPtrOutput { return v.WhitelistedLicensesEnabled }).(pulumi.BoolPtrOutput)
}

// Checks the host according to the Windows CIS benchmark (relevant for hosts running Windows).
func (o HostAssurancePolicyOutput) WindowsCisEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostAssurancePolicy) pulumi.BoolPtrOutput { return v.WindowsCisEnabled }).(pulumi.BoolPtrOutput)
}

type HostAssurancePolicyArrayOutput struct{ *pulumi.OutputState }

func (HostAssurancePolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HostAssurancePolicy)(nil)).Elem()
}

func (o HostAssurancePolicyArrayOutput) ToHostAssurancePolicyArrayOutput() HostAssurancePolicyArrayOutput {
	return o
}

func (o HostAssurancePolicyArrayOutput) ToHostAssurancePolicyArrayOutputWithContext(ctx context.Context) HostAssurancePolicyArrayOutput {
	return o
}

func (o HostAssurancePolicyArrayOutput) Index(i pulumi.IntInput) HostAssurancePolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *HostAssurancePolicy {
		return vs[0].([]*HostAssurancePolicy)[vs[1].(int)]
	}).(HostAssurancePolicyOutput)
}

type HostAssurancePolicyMapOutput struct{ *pulumi.OutputState }

func (HostAssurancePolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HostAssurancePolicy)(nil)).Elem()
}

func (o HostAssurancePolicyMapOutput) ToHostAssurancePolicyMapOutput() HostAssurancePolicyMapOutput {
	return o
}

func (o HostAssurancePolicyMapOutput) ToHostAssurancePolicyMapOutputWithContext(ctx context.Context) HostAssurancePolicyMapOutput {
	return o
}

func (o HostAssurancePolicyMapOutput) MapIndex(k pulumi.StringInput) HostAssurancePolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *HostAssurancePolicy {
		return vs[0].(map[string]*HostAssurancePolicy)[vs[1].(string)]
	}).(HostAssurancePolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HostAssurancePolicyInput)(nil)).Elem(), &HostAssurancePolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*HostAssurancePolicyArrayInput)(nil)).Elem(), HostAssurancePolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HostAssurancePolicyMapInput)(nil)).Elem(), HostAssurancePolicyMap{})
	pulumi.RegisterOutputType(HostAssurancePolicyOutput{})
	pulumi.RegisterOutputType(HostAssurancePolicyArrayOutput{})
	pulumi.RegisterOutputType(HostAssurancePolicyMapOutput{})
}
