// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aquasec

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-aquasec/sdk/go/aquasec"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := aquasec.NewHostRuntimePolicy(ctx, "hostRuntimePolicy", &aquasec.HostRuntimePolicyArgs{
//				ApplicationScopes: pulumi.StringArray{
//					pulumi.String("Global"),
//				},
//				AuditAllOsUserActivity:         pulumi.Bool(true),
//				AuditBruteForceLogin:           pulumi.Bool(true),
//				AuditFullCommandArguments:      pulumi.Bool(true),
//				AuditHostFailedLoginEvents:     pulumi.Bool(true),
//				AuditHostSuccessfulLoginEvents: pulumi.Bool(true),
//				AuditUserAccountManagement:     pulumi.Bool(true),
//				BlockCryptocurrencyMining:      pulumi.Bool(true),
//				BlockedFiles: pulumi.StringArray{
//					pulumi.String("blocked"),
//				},
//				Description:                pulumi.String("host_runtime_policy"),
//				EnableIpReputationSecurity: pulumi.Bool(true),
//				Enabled:                    pulumi.Bool(true),
//				Enforce:                    pulumi.Bool(false),
//				FileIntegrityMonitoring: &aquasec.HostRuntimePolicyFileIntegrityMonitoringArgs{
//					ExcludedPaths: pulumi.StringArray{
//						pulumi.String("expaths"),
//					},
//					ExcludedProcesses: pulumi.StringArray{
//						pulumi.String("exprocess"),
//					},
//					ExcludedUsers: pulumi.StringArray{
//						pulumi.String("expuser"),
//					},
//					MonitorAttributes: pulumi.Bool(true),
//					MonitorCreate:     pulumi.Bool(true),
//					MonitorDelete:     pulumi.Bool(true),
//					MonitorModify:     pulumi.Bool(true),
//					MonitorRead:       pulumi.Bool(true),
//					MonitoredPaths: pulumi.StringArray{
//						pulumi.String("paths"),
//					},
//					MonitoredProcesses: pulumi.StringArray{
//						pulumi.String("process"),
//					},
//					MonitoredUsers: pulumi.StringArray{
//						pulumi.String("user"),
//					},
//				},
//				MonitorSystemLogIntegrity: pulumi.Bool(true),
//				MonitorSystemTimeChanges:  pulumi.Bool(true),
//				MonitorWindowsServices:    pulumi.Bool(true),
//				OsGroupsAlloweds: pulumi.StringArray{
//					pulumi.String("group1"),
//				},
//				OsGroupsBlockeds: pulumi.StringArray{
//					pulumi.String("group2"),
//				},
//				OsUsersAlloweds: pulumi.StringArray{
//					pulumi.String("user1"),
//				},
//				OsUsersBlockeds: pulumi.StringArray{
//					pulumi.String("user2"),
//				},
//				PackageBlocks: pulumi.StringArray{
//					pulumi.String("package1"),
//				},
//				PortScanningDetection: pulumi.Bool(true),
//				ScopeVariables: aquasec.HostRuntimePolicyScopeVariableArray{
//					&aquasec.HostRuntimePolicyScopeVariableArgs{
//						Attribute: pulumi.String("kubernetes.cluster"),
//						Value:     pulumi.String("default"),
//					},
//					&aquasec.HostRuntimePolicyScopeVariableArgs{
//						Attribute: pulumi.String("kubernetes.label"),
//						Name:      pulumi.String("app"),
//						Value:     pulumi.String("aqua"),
//					},
//				},
//				WindowsRegistryMonitoring: &aquasec.HostRuntimePolicyWindowsRegistryMonitoringArgs{
//					ExcludedPaths: pulumi.StringArray{
//						pulumi.String("expaths"),
//					},
//					ExcludedProcesses: pulumi.StringArray{
//						pulumi.String("exprocess"),
//					},
//					ExcludedUsers: pulumi.StringArray{
//						pulumi.String("expuser"),
//					},
//					MonitorAttributes: pulumi.Bool(true),
//					MonitorCreate:     pulumi.Bool(true),
//					MonitorDelete:     pulumi.Bool(true),
//					MonitorModify:     pulumi.Bool(true),
//					MonitorRead:       pulumi.Bool(true),
//					MonitoredPaths: pulumi.StringArray{
//						pulumi.String("paths"),
//					},
//					MonitoredProcesses: pulumi.StringArray{
//						pulumi.String("process"),
//					},
//					MonitoredUsers: pulumi.StringArray{
//						pulumi.String("user"),
//					},
//				},
//				WindowsRegistryProtection: &aquasec.HostRuntimePolicyWindowsRegistryProtectionArgs{
//					ExcludedPaths: pulumi.StringArray{
//						pulumi.String("expaths"),
//					},
//					ExcludedProcesses: pulumi.StringArray{
//						pulumi.String("exprocess"),
//					},
//					ExcludedUsers: pulumi.StringArray{
//						pulumi.String("expuser"),
//					},
//					ProtectedPaths: pulumi.StringArray{
//						pulumi.String("paths"),
//					},
//					ProtectedProcesses: pulumi.StringArray{
//						pulumi.String("process"),
//					},
//					ProtectedUsers: pulumi.StringArray{
//						pulumi.String("user"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type HostRuntimePolicy struct {
	pulumi.CustomResourceState

	// Indicates the application scope of the service.
	ApplicationScopes pulumi.StringArrayOutput `pulumi:"applicationScopes"`
	// If true, all process activity will be audited.
	AuditAllOsUserActivity pulumi.BoolPtrOutput `pulumi:"auditAllOsUserActivity"`
	// Detects brute force login attempts
	AuditBruteForceLogin pulumi.BoolPtrOutput `pulumi:"auditBruteForceLogin"`
	// If true, full command arguments will be audited.
	AuditFullCommandArguments pulumi.BoolPtrOutput `pulumi:"auditFullCommandArguments"`
	// If true, host failed logins will be audited.
	AuditHostFailedLoginEvents pulumi.BoolPtrOutput `pulumi:"auditHostFailedLoginEvents"`
	// If true, host successful logins will be audited.
	AuditHostSuccessfulLoginEvents pulumi.BoolPtrOutput `pulumi:"auditHostSuccessfulLoginEvents"`
	// If true, account management will be audited.
	AuditUserAccountManagement pulumi.BoolPtrOutput `pulumi:"auditUserAccountManagement"`
	// Username of the account that created the service.
	Author pulumi.StringOutput `pulumi:"author"`
	// Detect and prevent communication to DNS/IP addresses known to be used for Cryptocurrency Mining
	BlockCryptocurrencyMining pulumi.BoolPtrOutput `pulumi:"blockCryptocurrencyMining"`
	// List of files that are prevented from being read, modified and executed in the containers.
	BlockedFiles pulumi.StringArrayOutput `pulumi:"blockedFiles"`
	// The description of the host runtime policy
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// If true, detect and prevent communication from containers to IP addresses known to have a bad reputation.
	EnableIpReputationSecurity pulumi.BoolPtrOutput `pulumi:"enableIpReputationSecurity"`
	// Indicates if the runtime policy is enabled or not.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Indicates that policy should effect container execution (not just for audit).
	Enforce pulumi.BoolPtrOutput `pulumi:"enforce"`
	// Indicates the number of days after which the runtime policy will be changed to enforce mode.
	EnforceAfterDays pulumi.IntPtrOutput `pulumi:"enforceAfterDays"`
	// Configuration for file integrity monitoring.
	FileIntegrityMonitoring HostRuntimePolicyFileIntegrityMonitoringPtrOutput `pulumi:"fileIntegrityMonitoring"`
	// Configuration for Real-Time Malware Protection.
	MalwareScanOptions HostRuntimePolicyMalwareScanOptionsPtrOutput `pulumi:"malwareScanOptions"`
	// If true, system log will be monitored.
	MonitorSystemLogIntegrity pulumi.BoolPtrOutput `pulumi:"monitorSystemLogIntegrity"`
	// If true, system time changes will be monitored.
	MonitorSystemTimeChanges pulumi.BoolPtrOutput `pulumi:"monitorSystemTimeChanges"`
	// If true, windows service operations will be monitored.
	MonitorWindowsServices pulumi.BoolPtrOutput `pulumi:"monitorWindowsServices"`
	// Name of the host runtime policy
	Name pulumi.StringOutput `pulumi:"name"`
	// List of OS (Linux or Windows) groups that are allowed to authenticate to the host, and block authentication requests from all others. Groups can be either Linux groups or Windows AD groups.
	OsGroupsAlloweds pulumi.StringArrayOutput `pulumi:"osGroupsAlloweds"`
	// List of OS (Linux or Windows) groups that are not allowed to authenticate to the host, and block authentication requests from all others. Groups can be either Linux groups or Windows AD groups.
	OsGroupsBlockeds pulumi.StringArrayOutput `pulumi:"osGroupsBlockeds"`
	// List of OS (Linux or Windows) users that are allowed to authenticate to the host, and block authentication requests from all others.
	OsUsersAlloweds pulumi.StringArrayOutput `pulumi:"osUsersAlloweds"`
	// List of OS (Linux or Windows) users that are not allowed to authenticate to the host, and block authentication requests from all others.
	OsUsersBlockeds pulumi.StringArrayOutput `pulumi:"osUsersBlockeds"`
	// List of packages that are not allowed read, write or execute all files that under the packages.
	PackageBlocks pulumi.StringArrayOutput `pulumi:"packageBlocks"`
	// If true, port scanning behaviors will be audited.
	PortScanningDetection pulumi.BoolPtrOutput `pulumi:"portScanningDetection"`
	// Logical expression of how to compute the dependency of the scope variables.
	ScopeExpression pulumi.StringOutput `pulumi:"scopeExpression"`
	// List of scope attributes.
	ScopeVariables HostRuntimePolicyScopeVariableArrayOutput `pulumi:"scopeVariables"`
	// Configuration for windows registry monitoring.
	WindowsRegistryMonitoring HostRuntimePolicyWindowsRegistryMonitoringPtrOutput `pulumi:"windowsRegistryMonitoring"`
	// Configuration for windows registry protection.
	WindowsRegistryProtection HostRuntimePolicyWindowsRegistryProtectionPtrOutput `pulumi:"windowsRegistryProtection"`
}

// NewHostRuntimePolicy registers a new resource with the given unique name, arguments, and options.
func NewHostRuntimePolicy(ctx *pulumi.Context,
	name string, args *HostRuntimePolicyArgs, opts ...pulumi.ResourceOption) (*HostRuntimePolicy, error) {
	if args == nil {
		args = &HostRuntimePolicyArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource HostRuntimePolicy
	err := ctx.RegisterResource("aquasec:index/hostRuntimePolicy:HostRuntimePolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHostRuntimePolicy gets an existing HostRuntimePolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHostRuntimePolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HostRuntimePolicyState, opts ...pulumi.ResourceOption) (*HostRuntimePolicy, error) {
	var resource HostRuntimePolicy
	err := ctx.ReadResource("aquasec:index/hostRuntimePolicy:HostRuntimePolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HostRuntimePolicy resources.
type hostRuntimePolicyState struct {
	// Indicates the application scope of the service.
	ApplicationScopes []string `pulumi:"applicationScopes"`
	// If true, all process activity will be audited.
	AuditAllOsUserActivity *bool `pulumi:"auditAllOsUserActivity"`
	// Detects brute force login attempts
	AuditBruteForceLogin *bool `pulumi:"auditBruteForceLogin"`
	// If true, full command arguments will be audited.
	AuditFullCommandArguments *bool `pulumi:"auditFullCommandArguments"`
	// If true, host failed logins will be audited.
	AuditHostFailedLoginEvents *bool `pulumi:"auditHostFailedLoginEvents"`
	// If true, host successful logins will be audited.
	AuditHostSuccessfulLoginEvents *bool `pulumi:"auditHostSuccessfulLoginEvents"`
	// If true, account management will be audited.
	AuditUserAccountManagement *bool `pulumi:"auditUserAccountManagement"`
	// Username of the account that created the service.
	Author *string `pulumi:"author"`
	// Detect and prevent communication to DNS/IP addresses known to be used for Cryptocurrency Mining
	BlockCryptocurrencyMining *bool `pulumi:"blockCryptocurrencyMining"`
	// List of files that are prevented from being read, modified and executed in the containers.
	BlockedFiles []string `pulumi:"blockedFiles"`
	// The description of the host runtime policy
	Description *string `pulumi:"description"`
	// If true, detect and prevent communication from containers to IP addresses known to have a bad reputation.
	EnableIpReputationSecurity *bool `pulumi:"enableIpReputationSecurity"`
	// Indicates if the runtime policy is enabled or not.
	Enabled *bool `pulumi:"enabled"`
	// Indicates that policy should effect container execution (not just for audit).
	Enforce *bool `pulumi:"enforce"`
	// Indicates the number of days after which the runtime policy will be changed to enforce mode.
	EnforceAfterDays *int `pulumi:"enforceAfterDays"`
	// Configuration for file integrity monitoring.
	FileIntegrityMonitoring *HostRuntimePolicyFileIntegrityMonitoring `pulumi:"fileIntegrityMonitoring"`
	// Configuration for Real-Time Malware Protection.
	MalwareScanOptions *HostRuntimePolicyMalwareScanOptions `pulumi:"malwareScanOptions"`
	// If true, system log will be monitored.
	MonitorSystemLogIntegrity *bool `pulumi:"monitorSystemLogIntegrity"`
	// If true, system time changes will be monitored.
	MonitorSystemTimeChanges *bool `pulumi:"monitorSystemTimeChanges"`
	// If true, windows service operations will be monitored.
	MonitorWindowsServices *bool `pulumi:"monitorWindowsServices"`
	// Name of the host runtime policy
	Name *string `pulumi:"name"`
	// List of OS (Linux or Windows) groups that are allowed to authenticate to the host, and block authentication requests from all others. Groups can be either Linux groups or Windows AD groups.
	OsGroupsAlloweds []string `pulumi:"osGroupsAlloweds"`
	// List of OS (Linux or Windows) groups that are not allowed to authenticate to the host, and block authentication requests from all others. Groups can be either Linux groups or Windows AD groups.
	OsGroupsBlockeds []string `pulumi:"osGroupsBlockeds"`
	// List of OS (Linux or Windows) users that are allowed to authenticate to the host, and block authentication requests from all others.
	OsUsersAlloweds []string `pulumi:"osUsersAlloweds"`
	// List of OS (Linux or Windows) users that are not allowed to authenticate to the host, and block authentication requests from all others.
	OsUsersBlockeds []string `pulumi:"osUsersBlockeds"`
	// List of packages that are not allowed read, write or execute all files that under the packages.
	PackageBlocks []string `pulumi:"packageBlocks"`
	// If true, port scanning behaviors will be audited.
	PortScanningDetection *bool `pulumi:"portScanningDetection"`
	// Logical expression of how to compute the dependency of the scope variables.
	ScopeExpression *string `pulumi:"scopeExpression"`
	// List of scope attributes.
	ScopeVariables []HostRuntimePolicyScopeVariable `pulumi:"scopeVariables"`
	// Configuration for windows registry monitoring.
	WindowsRegistryMonitoring *HostRuntimePolicyWindowsRegistryMonitoring `pulumi:"windowsRegistryMonitoring"`
	// Configuration for windows registry protection.
	WindowsRegistryProtection *HostRuntimePolicyWindowsRegistryProtection `pulumi:"windowsRegistryProtection"`
}

type HostRuntimePolicyState struct {
	// Indicates the application scope of the service.
	ApplicationScopes pulumi.StringArrayInput
	// If true, all process activity will be audited.
	AuditAllOsUserActivity pulumi.BoolPtrInput
	// Detects brute force login attempts
	AuditBruteForceLogin pulumi.BoolPtrInput
	// If true, full command arguments will be audited.
	AuditFullCommandArguments pulumi.BoolPtrInput
	// If true, host failed logins will be audited.
	AuditHostFailedLoginEvents pulumi.BoolPtrInput
	// If true, host successful logins will be audited.
	AuditHostSuccessfulLoginEvents pulumi.BoolPtrInput
	// If true, account management will be audited.
	AuditUserAccountManagement pulumi.BoolPtrInput
	// Username of the account that created the service.
	Author pulumi.StringPtrInput
	// Detect and prevent communication to DNS/IP addresses known to be used for Cryptocurrency Mining
	BlockCryptocurrencyMining pulumi.BoolPtrInput
	// List of files that are prevented from being read, modified and executed in the containers.
	BlockedFiles pulumi.StringArrayInput
	// The description of the host runtime policy
	Description pulumi.StringPtrInput
	// If true, detect and prevent communication from containers to IP addresses known to have a bad reputation.
	EnableIpReputationSecurity pulumi.BoolPtrInput
	// Indicates if the runtime policy is enabled or not.
	Enabled pulumi.BoolPtrInput
	// Indicates that policy should effect container execution (not just for audit).
	Enforce pulumi.BoolPtrInput
	// Indicates the number of days after which the runtime policy will be changed to enforce mode.
	EnforceAfterDays pulumi.IntPtrInput
	// Configuration for file integrity monitoring.
	FileIntegrityMonitoring HostRuntimePolicyFileIntegrityMonitoringPtrInput
	// Configuration for Real-Time Malware Protection.
	MalwareScanOptions HostRuntimePolicyMalwareScanOptionsPtrInput
	// If true, system log will be monitored.
	MonitorSystemLogIntegrity pulumi.BoolPtrInput
	// If true, system time changes will be monitored.
	MonitorSystemTimeChanges pulumi.BoolPtrInput
	// If true, windows service operations will be monitored.
	MonitorWindowsServices pulumi.BoolPtrInput
	// Name of the host runtime policy
	Name pulumi.StringPtrInput
	// List of OS (Linux or Windows) groups that are allowed to authenticate to the host, and block authentication requests from all others. Groups can be either Linux groups or Windows AD groups.
	OsGroupsAlloweds pulumi.StringArrayInput
	// List of OS (Linux or Windows) groups that are not allowed to authenticate to the host, and block authentication requests from all others. Groups can be either Linux groups or Windows AD groups.
	OsGroupsBlockeds pulumi.StringArrayInput
	// List of OS (Linux or Windows) users that are allowed to authenticate to the host, and block authentication requests from all others.
	OsUsersAlloweds pulumi.StringArrayInput
	// List of OS (Linux or Windows) users that are not allowed to authenticate to the host, and block authentication requests from all others.
	OsUsersBlockeds pulumi.StringArrayInput
	// List of packages that are not allowed read, write or execute all files that under the packages.
	PackageBlocks pulumi.StringArrayInput
	// If true, port scanning behaviors will be audited.
	PortScanningDetection pulumi.BoolPtrInput
	// Logical expression of how to compute the dependency of the scope variables.
	ScopeExpression pulumi.StringPtrInput
	// List of scope attributes.
	ScopeVariables HostRuntimePolicyScopeVariableArrayInput
	// Configuration for windows registry monitoring.
	WindowsRegistryMonitoring HostRuntimePolicyWindowsRegistryMonitoringPtrInput
	// Configuration for windows registry protection.
	WindowsRegistryProtection HostRuntimePolicyWindowsRegistryProtectionPtrInput
}

func (HostRuntimePolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*hostRuntimePolicyState)(nil)).Elem()
}

type hostRuntimePolicyArgs struct {
	// Indicates the application scope of the service.
	ApplicationScopes []string `pulumi:"applicationScopes"`
	// If true, all process activity will be audited.
	AuditAllOsUserActivity *bool `pulumi:"auditAllOsUserActivity"`
	// Detects brute force login attempts
	AuditBruteForceLogin *bool `pulumi:"auditBruteForceLogin"`
	// If true, full command arguments will be audited.
	AuditFullCommandArguments *bool `pulumi:"auditFullCommandArguments"`
	// If true, host failed logins will be audited.
	AuditHostFailedLoginEvents *bool `pulumi:"auditHostFailedLoginEvents"`
	// If true, host successful logins will be audited.
	AuditHostSuccessfulLoginEvents *bool `pulumi:"auditHostSuccessfulLoginEvents"`
	// If true, account management will be audited.
	AuditUserAccountManagement *bool `pulumi:"auditUserAccountManagement"`
	// Detect and prevent communication to DNS/IP addresses known to be used for Cryptocurrency Mining
	BlockCryptocurrencyMining *bool `pulumi:"blockCryptocurrencyMining"`
	// List of files that are prevented from being read, modified and executed in the containers.
	BlockedFiles []string `pulumi:"blockedFiles"`
	// The description of the host runtime policy
	Description *string `pulumi:"description"`
	// If true, detect and prevent communication from containers to IP addresses known to have a bad reputation.
	EnableIpReputationSecurity *bool `pulumi:"enableIpReputationSecurity"`
	// Indicates if the runtime policy is enabled or not.
	Enabled *bool `pulumi:"enabled"`
	// Indicates that policy should effect container execution (not just for audit).
	Enforce *bool `pulumi:"enforce"`
	// Indicates the number of days after which the runtime policy will be changed to enforce mode.
	EnforceAfterDays *int `pulumi:"enforceAfterDays"`
	// Configuration for file integrity monitoring.
	FileIntegrityMonitoring *HostRuntimePolicyFileIntegrityMonitoring `pulumi:"fileIntegrityMonitoring"`
	// Configuration for Real-Time Malware Protection.
	MalwareScanOptions *HostRuntimePolicyMalwareScanOptions `pulumi:"malwareScanOptions"`
	// If true, system log will be monitored.
	MonitorSystemLogIntegrity *bool `pulumi:"monitorSystemLogIntegrity"`
	// If true, system time changes will be monitored.
	MonitorSystemTimeChanges *bool `pulumi:"monitorSystemTimeChanges"`
	// If true, windows service operations will be monitored.
	MonitorWindowsServices *bool `pulumi:"monitorWindowsServices"`
	// Name of the host runtime policy
	Name *string `pulumi:"name"`
	// List of OS (Linux or Windows) groups that are allowed to authenticate to the host, and block authentication requests from all others. Groups can be either Linux groups or Windows AD groups.
	OsGroupsAlloweds []string `pulumi:"osGroupsAlloweds"`
	// List of OS (Linux or Windows) groups that are not allowed to authenticate to the host, and block authentication requests from all others. Groups can be either Linux groups or Windows AD groups.
	OsGroupsBlockeds []string `pulumi:"osGroupsBlockeds"`
	// List of OS (Linux or Windows) users that are allowed to authenticate to the host, and block authentication requests from all others.
	OsUsersAlloweds []string `pulumi:"osUsersAlloweds"`
	// List of OS (Linux or Windows) users that are not allowed to authenticate to the host, and block authentication requests from all others.
	OsUsersBlockeds []string `pulumi:"osUsersBlockeds"`
	// List of packages that are not allowed read, write or execute all files that under the packages.
	PackageBlocks []string `pulumi:"packageBlocks"`
	// If true, port scanning behaviors will be audited.
	PortScanningDetection *bool `pulumi:"portScanningDetection"`
	// Logical expression of how to compute the dependency of the scope variables.
	ScopeExpression *string `pulumi:"scopeExpression"`
	// List of scope attributes.
	ScopeVariables []HostRuntimePolicyScopeVariable `pulumi:"scopeVariables"`
	// Configuration for windows registry monitoring.
	WindowsRegistryMonitoring *HostRuntimePolicyWindowsRegistryMonitoring `pulumi:"windowsRegistryMonitoring"`
	// Configuration for windows registry protection.
	WindowsRegistryProtection *HostRuntimePolicyWindowsRegistryProtection `pulumi:"windowsRegistryProtection"`
}

// The set of arguments for constructing a HostRuntimePolicy resource.
type HostRuntimePolicyArgs struct {
	// Indicates the application scope of the service.
	ApplicationScopes pulumi.StringArrayInput
	// If true, all process activity will be audited.
	AuditAllOsUserActivity pulumi.BoolPtrInput
	// Detects brute force login attempts
	AuditBruteForceLogin pulumi.BoolPtrInput
	// If true, full command arguments will be audited.
	AuditFullCommandArguments pulumi.BoolPtrInput
	// If true, host failed logins will be audited.
	AuditHostFailedLoginEvents pulumi.BoolPtrInput
	// If true, host successful logins will be audited.
	AuditHostSuccessfulLoginEvents pulumi.BoolPtrInput
	// If true, account management will be audited.
	AuditUserAccountManagement pulumi.BoolPtrInput
	// Detect and prevent communication to DNS/IP addresses known to be used for Cryptocurrency Mining
	BlockCryptocurrencyMining pulumi.BoolPtrInput
	// List of files that are prevented from being read, modified and executed in the containers.
	BlockedFiles pulumi.StringArrayInput
	// The description of the host runtime policy
	Description pulumi.StringPtrInput
	// If true, detect and prevent communication from containers to IP addresses known to have a bad reputation.
	EnableIpReputationSecurity pulumi.BoolPtrInput
	// Indicates if the runtime policy is enabled or not.
	Enabled pulumi.BoolPtrInput
	// Indicates that policy should effect container execution (not just for audit).
	Enforce pulumi.BoolPtrInput
	// Indicates the number of days after which the runtime policy will be changed to enforce mode.
	EnforceAfterDays pulumi.IntPtrInput
	// Configuration for file integrity monitoring.
	FileIntegrityMonitoring HostRuntimePolicyFileIntegrityMonitoringPtrInput
	// Configuration for Real-Time Malware Protection.
	MalwareScanOptions HostRuntimePolicyMalwareScanOptionsPtrInput
	// If true, system log will be monitored.
	MonitorSystemLogIntegrity pulumi.BoolPtrInput
	// If true, system time changes will be monitored.
	MonitorSystemTimeChanges pulumi.BoolPtrInput
	// If true, windows service operations will be monitored.
	MonitorWindowsServices pulumi.BoolPtrInput
	// Name of the host runtime policy
	Name pulumi.StringPtrInput
	// List of OS (Linux or Windows) groups that are allowed to authenticate to the host, and block authentication requests from all others. Groups can be either Linux groups or Windows AD groups.
	OsGroupsAlloweds pulumi.StringArrayInput
	// List of OS (Linux or Windows) groups that are not allowed to authenticate to the host, and block authentication requests from all others. Groups can be either Linux groups or Windows AD groups.
	OsGroupsBlockeds pulumi.StringArrayInput
	// List of OS (Linux or Windows) users that are allowed to authenticate to the host, and block authentication requests from all others.
	OsUsersAlloweds pulumi.StringArrayInput
	// List of OS (Linux or Windows) users that are not allowed to authenticate to the host, and block authentication requests from all others.
	OsUsersBlockeds pulumi.StringArrayInput
	// List of packages that are not allowed read, write or execute all files that under the packages.
	PackageBlocks pulumi.StringArrayInput
	// If true, port scanning behaviors will be audited.
	PortScanningDetection pulumi.BoolPtrInput
	// Logical expression of how to compute the dependency of the scope variables.
	ScopeExpression pulumi.StringPtrInput
	// List of scope attributes.
	ScopeVariables HostRuntimePolicyScopeVariableArrayInput
	// Configuration for windows registry monitoring.
	WindowsRegistryMonitoring HostRuntimePolicyWindowsRegistryMonitoringPtrInput
	// Configuration for windows registry protection.
	WindowsRegistryProtection HostRuntimePolicyWindowsRegistryProtectionPtrInput
}

func (HostRuntimePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hostRuntimePolicyArgs)(nil)).Elem()
}

type HostRuntimePolicyInput interface {
	pulumi.Input

	ToHostRuntimePolicyOutput() HostRuntimePolicyOutput
	ToHostRuntimePolicyOutputWithContext(ctx context.Context) HostRuntimePolicyOutput
}

func (*HostRuntimePolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**HostRuntimePolicy)(nil)).Elem()
}

func (i *HostRuntimePolicy) ToHostRuntimePolicyOutput() HostRuntimePolicyOutput {
	return i.ToHostRuntimePolicyOutputWithContext(context.Background())
}

func (i *HostRuntimePolicy) ToHostRuntimePolicyOutputWithContext(ctx context.Context) HostRuntimePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostRuntimePolicyOutput)
}

// HostRuntimePolicyArrayInput is an input type that accepts HostRuntimePolicyArray and HostRuntimePolicyArrayOutput values.
// You can construct a concrete instance of `HostRuntimePolicyArrayInput` via:
//
//	HostRuntimePolicyArray{ HostRuntimePolicyArgs{...} }
type HostRuntimePolicyArrayInput interface {
	pulumi.Input

	ToHostRuntimePolicyArrayOutput() HostRuntimePolicyArrayOutput
	ToHostRuntimePolicyArrayOutputWithContext(context.Context) HostRuntimePolicyArrayOutput
}

type HostRuntimePolicyArray []HostRuntimePolicyInput

func (HostRuntimePolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HostRuntimePolicy)(nil)).Elem()
}

func (i HostRuntimePolicyArray) ToHostRuntimePolicyArrayOutput() HostRuntimePolicyArrayOutput {
	return i.ToHostRuntimePolicyArrayOutputWithContext(context.Background())
}

func (i HostRuntimePolicyArray) ToHostRuntimePolicyArrayOutputWithContext(ctx context.Context) HostRuntimePolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostRuntimePolicyArrayOutput)
}

// HostRuntimePolicyMapInput is an input type that accepts HostRuntimePolicyMap and HostRuntimePolicyMapOutput values.
// You can construct a concrete instance of `HostRuntimePolicyMapInput` via:
//
//	HostRuntimePolicyMap{ "key": HostRuntimePolicyArgs{...} }
type HostRuntimePolicyMapInput interface {
	pulumi.Input

	ToHostRuntimePolicyMapOutput() HostRuntimePolicyMapOutput
	ToHostRuntimePolicyMapOutputWithContext(context.Context) HostRuntimePolicyMapOutput
}

type HostRuntimePolicyMap map[string]HostRuntimePolicyInput

func (HostRuntimePolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HostRuntimePolicy)(nil)).Elem()
}

func (i HostRuntimePolicyMap) ToHostRuntimePolicyMapOutput() HostRuntimePolicyMapOutput {
	return i.ToHostRuntimePolicyMapOutputWithContext(context.Background())
}

func (i HostRuntimePolicyMap) ToHostRuntimePolicyMapOutputWithContext(ctx context.Context) HostRuntimePolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostRuntimePolicyMapOutput)
}

type HostRuntimePolicyOutput struct{ *pulumi.OutputState }

func (HostRuntimePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HostRuntimePolicy)(nil)).Elem()
}

func (o HostRuntimePolicyOutput) ToHostRuntimePolicyOutput() HostRuntimePolicyOutput {
	return o
}

func (o HostRuntimePolicyOutput) ToHostRuntimePolicyOutputWithContext(ctx context.Context) HostRuntimePolicyOutput {
	return o
}

// Indicates the application scope of the service.
func (o HostRuntimePolicyOutput) ApplicationScopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) pulumi.StringArrayOutput { return v.ApplicationScopes }).(pulumi.StringArrayOutput)
}

// If true, all process activity will be audited.
func (o HostRuntimePolicyOutput) AuditAllOsUserActivity() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) pulumi.BoolPtrOutput { return v.AuditAllOsUserActivity }).(pulumi.BoolPtrOutput)
}

// Detects brute force login attempts
func (o HostRuntimePolicyOutput) AuditBruteForceLogin() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) pulumi.BoolPtrOutput { return v.AuditBruteForceLogin }).(pulumi.BoolPtrOutput)
}

// If true, full command arguments will be audited.
func (o HostRuntimePolicyOutput) AuditFullCommandArguments() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) pulumi.BoolPtrOutput { return v.AuditFullCommandArguments }).(pulumi.BoolPtrOutput)
}

// If true, host failed logins will be audited.
func (o HostRuntimePolicyOutput) AuditHostFailedLoginEvents() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) pulumi.BoolPtrOutput { return v.AuditHostFailedLoginEvents }).(pulumi.BoolPtrOutput)
}

// If true, host successful logins will be audited.
func (o HostRuntimePolicyOutput) AuditHostSuccessfulLoginEvents() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) pulumi.BoolPtrOutput { return v.AuditHostSuccessfulLoginEvents }).(pulumi.BoolPtrOutput)
}

// If true, account management will be audited.
func (o HostRuntimePolicyOutput) AuditUserAccountManagement() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) pulumi.BoolPtrOutput { return v.AuditUserAccountManagement }).(pulumi.BoolPtrOutput)
}

// Username of the account that created the service.
func (o HostRuntimePolicyOutput) Author() pulumi.StringOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) pulumi.StringOutput { return v.Author }).(pulumi.StringOutput)
}

// Detect and prevent communication to DNS/IP addresses known to be used for Cryptocurrency Mining
func (o HostRuntimePolicyOutput) BlockCryptocurrencyMining() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) pulumi.BoolPtrOutput { return v.BlockCryptocurrencyMining }).(pulumi.BoolPtrOutput)
}

// List of files that are prevented from being read, modified and executed in the containers.
func (o HostRuntimePolicyOutput) BlockedFiles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) pulumi.StringArrayOutput { return v.BlockedFiles }).(pulumi.StringArrayOutput)
}

// The description of the host runtime policy
func (o HostRuntimePolicyOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// If true, detect and prevent communication from containers to IP addresses known to have a bad reputation.
func (o HostRuntimePolicyOutput) EnableIpReputationSecurity() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) pulumi.BoolPtrOutput { return v.EnableIpReputationSecurity }).(pulumi.BoolPtrOutput)
}

// Indicates if the runtime policy is enabled or not.
func (o HostRuntimePolicyOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Indicates that policy should effect container execution (not just for audit).
func (o HostRuntimePolicyOutput) Enforce() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) pulumi.BoolPtrOutput { return v.Enforce }).(pulumi.BoolPtrOutput)
}

// Indicates the number of days after which the runtime policy will be changed to enforce mode.
func (o HostRuntimePolicyOutput) EnforceAfterDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) pulumi.IntPtrOutput { return v.EnforceAfterDays }).(pulumi.IntPtrOutput)
}

// Configuration for file integrity monitoring.
func (o HostRuntimePolicyOutput) FileIntegrityMonitoring() HostRuntimePolicyFileIntegrityMonitoringPtrOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) HostRuntimePolicyFileIntegrityMonitoringPtrOutput {
		return v.FileIntegrityMonitoring
	}).(HostRuntimePolicyFileIntegrityMonitoringPtrOutput)
}

// Configuration for Real-Time Malware Protection.
func (o HostRuntimePolicyOutput) MalwareScanOptions() HostRuntimePolicyMalwareScanOptionsPtrOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) HostRuntimePolicyMalwareScanOptionsPtrOutput { return v.MalwareScanOptions }).(HostRuntimePolicyMalwareScanOptionsPtrOutput)
}

// If true, system log will be monitored.
func (o HostRuntimePolicyOutput) MonitorSystemLogIntegrity() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) pulumi.BoolPtrOutput { return v.MonitorSystemLogIntegrity }).(pulumi.BoolPtrOutput)
}

// If true, system time changes will be monitored.
func (o HostRuntimePolicyOutput) MonitorSystemTimeChanges() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) pulumi.BoolPtrOutput { return v.MonitorSystemTimeChanges }).(pulumi.BoolPtrOutput)
}

// If true, windows service operations will be monitored.
func (o HostRuntimePolicyOutput) MonitorWindowsServices() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) pulumi.BoolPtrOutput { return v.MonitorWindowsServices }).(pulumi.BoolPtrOutput)
}

// Name of the host runtime policy
func (o HostRuntimePolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// List of OS (Linux or Windows) groups that are allowed to authenticate to the host, and block authentication requests from all others. Groups can be either Linux groups or Windows AD groups.
func (o HostRuntimePolicyOutput) OsGroupsAlloweds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) pulumi.StringArrayOutput { return v.OsGroupsAlloweds }).(pulumi.StringArrayOutput)
}

// List of OS (Linux or Windows) groups that are not allowed to authenticate to the host, and block authentication requests from all others. Groups can be either Linux groups or Windows AD groups.
func (o HostRuntimePolicyOutput) OsGroupsBlockeds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) pulumi.StringArrayOutput { return v.OsGroupsBlockeds }).(pulumi.StringArrayOutput)
}

// List of OS (Linux or Windows) users that are allowed to authenticate to the host, and block authentication requests from all others.
func (o HostRuntimePolicyOutput) OsUsersAlloweds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) pulumi.StringArrayOutput { return v.OsUsersAlloweds }).(pulumi.StringArrayOutput)
}

// List of OS (Linux or Windows) users that are not allowed to authenticate to the host, and block authentication requests from all others.
func (o HostRuntimePolicyOutput) OsUsersBlockeds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) pulumi.StringArrayOutput { return v.OsUsersBlockeds }).(pulumi.StringArrayOutput)
}

// List of packages that are not allowed read, write or execute all files that under the packages.
func (o HostRuntimePolicyOutput) PackageBlocks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) pulumi.StringArrayOutput { return v.PackageBlocks }).(pulumi.StringArrayOutput)
}

// If true, port scanning behaviors will be audited.
func (o HostRuntimePolicyOutput) PortScanningDetection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) pulumi.BoolPtrOutput { return v.PortScanningDetection }).(pulumi.BoolPtrOutput)
}

// Logical expression of how to compute the dependency of the scope variables.
func (o HostRuntimePolicyOutput) ScopeExpression() pulumi.StringOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) pulumi.StringOutput { return v.ScopeExpression }).(pulumi.StringOutput)
}

// List of scope attributes.
func (o HostRuntimePolicyOutput) ScopeVariables() HostRuntimePolicyScopeVariableArrayOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) HostRuntimePolicyScopeVariableArrayOutput { return v.ScopeVariables }).(HostRuntimePolicyScopeVariableArrayOutput)
}

// Configuration for windows registry monitoring.
func (o HostRuntimePolicyOutput) WindowsRegistryMonitoring() HostRuntimePolicyWindowsRegistryMonitoringPtrOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) HostRuntimePolicyWindowsRegistryMonitoringPtrOutput {
		return v.WindowsRegistryMonitoring
	}).(HostRuntimePolicyWindowsRegistryMonitoringPtrOutput)
}

// Configuration for windows registry protection.
func (o HostRuntimePolicyOutput) WindowsRegistryProtection() HostRuntimePolicyWindowsRegistryProtectionPtrOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) HostRuntimePolicyWindowsRegistryProtectionPtrOutput {
		return v.WindowsRegistryProtection
	}).(HostRuntimePolicyWindowsRegistryProtectionPtrOutput)
}

type HostRuntimePolicyArrayOutput struct{ *pulumi.OutputState }

func (HostRuntimePolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HostRuntimePolicy)(nil)).Elem()
}

func (o HostRuntimePolicyArrayOutput) ToHostRuntimePolicyArrayOutput() HostRuntimePolicyArrayOutput {
	return o
}

func (o HostRuntimePolicyArrayOutput) ToHostRuntimePolicyArrayOutputWithContext(ctx context.Context) HostRuntimePolicyArrayOutput {
	return o
}

func (o HostRuntimePolicyArrayOutput) Index(i pulumi.IntInput) HostRuntimePolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *HostRuntimePolicy {
		return vs[0].([]*HostRuntimePolicy)[vs[1].(int)]
	}).(HostRuntimePolicyOutput)
}

type HostRuntimePolicyMapOutput struct{ *pulumi.OutputState }

func (HostRuntimePolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HostRuntimePolicy)(nil)).Elem()
}

func (o HostRuntimePolicyMapOutput) ToHostRuntimePolicyMapOutput() HostRuntimePolicyMapOutput {
	return o
}

func (o HostRuntimePolicyMapOutput) ToHostRuntimePolicyMapOutputWithContext(ctx context.Context) HostRuntimePolicyMapOutput {
	return o
}

func (o HostRuntimePolicyMapOutput) MapIndex(k pulumi.StringInput) HostRuntimePolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *HostRuntimePolicy {
		return vs[0].(map[string]*HostRuntimePolicy)[vs[1].(string)]
	}).(HostRuntimePolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HostRuntimePolicyInput)(nil)).Elem(), &HostRuntimePolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*HostRuntimePolicyArrayInput)(nil)).Elem(), HostRuntimePolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HostRuntimePolicyMapInput)(nil)).Elem(), HostRuntimePolicyMap{})
	pulumi.RegisterOutputType(HostRuntimePolicyOutput{})
	pulumi.RegisterOutputType(HostRuntimePolicyArrayOutput{})
	pulumi.RegisterOutputType(HostRuntimePolicyMapOutput{})
}
