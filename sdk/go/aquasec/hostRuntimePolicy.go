// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aquasec

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-aquasec/sdk/go/aquasec/internal"
)

// ## Example Usage
type HostRuntimePolicy struct {
	pulumi.CustomResourceState

	// Allowed executables configuration.
	AllowedExecutables HostRuntimePolicyAllowedExecutableArrayOutput `pulumi:"allowedExecutables"`
	// Allowed registries configuration.
	AllowedRegistries HostRuntimePolicyAllowedRegistryArrayOutput `pulumi:"allowedRegistries"`
	// Indicates the application scope of the service.
	ApplicationScopes pulumi.StringArrayOutput `pulumi:"applicationScopes"`
	// Detects brute force login attempts
	AuditBruteForceLogin pulumi.BoolPtrOutput `pulumi:"auditBruteForceLogin"`
	// If true, full command arguments will be audited.
	AuditFullCommandArguments pulumi.BoolPtrOutput `pulumi:"auditFullCommandArguments"`
	// If true, host failed logins will be audited.
	AuditHostFailedLoginEvents pulumi.BoolPtrOutput `pulumi:"auditHostFailedLoginEvents"`
	// If true, host successful logins will be audited.
	AuditHostSuccessfulLoginEvents pulumi.BoolPtrOutput `pulumi:"auditHostSuccessfulLoginEvents"`
	// If true, account management will be audited.
	AuditUserAccountManagement pulumi.BoolPtrOutput            `pulumi:"auditUserAccountManagement"`
	Auditing                   HostRuntimePolicyAuditingOutput `pulumi:"auditing"`
	// Username of the account that created the service.
	Author             pulumi.StringOutput                       `pulumi:"author"`
	BlacklistedOsUsers HostRuntimePolicyBlacklistedOsUsersOutput `pulumi:"blacklistedOsUsers"`
	BlockContainerExec pulumi.BoolPtrOutput                      `pulumi:"blockContainerExec"`
	// Detect and prevent communication to DNS/IP addresses known to be used for Cryptocurrency Mining
	BlockCryptocurrencyMining  pulumi.BoolPtrOutput `pulumi:"blockCryptocurrencyMining"`
	BlockDisallowedImages      pulumi.BoolPtrOutput `pulumi:"blockDisallowedImages"`
	BlockFilelessExec          pulumi.BoolPtrOutput `pulumi:"blockFilelessExec"`
	BlockNonCompliantWorkloads pulumi.BoolPtrOutput `pulumi:"blockNonCompliantWorkloads"`
	BlockNonK8sContainers      pulumi.BoolPtrOutput `pulumi:"blockNonK8sContainers"`
	// List of files that are prevented from being read, modified and executed in the containers.
	BlockedFiles pulumi.StringArrayOutput `pulumi:"blockedFiles"`
	// Bypass scope configuration.
	BypassScopes           HostRuntimePolicyBypassScopeArrayOutput `pulumi:"bypassScopes"`
	ContainerExec          HostRuntimePolicyContainerExecOutput    `pulumi:"containerExec"`
	Created                pulumi.StringOutput                     `pulumi:"created"`
	Cve                    pulumi.StringPtrOutput                  `pulumi:"cve"`
	DefaultSecurityProfile pulumi.StringPtrOutput                  `pulumi:"defaultSecurityProfile"`
	// The description of the host runtime policy
	Description pulumi.StringPtrOutput `pulumi:"description"`
	Digest      pulumi.StringPtrOutput `pulumi:"digest"`
	// Drift prevention configuration.
	DriftPreventions         HostRuntimePolicyDriftPreventionArrayOutput `pulumi:"driftPreventions"`
	EnableCryptoMiningDns    pulumi.BoolPtrOutput                        `pulumi:"enableCryptoMiningDns"`
	EnableForkGuard          pulumi.BoolPtrOutput                        `pulumi:"enableForkGuard"`
	EnableIpReputation       pulumi.BoolPtrOutput                        `pulumi:"enableIpReputation"`
	EnablePortScanProtection pulumi.BoolPtrOutput                        `pulumi:"enablePortScanProtection"`
	// Indicates if the runtime policy is enabled or not.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Indicates that policy should effect container execution (not just for audit).
	Enforce pulumi.BoolPtrOutput `pulumi:"enforce"`
	// Indicates the number of days after which the runtime policy will be changed to enforce mode.
	EnforceAfterDays        pulumi.IntPtrOutput `pulumi:"enforceAfterDays"`
	EnforceSchedulerAddedOn pulumi.IntOutput    `pulumi:"enforceSchedulerAddedOn"`
	// List of excluded application scopes.
	ExcludeApplicationScopes pulumi.StringArrayOutput `pulumi:"excludeApplicationScopes"`
	// Executable blacklist configuration.
	ExecutableBlacklists   HostRuntimePolicyExecutableBlacklistArrayOutput `pulumi:"executableBlacklists"`
	FailedKubernetesChecks HostRuntimePolicyFailedKubernetesChecksOutput   `pulumi:"failedKubernetesChecks"`
	FileBlock              HostRuntimePolicyFileBlockOutput                `pulumi:"fileBlock"`
	// Configuration for file integrity monitoring.
	FileIntegrityMonitoring HostRuntimePolicyFileIntegrityMonitoringOutput `pulumi:"fileIntegrityMonitoring"`
	ForkGuardProcessLimit   pulumi.IntPtrOutput                            `pulumi:"forkGuardProcessLimit"`
	ImageName               pulumi.StringPtrOutput                         `pulumi:"imageName"`
	IsAuditChecked          pulumi.BoolPtrOutput                           `pulumi:"isAuditChecked"`
	IsAutoGenerated         pulumi.BoolPtrOutput                           `pulumi:"isAutoGenerated"`
	IsOotbPolicy            pulumi.BoolPtrOutput                           `pulumi:"isOotbPolicy"`
	Lastupdate              pulumi.IntOutput                               `pulumi:"lastupdate"`
	// Container privileges configuration.
	LimitContainerPrivileges HostRuntimePolicyLimitContainerPrivilegeArrayOutput `pulumi:"limitContainerPrivileges"`
	LinuxCapabilities        HostRuntimePolicyLinuxCapabilitiesOutput            `pulumi:"linuxCapabilities"`
	// Configuration for Real-Time Malware Protection.
	MalwareScanOptions HostRuntimePolicyMalwareScanOptionsOutput `pulumi:"malwareScanOptions"`
	// If true, system log will be monitored.
	MonitorSystemLogIntegrity pulumi.BoolPtrOutput `pulumi:"monitorSystemLogIntegrity"`
	// If true, system time changes will be monitored.
	MonitorSystemTimeChanges pulumi.BoolPtrOutput `pulumi:"monitorSystemTimeChanges"`
	// If true, windows service operations will be monitored.
	MonitorWindowsServices pulumi.BoolPtrOutput `pulumi:"monitorWindowsServices"`
	// Name of the host runtime policy
	Name                 pulumi.StringOutput  `pulumi:"name"`
	NoNewPrivileges      pulumi.BoolPtrOutput `pulumi:"noNewPrivileges"`
	OnlyRegisteredImages pulumi.BoolPtrOutput `pulumi:"onlyRegisteredImages"`
	// List of OS (Linux or Windows) groups that are allowed to authenticate to the host, and block authentication requests from all others. Groups can be either Linux groups or Windows AD groups.
	OsGroupsAlloweds pulumi.StringArrayOutput `pulumi:"osGroupsAlloweds"`
	// List of OS (Linux or Windows) groups that are not allowed to authenticate to the host, and block authentication requests from all others. Groups can be either Linux groups or Windows AD groups.
	OsGroupsBlockeds pulumi.StringArrayOutput `pulumi:"osGroupsBlockeds"`
	// List of OS (Linux or Windows) users that are allowed to authenticate to the host, and block authentication requests from all others.
	OsUsersAlloweds pulumi.StringArrayOutput `pulumi:"osUsersAlloweds"`
	// List of OS (Linux or Windows) users that are not allowed to authenticate to the host, and block authentication requests from all others.
	OsUsersBlockeds          pulumi.StringArrayOutput                        `pulumi:"osUsersBlockeds"`
	PackageBlocks            HostRuntimePolicyPackageBlockArrayOutput        `pulumi:"packageBlocks"`
	Permission               pulumi.StringPtrOutput                          `pulumi:"permission"`
	PortBlock                HostRuntimePolicyPortBlockOutput                `pulumi:"portBlock"`
	ReadonlyFiles            HostRuntimePolicyReadonlyFilesOutput            `pulumi:"readonlyFiles"`
	ReadonlyRegistry         HostRuntimePolicyReadonlyRegistryOutput         `pulumi:"readonlyRegistry"`
	Registry                 pulumi.StringPtrOutput                          `pulumi:"registry"`
	RegistryAccessMonitoring HostRuntimePolicyRegistryAccessMonitoringOutput `pulumi:"registryAccessMonitoring"`
	RepoName                 pulumi.StringPtrOutput                          `pulumi:"repoName"`
	ResourceName             pulumi.StringPtrOutput                          `pulumi:"resourceName"`
	ResourceType             pulumi.StringPtrOutput                          `pulumi:"resourceType"`
	// Restricted volumes configuration.
	RestrictedVolumes HostRuntimePolicyRestrictedVolumeArrayOutput `pulumi:"restrictedVolumes"`
	ReverseShell      HostRuntimePolicyReverseShellOutput          `pulumi:"reverseShell"`
	RuntimeMode       pulumi.IntPtrOutput                          `pulumi:"runtimeMode"`
	RuntimeType       pulumi.StringOutput                          `pulumi:"runtimeType"`
	// Logical expression of how to compute the dependency of the scope variables.
	ScopeExpression pulumi.StringOutput `pulumi:"scopeExpression"`
	// List of scope attributes.
	ScopeVariables HostRuntimePolicyScopeVariableArrayOutput `pulumi:"scopeVariables"`
	// Scope configuration.
	Scopes                    HostRuntimePolicyScopeArrayOutput                `pulumi:"scopes"`
	SystemIntegrityProtection HostRuntimePolicySystemIntegrityProtectionOutput `pulumi:"systemIntegrityProtection"`
	Tripwire                  HostRuntimePolicyTripwireOutput                  `pulumi:"tripwire"`
	Type                      pulumi.StringOutput                              `pulumi:"type"`
	Updated                   pulumi.StringOutput                              `pulumi:"updated"`
	Version                   pulumi.StringPtrOutput                           `pulumi:"version"`
	VpatchVersion             pulumi.StringPtrOutput                           `pulumi:"vpatchVersion"`
	WhitelistedOsUsers        HostRuntimePolicyWhitelistedOsUsersOutput        `pulumi:"whitelistedOsUsers"`
}

// NewHostRuntimePolicy registers a new resource with the given unique name, arguments, and options.
func NewHostRuntimePolicy(ctx *pulumi.Context,
	name string, args *HostRuntimePolicyArgs, opts ...pulumi.ResourceOption) (*HostRuntimePolicy, error) {
	if args == nil {
		args = &HostRuntimePolicyArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource HostRuntimePolicy
	err := ctx.RegisterResource("aquasec:index/hostRuntimePolicy:HostRuntimePolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHostRuntimePolicy gets an existing HostRuntimePolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHostRuntimePolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HostRuntimePolicyState, opts ...pulumi.ResourceOption) (*HostRuntimePolicy, error) {
	var resource HostRuntimePolicy
	err := ctx.ReadResource("aquasec:index/hostRuntimePolicy:HostRuntimePolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HostRuntimePolicy resources.
type hostRuntimePolicyState struct {
	// Allowed executables configuration.
	AllowedExecutables []HostRuntimePolicyAllowedExecutable `pulumi:"allowedExecutables"`
	// Allowed registries configuration.
	AllowedRegistries []HostRuntimePolicyAllowedRegistry `pulumi:"allowedRegistries"`
	// Indicates the application scope of the service.
	ApplicationScopes []string `pulumi:"applicationScopes"`
	// Detects brute force login attempts
	AuditBruteForceLogin *bool `pulumi:"auditBruteForceLogin"`
	// If true, full command arguments will be audited.
	AuditFullCommandArguments *bool `pulumi:"auditFullCommandArguments"`
	// If true, host failed logins will be audited.
	AuditHostFailedLoginEvents *bool `pulumi:"auditHostFailedLoginEvents"`
	// If true, host successful logins will be audited.
	AuditHostSuccessfulLoginEvents *bool `pulumi:"auditHostSuccessfulLoginEvents"`
	// If true, account management will be audited.
	AuditUserAccountManagement *bool                      `pulumi:"auditUserAccountManagement"`
	Auditing                   *HostRuntimePolicyAuditing `pulumi:"auditing"`
	// Username of the account that created the service.
	Author             *string                              `pulumi:"author"`
	BlacklistedOsUsers *HostRuntimePolicyBlacklistedOsUsers `pulumi:"blacklistedOsUsers"`
	BlockContainerExec *bool                                `pulumi:"blockContainerExec"`
	// Detect and prevent communication to DNS/IP addresses known to be used for Cryptocurrency Mining
	BlockCryptocurrencyMining  *bool `pulumi:"blockCryptocurrencyMining"`
	BlockDisallowedImages      *bool `pulumi:"blockDisallowedImages"`
	BlockFilelessExec          *bool `pulumi:"blockFilelessExec"`
	BlockNonCompliantWorkloads *bool `pulumi:"blockNonCompliantWorkloads"`
	BlockNonK8sContainers      *bool `pulumi:"blockNonK8sContainers"`
	// List of files that are prevented from being read, modified and executed in the containers.
	BlockedFiles []string `pulumi:"blockedFiles"`
	// Bypass scope configuration.
	BypassScopes           []HostRuntimePolicyBypassScope  `pulumi:"bypassScopes"`
	ContainerExec          *HostRuntimePolicyContainerExec `pulumi:"containerExec"`
	Created                *string                         `pulumi:"created"`
	Cve                    *string                         `pulumi:"cve"`
	DefaultSecurityProfile *string                         `pulumi:"defaultSecurityProfile"`
	// The description of the host runtime policy
	Description *string `pulumi:"description"`
	Digest      *string `pulumi:"digest"`
	// Drift prevention configuration.
	DriftPreventions         []HostRuntimePolicyDriftPrevention `pulumi:"driftPreventions"`
	EnableCryptoMiningDns    *bool                              `pulumi:"enableCryptoMiningDns"`
	EnableForkGuard          *bool                              `pulumi:"enableForkGuard"`
	EnableIpReputation       *bool                              `pulumi:"enableIpReputation"`
	EnablePortScanProtection *bool                              `pulumi:"enablePortScanProtection"`
	// Indicates if the runtime policy is enabled or not.
	Enabled *bool `pulumi:"enabled"`
	// Indicates that policy should effect container execution (not just for audit).
	Enforce *bool `pulumi:"enforce"`
	// Indicates the number of days after which the runtime policy will be changed to enforce mode.
	EnforceAfterDays        *int `pulumi:"enforceAfterDays"`
	EnforceSchedulerAddedOn *int `pulumi:"enforceSchedulerAddedOn"`
	// List of excluded application scopes.
	ExcludeApplicationScopes []string `pulumi:"excludeApplicationScopes"`
	// Executable blacklist configuration.
	ExecutableBlacklists   []HostRuntimePolicyExecutableBlacklist   `pulumi:"executableBlacklists"`
	FailedKubernetesChecks *HostRuntimePolicyFailedKubernetesChecks `pulumi:"failedKubernetesChecks"`
	FileBlock              *HostRuntimePolicyFileBlock              `pulumi:"fileBlock"`
	// Configuration for file integrity monitoring.
	FileIntegrityMonitoring *HostRuntimePolicyFileIntegrityMonitoring `pulumi:"fileIntegrityMonitoring"`
	ForkGuardProcessLimit   *int                                      `pulumi:"forkGuardProcessLimit"`
	ImageName               *string                                   `pulumi:"imageName"`
	IsAuditChecked          *bool                                     `pulumi:"isAuditChecked"`
	IsAutoGenerated         *bool                                     `pulumi:"isAutoGenerated"`
	IsOotbPolicy            *bool                                     `pulumi:"isOotbPolicy"`
	Lastupdate              *int                                      `pulumi:"lastupdate"`
	// Container privileges configuration.
	LimitContainerPrivileges []HostRuntimePolicyLimitContainerPrivilege `pulumi:"limitContainerPrivileges"`
	LinuxCapabilities        *HostRuntimePolicyLinuxCapabilities        `pulumi:"linuxCapabilities"`
	// Configuration for Real-Time Malware Protection.
	MalwareScanOptions *HostRuntimePolicyMalwareScanOptions `pulumi:"malwareScanOptions"`
	// If true, system log will be monitored.
	MonitorSystemLogIntegrity *bool `pulumi:"monitorSystemLogIntegrity"`
	// If true, system time changes will be monitored.
	MonitorSystemTimeChanges *bool `pulumi:"monitorSystemTimeChanges"`
	// If true, windows service operations will be monitored.
	MonitorWindowsServices *bool `pulumi:"monitorWindowsServices"`
	// Name of the host runtime policy
	Name                 *string `pulumi:"name"`
	NoNewPrivileges      *bool   `pulumi:"noNewPrivileges"`
	OnlyRegisteredImages *bool   `pulumi:"onlyRegisteredImages"`
	// List of OS (Linux or Windows) groups that are allowed to authenticate to the host, and block authentication requests from all others. Groups can be either Linux groups or Windows AD groups.
	OsGroupsAlloweds []string `pulumi:"osGroupsAlloweds"`
	// List of OS (Linux or Windows) groups that are not allowed to authenticate to the host, and block authentication requests from all others. Groups can be either Linux groups or Windows AD groups.
	OsGroupsBlockeds []string `pulumi:"osGroupsBlockeds"`
	// List of OS (Linux or Windows) users that are allowed to authenticate to the host, and block authentication requests from all others.
	OsUsersAlloweds []string `pulumi:"osUsersAlloweds"`
	// List of OS (Linux or Windows) users that are not allowed to authenticate to the host, and block authentication requests from all others.
	OsUsersBlockeds          []string                                   `pulumi:"osUsersBlockeds"`
	PackageBlocks            []HostRuntimePolicyPackageBlock            `pulumi:"packageBlocks"`
	Permission               *string                                    `pulumi:"permission"`
	PortBlock                *HostRuntimePolicyPortBlock                `pulumi:"portBlock"`
	ReadonlyFiles            *HostRuntimePolicyReadonlyFiles            `pulumi:"readonlyFiles"`
	ReadonlyRegistry         *HostRuntimePolicyReadonlyRegistry         `pulumi:"readonlyRegistry"`
	Registry                 *string                                    `pulumi:"registry"`
	RegistryAccessMonitoring *HostRuntimePolicyRegistryAccessMonitoring `pulumi:"registryAccessMonitoring"`
	RepoName                 *string                                    `pulumi:"repoName"`
	ResourceName             *string                                    `pulumi:"resourceName"`
	ResourceType             *string                                    `pulumi:"resourceType"`
	// Restricted volumes configuration.
	RestrictedVolumes []HostRuntimePolicyRestrictedVolume `pulumi:"restrictedVolumes"`
	ReverseShell      *HostRuntimePolicyReverseShell      `pulumi:"reverseShell"`
	RuntimeMode       *int                                `pulumi:"runtimeMode"`
	RuntimeType       *string                             `pulumi:"runtimeType"`
	// Logical expression of how to compute the dependency of the scope variables.
	ScopeExpression *string `pulumi:"scopeExpression"`
	// List of scope attributes.
	ScopeVariables []HostRuntimePolicyScopeVariable `pulumi:"scopeVariables"`
	// Scope configuration.
	Scopes                    []HostRuntimePolicyScope                    `pulumi:"scopes"`
	SystemIntegrityProtection *HostRuntimePolicySystemIntegrityProtection `pulumi:"systemIntegrityProtection"`
	Tripwire                  *HostRuntimePolicyTripwire                  `pulumi:"tripwire"`
	Type                      *string                                     `pulumi:"type"`
	Updated                   *string                                     `pulumi:"updated"`
	Version                   *string                                     `pulumi:"version"`
	VpatchVersion             *string                                     `pulumi:"vpatchVersion"`
	WhitelistedOsUsers        *HostRuntimePolicyWhitelistedOsUsers        `pulumi:"whitelistedOsUsers"`
}

type HostRuntimePolicyState struct {
	// Allowed executables configuration.
	AllowedExecutables HostRuntimePolicyAllowedExecutableArrayInput
	// Allowed registries configuration.
	AllowedRegistries HostRuntimePolicyAllowedRegistryArrayInput
	// Indicates the application scope of the service.
	ApplicationScopes pulumi.StringArrayInput
	// Detects brute force login attempts
	AuditBruteForceLogin pulumi.BoolPtrInput
	// If true, full command arguments will be audited.
	AuditFullCommandArguments pulumi.BoolPtrInput
	// If true, host failed logins will be audited.
	AuditHostFailedLoginEvents pulumi.BoolPtrInput
	// If true, host successful logins will be audited.
	AuditHostSuccessfulLoginEvents pulumi.BoolPtrInput
	// If true, account management will be audited.
	AuditUserAccountManagement pulumi.BoolPtrInput
	Auditing                   HostRuntimePolicyAuditingPtrInput
	// Username of the account that created the service.
	Author             pulumi.StringPtrInput
	BlacklistedOsUsers HostRuntimePolicyBlacklistedOsUsersPtrInput
	BlockContainerExec pulumi.BoolPtrInput
	// Detect and prevent communication to DNS/IP addresses known to be used for Cryptocurrency Mining
	BlockCryptocurrencyMining  pulumi.BoolPtrInput
	BlockDisallowedImages      pulumi.BoolPtrInput
	BlockFilelessExec          pulumi.BoolPtrInput
	BlockNonCompliantWorkloads pulumi.BoolPtrInput
	BlockNonK8sContainers      pulumi.BoolPtrInput
	// List of files that are prevented from being read, modified and executed in the containers.
	BlockedFiles pulumi.StringArrayInput
	// Bypass scope configuration.
	BypassScopes           HostRuntimePolicyBypassScopeArrayInput
	ContainerExec          HostRuntimePolicyContainerExecPtrInput
	Created                pulumi.StringPtrInput
	Cve                    pulumi.StringPtrInput
	DefaultSecurityProfile pulumi.StringPtrInput
	// The description of the host runtime policy
	Description pulumi.StringPtrInput
	Digest      pulumi.StringPtrInput
	// Drift prevention configuration.
	DriftPreventions         HostRuntimePolicyDriftPreventionArrayInput
	EnableCryptoMiningDns    pulumi.BoolPtrInput
	EnableForkGuard          pulumi.BoolPtrInput
	EnableIpReputation       pulumi.BoolPtrInput
	EnablePortScanProtection pulumi.BoolPtrInput
	// Indicates if the runtime policy is enabled or not.
	Enabled pulumi.BoolPtrInput
	// Indicates that policy should effect container execution (not just for audit).
	Enforce pulumi.BoolPtrInput
	// Indicates the number of days after which the runtime policy will be changed to enforce mode.
	EnforceAfterDays        pulumi.IntPtrInput
	EnforceSchedulerAddedOn pulumi.IntPtrInput
	// List of excluded application scopes.
	ExcludeApplicationScopes pulumi.StringArrayInput
	// Executable blacklist configuration.
	ExecutableBlacklists   HostRuntimePolicyExecutableBlacklistArrayInput
	FailedKubernetesChecks HostRuntimePolicyFailedKubernetesChecksPtrInput
	FileBlock              HostRuntimePolicyFileBlockPtrInput
	// Configuration for file integrity monitoring.
	FileIntegrityMonitoring HostRuntimePolicyFileIntegrityMonitoringPtrInput
	ForkGuardProcessLimit   pulumi.IntPtrInput
	ImageName               pulumi.StringPtrInput
	IsAuditChecked          pulumi.BoolPtrInput
	IsAutoGenerated         pulumi.BoolPtrInput
	IsOotbPolicy            pulumi.BoolPtrInput
	Lastupdate              pulumi.IntPtrInput
	// Container privileges configuration.
	LimitContainerPrivileges HostRuntimePolicyLimitContainerPrivilegeArrayInput
	LinuxCapabilities        HostRuntimePolicyLinuxCapabilitiesPtrInput
	// Configuration for Real-Time Malware Protection.
	MalwareScanOptions HostRuntimePolicyMalwareScanOptionsPtrInput
	// If true, system log will be monitored.
	MonitorSystemLogIntegrity pulumi.BoolPtrInput
	// If true, system time changes will be monitored.
	MonitorSystemTimeChanges pulumi.BoolPtrInput
	// If true, windows service operations will be monitored.
	MonitorWindowsServices pulumi.BoolPtrInput
	// Name of the host runtime policy
	Name                 pulumi.StringPtrInput
	NoNewPrivileges      pulumi.BoolPtrInput
	OnlyRegisteredImages pulumi.BoolPtrInput
	// List of OS (Linux or Windows) groups that are allowed to authenticate to the host, and block authentication requests from all others. Groups can be either Linux groups or Windows AD groups.
	OsGroupsAlloweds pulumi.StringArrayInput
	// List of OS (Linux or Windows) groups that are not allowed to authenticate to the host, and block authentication requests from all others. Groups can be either Linux groups or Windows AD groups.
	OsGroupsBlockeds pulumi.StringArrayInput
	// List of OS (Linux or Windows) users that are allowed to authenticate to the host, and block authentication requests from all others.
	OsUsersAlloweds pulumi.StringArrayInput
	// List of OS (Linux or Windows) users that are not allowed to authenticate to the host, and block authentication requests from all others.
	OsUsersBlockeds          pulumi.StringArrayInput
	PackageBlocks            HostRuntimePolicyPackageBlockArrayInput
	Permission               pulumi.StringPtrInput
	PortBlock                HostRuntimePolicyPortBlockPtrInput
	ReadonlyFiles            HostRuntimePolicyReadonlyFilesPtrInput
	ReadonlyRegistry         HostRuntimePolicyReadonlyRegistryPtrInput
	Registry                 pulumi.StringPtrInput
	RegistryAccessMonitoring HostRuntimePolicyRegistryAccessMonitoringPtrInput
	RepoName                 pulumi.StringPtrInput
	ResourceName             pulumi.StringPtrInput
	ResourceType             pulumi.StringPtrInput
	// Restricted volumes configuration.
	RestrictedVolumes HostRuntimePolicyRestrictedVolumeArrayInput
	ReverseShell      HostRuntimePolicyReverseShellPtrInput
	RuntimeMode       pulumi.IntPtrInput
	RuntimeType       pulumi.StringPtrInput
	// Logical expression of how to compute the dependency of the scope variables.
	ScopeExpression pulumi.StringPtrInput
	// List of scope attributes.
	ScopeVariables HostRuntimePolicyScopeVariableArrayInput
	// Scope configuration.
	Scopes                    HostRuntimePolicyScopeArrayInput
	SystemIntegrityProtection HostRuntimePolicySystemIntegrityProtectionPtrInput
	Tripwire                  HostRuntimePolicyTripwirePtrInput
	Type                      pulumi.StringPtrInput
	Updated                   pulumi.StringPtrInput
	Version                   pulumi.StringPtrInput
	VpatchVersion             pulumi.StringPtrInput
	WhitelistedOsUsers        HostRuntimePolicyWhitelistedOsUsersPtrInput
}

func (HostRuntimePolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*hostRuntimePolicyState)(nil)).Elem()
}

type hostRuntimePolicyArgs struct {
	// Allowed executables configuration.
	AllowedExecutables []HostRuntimePolicyAllowedExecutable `pulumi:"allowedExecutables"`
	// Allowed registries configuration.
	AllowedRegistries []HostRuntimePolicyAllowedRegistry `pulumi:"allowedRegistries"`
	// Indicates the application scope of the service.
	ApplicationScopes []string `pulumi:"applicationScopes"`
	// Detects brute force login attempts
	AuditBruteForceLogin *bool `pulumi:"auditBruteForceLogin"`
	// If true, full command arguments will be audited.
	AuditFullCommandArguments *bool `pulumi:"auditFullCommandArguments"`
	// If true, host failed logins will be audited.
	AuditHostFailedLoginEvents *bool `pulumi:"auditHostFailedLoginEvents"`
	// If true, host successful logins will be audited.
	AuditHostSuccessfulLoginEvents *bool `pulumi:"auditHostSuccessfulLoginEvents"`
	// If true, account management will be audited.
	AuditUserAccountManagement *bool                      `pulumi:"auditUserAccountManagement"`
	Auditing                   *HostRuntimePolicyAuditing `pulumi:"auditing"`
	// Username of the account that created the service.
	Author             *string                              `pulumi:"author"`
	BlacklistedOsUsers *HostRuntimePolicyBlacklistedOsUsers `pulumi:"blacklistedOsUsers"`
	BlockContainerExec *bool                                `pulumi:"blockContainerExec"`
	// Detect and prevent communication to DNS/IP addresses known to be used for Cryptocurrency Mining
	BlockCryptocurrencyMining  *bool `pulumi:"blockCryptocurrencyMining"`
	BlockDisallowedImages      *bool `pulumi:"blockDisallowedImages"`
	BlockFilelessExec          *bool `pulumi:"blockFilelessExec"`
	BlockNonCompliantWorkloads *bool `pulumi:"blockNonCompliantWorkloads"`
	BlockNonK8sContainers      *bool `pulumi:"blockNonK8sContainers"`
	// List of files that are prevented from being read, modified and executed in the containers.
	BlockedFiles []string `pulumi:"blockedFiles"`
	// Bypass scope configuration.
	BypassScopes           []HostRuntimePolicyBypassScope  `pulumi:"bypassScopes"`
	ContainerExec          *HostRuntimePolicyContainerExec `pulumi:"containerExec"`
	Created                *string                         `pulumi:"created"`
	Cve                    *string                         `pulumi:"cve"`
	DefaultSecurityProfile *string                         `pulumi:"defaultSecurityProfile"`
	// The description of the host runtime policy
	Description *string `pulumi:"description"`
	Digest      *string `pulumi:"digest"`
	// Drift prevention configuration.
	DriftPreventions         []HostRuntimePolicyDriftPrevention `pulumi:"driftPreventions"`
	EnableCryptoMiningDns    *bool                              `pulumi:"enableCryptoMiningDns"`
	EnableForkGuard          *bool                              `pulumi:"enableForkGuard"`
	EnableIpReputation       *bool                              `pulumi:"enableIpReputation"`
	EnablePortScanProtection *bool                              `pulumi:"enablePortScanProtection"`
	// Indicates if the runtime policy is enabled or not.
	Enabled *bool `pulumi:"enabled"`
	// Indicates that policy should effect container execution (not just for audit).
	Enforce *bool `pulumi:"enforce"`
	// Indicates the number of days after which the runtime policy will be changed to enforce mode.
	EnforceAfterDays        *int `pulumi:"enforceAfterDays"`
	EnforceSchedulerAddedOn *int `pulumi:"enforceSchedulerAddedOn"`
	// List of excluded application scopes.
	ExcludeApplicationScopes []string `pulumi:"excludeApplicationScopes"`
	// Executable blacklist configuration.
	ExecutableBlacklists   []HostRuntimePolicyExecutableBlacklist   `pulumi:"executableBlacklists"`
	FailedKubernetesChecks *HostRuntimePolicyFailedKubernetesChecks `pulumi:"failedKubernetesChecks"`
	FileBlock              *HostRuntimePolicyFileBlock              `pulumi:"fileBlock"`
	// Configuration for file integrity monitoring.
	FileIntegrityMonitoring *HostRuntimePolicyFileIntegrityMonitoring `pulumi:"fileIntegrityMonitoring"`
	ForkGuardProcessLimit   *int                                      `pulumi:"forkGuardProcessLimit"`
	ImageName               *string                                   `pulumi:"imageName"`
	IsAuditChecked          *bool                                     `pulumi:"isAuditChecked"`
	IsAutoGenerated         *bool                                     `pulumi:"isAutoGenerated"`
	IsOotbPolicy            *bool                                     `pulumi:"isOotbPolicy"`
	Lastupdate              *int                                      `pulumi:"lastupdate"`
	// Container privileges configuration.
	LimitContainerPrivileges []HostRuntimePolicyLimitContainerPrivilege `pulumi:"limitContainerPrivileges"`
	LinuxCapabilities        *HostRuntimePolicyLinuxCapabilities        `pulumi:"linuxCapabilities"`
	// Configuration for Real-Time Malware Protection.
	MalwareScanOptions *HostRuntimePolicyMalwareScanOptions `pulumi:"malwareScanOptions"`
	// If true, system log will be monitored.
	MonitorSystemLogIntegrity *bool `pulumi:"monitorSystemLogIntegrity"`
	// If true, system time changes will be monitored.
	MonitorSystemTimeChanges *bool `pulumi:"monitorSystemTimeChanges"`
	// If true, windows service operations will be monitored.
	MonitorWindowsServices *bool `pulumi:"monitorWindowsServices"`
	// Name of the host runtime policy
	Name                 *string `pulumi:"name"`
	NoNewPrivileges      *bool   `pulumi:"noNewPrivileges"`
	OnlyRegisteredImages *bool   `pulumi:"onlyRegisteredImages"`
	// List of OS (Linux or Windows) groups that are allowed to authenticate to the host, and block authentication requests from all others. Groups can be either Linux groups or Windows AD groups.
	OsGroupsAlloweds []string `pulumi:"osGroupsAlloweds"`
	// List of OS (Linux or Windows) groups that are not allowed to authenticate to the host, and block authentication requests from all others. Groups can be either Linux groups or Windows AD groups.
	OsGroupsBlockeds []string `pulumi:"osGroupsBlockeds"`
	// List of OS (Linux or Windows) users that are allowed to authenticate to the host, and block authentication requests from all others.
	OsUsersAlloweds []string `pulumi:"osUsersAlloweds"`
	// List of OS (Linux or Windows) users that are not allowed to authenticate to the host, and block authentication requests from all others.
	OsUsersBlockeds          []string                                   `pulumi:"osUsersBlockeds"`
	PackageBlocks            []HostRuntimePolicyPackageBlock            `pulumi:"packageBlocks"`
	Permission               *string                                    `pulumi:"permission"`
	PortBlock                *HostRuntimePolicyPortBlock                `pulumi:"portBlock"`
	ReadonlyFiles            *HostRuntimePolicyReadonlyFiles            `pulumi:"readonlyFiles"`
	ReadonlyRegistry         *HostRuntimePolicyReadonlyRegistry         `pulumi:"readonlyRegistry"`
	Registry                 *string                                    `pulumi:"registry"`
	RegistryAccessMonitoring *HostRuntimePolicyRegistryAccessMonitoring `pulumi:"registryAccessMonitoring"`
	RepoName                 *string                                    `pulumi:"repoName"`
	ResourceName             *string                                    `pulumi:"resourceName"`
	ResourceType             *string                                    `pulumi:"resourceType"`
	// Restricted volumes configuration.
	RestrictedVolumes []HostRuntimePolicyRestrictedVolume `pulumi:"restrictedVolumes"`
	ReverseShell      *HostRuntimePolicyReverseShell      `pulumi:"reverseShell"`
	RuntimeMode       *int                                `pulumi:"runtimeMode"`
	RuntimeType       *string                             `pulumi:"runtimeType"`
	// Logical expression of how to compute the dependency of the scope variables.
	ScopeExpression *string `pulumi:"scopeExpression"`
	// List of scope attributes.
	ScopeVariables []HostRuntimePolicyScopeVariable `pulumi:"scopeVariables"`
	// Scope configuration.
	Scopes                    []HostRuntimePolicyScope                    `pulumi:"scopes"`
	SystemIntegrityProtection *HostRuntimePolicySystemIntegrityProtection `pulumi:"systemIntegrityProtection"`
	Tripwire                  *HostRuntimePolicyTripwire                  `pulumi:"tripwire"`
	Type                      *string                                     `pulumi:"type"`
	Updated                   *string                                     `pulumi:"updated"`
	Version                   *string                                     `pulumi:"version"`
	VpatchVersion             *string                                     `pulumi:"vpatchVersion"`
	WhitelistedOsUsers        *HostRuntimePolicyWhitelistedOsUsers        `pulumi:"whitelistedOsUsers"`
}

// The set of arguments for constructing a HostRuntimePolicy resource.
type HostRuntimePolicyArgs struct {
	// Allowed executables configuration.
	AllowedExecutables HostRuntimePolicyAllowedExecutableArrayInput
	// Allowed registries configuration.
	AllowedRegistries HostRuntimePolicyAllowedRegistryArrayInput
	// Indicates the application scope of the service.
	ApplicationScopes pulumi.StringArrayInput
	// Detects brute force login attempts
	AuditBruteForceLogin pulumi.BoolPtrInput
	// If true, full command arguments will be audited.
	AuditFullCommandArguments pulumi.BoolPtrInput
	// If true, host failed logins will be audited.
	AuditHostFailedLoginEvents pulumi.BoolPtrInput
	// If true, host successful logins will be audited.
	AuditHostSuccessfulLoginEvents pulumi.BoolPtrInput
	// If true, account management will be audited.
	AuditUserAccountManagement pulumi.BoolPtrInput
	Auditing                   HostRuntimePolicyAuditingPtrInput
	// Username of the account that created the service.
	Author             pulumi.StringPtrInput
	BlacklistedOsUsers HostRuntimePolicyBlacklistedOsUsersPtrInput
	BlockContainerExec pulumi.BoolPtrInput
	// Detect and prevent communication to DNS/IP addresses known to be used for Cryptocurrency Mining
	BlockCryptocurrencyMining  pulumi.BoolPtrInput
	BlockDisallowedImages      pulumi.BoolPtrInput
	BlockFilelessExec          pulumi.BoolPtrInput
	BlockNonCompliantWorkloads pulumi.BoolPtrInput
	BlockNonK8sContainers      pulumi.BoolPtrInput
	// List of files that are prevented from being read, modified and executed in the containers.
	BlockedFiles pulumi.StringArrayInput
	// Bypass scope configuration.
	BypassScopes           HostRuntimePolicyBypassScopeArrayInput
	ContainerExec          HostRuntimePolicyContainerExecPtrInput
	Created                pulumi.StringPtrInput
	Cve                    pulumi.StringPtrInput
	DefaultSecurityProfile pulumi.StringPtrInput
	// The description of the host runtime policy
	Description pulumi.StringPtrInput
	Digest      pulumi.StringPtrInput
	// Drift prevention configuration.
	DriftPreventions         HostRuntimePolicyDriftPreventionArrayInput
	EnableCryptoMiningDns    pulumi.BoolPtrInput
	EnableForkGuard          pulumi.BoolPtrInput
	EnableIpReputation       pulumi.BoolPtrInput
	EnablePortScanProtection pulumi.BoolPtrInput
	// Indicates if the runtime policy is enabled or not.
	Enabled pulumi.BoolPtrInput
	// Indicates that policy should effect container execution (not just for audit).
	Enforce pulumi.BoolPtrInput
	// Indicates the number of days after which the runtime policy will be changed to enforce mode.
	EnforceAfterDays        pulumi.IntPtrInput
	EnforceSchedulerAddedOn pulumi.IntPtrInput
	// List of excluded application scopes.
	ExcludeApplicationScopes pulumi.StringArrayInput
	// Executable blacklist configuration.
	ExecutableBlacklists   HostRuntimePolicyExecutableBlacklistArrayInput
	FailedKubernetesChecks HostRuntimePolicyFailedKubernetesChecksPtrInput
	FileBlock              HostRuntimePolicyFileBlockPtrInput
	// Configuration for file integrity monitoring.
	FileIntegrityMonitoring HostRuntimePolicyFileIntegrityMonitoringPtrInput
	ForkGuardProcessLimit   pulumi.IntPtrInput
	ImageName               pulumi.StringPtrInput
	IsAuditChecked          pulumi.BoolPtrInput
	IsAutoGenerated         pulumi.BoolPtrInput
	IsOotbPolicy            pulumi.BoolPtrInput
	Lastupdate              pulumi.IntPtrInput
	// Container privileges configuration.
	LimitContainerPrivileges HostRuntimePolicyLimitContainerPrivilegeArrayInput
	LinuxCapabilities        HostRuntimePolicyLinuxCapabilitiesPtrInput
	// Configuration for Real-Time Malware Protection.
	MalwareScanOptions HostRuntimePolicyMalwareScanOptionsPtrInput
	// If true, system log will be monitored.
	MonitorSystemLogIntegrity pulumi.BoolPtrInput
	// If true, system time changes will be monitored.
	MonitorSystemTimeChanges pulumi.BoolPtrInput
	// If true, windows service operations will be monitored.
	MonitorWindowsServices pulumi.BoolPtrInput
	// Name of the host runtime policy
	Name                 pulumi.StringPtrInput
	NoNewPrivileges      pulumi.BoolPtrInput
	OnlyRegisteredImages pulumi.BoolPtrInput
	// List of OS (Linux or Windows) groups that are allowed to authenticate to the host, and block authentication requests from all others. Groups can be either Linux groups or Windows AD groups.
	OsGroupsAlloweds pulumi.StringArrayInput
	// List of OS (Linux or Windows) groups that are not allowed to authenticate to the host, and block authentication requests from all others. Groups can be either Linux groups or Windows AD groups.
	OsGroupsBlockeds pulumi.StringArrayInput
	// List of OS (Linux or Windows) users that are allowed to authenticate to the host, and block authentication requests from all others.
	OsUsersAlloweds pulumi.StringArrayInput
	// List of OS (Linux or Windows) users that are not allowed to authenticate to the host, and block authentication requests from all others.
	OsUsersBlockeds          pulumi.StringArrayInput
	PackageBlocks            HostRuntimePolicyPackageBlockArrayInput
	Permission               pulumi.StringPtrInput
	PortBlock                HostRuntimePolicyPortBlockPtrInput
	ReadonlyFiles            HostRuntimePolicyReadonlyFilesPtrInput
	ReadonlyRegistry         HostRuntimePolicyReadonlyRegistryPtrInput
	Registry                 pulumi.StringPtrInput
	RegistryAccessMonitoring HostRuntimePolicyRegistryAccessMonitoringPtrInput
	RepoName                 pulumi.StringPtrInput
	ResourceName             pulumi.StringPtrInput
	ResourceType             pulumi.StringPtrInput
	// Restricted volumes configuration.
	RestrictedVolumes HostRuntimePolicyRestrictedVolumeArrayInput
	ReverseShell      HostRuntimePolicyReverseShellPtrInput
	RuntimeMode       pulumi.IntPtrInput
	RuntimeType       pulumi.StringPtrInput
	// Logical expression of how to compute the dependency of the scope variables.
	ScopeExpression pulumi.StringPtrInput
	// List of scope attributes.
	ScopeVariables HostRuntimePolicyScopeVariableArrayInput
	// Scope configuration.
	Scopes                    HostRuntimePolicyScopeArrayInput
	SystemIntegrityProtection HostRuntimePolicySystemIntegrityProtectionPtrInput
	Tripwire                  HostRuntimePolicyTripwirePtrInput
	Type                      pulumi.StringPtrInput
	Updated                   pulumi.StringPtrInput
	Version                   pulumi.StringPtrInput
	VpatchVersion             pulumi.StringPtrInput
	WhitelistedOsUsers        HostRuntimePolicyWhitelistedOsUsersPtrInput
}

func (HostRuntimePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hostRuntimePolicyArgs)(nil)).Elem()
}

type HostRuntimePolicyInput interface {
	pulumi.Input

	ToHostRuntimePolicyOutput() HostRuntimePolicyOutput
	ToHostRuntimePolicyOutputWithContext(ctx context.Context) HostRuntimePolicyOutput
}

func (*HostRuntimePolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**HostRuntimePolicy)(nil)).Elem()
}

func (i *HostRuntimePolicy) ToHostRuntimePolicyOutput() HostRuntimePolicyOutput {
	return i.ToHostRuntimePolicyOutputWithContext(context.Background())
}

func (i *HostRuntimePolicy) ToHostRuntimePolicyOutputWithContext(ctx context.Context) HostRuntimePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostRuntimePolicyOutput)
}

// HostRuntimePolicyArrayInput is an input type that accepts HostRuntimePolicyArray and HostRuntimePolicyArrayOutput values.
// You can construct a concrete instance of `HostRuntimePolicyArrayInput` via:
//
//	HostRuntimePolicyArray{ HostRuntimePolicyArgs{...} }
type HostRuntimePolicyArrayInput interface {
	pulumi.Input

	ToHostRuntimePolicyArrayOutput() HostRuntimePolicyArrayOutput
	ToHostRuntimePolicyArrayOutputWithContext(context.Context) HostRuntimePolicyArrayOutput
}

type HostRuntimePolicyArray []HostRuntimePolicyInput

func (HostRuntimePolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HostRuntimePolicy)(nil)).Elem()
}

func (i HostRuntimePolicyArray) ToHostRuntimePolicyArrayOutput() HostRuntimePolicyArrayOutput {
	return i.ToHostRuntimePolicyArrayOutputWithContext(context.Background())
}

func (i HostRuntimePolicyArray) ToHostRuntimePolicyArrayOutputWithContext(ctx context.Context) HostRuntimePolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostRuntimePolicyArrayOutput)
}

// HostRuntimePolicyMapInput is an input type that accepts HostRuntimePolicyMap and HostRuntimePolicyMapOutput values.
// You can construct a concrete instance of `HostRuntimePolicyMapInput` via:
//
//	HostRuntimePolicyMap{ "key": HostRuntimePolicyArgs{...} }
type HostRuntimePolicyMapInput interface {
	pulumi.Input

	ToHostRuntimePolicyMapOutput() HostRuntimePolicyMapOutput
	ToHostRuntimePolicyMapOutputWithContext(context.Context) HostRuntimePolicyMapOutput
}

type HostRuntimePolicyMap map[string]HostRuntimePolicyInput

func (HostRuntimePolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HostRuntimePolicy)(nil)).Elem()
}

func (i HostRuntimePolicyMap) ToHostRuntimePolicyMapOutput() HostRuntimePolicyMapOutput {
	return i.ToHostRuntimePolicyMapOutputWithContext(context.Background())
}

func (i HostRuntimePolicyMap) ToHostRuntimePolicyMapOutputWithContext(ctx context.Context) HostRuntimePolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostRuntimePolicyMapOutput)
}

type HostRuntimePolicyOutput struct{ *pulumi.OutputState }

func (HostRuntimePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HostRuntimePolicy)(nil)).Elem()
}

func (o HostRuntimePolicyOutput) ToHostRuntimePolicyOutput() HostRuntimePolicyOutput {
	return o
}

func (o HostRuntimePolicyOutput) ToHostRuntimePolicyOutputWithContext(ctx context.Context) HostRuntimePolicyOutput {
	return o
}

// Allowed executables configuration.
func (o HostRuntimePolicyOutput) AllowedExecutables() HostRuntimePolicyAllowedExecutableArrayOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) HostRuntimePolicyAllowedExecutableArrayOutput { return v.AllowedExecutables }).(HostRuntimePolicyAllowedExecutableArrayOutput)
}

// Allowed registries configuration.
func (o HostRuntimePolicyOutput) AllowedRegistries() HostRuntimePolicyAllowedRegistryArrayOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) HostRuntimePolicyAllowedRegistryArrayOutput { return v.AllowedRegistries }).(HostRuntimePolicyAllowedRegistryArrayOutput)
}

// Indicates the application scope of the service.
func (o HostRuntimePolicyOutput) ApplicationScopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) pulumi.StringArrayOutput { return v.ApplicationScopes }).(pulumi.StringArrayOutput)
}

// Detects brute force login attempts
func (o HostRuntimePolicyOutput) AuditBruteForceLogin() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) pulumi.BoolPtrOutput { return v.AuditBruteForceLogin }).(pulumi.BoolPtrOutput)
}

// If true, full command arguments will be audited.
func (o HostRuntimePolicyOutput) AuditFullCommandArguments() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) pulumi.BoolPtrOutput { return v.AuditFullCommandArguments }).(pulumi.BoolPtrOutput)
}

// If true, host failed logins will be audited.
func (o HostRuntimePolicyOutput) AuditHostFailedLoginEvents() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) pulumi.BoolPtrOutput { return v.AuditHostFailedLoginEvents }).(pulumi.BoolPtrOutput)
}

// If true, host successful logins will be audited.
func (o HostRuntimePolicyOutput) AuditHostSuccessfulLoginEvents() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) pulumi.BoolPtrOutput { return v.AuditHostSuccessfulLoginEvents }).(pulumi.BoolPtrOutput)
}

// If true, account management will be audited.
func (o HostRuntimePolicyOutput) AuditUserAccountManagement() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) pulumi.BoolPtrOutput { return v.AuditUserAccountManagement }).(pulumi.BoolPtrOutput)
}

func (o HostRuntimePolicyOutput) Auditing() HostRuntimePolicyAuditingOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) HostRuntimePolicyAuditingOutput { return v.Auditing }).(HostRuntimePolicyAuditingOutput)
}

// Username of the account that created the service.
func (o HostRuntimePolicyOutput) Author() pulumi.StringOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) pulumi.StringOutput { return v.Author }).(pulumi.StringOutput)
}

func (o HostRuntimePolicyOutput) BlacklistedOsUsers() HostRuntimePolicyBlacklistedOsUsersOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) HostRuntimePolicyBlacklistedOsUsersOutput { return v.BlacklistedOsUsers }).(HostRuntimePolicyBlacklistedOsUsersOutput)
}

func (o HostRuntimePolicyOutput) BlockContainerExec() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) pulumi.BoolPtrOutput { return v.BlockContainerExec }).(pulumi.BoolPtrOutput)
}

// Detect and prevent communication to DNS/IP addresses known to be used for Cryptocurrency Mining
func (o HostRuntimePolicyOutput) BlockCryptocurrencyMining() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) pulumi.BoolPtrOutput { return v.BlockCryptocurrencyMining }).(pulumi.BoolPtrOutput)
}

func (o HostRuntimePolicyOutput) BlockDisallowedImages() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) pulumi.BoolPtrOutput { return v.BlockDisallowedImages }).(pulumi.BoolPtrOutput)
}

func (o HostRuntimePolicyOutput) BlockFilelessExec() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) pulumi.BoolPtrOutput { return v.BlockFilelessExec }).(pulumi.BoolPtrOutput)
}

func (o HostRuntimePolicyOutput) BlockNonCompliantWorkloads() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) pulumi.BoolPtrOutput { return v.BlockNonCompliantWorkloads }).(pulumi.BoolPtrOutput)
}

func (o HostRuntimePolicyOutput) BlockNonK8sContainers() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) pulumi.BoolPtrOutput { return v.BlockNonK8sContainers }).(pulumi.BoolPtrOutput)
}

// List of files that are prevented from being read, modified and executed in the containers.
func (o HostRuntimePolicyOutput) BlockedFiles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) pulumi.StringArrayOutput { return v.BlockedFiles }).(pulumi.StringArrayOutput)
}

// Bypass scope configuration.
func (o HostRuntimePolicyOutput) BypassScopes() HostRuntimePolicyBypassScopeArrayOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) HostRuntimePolicyBypassScopeArrayOutput { return v.BypassScopes }).(HostRuntimePolicyBypassScopeArrayOutput)
}

func (o HostRuntimePolicyOutput) ContainerExec() HostRuntimePolicyContainerExecOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) HostRuntimePolicyContainerExecOutput { return v.ContainerExec }).(HostRuntimePolicyContainerExecOutput)
}

func (o HostRuntimePolicyOutput) Created() pulumi.StringOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) pulumi.StringOutput { return v.Created }).(pulumi.StringOutput)
}

func (o HostRuntimePolicyOutput) Cve() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) pulumi.StringPtrOutput { return v.Cve }).(pulumi.StringPtrOutput)
}

func (o HostRuntimePolicyOutput) DefaultSecurityProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) pulumi.StringPtrOutput { return v.DefaultSecurityProfile }).(pulumi.StringPtrOutput)
}

// The description of the host runtime policy
func (o HostRuntimePolicyOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o HostRuntimePolicyOutput) Digest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) pulumi.StringPtrOutput { return v.Digest }).(pulumi.StringPtrOutput)
}

// Drift prevention configuration.
func (o HostRuntimePolicyOutput) DriftPreventions() HostRuntimePolicyDriftPreventionArrayOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) HostRuntimePolicyDriftPreventionArrayOutput { return v.DriftPreventions }).(HostRuntimePolicyDriftPreventionArrayOutput)
}

func (o HostRuntimePolicyOutput) EnableCryptoMiningDns() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) pulumi.BoolPtrOutput { return v.EnableCryptoMiningDns }).(pulumi.BoolPtrOutput)
}

func (o HostRuntimePolicyOutput) EnableForkGuard() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) pulumi.BoolPtrOutput { return v.EnableForkGuard }).(pulumi.BoolPtrOutput)
}

func (o HostRuntimePolicyOutput) EnableIpReputation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) pulumi.BoolPtrOutput { return v.EnableIpReputation }).(pulumi.BoolPtrOutput)
}

func (o HostRuntimePolicyOutput) EnablePortScanProtection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) pulumi.BoolPtrOutput { return v.EnablePortScanProtection }).(pulumi.BoolPtrOutput)
}

// Indicates if the runtime policy is enabled or not.
func (o HostRuntimePolicyOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Indicates that policy should effect container execution (not just for audit).
func (o HostRuntimePolicyOutput) Enforce() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) pulumi.BoolPtrOutput { return v.Enforce }).(pulumi.BoolPtrOutput)
}

// Indicates the number of days after which the runtime policy will be changed to enforce mode.
func (o HostRuntimePolicyOutput) EnforceAfterDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) pulumi.IntPtrOutput { return v.EnforceAfterDays }).(pulumi.IntPtrOutput)
}

func (o HostRuntimePolicyOutput) EnforceSchedulerAddedOn() pulumi.IntOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) pulumi.IntOutput { return v.EnforceSchedulerAddedOn }).(pulumi.IntOutput)
}

// List of excluded application scopes.
func (o HostRuntimePolicyOutput) ExcludeApplicationScopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) pulumi.StringArrayOutput { return v.ExcludeApplicationScopes }).(pulumi.StringArrayOutput)
}

// Executable blacklist configuration.
func (o HostRuntimePolicyOutput) ExecutableBlacklists() HostRuntimePolicyExecutableBlacklistArrayOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) HostRuntimePolicyExecutableBlacklistArrayOutput {
		return v.ExecutableBlacklists
	}).(HostRuntimePolicyExecutableBlacklistArrayOutput)
}

func (o HostRuntimePolicyOutput) FailedKubernetesChecks() HostRuntimePolicyFailedKubernetesChecksOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) HostRuntimePolicyFailedKubernetesChecksOutput {
		return v.FailedKubernetesChecks
	}).(HostRuntimePolicyFailedKubernetesChecksOutput)
}

func (o HostRuntimePolicyOutput) FileBlock() HostRuntimePolicyFileBlockOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) HostRuntimePolicyFileBlockOutput { return v.FileBlock }).(HostRuntimePolicyFileBlockOutput)
}

// Configuration for file integrity monitoring.
func (o HostRuntimePolicyOutput) FileIntegrityMonitoring() HostRuntimePolicyFileIntegrityMonitoringOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) HostRuntimePolicyFileIntegrityMonitoringOutput {
		return v.FileIntegrityMonitoring
	}).(HostRuntimePolicyFileIntegrityMonitoringOutput)
}

func (o HostRuntimePolicyOutput) ForkGuardProcessLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) pulumi.IntPtrOutput { return v.ForkGuardProcessLimit }).(pulumi.IntPtrOutput)
}

func (o HostRuntimePolicyOutput) ImageName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) pulumi.StringPtrOutput { return v.ImageName }).(pulumi.StringPtrOutput)
}

func (o HostRuntimePolicyOutput) IsAuditChecked() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) pulumi.BoolPtrOutput { return v.IsAuditChecked }).(pulumi.BoolPtrOutput)
}

func (o HostRuntimePolicyOutput) IsAutoGenerated() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) pulumi.BoolPtrOutput { return v.IsAutoGenerated }).(pulumi.BoolPtrOutput)
}

func (o HostRuntimePolicyOutput) IsOotbPolicy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) pulumi.BoolPtrOutput { return v.IsOotbPolicy }).(pulumi.BoolPtrOutput)
}

func (o HostRuntimePolicyOutput) Lastupdate() pulumi.IntOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) pulumi.IntOutput { return v.Lastupdate }).(pulumi.IntOutput)
}

// Container privileges configuration.
func (o HostRuntimePolicyOutput) LimitContainerPrivileges() HostRuntimePolicyLimitContainerPrivilegeArrayOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) HostRuntimePolicyLimitContainerPrivilegeArrayOutput {
		return v.LimitContainerPrivileges
	}).(HostRuntimePolicyLimitContainerPrivilegeArrayOutput)
}

func (o HostRuntimePolicyOutput) LinuxCapabilities() HostRuntimePolicyLinuxCapabilitiesOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) HostRuntimePolicyLinuxCapabilitiesOutput { return v.LinuxCapabilities }).(HostRuntimePolicyLinuxCapabilitiesOutput)
}

// Configuration for Real-Time Malware Protection.
func (o HostRuntimePolicyOutput) MalwareScanOptions() HostRuntimePolicyMalwareScanOptionsOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) HostRuntimePolicyMalwareScanOptionsOutput { return v.MalwareScanOptions }).(HostRuntimePolicyMalwareScanOptionsOutput)
}

// If true, system log will be monitored.
func (o HostRuntimePolicyOutput) MonitorSystemLogIntegrity() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) pulumi.BoolPtrOutput { return v.MonitorSystemLogIntegrity }).(pulumi.BoolPtrOutput)
}

// If true, system time changes will be monitored.
func (o HostRuntimePolicyOutput) MonitorSystemTimeChanges() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) pulumi.BoolPtrOutput { return v.MonitorSystemTimeChanges }).(pulumi.BoolPtrOutput)
}

// If true, windows service operations will be monitored.
func (o HostRuntimePolicyOutput) MonitorWindowsServices() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) pulumi.BoolPtrOutput { return v.MonitorWindowsServices }).(pulumi.BoolPtrOutput)
}

// Name of the host runtime policy
func (o HostRuntimePolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o HostRuntimePolicyOutput) NoNewPrivileges() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) pulumi.BoolPtrOutput { return v.NoNewPrivileges }).(pulumi.BoolPtrOutput)
}

func (o HostRuntimePolicyOutput) OnlyRegisteredImages() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) pulumi.BoolPtrOutput { return v.OnlyRegisteredImages }).(pulumi.BoolPtrOutput)
}

// List of OS (Linux or Windows) groups that are allowed to authenticate to the host, and block authentication requests from all others. Groups can be either Linux groups or Windows AD groups.
func (o HostRuntimePolicyOutput) OsGroupsAlloweds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) pulumi.StringArrayOutput { return v.OsGroupsAlloweds }).(pulumi.StringArrayOutput)
}

// List of OS (Linux or Windows) groups that are not allowed to authenticate to the host, and block authentication requests from all others. Groups can be either Linux groups or Windows AD groups.
func (o HostRuntimePolicyOutput) OsGroupsBlockeds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) pulumi.StringArrayOutput { return v.OsGroupsBlockeds }).(pulumi.StringArrayOutput)
}

// List of OS (Linux or Windows) users that are allowed to authenticate to the host, and block authentication requests from all others.
func (o HostRuntimePolicyOutput) OsUsersAlloweds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) pulumi.StringArrayOutput { return v.OsUsersAlloweds }).(pulumi.StringArrayOutput)
}

// List of OS (Linux or Windows) users that are not allowed to authenticate to the host, and block authentication requests from all others.
func (o HostRuntimePolicyOutput) OsUsersBlockeds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) pulumi.StringArrayOutput { return v.OsUsersBlockeds }).(pulumi.StringArrayOutput)
}

func (o HostRuntimePolicyOutput) PackageBlocks() HostRuntimePolicyPackageBlockArrayOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) HostRuntimePolicyPackageBlockArrayOutput { return v.PackageBlocks }).(HostRuntimePolicyPackageBlockArrayOutput)
}

func (o HostRuntimePolicyOutput) Permission() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) pulumi.StringPtrOutput { return v.Permission }).(pulumi.StringPtrOutput)
}

func (o HostRuntimePolicyOutput) PortBlock() HostRuntimePolicyPortBlockOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) HostRuntimePolicyPortBlockOutput { return v.PortBlock }).(HostRuntimePolicyPortBlockOutput)
}

func (o HostRuntimePolicyOutput) ReadonlyFiles() HostRuntimePolicyReadonlyFilesOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) HostRuntimePolicyReadonlyFilesOutput { return v.ReadonlyFiles }).(HostRuntimePolicyReadonlyFilesOutput)
}

func (o HostRuntimePolicyOutput) ReadonlyRegistry() HostRuntimePolicyReadonlyRegistryOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) HostRuntimePolicyReadonlyRegistryOutput { return v.ReadonlyRegistry }).(HostRuntimePolicyReadonlyRegistryOutput)
}

func (o HostRuntimePolicyOutput) Registry() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) pulumi.StringPtrOutput { return v.Registry }).(pulumi.StringPtrOutput)
}

func (o HostRuntimePolicyOutput) RegistryAccessMonitoring() HostRuntimePolicyRegistryAccessMonitoringOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) HostRuntimePolicyRegistryAccessMonitoringOutput {
		return v.RegistryAccessMonitoring
	}).(HostRuntimePolicyRegistryAccessMonitoringOutput)
}

func (o HostRuntimePolicyOutput) RepoName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) pulumi.StringPtrOutput { return v.RepoName }).(pulumi.StringPtrOutput)
}

func (o HostRuntimePolicyOutput) ResourceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) pulumi.StringPtrOutput { return v.ResourceName }).(pulumi.StringPtrOutput)
}

func (o HostRuntimePolicyOutput) ResourceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) pulumi.StringPtrOutput { return v.ResourceType }).(pulumi.StringPtrOutput)
}

// Restricted volumes configuration.
func (o HostRuntimePolicyOutput) RestrictedVolumes() HostRuntimePolicyRestrictedVolumeArrayOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) HostRuntimePolicyRestrictedVolumeArrayOutput { return v.RestrictedVolumes }).(HostRuntimePolicyRestrictedVolumeArrayOutput)
}

func (o HostRuntimePolicyOutput) ReverseShell() HostRuntimePolicyReverseShellOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) HostRuntimePolicyReverseShellOutput { return v.ReverseShell }).(HostRuntimePolicyReverseShellOutput)
}

func (o HostRuntimePolicyOutput) RuntimeMode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) pulumi.IntPtrOutput { return v.RuntimeMode }).(pulumi.IntPtrOutput)
}

func (o HostRuntimePolicyOutput) RuntimeType() pulumi.StringOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) pulumi.StringOutput { return v.RuntimeType }).(pulumi.StringOutput)
}

// Logical expression of how to compute the dependency of the scope variables.
func (o HostRuntimePolicyOutput) ScopeExpression() pulumi.StringOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) pulumi.StringOutput { return v.ScopeExpression }).(pulumi.StringOutput)
}

// List of scope attributes.
func (o HostRuntimePolicyOutput) ScopeVariables() HostRuntimePolicyScopeVariableArrayOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) HostRuntimePolicyScopeVariableArrayOutput { return v.ScopeVariables }).(HostRuntimePolicyScopeVariableArrayOutput)
}

// Scope configuration.
func (o HostRuntimePolicyOutput) Scopes() HostRuntimePolicyScopeArrayOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) HostRuntimePolicyScopeArrayOutput { return v.Scopes }).(HostRuntimePolicyScopeArrayOutput)
}

func (o HostRuntimePolicyOutput) SystemIntegrityProtection() HostRuntimePolicySystemIntegrityProtectionOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) HostRuntimePolicySystemIntegrityProtectionOutput {
		return v.SystemIntegrityProtection
	}).(HostRuntimePolicySystemIntegrityProtectionOutput)
}

func (o HostRuntimePolicyOutput) Tripwire() HostRuntimePolicyTripwireOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) HostRuntimePolicyTripwireOutput { return v.Tripwire }).(HostRuntimePolicyTripwireOutput)
}

func (o HostRuntimePolicyOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func (o HostRuntimePolicyOutput) Updated() pulumi.StringOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) pulumi.StringOutput { return v.Updated }).(pulumi.StringOutput)
}

func (o HostRuntimePolicyOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) pulumi.StringPtrOutput { return v.Version }).(pulumi.StringPtrOutput)
}

func (o HostRuntimePolicyOutput) VpatchVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) pulumi.StringPtrOutput { return v.VpatchVersion }).(pulumi.StringPtrOutput)
}

func (o HostRuntimePolicyOutput) WhitelistedOsUsers() HostRuntimePolicyWhitelistedOsUsersOutput {
	return o.ApplyT(func(v *HostRuntimePolicy) HostRuntimePolicyWhitelistedOsUsersOutput { return v.WhitelistedOsUsers }).(HostRuntimePolicyWhitelistedOsUsersOutput)
}

type HostRuntimePolicyArrayOutput struct{ *pulumi.OutputState }

func (HostRuntimePolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HostRuntimePolicy)(nil)).Elem()
}

func (o HostRuntimePolicyArrayOutput) ToHostRuntimePolicyArrayOutput() HostRuntimePolicyArrayOutput {
	return o
}

func (o HostRuntimePolicyArrayOutput) ToHostRuntimePolicyArrayOutputWithContext(ctx context.Context) HostRuntimePolicyArrayOutput {
	return o
}

func (o HostRuntimePolicyArrayOutput) Index(i pulumi.IntInput) HostRuntimePolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *HostRuntimePolicy {
		return vs[0].([]*HostRuntimePolicy)[vs[1].(int)]
	}).(HostRuntimePolicyOutput)
}

type HostRuntimePolicyMapOutput struct{ *pulumi.OutputState }

func (HostRuntimePolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HostRuntimePolicy)(nil)).Elem()
}

func (o HostRuntimePolicyMapOutput) ToHostRuntimePolicyMapOutput() HostRuntimePolicyMapOutput {
	return o
}

func (o HostRuntimePolicyMapOutput) ToHostRuntimePolicyMapOutputWithContext(ctx context.Context) HostRuntimePolicyMapOutput {
	return o
}

func (o HostRuntimePolicyMapOutput) MapIndex(k pulumi.StringInput) HostRuntimePolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *HostRuntimePolicy {
		return vs[0].(map[string]*HostRuntimePolicy)[vs[1].(string)]
	}).(HostRuntimePolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HostRuntimePolicyInput)(nil)).Elem(), &HostRuntimePolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*HostRuntimePolicyArrayInput)(nil)).Elem(), HostRuntimePolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HostRuntimePolicyMapInput)(nil)).Elem(), HostRuntimePolicyMap{})
	pulumi.RegisterOutputType(HostRuntimePolicyOutput{})
	pulumi.RegisterOutputType(HostRuntimePolicyArrayOutput{})
	pulumi.RegisterOutputType(HostRuntimePolicyMapOutput{})
}
