// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aquasec

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ImageAssurancePolicy struct {
	pulumi.CustomResourceState

	// List of explicitly allowed images.
	AllowedImages     pulumi.StringArrayOutput `pulumi:"allowedImages"`
	ApplicationScopes pulumi.StringArrayOutput `pulumi:"applicationScopes"`
	// What type of assurance policy is described.
	AssuranceType pulumi.StringPtrOutput `pulumi:"assuranceType"`
	// Indicates if auditing for failures.
	AuditOnFailure pulumi.BoolPtrOutput `pulumi:"auditOnFailure"`
	// Name of user account that created the policy.
	Author             pulumi.StringOutput                         `pulumi:"author"`
	AutoScanConfigured pulumi.BoolPtrOutput                        `pulumi:"autoScanConfigured"`
	AutoScanEnabled    pulumi.BoolPtrOutput                        `pulumi:"autoScanEnabled"`
	AutoScanTimes      ImageAssurancePolicyAutoScanTimeArrayOutput `pulumi:"autoScanTimes"`
	// List of function's forbidden permissions.
	BlacklistPermissions pulumi.StringArrayOutput `pulumi:"blacklistPermissions"`
	// Indicates if blacklist permissions is relevant.
	BlacklistPermissionsEnabled pulumi.BoolPtrOutput `pulumi:"blacklistPermissionsEnabled"`
	// List of blacklisted licenses.
	BlacklistedLicenses pulumi.StringArrayOutput `pulumi:"blacklistedLicenses"`
	// Lndicates if license blacklist is relevant.
	BlacklistedLicensesEnabled pulumi.BoolPtrOutput `pulumi:"blacklistedLicensesEnabled"`
	// Indicates if failed images are blocked.
	BlockFailed         pulumi.BoolPtrOutput `pulumi:"blockFailed"`
	ControlExcludeNoFix pulumi.BoolPtrOutput `pulumi:"controlExcludeNoFix"`
	// List of Custom user scripts for checks.
	CustomChecks ImageAssurancePolicyCustomCheckArrayOutput `pulumi:"customChecks"`
	// Indicates if scanning should include custom checks.
	CustomChecksEnabled   pulumi.BoolPtrOutput `pulumi:"customChecksEnabled"`
	CustomSeverityEnabled pulumi.BoolPtrOutput `pulumi:"customSeverityEnabled"`
	// Indicates if cves blacklist is relevant.
	CvesBlackListEnabled pulumi.BoolPtrOutput `pulumi:"cvesBlackListEnabled"`
	// List of cves blacklisted items.
	CvesBlackLists pulumi.StringArrayOutput `pulumi:"cvesBlackLists"`
	// Indicates if cves whitelist is relevant.
	CvesWhiteListEnabled pulumi.BoolPtrOutput `pulumi:"cvesWhiteListEnabled"`
	// List of cves whitelisted licenses
	CvesWhiteLists pulumi.StringArrayOutput `pulumi:"cvesWhiteLists"`
	// Identifier of the cvss severity.
	CvssSeverity pulumi.StringPtrOutput `pulumi:"cvssSeverity"`
	// Indicates if the cvss severity is scanned.
	CvssSeverityEnabled pulumi.BoolPtrOutput `pulumi:"cvssSeverityEnabled"`
	// Indicates that policy should ignore cvss cases that do not have a known fix.
	CvssSeverityExcludeNoFix pulumi.BoolPtrOutput   `pulumi:"cvssSeverityExcludeNoFix"`
	Description              pulumi.StringPtrOutput `pulumi:"description"`
	// Indicates if malware should block the image.
	DisallowMalware  pulumi.BoolPtrOutput `pulumi:"disallowMalware"`
	DockerCisEnabled pulumi.BoolPtrOutput `pulumi:"dockerCisEnabled"`
	// Name of the container image.
	Domain                           pulumi.StringPtrOutput   `pulumi:"domain"`
	DomainName                       pulumi.StringPtrOutput   `pulumi:"domainName"`
	DtaEnabled                       pulumi.BoolPtrOutput     `pulumi:"dtaEnabled"`
	DtaSeverity                      pulumi.StringPtrOutput   `pulumi:"dtaSeverity"`
	Enabled                          pulumi.BoolPtrOutput     `pulumi:"enabled"`
	Enforce                          pulumi.BoolPtrOutput     `pulumi:"enforce"`
	EnforceAfterDays                 pulumi.IntPtrOutput      `pulumi:"enforceAfterDays"`
	EnforceExcessivePermissions      pulumi.BoolPtrOutput     `pulumi:"enforceExcessivePermissions"`
	ExceptionalMonitoredMalwarePaths pulumi.StringArrayOutput `pulumi:"exceptionalMonitoredMalwarePaths"`
	// Indicates if cicd failures will fail the image.
	FailCicd                         pulumi.BoolPtrOutput                          `pulumi:"failCicd"`
	ForbiddenLabels                  ImageAssurancePolicyForbiddenLabelArrayOutput `pulumi:"forbiddenLabels"`
	ForbiddenLabelsEnabled           pulumi.BoolPtrOutput                          `pulumi:"forbiddenLabelsEnabled"`
	ForceMicroenforcer               pulumi.BoolPtrOutput                          `pulumi:"forceMicroenforcer"`
	FunctionIntegrityEnabled         pulumi.BoolPtrOutput                          `pulumi:"functionIntegrityEnabled"`
	IgnoreRecentlyPublishedVln       pulumi.BoolPtrOutput                          `pulumi:"ignoreRecentlyPublishedVln"`
	IgnoreRecentlyPublishedVlnPeriod pulumi.IntOutput                              `pulumi:"ignoreRecentlyPublishedVlnPeriod"`
	// Indicates if risk resources are ignored.
	IgnoreRiskResourcesEnabled pulumi.BoolPtrOutput `pulumi:"ignoreRiskResourcesEnabled"`
	// List of ignored risk resources.
	IgnoredRiskResources pulumi.StringArrayOutput `pulumi:"ignoredRiskResources"`
	// List of images.
	Images         pulumi.StringArrayOutput `pulumi:"images"`
	KubeCisEnabled pulumi.BoolPtrOutput     `pulumi:"kubeCisEnabled"`
	// List of labels.
	Labels        pulumi.StringArrayOutput `pulumi:"labels"`
	MalwareAction pulumi.StringPtrOutput   `pulumi:"malwareAction"`
	// Value of allowed maximum score.
	MaximumScore pulumi.Float64PtrOutput `pulumi:"maximumScore"`
	// Indicates if exceeding the maximum score is scanned.
	MaximumScoreEnabled pulumi.BoolPtrOutput `pulumi:"maximumScoreEnabled"`
	// Indicates that policy should ignore cases that do not have a known fix.
	MaximumScoreExcludeNoFix pulumi.BoolPtrOutput     `pulumi:"maximumScoreExcludeNoFix"`
	MonitoredMalwarePaths    pulumi.StringArrayOutput `pulumi:"monitoredMalwarePaths"`
	Name                     pulumi.StringOutput      `pulumi:"name"`
	// Indicates if raise a warning for images that should only be run as root.
	OnlyNoneRootUsers pulumi.BoolPtrOutput `pulumi:"onlyNoneRootUsers"`
	// Indicates if packages blacklist is relevant.
	PackagesBlackListEnabled pulumi.BoolPtrOutput `pulumi:"packagesBlackListEnabled"`
	// List of backlisted images.
	PackagesBlackLists ImageAssurancePolicyPackagesBlackListArrayOutput `pulumi:"packagesBlackLists"`
	// Indicates if packages whitelist is relevant.
	PackagesWhiteListEnabled pulumi.BoolPtrOutput `pulumi:"packagesWhiteListEnabled"`
	// List of whitelisted images.
	PackagesWhiteLists      ImageAssurancePolicyPackagesWhiteListArrayOutput `pulumi:"packagesWhiteLists"`
	PartialResultsImageFail pulumi.BoolPtrOutput                             `pulumi:"partialResultsImageFail"`
	ReadOnly                pulumi.BoolPtrOutput                             `pulumi:"readOnly"`
	// List of registries.
	Registries            pulumi.StringArrayOutput                     `pulumi:"registries"`
	Registry              pulumi.StringPtrOutput                       `pulumi:"registry"`
	RequiredLabels        ImageAssurancePolicyRequiredLabelArrayOutput `pulumi:"requiredLabels"`
	RequiredLabelsEnabled pulumi.BoolPtrOutput                         `pulumi:"requiredLabelsEnabled"`
	ScanNfsMounts         pulumi.BoolPtrOutput                         `pulumi:"scanNfsMounts"`
	// Indicates if scan should include sensitive data in the image.
	ScanSensitiveData pulumi.BoolPtrOutput `pulumi:"scanSensitiveData"`
	// Indicates if scanning should include scap.
	ScapEnabled pulumi.BoolPtrOutput `pulumi:"scapEnabled"`
	// List of SCAP user scripts for checks.
	ScapFiles pulumi.StringArrayOutput             `pulumi:"scapFiles"`
	Scopes    ImageAssurancePolicyScopeArrayOutput `pulumi:"scopes"`
	// List of trusted images.
	TrustedBaseImages ImageAssurancePolicyTrustedBaseImageArrayOutput `pulumi:"trustedBaseImages"`
	// Indicates if list of trusted base images is relevant.
	TrustedBaseImagesEnabled pulumi.BoolPtrOutput `pulumi:"trustedBaseImagesEnabled"`
	// List of whitelisted licenses.
	WhitelistedLicenses pulumi.StringArrayOutput `pulumi:"whitelistedLicenses"`
	// Indicates if license blacklist is relevant.
	WhitelistedLicensesEnabled pulumi.BoolPtrOutput `pulumi:"whitelistedLicensesEnabled"`
}

// NewImageAssurancePolicy registers a new resource with the given unique name, arguments, and options.
func NewImageAssurancePolicy(ctx *pulumi.Context,
	name string, args *ImageAssurancePolicyArgs, opts ...pulumi.ResourceOption) (*ImageAssurancePolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApplicationScopes == nil {
		return nil, errors.New("invalid value for required argument 'ApplicationScopes'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource ImageAssurancePolicy
	err := ctx.RegisterResource("aquasec:index/imageAssurancePolicy:ImageAssurancePolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetImageAssurancePolicy gets an existing ImageAssurancePolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetImageAssurancePolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ImageAssurancePolicyState, opts ...pulumi.ResourceOption) (*ImageAssurancePolicy, error) {
	var resource ImageAssurancePolicy
	err := ctx.ReadResource("aquasec:index/imageAssurancePolicy:ImageAssurancePolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ImageAssurancePolicy resources.
type imageAssurancePolicyState struct {
	// List of explicitly allowed images.
	AllowedImages     []string `pulumi:"allowedImages"`
	ApplicationScopes []string `pulumi:"applicationScopes"`
	// What type of assurance policy is described.
	AssuranceType *string `pulumi:"assuranceType"`
	// Indicates if auditing for failures.
	AuditOnFailure *bool `pulumi:"auditOnFailure"`
	// Name of user account that created the policy.
	Author             *string                            `pulumi:"author"`
	AutoScanConfigured *bool                              `pulumi:"autoScanConfigured"`
	AutoScanEnabled    *bool                              `pulumi:"autoScanEnabled"`
	AutoScanTimes      []ImageAssurancePolicyAutoScanTime `pulumi:"autoScanTimes"`
	// List of function's forbidden permissions.
	BlacklistPermissions []string `pulumi:"blacklistPermissions"`
	// Indicates if blacklist permissions is relevant.
	BlacklistPermissionsEnabled *bool `pulumi:"blacklistPermissionsEnabled"`
	// List of blacklisted licenses.
	BlacklistedLicenses []string `pulumi:"blacklistedLicenses"`
	// Lndicates if license blacklist is relevant.
	BlacklistedLicensesEnabled *bool `pulumi:"blacklistedLicensesEnabled"`
	// Indicates if failed images are blocked.
	BlockFailed         *bool `pulumi:"blockFailed"`
	ControlExcludeNoFix *bool `pulumi:"controlExcludeNoFix"`
	// List of Custom user scripts for checks.
	CustomChecks []ImageAssurancePolicyCustomCheck `pulumi:"customChecks"`
	// Indicates if scanning should include custom checks.
	CustomChecksEnabled   *bool `pulumi:"customChecksEnabled"`
	CustomSeverityEnabled *bool `pulumi:"customSeverityEnabled"`
	// Indicates if cves blacklist is relevant.
	CvesBlackListEnabled *bool `pulumi:"cvesBlackListEnabled"`
	// List of cves blacklisted items.
	CvesBlackLists []string `pulumi:"cvesBlackLists"`
	// Indicates if cves whitelist is relevant.
	CvesWhiteListEnabled *bool `pulumi:"cvesWhiteListEnabled"`
	// List of cves whitelisted licenses
	CvesWhiteLists []string `pulumi:"cvesWhiteLists"`
	// Identifier of the cvss severity.
	CvssSeverity *string `pulumi:"cvssSeverity"`
	// Indicates if the cvss severity is scanned.
	CvssSeverityEnabled *bool `pulumi:"cvssSeverityEnabled"`
	// Indicates that policy should ignore cvss cases that do not have a known fix.
	CvssSeverityExcludeNoFix *bool   `pulumi:"cvssSeverityExcludeNoFix"`
	Description              *string `pulumi:"description"`
	// Indicates if malware should block the image.
	DisallowMalware  *bool `pulumi:"disallowMalware"`
	DockerCisEnabled *bool `pulumi:"dockerCisEnabled"`
	// Name of the container image.
	Domain                           *string  `pulumi:"domain"`
	DomainName                       *string  `pulumi:"domainName"`
	DtaEnabled                       *bool    `pulumi:"dtaEnabled"`
	DtaSeverity                      *string  `pulumi:"dtaSeverity"`
	Enabled                          *bool    `pulumi:"enabled"`
	Enforce                          *bool    `pulumi:"enforce"`
	EnforceAfterDays                 *int     `pulumi:"enforceAfterDays"`
	EnforceExcessivePermissions      *bool    `pulumi:"enforceExcessivePermissions"`
	ExceptionalMonitoredMalwarePaths []string `pulumi:"exceptionalMonitoredMalwarePaths"`
	// Indicates if cicd failures will fail the image.
	FailCicd                         *bool                                `pulumi:"failCicd"`
	ForbiddenLabels                  []ImageAssurancePolicyForbiddenLabel `pulumi:"forbiddenLabels"`
	ForbiddenLabelsEnabled           *bool                                `pulumi:"forbiddenLabelsEnabled"`
	ForceMicroenforcer               *bool                                `pulumi:"forceMicroenforcer"`
	FunctionIntegrityEnabled         *bool                                `pulumi:"functionIntegrityEnabled"`
	IgnoreRecentlyPublishedVln       *bool                                `pulumi:"ignoreRecentlyPublishedVln"`
	IgnoreRecentlyPublishedVlnPeriod *int                                 `pulumi:"ignoreRecentlyPublishedVlnPeriod"`
	// Indicates if risk resources are ignored.
	IgnoreRiskResourcesEnabled *bool `pulumi:"ignoreRiskResourcesEnabled"`
	// List of ignored risk resources.
	IgnoredRiskResources []string `pulumi:"ignoredRiskResources"`
	// List of images.
	Images         []string `pulumi:"images"`
	KubeCisEnabled *bool    `pulumi:"kubeCisEnabled"`
	// List of labels.
	Labels        []string `pulumi:"labels"`
	MalwareAction *string  `pulumi:"malwareAction"`
	// Value of allowed maximum score.
	MaximumScore *float64 `pulumi:"maximumScore"`
	// Indicates if exceeding the maximum score is scanned.
	MaximumScoreEnabled *bool `pulumi:"maximumScoreEnabled"`
	// Indicates that policy should ignore cases that do not have a known fix.
	MaximumScoreExcludeNoFix *bool    `pulumi:"maximumScoreExcludeNoFix"`
	MonitoredMalwarePaths    []string `pulumi:"monitoredMalwarePaths"`
	Name                     *string  `pulumi:"name"`
	// Indicates if raise a warning for images that should only be run as root.
	OnlyNoneRootUsers *bool `pulumi:"onlyNoneRootUsers"`
	// Indicates if packages blacklist is relevant.
	PackagesBlackListEnabled *bool `pulumi:"packagesBlackListEnabled"`
	// List of backlisted images.
	PackagesBlackLists []ImageAssurancePolicyPackagesBlackList `pulumi:"packagesBlackLists"`
	// Indicates if packages whitelist is relevant.
	PackagesWhiteListEnabled *bool `pulumi:"packagesWhiteListEnabled"`
	// List of whitelisted images.
	PackagesWhiteLists      []ImageAssurancePolicyPackagesWhiteList `pulumi:"packagesWhiteLists"`
	PartialResultsImageFail *bool                                   `pulumi:"partialResultsImageFail"`
	ReadOnly                *bool                                   `pulumi:"readOnly"`
	// List of registries.
	Registries            []string                            `pulumi:"registries"`
	Registry              *string                             `pulumi:"registry"`
	RequiredLabels        []ImageAssurancePolicyRequiredLabel `pulumi:"requiredLabels"`
	RequiredLabelsEnabled *bool                               `pulumi:"requiredLabelsEnabled"`
	ScanNfsMounts         *bool                               `pulumi:"scanNfsMounts"`
	// Indicates if scan should include sensitive data in the image.
	ScanSensitiveData *bool `pulumi:"scanSensitiveData"`
	// Indicates if scanning should include scap.
	ScapEnabled *bool `pulumi:"scapEnabled"`
	// List of SCAP user scripts for checks.
	ScapFiles []string                    `pulumi:"scapFiles"`
	Scopes    []ImageAssurancePolicyScope `pulumi:"scopes"`
	// List of trusted images.
	TrustedBaseImages []ImageAssurancePolicyTrustedBaseImage `pulumi:"trustedBaseImages"`
	// Indicates if list of trusted base images is relevant.
	TrustedBaseImagesEnabled *bool `pulumi:"trustedBaseImagesEnabled"`
	// List of whitelisted licenses.
	WhitelistedLicenses []string `pulumi:"whitelistedLicenses"`
	// Indicates if license blacklist is relevant.
	WhitelistedLicensesEnabled *bool `pulumi:"whitelistedLicensesEnabled"`
}

type ImageAssurancePolicyState struct {
	// List of explicitly allowed images.
	AllowedImages     pulumi.StringArrayInput
	ApplicationScopes pulumi.StringArrayInput
	// What type of assurance policy is described.
	AssuranceType pulumi.StringPtrInput
	// Indicates if auditing for failures.
	AuditOnFailure pulumi.BoolPtrInput
	// Name of user account that created the policy.
	Author             pulumi.StringPtrInput
	AutoScanConfigured pulumi.BoolPtrInput
	AutoScanEnabled    pulumi.BoolPtrInput
	AutoScanTimes      ImageAssurancePolicyAutoScanTimeArrayInput
	// List of function's forbidden permissions.
	BlacklistPermissions pulumi.StringArrayInput
	// Indicates if blacklist permissions is relevant.
	BlacklistPermissionsEnabled pulumi.BoolPtrInput
	// List of blacklisted licenses.
	BlacklistedLicenses pulumi.StringArrayInput
	// Lndicates if license blacklist is relevant.
	BlacklistedLicensesEnabled pulumi.BoolPtrInput
	// Indicates if failed images are blocked.
	BlockFailed         pulumi.BoolPtrInput
	ControlExcludeNoFix pulumi.BoolPtrInput
	// List of Custom user scripts for checks.
	CustomChecks ImageAssurancePolicyCustomCheckArrayInput
	// Indicates if scanning should include custom checks.
	CustomChecksEnabled   pulumi.BoolPtrInput
	CustomSeverityEnabled pulumi.BoolPtrInput
	// Indicates if cves blacklist is relevant.
	CvesBlackListEnabled pulumi.BoolPtrInput
	// List of cves blacklisted items.
	CvesBlackLists pulumi.StringArrayInput
	// Indicates if cves whitelist is relevant.
	CvesWhiteListEnabled pulumi.BoolPtrInput
	// List of cves whitelisted licenses
	CvesWhiteLists pulumi.StringArrayInput
	// Identifier of the cvss severity.
	CvssSeverity pulumi.StringPtrInput
	// Indicates if the cvss severity is scanned.
	CvssSeverityEnabled pulumi.BoolPtrInput
	// Indicates that policy should ignore cvss cases that do not have a known fix.
	CvssSeverityExcludeNoFix pulumi.BoolPtrInput
	Description              pulumi.StringPtrInput
	// Indicates if malware should block the image.
	DisallowMalware  pulumi.BoolPtrInput
	DockerCisEnabled pulumi.BoolPtrInput
	// Name of the container image.
	Domain                           pulumi.StringPtrInput
	DomainName                       pulumi.StringPtrInput
	DtaEnabled                       pulumi.BoolPtrInput
	DtaSeverity                      pulumi.StringPtrInput
	Enabled                          pulumi.BoolPtrInput
	Enforce                          pulumi.BoolPtrInput
	EnforceAfterDays                 pulumi.IntPtrInput
	EnforceExcessivePermissions      pulumi.BoolPtrInput
	ExceptionalMonitoredMalwarePaths pulumi.StringArrayInput
	// Indicates if cicd failures will fail the image.
	FailCicd                         pulumi.BoolPtrInput
	ForbiddenLabels                  ImageAssurancePolicyForbiddenLabelArrayInput
	ForbiddenLabelsEnabled           pulumi.BoolPtrInput
	ForceMicroenforcer               pulumi.BoolPtrInput
	FunctionIntegrityEnabled         pulumi.BoolPtrInput
	IgnoreRecentlyPublishedVln       pulumi.BoolPtrInput
	IgnoreRecentlyPublishedVlnPeriod pulumi.IntPtrInput
	// Indicates if risk resources are ignored.
	IgnoreRiskResourcesEnabled pulumi.BoolPtrInput
	// List of ignored risk resources.
	IgnoredRiskResources pulumi.StringArrayInput
	// List of images.
	Images         pulumi.StringArrayInput
	KubeCisEnabled pulumi.BoolPtrInput
	// List of labels.
	Labels        pulumi.StringArrayInput
	MalwareAction pulumi.StringPtrInput
	// Value of allowed maximum score.
	MaximumScore pulumi.Float64PtrInput
	// Indicates if exceeding the maximum score is scanned.
	MaximumScoreEnabled pulumi.BoolPtrInput
	// Indicates that policy should ignore cases that do not have a known fix.
	MaximumScoreExcludeNoFix pulumi.BoolPtrInput
	MonitoredMalwarePaths    pulumi.StringArrayInput
	Name                     pulumi.StringPtrInput
	// Indicates if raise a warning for images that should only be run as root.
	OnlyNoneRootUsers pulumi.BoolPtrInput
	// Indicates if packages blacklist is relevant.
	PackagesBlackListEnabled pulumi.BoolPtrInput
	// List of backlisted images.
	PackagesBlackLists ImageAssurancePolicyPackagesBlackListArrayInput
	// Indicates if packages whitelist is relevant.
	PackagesWhiteListEnabled pulumi.BoolPtrInput
	// List of whitelisted images.
	PackagesWhiteLists      ImageAssurancePolicyPackagesWhiteListArrayInput
	PartialResultsImageFail pulumi.BoolPtrInput
	ReadOnly                pulumi.BoolPtrInput
	// List of registries.
	Registries            pulumi.StringArrayInput
	Registry              pulumi.StringPtrInput
	RequiredLabels        ImageAssurancePolicyRequiredLabelArrayInput
	RequiredLabelsEnabled pulumi.BoolPtrInput
	ScanNfsMounts         pulumi.BoolPtrInput
	// Indicates if scan should include sensitive data in the image.
	ScanSensitiveData pulumi.BoolPtrInput
	// Indicates if scanning should include scap.
	ScapEnabled pulumi.BoolPtrInput
	// List of SCAP user scripts for checks.
	ScapFiles pulumi.StringArrayInput
	Scopes    ImageAssurancePolicyScopeArrayInput
	// List of trusted images.
	TrustedBaseImages ImageAssurancePolicyTrustedBaseImageArrayInput
	// Indicates if list of trusted base images is relevant.
	TrustedBaseImagesEnabled pulumi.BoolPtrInput
	// List of whitelisted licenses.
	WhitelistedLicenses pulumi.StringArrayInput
	// Indicates if license blacklist is relevant.
	WhitelistedLicensesEnabled pulumi.BoolPtrInput
}

func (ImageAssurancePolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*imageAssurancePolicyState)(nil)).Elem()
}

type imageAssurancePolicyArgs struct {
	// List of explicitly allowed images.
	AllowedImages     []string `pulumi:"allowedImages"`
	ApplicationScopes []string `pulumi:"applicationScopes"`
	// What type of assurance policy is described.
	AssuranceType *string `pulumi:"assuranceType"`
	// Indicates if auditing for failures.
	AuditOnFailure     *bool                              `pulumi:"auditOnFailure"`
	AutoScanConfigured *bool                              `pulumi:"autoScanConfigured"`
	AutoScanEnabled    *bool                              `pulumi:"autoScanEnabled"`
	AutoScanTimes      []ImageAssurancePolicyAutoScanTime `pulumi:"autoScanTimes"`
	// List of function's forbidden permissions.
	BlacklistPermissions []string `pulumi:"blacklistPermissions"`
	// Indicates if blacklist permissions is relevant.
	BlacklistPermissionsEnabled *bool `pulumi:"blacklistPermissionsEnabled"`
	// List of blacklisted licenses.
	BlacklistedLicenses []string `pulumi:"blacklistedLicenses"`
	// Lndicates if license blacklist is relevant.
	BlacklistedLicensesEnabled *bool `pulumi:"blacklistedLicensesEnabled"`
	// Indicates if failed images are blocked.
	BlockFailed         *bool `pulumi:"blockFailed"`
	ControlExcludeNoFix *bool `pulumi:"controlExcludeNoFix"`
	// List of Custom user scripts for checks.
	CustomChecks []ImageAssurancePolicyCustomCheck `pulumi:"customChecks"`
	// Indicates if scanning should include custom checks.
	CustomChecksEnabled   *bool `pulumi:"customChecksEnabled"`
	CustomSeverityEnabled *bool `pulumi:"customSeverityEnabled"`
	// Indicates if cves blacklist is relevant.
	CvesBlackListEnabled *bool `pulumi:"cvesBlackListEnabled"`
	// List of cves blacklisted items.
	CvesBlackLists []string `pulumi:"cvesBlackLists"`
	// Indicates if cves whitelist is relevant.
	CvesWhiteListEnabled *bool `pulumi:"cvesWhiteListEnabled"`
	// List of cves whitelisted licenses
	CvesWhiteLists []string `pulumi:"cvesWhiteLists"`
	// Identifier of the cvss severity.
	CvssSeverity *string `pulumi:"cvssSeverity"`
	// Indicates if the cvss severity is scanned.
	CvssSeverityEnabled *bool `pulumi:"cvssSeverityEnabled"`
	// Indicates that policy should ignore cvss cases that do not have a known fix.
	CvssSeverityExcludeNoFix *bool   `pulumi:"cvssSeverityExcludeNoFix"`
	Description              *string `pulumi:"description"`
	// Indicates if malware should block the image.
	DisallowMalware  *bool `pulumi:"disallowMalware"`
	DockerCisEnabled *bool `pulumi:"dockerCisEnabled"`
	// Name of the container image.
	Domain                           *string  `pulumi:"domain"`
	DomainName                       *string  `pulumi:"domainName"`
	DtaEnabled                       *bool    `pulumi:"dtaEnabled"`
	DtaSeverity                      *string  `pulumi:"dtaSeverity"`
	Enabled                          *bool    `pulumi:"enabled"`
	Enforce                          *bool    `pulumi:"enforce"`
	EnforceAfterDays                 *int     `pulumi:"enforceAfterDays"`
	EnforceExcessivePermissions      *bool    `pulumi:"enforceExcessivePermissions"`
	ExceptionalMonitoredMalwarePaths []string `pulumi:"exceptionalMonitoredMalwarePaths"`
	// Indicates if cicd failures will fail the image.
	FailCicd                   *bool                                `pulumi:"failCicd"`
	ForbiddenLabels            []ImageAssurancePolicyForbiddenLabel `pulumi:"forbiddenLabels"`
	ForbiddenLabelsEnabled     *bool                                `pulumi:"forbiddenLabelsEnabled"`
	ForceMicroenforcer         *bool                                `pulumi:"forceMicroenforcer"`
	FunctionIntegrityEnabled   *bool                                `pulumi:"functionIntegrityEnabled"`
	IgnoreRecentlyPublishedVln *bool                                `pulumi:"ignoreRecentlyPublishedVln"`
	// Indicates if risk resources are ignored.
	IgnoreRiskResourcesEnabled *bool `pulumi:"ignoreRiskResourcesEnabled"`
	// List of ignored risk resources.
	IgnoredRiskResources []string `pulumi:"ignoredRiskResources"`
	// List of images.
	Images         []string `pulumi:"images"`
	KubeCisEnabled *bool    `pulumi:"kubeCisEnabled"`
	// List of labels.
	Labels        []string `pulumi:"labels"`
	MalwareAction *string  `pulumi:"malwareAction"`
	// Value of allowed maximum score.
	MaximumScore *float64 `pulumi:"maximumScore"`
	// Indicates if exceeding the maximum score is scanned.
	MaximumScoreEnabled *bool `pulumi:"maximumScoreEnabled"`
	// Indicates that policy should ignore cases that do not have a known fix.
	MaximumScoreExcludeNoFix *bool    `pulumi:"maximumScoreExcludeNoFix"`
	MonitoredMalwarePaths    []string `pulumi:"monitoredMalwarePaths"`
	Name                     *string  `pulumi:"name"`
	// Indicates if raise a warning for images that should only be run as root.
	OnlyNoneRootUsers *bool `pulumi:"onlyNoneRootUsers"`
	// Indicates if packages blacklist is relevant.
	PackagesBlackListEnabled *bool `pulumi:"packagesBlackListEnabled"`
	// List of backlisted images.
	PackagesBlackLists []ImageAssurancePolicyPackagesBlackList `pulumi:"packagesBlackLists"`
	// Indicates if packages whitelist is relevant.
	PackagesWhiteListEnabled *bool `pulumi:"packagesWhiteListEnabled"`
	// List of whitelisted images.
	PackagesWhiteLists      []ImageAssurancePolicyPackagesWhiteList `pulumi:"packagesWhiteLists"`
	PartialResultsImageFail *bool                                   `pulumi:"partialResultsImageFail"`
	ReadOnly                *bool                                   `pulumi:"readOnly"`
	// List of registries.
	Registries            []string                            `pulumi:"registries"`
	Registry              *string                             `pulumi:"registry"`
	RequiredLabels        []ImageAssurancePolicyRequiredLabel `pulumi:"requiredLabels"`
	RequiredLabelsEnabled *bool                               `pulumi:"requiredLabelsEnabled"`
	ScanNfsMounts         *bool                               `pulumi:"scanNfsMounts"`
	// Indicates if scan should include sensitive data in the image.
	ScanSensitiveData *bool `pulumi:"scanSensitiveData"`
	// Indicates if scanning should include scap.
	ScapEnabled *bool `pulumi:"scapEnabled"`
	// List of SCAP user scripts for checks.
	ScapFiles []string                    `pulumi:"scapFiles"`
	Scopes    []ImageAssurancePolicyScope `pulumi:"scopes"`
	// List of trusted images.
	TrustedBaseImages []ImageAssurancePolicyTrustedBaseImage `pulumi:"trustedBaseImages"`
	// Indicates if list of trusted base images is relevant.
	TrustedBaseImagesEnabled *bool `pulumi:"trustedBaseImagesEnabled"`
	// List of whitelisted licenses.
	WhitelistedLicenses []string `pulumi:"whitelistedLicenses"`
	// Indicates if license blacklist is relevant.
	WhitelistedLicensesEnabled *bool `pulumi:"whitelistedLicensesEnabled"`
}

// The set of arguments for constructing a ImageAssurancePolicy resource.
type ImageAssurancePolicyArgs struct {
	// List of explicitly allowed images.
	AllowedImages     pulumi.StringArrayInput
	ApplicationScopes pulumi.StringArrayInput
	// What type of assurance policy is described.
	AssuranceType pulumi.StringPtrInput
	// Indicates if auditing for failures.
	AuditOnFailure     pulumi.BoolPtrInput
	AutoScanConfigured pulumi.BoolPtrInput
	AutoScanEnabled    pulumi.BoolPtrInput
	AutoScanTimes      ImageAssurancePolicyAutoScanTimeArrayInput
	// List of function's forbidden permissions.
	BlacklistPermissions pulumi.StringArrayInput
	// Indicates if blacklist permissions is relevant.
	BlacklistPermissionsEnabled pulumi.BoolPtrInput
	// List of blacklisted licenses.
	BlacklistedLicenses pulumi.StringArrayInput
	// Lndicates if license blacklist is relevant.
	BlacklistedLicensesEnabled pulumi.BoolPtrInput
	// Indicates if failed images are blocked.
	BlockFailed         pulumi.BoolPtrInput
	ControlExcludeNoFix pulumi.BoolPtrInput
	// List of Custom user scripts for checks.
	CustomChecks ImageAssurancePolicyCustomCheckArrayInput
	// Indicates if scanning should include custom checks.
	CustomChecksEnabled   pulumi.BoolPtrInput
	CustomSeverityEnabled pulumi.BoolPtrInput
	// Indicates if cves blacklist is relevant.
	CvesBlackListEnabled pulumi.BoolPtrInput
	// List of cves blacklisted items.
	CvesBlackLists pulumi.StringArrayInput
	// Indicates if cves whitelist is relevant.
	CvesWhiteListEnabled pulumi.BoolPtrInput
	// List of cves whitelisted licenses
	CvesWhiteLists pulumi.StringArrayInput
	// Identifier of the cvss severity.
	CvssSeverity pulumi.StringPtrInput
	// Indicates if the cvss severity is scanned.
	CvssSeverityEnabled pulumi.BoolPtrInput
	// Indicates that policy should ignore cvss cases that do not have a known fix.
	CvssSeverityExcludeNoFix pulumi.BoolPtrInput
	Description              pulumi.StringPtrInput
	// Indicates if malware should block the image.
	DisallowMalware  pulumi.BoolPtrInput
	DockerCisEnabled pulumi.BoolPtrInput
	// Name of the container image.
	Domain                           pulumi.StringPtrInput
	DomainName                       pulumi.StringPtrInput
	DtaEnabled                       pulumi.BoolPtrInput
	DtaSeverity                      pulumi.StringPtrInput
	Enabled                          pulumi.BoolPtrInput
	Enforce                          pulumi.BoolPtrInput
	EnforceAfterDays                 pulumi.IntPtrInput
	EnforceExcessivePermissions      pulumi.BoolPtrInput
	ExceptionalMonitoredMalwarePaths pulumi.StringArrayInput
	// Indicates if cicd failures will fail the image.
	FailCicd                   pulumi.BoolPtrInput
	ForbiddenLabels            ImageAssurancePolicyForbiddenLabelArrayInput
	ForbiddenLabelsEnabled     pulumi.BoolPtrInput
	ForceMicroenforcer         pulumi.BoolPtrInput
	FunctionIntegrityEnabled   pulumi.BoolPtrInput
	IgnoreRecentlyPublishedVln pulumi.BoolPtrInput
	// Indicates if risk resources are ignored.
	IgnoreRiskResourcesEnabled pulumi.BoolPtrInput
	// List of ignored risk resources.
	IgnoredRiskResources pulumi.StringArrayInput
	// List of images.
	Images         pulumi.StringArrayInput
	KubeCisEnabled pulumi.BoolPtrInput
	// List of labels.
	Labels        pulumi.StringArrayInput
	MalwareAction pulumi.StringPtrInput
	// Value of allowed maximum score.
	MaximumScore pulumi.Float64PtrInput
	// Indicates if exceeding the maximum score is scanned.
	MaximumScoreEnabled pulumi.BoolPtrInput
	// Indicates that policy should ignore cases that do not have a known fix.
	MaximumScoreExcludeNoFix pulumi.BoolPtrInput
	MonitoredMalwarePaths    pulumi.StringArrayInput
	Name                     pulumi.StringPtrInput
	// Indicates if raise a warning for images that should only be run as root.
	OnlyNoneRootUsers pulumi.BoolPtrInput
	// Indicates if packages blacklist is relevant.
	PackagesBlackListEnabled pulumi.BoolPtrInput
	// List of backlisted images.
	PackagesBlackLists ImageAssurancePolicyPackagesBlackListArrayInput
	// Indicates if packages whitelist is relevant.
	PackagesWhiteListEnabled pulumi.BoolPtrInput
	// List of whitelisted images.
	PackagesWhiteLists      ImageAssurancePolicyPackagesWhiteListArrayInput
	PartialResultsImageFail pulumi.BoolPtrInput
	ReadOnly                pulumi.BoolPtrInput
	// List of registries.
	Registries            pulumi.StringArrayInput
	Registry              pulumi.StringPtrInput
	RequiredLabels        ImageAssurancePolicyRequiredLabelArrayInput
	RequiredLabelsEnabled pulumi.BoolPtrInput
	ScanNfsMounts         pulumi.BoolPtrInput
	// Indicates if scan should include sensitive data in the image.
	ScanSensitiveData pulumi.BoolPtrInput
	// Indicates if scanning should include scap.
	ScapEnabled pulumi.BoolPtrInput
	// List of SCAP user scripts for checks.
	ScapFiles pulumi.StringArrayInput
	Scopes    ImageAssurancePolicyScopeArrayInput
	// List of trusted images.
	TrustedBaseImages ImageAssurancePolicyTrustedBaseImageArrayInput
	// Indicates if list of trusted base images is relevant.
	TrustedBaseImagesEnabled pulumi.BoolPtrInput
	// List of whitelisted licenses.
	WhitelistedLicenses pulumi.StringArrayInput
	// Indicates if license blacklist is relevant.
	WhitelistedLicensesEnabled pulumi.BoolPtrInput
}

func (ImageAssurancePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*imageAssurancePolicyArgs)(nil)).Elem()
}

type ImageAssurancePolicyInput interface {
	pulumi.Input

	ToImageAssurancePolicyOutput() ImageAssurancePolicyOutput
	ToImageAssurancePolicyOutputWithContext(ctx context.Context) ImageAssurancePolicyOutput
}

func (*ImageAssurancePolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageAssurancePolicy)(nil)).Elem()
}

func (i *ImageAssurancePolicy) ToImageAssurancePolicyOutput() ImageAssurancePolicyOutput {
	return i.ToImageAssurancePolicyOutputWithContext(context.Background())
}

func (i *ImageAssurancePolicy) ToImageAssurancePolicyOutputWithContext(ctx context.Context) ImageAssurancePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageAssurancePolicyOutput)
}

// ImageAssurancePolicyArrayInput is an input type that accepts ImageAssurancePolicyArray and ImageAssurancePolicyArrayOutput values.
// You can construct a concrete instance of `ImageAssurancePolicyArrayInput` via:
//
//	ImageAssurancePolicyArray{ ImageAssurancePolicyArgs{...} }
type ImageAssurancePolicyArrayInput interface {
	pulumi.Input

	ToImageAssurancePolicyArrayOutput() ImageAssurancePolicyArrayOutput
	ToImageAssurancePolicyArrayOutputWithContext(context.Context) ImageAssurancePolicyArrayOutput
}

type ImageAssurancePolicyArray []ImageAssurancePolicyInput

func (ImageAssurancePolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ImageAssurancePolicy)(nil)).Elem()
}

func (i ImageAssurancePolicyArray) ToImageAssurancePolicyArrayOutput() ImageAssurancePolicyArrayOutput {
	return i.ToImageAssurancePolicyArrayOutputWithContext(context.Background())
}

func (i ImageAssurancePolicyArray) ToImageAssurancePolicyArrayOutputWithContext(ctx context.Context) ImageAssurancePolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageAssurancePolicyArrayOutput)
}

// ImageAssurancePolicyMapInput is an input type that accepts ImageAssurancePolicyMap and ImageAssurancePolicyMapOutput values.
// You can construct a concrete instance of `ImageAssurancePolicyMapInput` via:
//
//	ImageAssurancePolicyMap{ "key": ImageAssurancePolicyArgs{...} }
type ImageAssurancePolicyMapInput interface {
	pulumi.Input

	ToImageAssurancePolicyMapOutput() ImageAssurancePolicyMapOutput
	ToImageAssurancePolicyMapOutputWithContext(context.Context) ImageAssurancePolicyMapOutput
}

type ImageAssurancePolicyMap map[string]ImageAssurancePolicyInput

func (ImageAssurancePolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ImageAssurancePolicy)(nil)).Elem()
}

func (i ImageAssurancePolicyMap) ToImageAssurancePolicyMapOutput() ImageAssurancePolicyMapOutput {
	return i.ToImageAssurancePolicyMapOutputWithContext(context.Background())
}

func (i ImageAssurancePolicyMap) ToImageAssurancePolicyMapOutputWithContext(ctx context.Context) ImageAssurancePolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageAssurancePolicyMapOutput)
}

type ImageAssurancePolicyOutput struct{ *pulumi.OutputState }

func (ImageAssurancePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageAssurancePolicy)(nil)).Elem()
}

func (o ImageAssurancePolicyOutput) ToImageAssurancePolicyOutput() ImageAssurancePolicyOutput {
	return o
}

func (o ImageAssurancePolicyOutput) ToImageAssurancePolicyOutputWithContext(ctx context.Context) ImageAssurancePolicyOutput {
	return o
}

// List of explicitly allowed images.
func (o ImageAssurancePolicyOutput) AllowedImages() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ImageAssurancePolicy) pulumi.StringArrayOutput { return v.AllowedImages }).(pulumi.StringArrayOutput)
}

func (o ImageAssurancePolicyOutput) ApplicationScopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ImageAssurancePolicy) pulumi.StringArrayOutput { return v.ApplicationScopes }).(pulumi.StringArrayOutput)
}

// What type of assurance policy is described.
func (o ImageAssurancePolicyOutput) AssuranceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageAssurancePolicy) pulumi.StringPtrOutput { return v.AssuranceType }).(pulumi.StringPtrOutput)
}

// Indicates if auditing for failures.
func (o ImageAssurancePolicyOutput) AuditOnFailure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageAssurancePolicy) pulumi.BoolPtrOutput { return v.AuditOnFailure }).(pulumi.BoolPtrOutput)
}

// Name of user account that created the policy.
func (o ImageAssurancePolicyOutput) Author() pulumi.StringOutput {
	return o.ApplyT(func(v *ImageAssurancePolicy) pulumi.StringOutput { return v.Author }).(pulumi.StringOutput)
}

func (o ImageAssurancePolicyOutput) AutoScanConfigured() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageAssurancePolicy) pulumi.BoolPtrOutput { return v.AutoScanConfigured }).(pulumi.BoolPtrOutput)
}

func (o ImageAssurancePolicyOutput) AutoScanEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageAssurancePolicy) pulumi.BoolPtrOutput { return v.AutoScanEnabled }).(pulumi.BoolPtrOutput)
}

func (o ImageAssurancePolicyOutput) AutoScanTimes() ImageAssurancePolicyAutoScanTimeArrayOutput {
	return o.ApplyT(func(v *ImageAssurancePolicy) ImageAssurancePolicyAutoScanTimeArrayOutput { return v.AutoScanTimes }).(ImageAssurancePolicyAutoScanTimeArrayOutput)
}

// List of function's forbidden permissions.
func (o ImageAssurancePolicyOutput) BlacklistPermissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ImageAssurancePolicy) pulumi.StringArrayOutput { return v.BlacklistPermissions }).(pulumi.StringArrayOutput)
}

// Indicates if blacklist permissions is relevant.
func (o ImageAssurancePolicyOutput) BlacklistPermissionsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageAssurancePolicy) pulumi.BoolPtrOutput { return v.BlacklistPermissionsEnabled }).(pulumi.BoolPtrOutput)
}

// List of blacklisted licenses.
func (o ImageAssurancePolicyOutput) BlacklistedLicenses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ImageAssurancePolicy) pulumi.StringArrayOutput { return v.BlacklistedLicenses }).(pulumi.StringArrayOutput)
}

// Lndicates if license blacklist is relevant.
func (o ImageAssurancePolicyOutput) BlacklistedLicensesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageAssurancePolicy) pulumi.BoolPtrOutput { return v.BlacklistedLicensesEnabled }).(pulumi.BoolPtrOutput)
}

// Indicates if failed images are blocked.
func (o ImageAssurancePolicyOutput) BlockFailed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageAssurancePolicy) pulumi.BoolPtrOutput { return v.BlockFailed }).(pulumi.BoolPtrOutput)
}

func (o ImageAssurancePolicyOutput) ControlExcludeNoFix() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageAssurancePolicy) pulumi.BoolPtrOutput { return v.ControlExcludeNoFix }).(pulumi.BoolPtrOutput)
}

// List of Custom user scripts for checks.
func (o ImageAssurancePolicyOutput) CustomChecks() ImageAssurancePolicyCustomCheckArrayOutput {
	return o.ApplyT(func(v *ImageAssurancePolicy) ImageAssurancePolicyCustomCheckArrayOutput { return v.CustomChecks }).(ImageAssurancePolicyCustomCheckArrayOutput)
}

// Indicates if scanning should include custom checks.
func (o ImageAssurancePolicyOutput) CustomChecksEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageAssurancePolicy) pulumi.BoolPtrOutput { return v.CustomChecksEnabled }).(pulumi.BoolPtrOutput)
}

func (o ImageAssurancePolicyOutput) CustomSeverityEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageAssurancePolicy) pulumi.BoolPtrOutput { return v.CustomSeverityEnabled }).(pulumi.BoolPtrOutput)
}

// Indicates if cves blacklist is relevant.
func (o ImageAssurancePolicyOutput) CvesBlackListEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageAssurancePolicy) pulumi.BoolPtrOutput { return v.CvesBlackListEnabled }).(pulumi.BoolPtrOutput)
}

// List of cves blacklisted items.
func (o ImageAssurancePolicyOutput) CvesBlackLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ImageAssurancePolicy) pulumi.StringArrayOutput { return v.CvesBlackLists }).(pulumi.StringArrayOutput)
}

// Indicates if cves whitelist is relevant.
func (o ImageAssurancePolicyOutput) CvesWhiteListEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageAssurancePolicy) pulumi.BoolPtrOutput { return v.CvesWhiteListEnabled }).(pulumi.BoolPtrOutput)
}

// List of cves whitelisted licenses
func (o ImageAssurancePolicyOutput) CvesWhiteLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ImageAssurancePolicy) pulumi.StringArrayOutput { return v.CvesWhiteLists }).(pulumi.StringArrayOutput)
}

// Identifier of the cvss severity.
func (o ImageAssurancePolicyOutput) CvssSeverity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageAssurancePolicy) pulumi.StringPtrOutput { return v.CvssSeverity }).(pulumi.StringPtrOutput)
}

// Indicates if the cvss severity is scanned.
func (o ImageAssurancePolicyOutput) CvssSeverityEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageAssurancePolicy) pulumi.BoolPtrOutput { return v.CvssSeverityEnabled }).(pulumi.BoolPtrOutput)
}

// Indicates that policy should ignore cvss cases that do not have a known fix.
func (o ImageAssurancePolicyOutput) CvssSeverityExcludeNoFix() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageAssurancePolicy) pulumi.BoolPtrOutput { return v.CvssSeverityExcludeNoFix }).(pulumi.BoolPtrOutput)
}

func (o ImageAssurancePolicyOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageAssurancePolicy) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Indicates if malware should block the image.
func (o ImageAssurancePolicyOutput) DisallowMalware() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageAssurancePolicy) pulumi.BoolPtrOutput { return v.DisallowMalware }).(pulumi.BoolPtrOutput)
}

func (o ImageAssurancePolicyOutput) DockerCisEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageAssurancePolicy) pulumi.BoolPtrOutput { return v.DockerCisEnabled }).(pulumi.BoolPtrOutput)
}

// Name of the container image.
func (o ImageAssurancePolicyOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageAssurancePolicy) pulumi.StringPtrOutput { return v.Domain }).(pulumi.StringPtrOutput)
}

func (o ImageAssurancePolicyOutput) DomainName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageAssurancePolicy) pulumi.StringPtrOutput { return v.DomainName }).(pulumi.StringPtrOutput)
}

func (o ImageAssurancePolicyOutput) DtaEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageAssurancePolicy) pulumi.BoolPtrOutput { return v.DtaEnabled }).(pulumi.BoolPtrOutput)
}

func (o ImageAssurancePolicyOutput) DtaSeverity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageAssurancePolicy) pulumi.StringPtrOutput { return v.DtaSeverity }).(pulumi.StringPtrOutput)
}

func (o ImageAssurancePolicyOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageAssurancePolicy) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o ImageAssurancePolicyOutput) Enforce() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageAssurancePolicy) pulumi.BoolPtrOutput { return v.Enforce }).(pulumi.BoolPtrOutput)
}

func (o ImageAssurancePolicyOutput) EnforceAfterDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageAssurancePolicy) pulumi.IntPtrOutput { return v.EnforceAfterDays }).(pulumi.IntPtrOutput)
}

func (o ImageAssurancePolicyOutput) EnforceExcessivePermissions() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageAssurancePolicy) pulumi.BoolPtrOutput { return v.EnforceExcessivePermissions }).(pulumi.BoolPtrOutput)
}

func (o ImageAssurancePolicyOutput) ExceptionalMonitoredMalwarePaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ImageAssurancePolicy) pulumi.StringArrayOutput { return v.ExceptionalMonitoredMalwarePaths }).(pulumi.StringArrayOutput)
}

// Indicates if cicd failures will fail the image.
func (o ImageAssurancePolicyOutput) FailCicd() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageAssurancePolicy) pulumi.BoolPtrOutput { return v.FailCicd }).(pulumi.BoolPtrOutput)
}

func (o ImageAssurancePolicyOutput) ForbiddenLabels() ImageAssurancePolicyForbiddenLabelArrayOutput {
	return o.ApplyT(func(v *ImageAssurancePolicy) ImageAssurancePolicyForbiddenLabelArrayOutput { return v.ForbiddenLabels }).(ImageAssurancePolicyForbiddenLabelArrayOutput)
}

func (o ImageAssurancePolicyOutput) ForbiddenLabelsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageAssurancePolicy) pulumi.BoolPtrOutput { return v.ForbiddenLabelsEnabled }).(pulumi.BoolPtrOutput)
}

func (o ImageAssurancePolicyOutput) ForceMicroenforcer() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageAssurancePolicy) pulumi.BoolPtrOutput { return v.ForceMicroenforcer }).(pulumi.BoolPtrOutput)
}

func (o ImageAssurancePolicyOutput) FunctionIntegrityEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageAssurancePolicy) pulumi.BoolPtrOutput { return v.FunctionIntegrityEnabled }).(pulumi.BoolPtrOutput)
}

func (o ImageAssurancePolicyOutput) IgnoreRecentlyPublishedVln() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageAssurancePolicy) pulumi.BoolPtrOutput { return v.IgnoreRecentlyPublishedVln }).(pulumi.BoolPtrOutput)
}

func (o ImageAssurancePolicyOutput) IgnoreRecentlyPublishedVlnPeriod() pulumi.IntOutput {
	return o.ApplyT(func(v *ImageAssurancePolicy) pulumi.IntOutput { return v.IgnoreRecentlyPublishedVlnPeriod }).(pulumi.IntOutput)
}

// Indicates if risk resources are ignored.
func (o ImageAssurancePolicyOutput) IgnoreRiskResourcesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageAssurancePolicy) pulumi.BoolPtrOutput { return v.IgnoreRiskResourcesEnabled }).(pulumi.BoolPtrOutput)
}

// List of ignored risk resources.
func (o ImageAssurancePolicyOutput) IgnoredRiskResources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ImageAssurancePolicy) pulumi.StringArrayOutput { return v.IgnoredRiskResources }).(pulumi.StringArrayOutput)
}

// List of images.
func (o ImageAssurancePolicyOutput) Images() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ImageAssurancePolicy) pulumi.StringArrayOutput { return v.Images }).(pulumi.StringArrayOutput)
}

func (o ImageAssurancePolicyOutput) KubeCisEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageAssurancePolicy) pulumi.BoolPtrOutput { return v.KubeCisEnabled }).(pulumi.BoolPtrOutput)
}

// List of labels.
func (o ImageAssurancePolicyOutput) Labels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ImageAssurancePolicy) pulumi.StringArrayOutput { return v.Labels }).(pulumi.StringArrayOutput)
}

func (o ImageAssurancePolicyOutput) MalwareAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageAssurancePolicy) pulumi.StringPtrOutput { return v.MalwareAction }).(pulumi.StringPtrOutput)
}

// Value of allowed maximum score.
func (o ImageAssurancePolicyOutput) MaximumScore() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageAssurancePolicy) pulumi.Float64PtrOutput { return v.MaximumScore }).(pulumi.Float64PtrOutput)
}

// Indicates if exceeding the maximum score is scanned.
func (o ImageAssurancePolicyOutput) MaximumScoreEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageAssurancePolicy) pulumi.BoolPtrOutput { return v.MaximumScoreEnabled }).(pulumi.BoolPtrOutput)
}

// Indicates that policy should ignore cases that do not have a known fix.
func (o ImageAssurancePolicyOutput) MaximumScoreExcludeNoFix() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageAssurancePolicy) pulumi.BoolPtrOutput { return v.MaximumScoreExcludeNoFix }).(pulumi.BoolPtrOutput)
}

func (o ImageAssurancePolicyOutput) MonitoredMalwarePaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ImageAssurancePolicy) pulumi.StringArrayOutput { return v.MonitoredMalwarePaths }).(pulumi.StringArrayOutput)
}

func (o ImageAssurancePolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ImageAssurancePolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Indicates if raise a warning for images that should only be run as root.
func (o ImageAssurancePolicyOutput) OnlyNoneRootUsers() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageAssurancePolicy) pulumi.BoolPtrOutput { return v.OnlyNoneRootUsers }).(pulumi.BoolPtrOutput)
}

// Indicates if packages blacklist is relevant.
func (o ImageAssurancePolicyOutput) PackagesBlackListEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageAssurancePolicy) pulumi.BoolPtrOutput { return v.PackagesBlackListEnabled }).(pulumi.BoolPtrOutput)
}

// List of backlisted images.
func (o ImageAssurancePolicyOutput) PackagesBlackLists() ImageAssurancePolicyPackagesBlackListArrayOutput {
	return o.ApplyT(func(v *ImageAssurancePolicy) ImageAssurancePolicyPackagesBlackListArrayOutput {
		return v.PackagesBlackLists
	}).(ImageAssurancePolicyPackagesBlackListArrayOutput)
}

// Indicates if packages whitelist is relevant.
func (o ImageAssurancePolicyOutput) PackagesWhiteListEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageAssurancePolicy) pulumi.BoolPtrOutput { return v.PackagesWhiteListEnabled }).(pulumi.BoolPtrOutput)
}

// List of whitelisted images.
func (o ImageAssurancePolicyOutput) PackagesWhiteLists() ImageAssurancePolicyPackagesWhiteListArrayOutput {
	return o.ApplyT(func(v *ImageAssurancePolicy) ImageAssurancePolicyPackagesWhiteListArrayOutput {
		return v.PackagesWhiteLists
	}).(ImageAssurancePolicyPackagesWhiteListArrayOutput)
}

func (o ImageAssurancePolicyOutput) PartialResultsImageFail() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageAssurancePolicy) pulumi.BoolPtrOutput { return v.PartialResultsImageFail }).(pulumi.BoolPtrOutput)
}

func (o ImageAssurancePolicyOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageAssurancePolicy) pulumi.BoolPtrOutput { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// List of registries.
func (o ImageAssurancePolicyOutput) Registries() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ImageAssurancePolicy) pulumi.StringArrayOutput { return v.Registries }).(pulumi.StringArrayOutput)
}

func (o ImageAssurancePolicyOutput) Registry() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageAssurancePolicy) pulumi.StringPtrOutput { return v.Registry }).(pulumi.StringPtrOutput)
}

func (o ImageAssurancePolicyOutput) RequiredLabels() ImageAssurancePolicyRequiredLabelArrayOutput {
	return o.ApplyT(func(v *ImageAssurancePolicy) ImageAssurancePolicyRequiredLabelArrayOutput { return v.RequiredLabels }).(ImageAssurancePolicyRequiredLabelArrayOutput)
}

func (o ImageAssurancePolicyOutput) RequiredLabelsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageAssurancePolicy) pulumi.BoolPtrOutput { return v.RequiredLabelsEnabled }).(pulumi.BoolPtrOutput)
}

func (o ImageAssurancePolicyOutput) ScanNfsMounts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageAssurancePolicy) pulumi.BoolPtrOutput { return v.ScanNfsMounts }).(pulumi.BoolPtrOutput)
}

// Indicates if scan should include sensitive data in the image.
func (o ImageAssurancePolicyOutput) ScanSensitiveData() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageAssurancePolicy) pulumi.BoolPtrOutput { return v.ScanSensitiveData }).(pulumi.BoolPtrOutput)
}

// Indicates if scanning should include scap.
func (o ImageAssurancePolicyOutput) ScapEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageAssurancePolicy) pulumi.BoolPtrOutput { return v.ScapEnabled }).(pulumi.BoolPtrOutput)
}

// List of SCAP user scripts for checks.
func (o ImageAssurancePolicyOutput) ScapFiles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ImageAssurancePolicy) pulumi.StringArrayOutput { return v.ScapFiles }).(pulumi.StringArrayOutput)
}

func (o ImageAssurancePolicyOutput) Scopes() ImageAssurancePolicyScopeArrayOutput {
	return o.ApplyT(func(v *ImageAssurancePolicy) ImageAssurancePolicyScopeArrayOutput { return v.Scopes }).(ImageAssurancePolicyScopeArrayOutput)
}

// List of trusted images.
func (o ImageAssurancePolicyOutput) TrustedBaseImages() ImageAssurancePolicyTrustedBaseImageArrayOutput {
	return o.ApplyT(func(v *ImageAssurancePolicy) ImageAssurancePolicyTrustedBaseImageArrayOutput {
		return v.TrustedBaseImages
	}).(ImageAssurancePolicyTrustedBaseImageArrayOutput)
}

// Indicates if list of trusted base images is relevant.
func (o ImageAssurancePolicyOutput) TrustedBaseImagesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageAssurancePolicy) pulumi.BoolPtrOutput { return v.TrustedBaseImagesEnabled }).(pulumi.BoolPtrOutput)
}

// List of whitelisted licenses.
func (o ImageAssurancePolicyOutput) WhitelistedLicenses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ImageAssurancePolicy) pulumi.StringArrayOutput { return v.WhitelistedLicenses }).(pulumi.StringArrayOutput)
}

// Indicates if license blacklist is relevant.
func (o ImageAssurancePolicyOutput) WhitelistedLicensesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageAssurancePolicy) pulumi.BoolPtrOutput { return v.WhitelistedLicensesEnabled }).(pulumi.BoolPtrOutput)
}

type ImageAssurancePolicyArrayOutput struct{ *pulumi.OutputState }

func (ImageAssurancePolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ImageAssurancePolicy)(nil)).Elem()
}

func (o ImageAssurancePolicyArrayOutput) ToImageAssurancePolicyArrayOutput() ImageAssurancePolicyArrayOutput {
	return o
}

func (o ImageAssurancePolicyArrayOutput) ToImageAssurancePolicyArrayOutputWithContext(ctx context.Context) ImageAssurancePolicyArrayOutput {
	return o
}

func (o ImageAssurancePolicyArrayOutput) Index(i pulumi.IntInput) ImageAssurancePolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ImageAssurancePolicy {
		return vs[0].([]*ImageAssurancePolicy)[vs[1].(int)]
	}).(ImageAssurancePolicyOutput)
}

type ImageAssurancePolicyMapOutput struct{ *pulumi.OutputState }

func (ImageAssurancePolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ImageAssurancePolicy)(nil)).Elem()
}

func (o ImageAssurancePolicyMapOutput) ToImageAssurancePolicyMapOutput() ImageAssurancePolicyMapOutput {
	return o
}

func (o ImageAssurancePolicyMapOutput) ToImageAssurancePolicyMapOutputWithContext(ctx context.Context) ImageAssurancePolicyMapOutput {
	return o
}

func (o ImageAssurancePolicyMapOutput) MapIndex(k pulumi.StringInput) ImageAssurancePolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ImageAssurancePolicy {
		return vs[0].(map[string]*ImageAssurancePolicy)[vs[1].(string)]
	}).(ImageAssurancePolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ImageAssurancePolicyInput)(nil)).Elem(), &ImageAssurancePolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageAssurancePolicyArrayInput)(nil)).Elem(), ImageAssurancePolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageAssurancePolicyMapInput)(nil)).Elem(), ImageAssurancePolicyMap{})
	pulumi.RegisterOutputType(ImageAssurancePolicyOutput{})
	pulumi.RegisterOutputType(ImageAssurancePolicyArrayOutput{})
	pulumi.RegisterOutputType(ImageAssurancePolicyMapOutput{})
}
