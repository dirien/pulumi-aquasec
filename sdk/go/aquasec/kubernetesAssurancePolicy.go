// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aquasec

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-aquasec/sdk/go/aquasec/internal"
)

// Kubernetes Assurance is responsible for checking the security of workload configurations at the pod level, with respect to your organization's security requirements.
type KubernetesAssurancePolicy struct {
	pulumi.CustomResourceState

	// Aggregated vulnerability information.
	AggregatedVulnerability pulumi.StringMapOutput `pulumi:"aggregatedVulnerability"`
	// List of explicitly allowed images.
	AllowedImages     pulumi.StringArrayOutput `pulumi:"allowedImages"`
	ApplicationScopes pulumi.StringArrayOutput `pulumi:"applicationScopes"`
	// What type of assurance policy is described.
	AssuranceType pulumi.StringOutput `pulumi:"assuranceType"`
	// Indicates if auditing for failures.
	AuditOnFailure pulumi.BoolPtrOutput `pulumi:"auditOnFailure"`
	// Name of user account that created the policy.
	Author             pulumi.StringOutput                              `pulumi:"author"`
	AutoScanConfigured pulumi.BoolPtrOutput                             `pulumi:"autoScanConfigured"`
	AutoScanEnabled    pulumi.BoolPtrOutput                             `pulumi:"autoScanEnabled"`
	AutoScanTimes      KubernetesAssurancePolicyAutoScanTimeArrayOutput `pulumi:"autoScanTimes"`
	// List of function's forbidden permissions.
	BlacklistPermissions pulumi.StringArrayOutput `pulumi:"blacklistPermissions"`
	// Indicates if blacklist permissions is relevant.
	BlacklistPermissionsEnabled pulumi.BoolPtrOutput `pulumi:"blacklistPermissionsEnabled"`
	// List of blacklisted licenses.
	BlacklistedLicenses pulumi.StringArrayOutput `pulumi:"blacklistedLicenses"`
	// Indicates if license blacklist is relevant.
	BlacklistedLicensesEnabled pulumi.BoolPtrOutput `pulumi:"blacklistedLicensesEnabled"`
	// Indicates if failed images are blocked.
	BlockFailed         pulumi.BoolPtrOutput `pulumi:"blockFailed"`
	ControlExcludeNoFix pulumi.BoolPtrOutput `pulumi:"controlExcludeNoFix"`
	// List of Custom user scripts for checks.
	CustomChecks KubernetesAssurancePolicyCustomCheckArrayOutput `pulumi:"customChecks"`
	// Indicates if scanning should include custom checks.
	CustomChecksEnabled   pulumi.BoolPtrOutput `pulumi:"customChecksEnabled"`
	CustomSeverity        pulumi.StringOutput  `pulumi:"customSeverity"`
	CustomSeverityEnabled pulumi.BoolPtrOutput `pulumi:"customSeverityEnabled"`
	// Indicates if CVEs blacklist is relevant.
	CvesBlackListEnabled pulumi.BoolPtrOutput `pulumi:"cvesBlackListEnabled"`
	// List of CVEs blacklisted items.
	CvesBlackLists pulumi.StringArrayOutput `pulumi:"cvesBlackLists"`
	// Indicates if CVEs whitelist is relevant.
	CvesWhiteListEnabled pulumi.BoolPtrOutput `pulumi:"cvesWhiteListEnabled"`
	// List of cves whitelisted licenses
	CvesWhiteLists pulumi.StringArrayOutput `pulumi:"cvesWhiteLists"`
	// Identifier of the cvss severity.
	CvssSeverity pulumi.StringPtrOutput `pulumi:"cvssSeverity"`
	// Indicates if the cvss severity is scanned.
	CvssSeverityEnabled pulumi.BoolPtrOutput `pulumi:"cvssSeverityEnabled"`
	// Indicates that policy should ignore cvss cases that do not have a known fix.
	CvssSeverityExcludeNoFix pulumi.BoolPtrOutput     `pulumi:"cvssSeverityExcludeNoFix"`
	Description              pulumi.StringPtrOutput   `pulumi:"description"`
	DisallowExploitTypes     pulumi.StringArrayOutput `pulumi:"disallowExploitTypes"`
	// Indicates if malware should block the image.
	DisallowMalware pulumi.BoolPtrOutput `pulumi:"disallowMalware"`
	// Checks the host according to the Docker CIS benchmark, if Docker is found on the host.
	DockerCisEnabled pulumi.BoolPtrOutput `pulumi:"dockerCisEnabled"`
	// Name of the container image.
	Domain                           pulumi.StringPtrOutput   `pulumi:"domain"`
	DomainName                       pulumi.StringPtrOutput   `pulumi:"domainName"`
	DtaEnabled                       pulumi.BoolPtrOutput     `pulumi:"dtaEnabled"`
	DtaSeverity                      pulumi.StringPtrOutput   `pulumi:"dtaSeverity"`
	Enabled                          pulumi.BoolPtrOutput     `pulumi:"enabled"`
	Enforce                          pulumi.BoolPtrOutput     `pulumi:"enforce"`
	EnforceAfterDays                 pulumi.IntPtrOutput      `pulumi:"enforceAfterDays"`
	EnforceExcessivePermissions      pulumi.BoolPtrOutput     `pulumi:"enforceExcessivePermissions"`
	ExceptionalMonitoredMalwarePaths pulumi.StringArrayOutput `pulumi:"exceptionalMonitoredMalwarePaths"`
	ExcludeApplicationScopes         pulumi.StringArrayOutput `pulumi:"excludeApplicationScopes"`
	// Indicates if cicd failures will fail the image.
	FailCicd                         pulumi.BoolPtrOutput                               `pulumi:"failCicd"`
	ForbiddenLabels                  KubernetesAssurancePolicyForbiddenLabelArrayOutput `pulumi:"forbiddenLabels"`
	ForbiddenLabelsEnabled           pulumi.BoolPtrOutput                               `pulumi:"forbiddenLabelsEnabled"`
	ForceMicroenforcer               pulumi.BoolPtrOutput                               `pulumi:"forceMicroenforcer"`
	FunctionIntegrityEnabled         pulumi.BoolPtrOutput                               `pulumi:"functionIntegrityEnabled"`
	IgnoreBaseImageVln               pulumi.BoolPtrOutput                               `pulumi:"ignoreBaseImageVln"`
	IgnoreRecentlyPublishedVln       pulumi.BoolPtrOutput                               `pulumi:"ignoreRecentlyPublishedVln"`
	IgnoreRecentlyPublishedVlnPeriod pulumi.IntOutput                                   `pulumi:"ignoreRecentlyPublishedVlnPeriod"`
	// Indicates if risk resources are ignored.
	IgnoreRiskResourcesEnabled pulumi.BoolPtrOutput `pulumi:"ignoreRiskResourcesEnabled"`
	// List of ignored risk resources.
	IgnoredRiskResources      pulumi.StringArrayOutput `pulumi:"ignoredRiskResources"`
	IgnoredSensitiveResources pulumi.StringArrayOutput `pulumi:"ignoredSensitiveResources"`
	// List of images.
	Images pulumi.StringArrayOutput `pulumi:"images"`
	// Performs a Kubernetes CIS benchmark check for the host.
	KubeCisEnabled pulumi.BoolPtrOutput `pulumi:"kubeCisEnabled"`
	// List of Kubernetes controls.
	KubernetesControls       KubernetesAssurancePolicyKubernetesControlArrayOutput `pulumi:"kubernetesControls"`
	KubernetesControlsAvdIds pulumi.StringArrayOutput                              `pulumi:"kubernetesControlsAvdIds"`
	// List of kubernetes control names and available kubernetes controls are: 'Access to host IPC namespace', 'Access to host PID', 'Access to host network', 'Access to host ports', 'All container images must start with a GCR domain', 'All container images must start with an ECR domain', 'All container images must start with the *.azurecr.io domain', 'CPU not limited', 'CPU requests not specified', 'Can elevate its own privileges', 'ConfigMap with secrets', 'ConfigMap with sensitive content', 'Container images from public registries used', 'Default capabilitiessome containers do not drop all', 'Default capabilitiessome containers do not drop any', 'Delete pod logs', 'Exec into Pods', 'Image tag :latest used', 'Manage EKS IAM Auth ConfigMap', 'Manage Kubernetes RBAC resources', 'Manage Kubernetes networking', 'Manage Kubernetes workloads and pods', 'Manage all resources', 'Manage all resources at the namespace', 'Manage configmaps', 'Manage namespace secrets', 'Manage secrets', 'Manage webhookconfigurations', 'Manages /etc/hosts', 'Memory not limited', 'Memory requests not specified', 'Non-core volume types used.', 'Non-default /proc masks set', 'Privileged', 'Root file system is not read-only', 'Runs as root user', 'Runs with GID <= 10000', 'Runs with UID <= 10000', 'Runs with a root primary or supplementary GID', 'Runtime/Default AppArmor profile not set', 'Runtime/Default Seccomp profile not set', 'SELinux custom options set', 'SYS_ADMIN capability added', 'Seccomp policies disabled', 'Service with External IP', 'Specific capabilities added', 'Unsafe sysctl options set', 'User with admin access', 'Workloads in the default namespace', 'hostPath volume mounted with docker.sock', 'hostPath volumes mounted'
	KubernetesControlsNames pulumi.StringArrayOutput `pulumi:"kubernetesControlsNames"`
	// List of labels.
	Labels          pulumi.StringArrayOutput `pulumi:"labels"`
	Lastupdate      pulumi.StringOutput      `pulumi:"lastupdate"`
	LinuxCisEnabled pulumi.BoolPtrOutput     `pulumi:"linuxCisEnabled"`
	MalwareAction   pulumi.StringPtrOutput   `pulumi:"malwareAction"`
	// Value of allowed maximum score.
	MaximumScore pulumi.Float64PtrOutput `pulumi:"maximumScore"`
	// Indicates if exceeding the maximum score is scanned.
	MaximumScoreEnabled pulumi.BoolPtrOutput `pulumi:"maximumScoreEnabled"`
	// Indicates that policy should ignore cases that do not have a known fix.
	MaximumScoreExcludeNoFix pulumi.BoolPtrOutput     `pulumi:"maximumScoreExcludeNoFix"`
	MonitoredMalwarePaths    pulumi.StringArrayOutput `pulumi:"monitoredMalwarePaths"`
	Name                     pulumi.StringOutput      `pulumi:"name"`
	// Indicates if raise a warning for images that should only be run as root.
	OnlyNoneRootUsers         pulumi.BoolPtrOutput `pulumi:"onlyNoneRootUsers"`
	OpenshiftHardeningEnabled pulumi.BoolPtrOutput `pulumi:"openshiftHardeningEnabled"`
	// Indicates if packages blacklist is relevant.
	PackagesBlackListEnabled pulumi.BoolPtrOutput `pulumi:"packagesBlackListEnabled"`
	// List of blacklisted images.
	PackagesBlackLists KubernetesAssurancePolicyPackagesBlackListArrayOutput `pulumi:"packagesBlackLists"`
	// Indicates if packages whitelist is relevant.
	PackagesWhiteListEnabled pulumi.BoolPtrOutput `pulumi:"packagesWhiteListEnabled"`
	// List of whitelisted images.
	PackagesWhiteLists      KubernetesAssurancePolicyPackagesWhiteListArrayOutput `pulumi:"packagesWhiteLists"`
	PartialResultsImageFail pulumi.BoolPtrOutput                                  `pulumi:"partialResultsImageFail"`
	Permission              pulumi.StringOutput                                   `pulumi:"permission"`
	PolicySettings          KubernetesAssurancePolicyPolicySettingsOutput         `pulumi:"policySettings"`
	ReadOnly                pulumi.BoolPtrOutput                                  `pulumi:"readOnly"`
	// List of registries.
	Registries            pulumi.StringArrayOutput                          `pulumi:"registries"`
	Registry              pulumi.StringPtrOutput                            `pulumi:"registry"`
	RequiredLabels        KubernetesAssurancePolicyRequiredLabelArrayOutput `pulumi:"requiredLabels"`
	RequiredLabelsEnabled pulumi.BoolPtrOutput                              `pulumi:"requiredLabelsEnabled"`
	ScanMalwareInArchives pulumi.BoolPtrOutput                              `pulumi:"scanMalwareInArchives"`
	ScanNfsMounts         pulumi.BoolPtrOutput                              `pulumi:"scanNfsMounts"`
	ScanProcessMemory     pulumi.BoolPtrOutput                              `pulumi:"scanProcessMemory"`
	// Indicates if scan should include sensitive data in the image.
	ScanSensitiveData   pulumi.BoolPtrOutput `pulumi:"scanSensitiveData"`
	ScanWindowsRegistry pulumi.BoolPtrOutput `pulumi:"scanWindowsRegistry"`
	// Indicates if scanning should include scap.
	ScapEnabled pulumi.BoolPtrOutput `pulumi:"scapEnabled"`
	// List of SCAP user scripts for checks.
	ScapFiles pulumi.StringArrayOutput                  `pulumi:"scapFiles"`
	Scopes    KubernetesAssurancePolicyScopeArrayOutput `pulumi:"scopes"`
	// List of trusted images.
	TrustedBaseImages KubernetesAssurancePolicyTrustedBaseImageArrayOutput `pulumi:"trustedBaseImages"`
	// Indicates if list of trusted base images is relevant.
	TrustedBaseImagesEnabled    pulumi.BoolPtrOutput  `pulumi:"trustedBaseImagesEnabled"`
	VulnerabilityExploitability pulumi.BoolPtrOutput  `pulumi:"vulnerabilityExploitability"`
	VulnerabilityScoreRanges    pulumi.IntArrayOutput `pulumi:"vulnerabilityScoreRanges"`
	// List of whitelisted licenses.
	WhitelistedLicenses pulumi.StringArrayOutput `pulumi:"whitelistedLicenses"`
	// Indicates if license blacklist is relevant.
	WhitelistedLicensesEnabled pulumi.BoolPtrOutput `pulumi:"whitelistedLicensesEnabled"`
}

// NewKubernetesAssurancePolicy registers a new resource with the given unique name, arguments, and options.
func NewKubernetesAssurancePolicy(ctx *pulumi.Context,
	name string, args *KubernetesAssurancePolicyArgs, opts ...pulumi.ResourceOption) (*KubernetesAssurancePolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApplicationScopes == nil {
		return nil, errors.New("invalid value for required argument 'ApplicationScopes'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource KubernetesAssurancePolicy
	err := ctx.RegisterResource("aquasec:index/kubernetesAssurancePolicy:KubernetesAssurancePolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKubernetesAssurancePolicy gets an existing KubernetesAssurancePolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKubernetesAssurancePolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KubernetesAssurancePolicyState, opts ...pulumi.ResourceOption) (*KubernetesAssurancePolicy, error) {
	var resource KubernetesAssurancePolicy
	err := ctx.ReadResource("aquasec:index/kubernetesAssurancePolicy:KubernetesAssurancePolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KubernetesAssurancePolicy resources.
type kubernetesAssurancePolicyState struct {
	// Aggregated vulnerability information.
	AggregatedVulnerability map[string]string `pulumi:"aggregatedVulnerability"`
	// List of explicitly allowed images.
	AllowedImages     []string `pulumi:"allowedImages"`
	ApplicationScopes []string `pulumi:"applicationScopes"`
	// What type of assurance policy is described.
	AssuranceType *string `pulumi:"assuranceType"`
	// Indicates if auditing for failures.
	AuditOnFailure *bool `pulumi:"auditOnFailure"`
	// Name of user account that created the policy.
	Author             *string                                 `pulumi:"author"`
	AutoScanConfigured *bool                                   `pulumi:"autoScanConfigured"`
	AutoScanEnabled    *bool                                   `pulumi:"autoScanEnabled"`
	AutoScanTimes      []KubernetesAssurancePolicyAutoScanTime `pulumi:"autoScanTimes"`
	// List of function's forbidden permissions.
	BlacklistPermissions []string `pulumi:"blacklistPermissions"`
	// Indicates if blacklist permissions is relevant.
	BlacklistPermissionsEnabled *bool `pulumi:"blacklistPermissionsEnabled"`
	// List of blacklisted licenses.
	BlacklistedLicenses []string `pulumi:"blacklistedLicenses"`
	// Indicates if license blacklist is relevant.
	BlacklistedLicensesEnabled *bool `pulumi:"blacklistedLicensesEnabled"`
	// Indicates if failed images are blocked.
	BlockFailed         *bool `pulumi:"blockFailed"`
	ControlExcludeNoFix *bool `pulumi:"controlExcludeNoFix"`
	// List of Custom user scripts for checks.
	CustomChecks []KubernetesAssurancePolicyCustomCheck `pulumi:"customChecks"`
	// Indicates if scanning should include custom checks.
	CustomChecksEnabled   *bool   `pulumi:"customChecksEnabled"`
	CustomSeverity        *string `pulumi:"customSeverity"`
	CustomSeverityEnabled *bool   `pulumi:"customSeverityEnabled"`
	// Indicates if CVEs blacklist is relevant.
	CvesBlackListEnabled *bool `pulumi:"cvesBlackListEnabled"`
	// List of CVEs blacklisted items.
	CvesBlackLists []string `pulumi:"cvesBlackLists"`
	// Indicates if CVEs whitelist is relevant.
	CvesWhiteListEnabled *bool `pulumi:"cvesWhiteListEnabled"`
	// List of cves whitelisted licenses
	CvesWhiteLists []string `pulumi:"cvesWhiteLists"`
	// Identifier of the cvss severity.
	CvssSeverity *string `pulumi:"cvssSeverity"`
	// Indicates if the cvss severity is scanned.
	CvssSeverityEnabled *bool `pulumi:"cvssSeverityEnabled"`
	// Indicates that policy should ignore cvss cases that do not have a known fix.
	CvssSeverityExcludeNoFix *bool    `pulumi:"cvssSeverityExcludeNoFix"`
	Description              *string  `pulumi:"description"`
	DisallowExploitTypes     []string `pulumi:"disallowExploitTypes"`
	// Indicates if malware should block the image.
	DisallowMalware *bool `pulumi:"disallowMalware"`
	// Checks the host according to the Docker CIS benchmark, if Docker is found on the host.
	DockerCisEnabled *bool `pulumi:"dockerCisEnabled"`
	// Name of the container image.
	Domain                           *string  `pulumi:"domain"`
	DomainName                       *string  `pulumi:"domainName"`
	DtaEnabled                       *bool    `pulumi:"dtaEnabled"`
	DtaSeverity                      *string  `pulumi:"dtaSeverity"`
	Enabled                          *bool    `pulumi:"enabled"`
	Enforce                          *bool    `pulumi:"enforce"`
	EnforceAfterDays                 *int     `pulumi:"enforceAfterDays"`
	EnforceExcessivePermissions      *bool    `pulumi:"enforceExcessivePermissions"`
	ExceptionalMonitoredMalwarePaths []string `pulumi:"exceptionalMonitoredMalwarePaths"`
	ExcludeApplicationScopes         []string `pulumi:"excludeApplicationScopes"`
	// Indicates if cicd failures will fail the image.
	FailCicd                         *bool                                     `pulumi:"failCicd"`
	ForbiddenLabels                  []KubernetesAssurancePolicyForbiddenLabel `pulumi:"forbiddenLabels"`
	ForbiddenLabelsEnabled           *bool                                     `pulumi:"forbiddenLabelsEnabled"`
	ForceMicroenforcer               *bool                                     `pulumi:"forceMicroenforcer"`
	FunctionIntegrityEnabled         *bool                                     `pulumi:"functionIntegrityEnabled"`
	IgnoreBaseImageVln               *bool                                     `pulumi:"ignoreBaseImageVln"`
	IgnoreRecentlyPublishedVln       *bool                                     `pulumi:"ignoreRecentlyPublishedVln"`
	IgnoreRecentlyPublishedVlnPeriod *int                                      `pulumi:"ignoreRecentlyPublishedVlnPeriod"`
	// Indicates if risk resources are ignored.
	IgnoreRiskResourcesEnabled *bool `pulumi:"ignoreRiskResourcesEnabled"`
	// List of ignored risk resources.
	IgnoredRiskResources      []string `pulumi:"ignoredRiskResources"`
	IgnoredSensitiveResources []string `pulumi:"ignoredSensitiveResources"`
	// List of images.
	Images []string `pulumi:"images"`
	// Performs a Kubernetes CIS benchmark check for the host.
	KubeCisEnabled *bool `pulumi:"kubeCisEnabled"`
	// List of Kubernetes controls.
	KubernetesControls       []KubernetesAssurancePolicyKubernetesControl `pulumi:"kubernetesControls"`
	KubernetesControlsAvdIds []string                                     `pulumi:"kubernetesControlsAvdIds"`
	// List of kubernetes control names and available kubernetes controls are: 'Access to host IPC namespace', 'Access to host PID', 'Access to host network', 'Access to host ports', 'All container images must start with a GCR domain', 'All container images must start with an ECR domain', 'All container images must start with the *.azurecr.io domain', 'CPU not limited', 'CPU requests not specified', 'Can elevate its own privileges', 'ConfigMap with secrets', 'ConfigMap with sensitive content', 'Container images from public registries used', 'Default capabilitiessome containers do not drop all', 'Default capabilitiessome containers do not drop any', 'Delete pod logs', 'Exec into Pods', 'Image tag :latest used', 'Manage EKS IAM Auth ConfigMap', 'Manage Kubernetes RBAC resources', 'Manage Kubernetes networking', 'Manage Kubernetes workloads and pods', 'Manage all resources', 'Manage all resources at the namespace', 'Manage configmaps', 'Manage namespace secrets', 'Manage secrets', 'Manage webhookconfigurations', 'Manages /etc/hosts', 'Memory not limited', 'Memory requests not specified', 'Non-core volume types used.', 'Non-default /proc masks set', 'Privileged', 'Root file system is not read-only', 'Runs as root user', 'Runs with GID <= 10000', 'Runs with UID <= 10000', 'Runs with a root primary or supplementary GID', 'Runtime/Default AppArmor profile not set', 'Runtime/Default Seccomp profile not set', 'SELinux custom options set', 'SYS_ADMIN capability added', 'Seccomp policies disabled', 'Service with External IP', 'Specific capabilities added', 'Unsafe sysctl options set', 'User with admin access', 'Workloads in the default namespace', 'hostPath volume mounted with docker.sock', 'hostPath volumes mounted'
	KubernetesControlsNames []string `pulumi:"kubernetesControlsNames"`
	// List of labels.
	Labels          []string `pulumi:"labels"`
	Lastupdate      *string  `pulumi:"lastupdate"`
	LinuxCisEnabled *bool    `pulumi:"linuxCisEnabled"`
	MalwareAction   *string  `pulumi:"malwareAction"`
	// Value of allowed maximum score.
	MaximumScore *float64 `pulumi:"maximumScore"`
	// Indicates if exceeding the maximum score is scanned.
	MaximumScoreEnabled *bool `pulumi:"maximumScoreEnabled"`
	// Indicates that policy should ignore cases that do not have a known fix.
	MaximumScoreExcludeNoFix *bool    `pulumi:"maximumScoreExcludeNoFix"`
	MonitoredMalwarePaths    []string `pulumi:"monitoredMalwarePaths"`
	Name                     *string  `pulumi:"name"`
	// Indicates if raise a warning for images that should only be run as root.
	OnlyNoneRootUsers         *bool `pulumi:"onlyNoneRootUsers"`
	OpenshiftHardeningEnabled *bool `pulumi:"openshiftHardeningEnabled"`
	// Indicates if packages blacklist is relevant.
	PackagesBlackListEnabled *bool `pulumi:"packagesBlackListEnabled"`
	// List of blacklisted images.
	PackagesBlackLists []KubernetesAssurancePolicyPackagesBlackList `pulumi:"packagesBlackLists"`
	// Indicates if packages whitelist is relevant.
	PackagesWhiteListEnabled *bool `pulumi:"packagesWhiteListEnabled"`
	// List of whitelisted images.
	PackagesWhiteLists      []KubernetesAssurancePolicyPackagesWhiteList `pulumi:"packagesWhiteLists"`
	PartialResultsImageFail *bool                                        `pulumi:"partialResultsImageFail"`
	Permission              *string                                      `pulumi:"permission"`
	PolicySettings          *KubernetesAssurancePolicyPolicySettings     `pulumi:"policySettings"`
	ReadOnly                *bool                                        `pulumi:"readOnly"`
	// List of registries.
	Registries            []string                                 `pulumi:"registries"`
	Registry              *string                                  `pulumi:"registry"`
	RequiredLabels        []KubernetesAssurancePolicyRequiredLabel `pulumi:"requiredLabels"`
	RequiredLabelsEnabled *bool                                    `pulumi:"requiredLabelsEnabled"`
	ScanMalwareInArchives *bool                                    `pulumi:"scanMalwareInArchives"`
	ScanNfsMounts         *bool                                    `pulumi:"scanNfsMounts"`
	ScanProcessMemory     *bool                                    `pulumi:"scanProcessMemory"`
	// Indicates if scan should include sensitive data in the image.
	ScanSensitiveData   *bool `pulumi:"scanSensitiveData"`
	ScanWindowsRegistry *bool `pulumi:"scanWindowsRegistry"`
	// Indicates if scanning should include scap.
	ScapEnabled *bool `pulumi:"scapEnabled"`
	// List of SCAP user scripts for checks.
	ScapFiles []string                         `pulumi:"scapFiles"`
	Scopes    []KubernetesAssurancePolicyScope `pulumi:"scopes"`
	// List of trusted images.
	TrustedBaseImages []KubernetesAssurancePolicyTrustedBaseImage `pulumi:"trustedBaseImages"`
	// Indicates if list of trusted base images is relevant.
	TrustedBaseImagesEnabled    *bool `pulumi:"trustedBaseImagesEnabled"`
	VulnerabilityExploitability *bool `pulumi:"vulnerabilityExploitability"`
	VulnerabilityScoreRanges    []int `pulumi:"vulnerabilityScoreRanges"`
	// List of whitelisted licenses.
	WhitelistedLicenses []string `pulumi:"whitelistedLicenses"`
	// Indicates if license blacklist is relevant.
	WhitelistedLicensesEnabled *bool `pulumi:"whitelistedLicensesEnabled"`
}

type KubernetesAssurancePolicyState struct {
	// Aggregated vulnerability information.
	AggregatedVulnerability pulumi.StringMapInput
	// List of explicitly allowed images.
	AllowedImages     pulumi.StringArrayInput
	ApplicationScopes pulumi.StringArrayInput
	// What type of assurance policy is described.
	AssuranceType pulumi.StringPtrInput
	// Indicates if auditing for failures.
	AuditOnFailure pulumi.BoolPtrInput
	// Name of user account that created the policy.
	Author             pulumi.StringPtrInput
	AutoScanConfigured pulumi.BoolPtrInput
	AutoScanEnabled    pulumi.BoolPtrInput
	AutoScanTimes      KubernetesAssurancePolicyAutoScanTimeArrayInput
	// List of function's forbidden permissions.
	BlacklistPermissions pulumi.StringArrayInput
	// Indicates if blacklist permissions is relevant.
	BlacklistPermissionsEnabled pulumi.BoolPtrInput
	// List of blacklisted licenses.
	BlacklistedLicenses pulumi.StringArrayInput
	// Indicates if license blacklist is relevant.
	BlacklistedLicensesEnabled pulumi.BoolPtrInput
	// Indicates if failed images are blocked.
	BlockFailed         pulumi.BoolPtrInput
	ControlExcludeNoFix pulumi.BoolPtrInput
	// List of Custom user scripts for checks.
	CustomChecks KubernetesAssurancePolicyCustomCheckArrayInput
	// Indicates if scanning should include custom checks.
	CustomChecksEnabled   pulumi.BoolPtrInput
	CustomSeverity        pulumi.StringPtrInput
	CustomSeverityEnabled pulumi.BoolPtrInput
	// Indicates if CVEs blacklist is relevant.
	CvesBlackListEnabled pulumi.BoolPtrInput
	// List of CVEs blacklisted items.
	CvesBlackLists pulumi.StringArrayInput
	// Indicates if CVEs whitelist is relevant.
	CvesWhiteListEnabled pulumi.BoolPtrInput
	// List of cves whitelisted licenses
	CvesWhiteLists pulumi.StringArrayInput
	// Identifier of the cvss severity.
	CvssSeverity pulumi.StringPtrInput
	// Indicates if the cvss severity is scanned.
	CvssSeverityEnabled pulumi.BoolPtrInput
	// Indicates that policy should ignore cvss cases that do not have a known fix.
	CvssSeverityExcludeNoFix pulumi.BoolPtrInput
	Description              pulumi.StringPtrInput
	DisallowExploitTypes     pulumi.StringArrayInput
	// Indicates if malware should block the image.
	DisallowMalware pulumi.BoolPtrInput
	// Checks the host according to the Docker CIS benchmark, if Docker is found on the host.
	DockerCisEnabled pulumi.BoolPtrInput
	// Name of the container image.
	Domain                           pulumi.StringPtrInput
	DomainName                       pulumi.StringPtrInput
	DtaEnabled                       pulumi.BoolPtrInput
	DtaSeverity                      pulumi.StringPtrInput
	Enabled                          pulumi.BoolPtrInput
	Enforce                          pulumi.BoolPtrInput
	EnforceAfterDays                 pulumi.IntPtrInput
	EnforceExcessivePermissions      pulumi.BoolPtrInput
	ExceptionalMonitoredMalwarePaths pulumi.StringArrayInput
	ExcludeApplicationScopes         pulumi.StringArrayInput
	// Indicates if cicd failures will fail the image.
	FailCicd                         pulumi.BoolPtrInput
	ForbiddenLabels                  KubernetesAssurancePolicyForbiddenLabelArrayInput
	ForbiddenLabelsEnabled           pulumi.BoolPtrInput
	ForceMicroenforcer               pulumi.BoolPtrInput
	FunctionIntegrityEnabled         pulumi.BoolPtrInput
	IgnoreBaseImageVln               pulumi.BoolPtrInput
	IgnoreRecentlyPublishedVln       pulumi.BoolPtrInput
	IgnoreRecentlyPublishedVlnPeriod pulumi.IntPtrInput
	// Indicates if risk resources are ignored.
	IgnoreRiskResourcesEnabled pulumi.BoolPtrInput
	// List of ignored risk resources.
	IgnoredRiskResources      pulumi.StringArrayInput
	IgnoredSensitiveResources pulumi.StringArrayInput
	// List of images.
	Images pulumi.StringArrayInput
	// Performs a Kubernetes CIS benchmark check for the host.
	KubeCisEnabled pulumi.BoolPtrInput
	// List of Kubernetes controls.
	KubernetesControls       KubernetesAssurancePolicyKubernetesControlArrayInput
	KubernetesControlsAvdIds pulumi.StringArrayInput
	// List of kubernetes control names and available kubernetes controls are: 'Access to host IPC namespace', 'Access to host PID', 'Access to host network', 'Access to host ports', 'All container images must start with a GCR domain', 'All container images must start with an ECR domain', 'All container images must start with the *.azurecr.io domain', 'CPU not limited', 'CPU requests not specified', 'Can elevate its own privileges', 'ConfigMap with secrets', 'ConfigMap with sensitive content', 'Container images from public registries used', 'Default capabilitiessome containers do not drop all', 'Default capabilitiessome containers do not drop any', 'Delete pod logs', 'Exec into Pods', 'Image tag :latest used', 'Manage EKS IAM Auth ConfigMap', 'Manage Kubernetes RBAC resources', 'Manage Kubernetes networking', 'Manage Kubernetes workloads and pods', 'Manage all resources', 'Manage all resources at the namespace', 'Manage configmaps', 'Manage namespace secrets', 'Manage secrets', 'Manage webhookconfigurations', 'Manages /etc/hosts', 'Memory not limited', 'Memory requests not specified', 'Non-core volume types used.', 'Non-default /proc masks set', 'Privileged', 'Root file system is not read-only', 'Runs as root user', 'Runs with GID <= 10000', 'Runs with UID <= 10000', 'Runs with a root primary or supplementary GID', 'Runtime/Default AppArmor profile not set', 'Runtime/Default Seccomp profile not set', 'SELinux custom options set', 'SYS_ADMIN capability added', 'Seccomp policies disabled', 'Service with External IP', 'Specific capabilities added', 'Unsafe sysctl options set', 'User with admin access', 'Workloads in the default namespace', 'hostPath volume mounted with docker.sock', 'hostPath volumes mounted'
	KubernetesControlsNames pulumi.StringArrayInput
	// List of labels.
	Labels          pulumi.StringArrayInput
	Lastupdate      pulumi.StringPtrInput
	LinuxCisEnabled pulumi.BoolPtrInput
	MalwareAction   pulumi.StringPtrInput
	// Value of allowed maximum score.
	MaximumScore pulumi.Float64PtrInput
	// Indicates if exceeding the maximum score is scanned.
	MaximumScoreEnabled pulumi.BoolPtrInput
	// Indicates that policy should ignore cases that do not have a known fix.
	MaximumScoreExcludeNoFix pulumi.BoolPtrInput
	MonitoredMalwarePaths    pulumi.StringArrayInput
	Name                     pulumi.StringPtrInput
	// Indicates if raise a warning for images that should only be run as root.
	OnlyNoneRootUsers         pulumi.BoolPtrInput
	OpenshiftHardeningEnabled pulumi.BoolPtrInput
	// Indicates if packages blacklist is relevant.
	PackagesBlackListEnabled pulumi.BoolPtrInput
	// List of blacklisted images.
	PackagesBlackLists KubernetesAssurancePolicyPackagesBlackListArrayInput
	// Indicates if packages whitelist is relevant.
	PackagesWhiteListEnabled pulumi.BoolPtrInput
	// List of whitelisted images.
	PackagesWhiteLists      KubernetesAssurancePolicyPackagesWhiteListArrayInput
	PartialResultsImageFail pulumi.BoolPtrInput
	Permission              pulumi.StringPtrInput
	PolicySettings          KubernetesAssurancePolicyPolicySettingsPtrInput
	ReadOnly                pulumi.BoolPtrInput
	// List of registries.
	Registries            pulumi.StringArrayInput
	Registry              pulumi.StringPtrInput
	RequiredLabels        KubernetesAssurancePolicyRequiredLabelArrayInput
	RequiredLabelsEnabled pulumi.BoolPtrInput
	ScanMalwareInArchives pulumi.BoolPtrInput
	ScanNfsMounts         pulumi.BoolPtrInput
	ScanProcessMemory     pulumi.BoolPtrInput
	// Indicates if scan should include sensitive data in the image.
	ScanSensitiveData   pulumi.BoolPtrInput
	ScanWindowsRegistry pulumi.BoolPtrInput
	// Indicates if scanning should include scap.
	ScapEnabled pulumi.BoolPtrInput
	// List of SCAP user scripts for checks.
	ScapFiles pulumi.StringArrayInput
	Scopes    KubernetesAssurancePolicyScopeArrayInput
	// List of trusted images.
	TrustedBaseImages KubernetesAssurancePolicyTrustedBaseImageArrayInput
	// Indicates if list of trusted base images is relevant.
	TrustedBaseImagesEnabled    pulumi.BoolPtrInput
	VulnerabilityExploitability pulumi.BoolPtrInput
	VulnerabilityScoreRanges    pulumi.IntArrayInput
	// List of whitelisted licenses.
	WhitelistedLicenses pulumi.StringArrayInput
	// Indicates if license blacklist is relevant.
	WhitelistedLicensesEnabled pulumi.BoolPtrInput
}

func (KubernetesAssurancePolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*kubernetesAssurancePolicyState)(nil)).Elem()
}

type kubernetesAssurancePolicyArgs struct {
	// Aggregated vulnerability information.
	AggregatedVulnerability map[string]string `pulumi:"aggregatedVulnerability"`
	// List of explicitly allowed images.
	AllowedImages     []string `pulumi:"allowedImages"`
	ApplicationScopes []string `pulumi:"applicationScopes"`
	// What type of assurance policy is described.
	AssuranceType *string `pulumi:"assuranceType"`
	// Indicates if auditing for failures.
	AuditOnFailure *bool `pulumi:"auditOnFailure"`
	// Name of user account that created the policy.
	Author             *string                                 `pulumi:"author"`
	AutoScanConfigured *bool                                   `pulumi:"autoScanConfigured"`
	AutoScanEnabled    *bool                                   `pulumi:"autoScanEnabled"`
	AutoScanTimes      []KubernetesAssurancePolicyAutoScanTime `pulumi:"autoScanTimes"`
	// List of function's forbidden permissions.
	BlacklistPermissions []string `pulumi:"blacklistPermissions"`
	// Indicates if blacklist permissions is relevant.
	BlacklistPermissionsEnabled *bool `pulumi:"blacklistPermissionsEnabled"`
	// List of blacklisted licenses.
	BlacklistedLicenses []string `pulumi:"blacklistedLicenses"`
	// Indicates if license blacklist is relevant.
	BlacklistedLicensesEnabled *bool `pulumi:"blacklistedLicensesEnabled"`
	// Indicates if failed images are blocked.
	BlockFailed         *bool `pulumi:"blockFailed"`
	ControlExcludeNoFix *bool `pulumi:"controlExcludeNoFix"`
	// List of Custom user scripts for checks.
	CustomChecks []KubernetesAssurancePolicyCustomCheck `pulumi:"customChecks"`
	// Indicates if scanning should include custom checks.
	CustomChecksEnabled   *bool   `pulumi:"customChecksEnabled"`
	CustomSeverity        *string `pulumi:"customSeverity"`
	CustomSeverityEnabled *bool   `pulumi:"customSeverityEnabled"`
	// Indicates if CVEs blacklist is relevant.
	CvesBlackListEnabled *bool `pulumi:"cvesBlackListEnabled"`
	// List of CVEs blacklisted items.
	CvesBlackLists []string `pulumi:"cvesBlackLists"`
	// Indicates if CVEs whitelist is relevant.
	CvesWhiteListEnabled *bool `pulumi:"cvesWhiteListEnabled"`
	// List of cves whitelisted licenses
	CvesWhiteLists []string `pulumi:"cvesWhiteLists"`
	// Identifier of the cvss severity.
	CvssSeverity *string `pulumi:"cvssSeverity"`
	// Indicates if the cvss severity is scanned.
	CvssSeverityEnabled *bool `pulumi:"cvssSeverityEnabled"`
	// Indicates that policy should ignore cvss cases that do not have a known fix.
	CvssSeverityExcludeNoFix *bool    `pulumi:"cvssSeverityExcludeNoFix"`
	Description              *string  `pulumi:"description"`
	DisallowExploitTypes     []string `pulumi:"disallowExploitTypes"`
	// Indicates if malware should block the image.
	DisallowMalware *bool `pulumi:"disallowMalware"`
	// Checks the host according to the Docker CIS benchmark, if Docker is found on the host.
	DockerCisEnabled *bool `pulumi:"dockerCisEnabled"`
	// Name of the container image.
	Domain                           *string  `pulumi:"domain"`
	DomainName                       *string  `pulumi:"domainName"`
	DtaEnabled                       *bool    `pulumi:"dtaEnabled"`
	DtaSeverity                      *string  `pulumi:"dtaSeverity"`
	Enabled                          *bool    `pulumi:"enabled"`
	Enforce                          *bool    `pulumi:"enforce"`
	EnforceAfterDays                 *int     `pulumi:"enforceAfterDays"`
	EnforceExcessivePermissions      *bool    `pulumi:"enforceExcessivePermissions"`
	ExceptionalMonitoredMalwarePaths []string `pulumi:"exceptionalMonitoredMalwarePaths"`
	ExcludeApplicationScopes         []string `pulumi:"excludeApplicationScopes"`
	// Indicates if cicd failures will fail the image.
	FailCicd                         *bool                                     `pulumi:"failCicd"`
	ForbiddenLabels                  []KubernetesAssurancePolicyForbiddenLabel `pulumi:"forbiddenLabels"`
	ForbiddenLabelsEnabled           *bool                                     `pulumi:"forbiddenLabelsEnabled"`
	ForceMicroenforcer               *bool                                     `pulumi:"forceMicroenforcer"`
	FunctionIntegrityEnabled         *bool                                     `pulumi:"functionIntegrityEnabled"`
	IgnoreBaseImageVln               *bool                                     `pulumi:"ignoreBaseImageVln"`
	IgnoreRecentlyPublishedVln       *bool                                     `pulumi:"ignoreRecentlyPublishedVln"`
	IgnoreRecentlyPublishedVlnPeriod *int                                      `pulumi:"ignoreRecentlyPublishedVlnPeriod"`
	// Indicates if risk resources are ignored.
	IgnoreRiskResourcesEnabled *bool `pulumi:"ignoreRiskResourcesEnabled"`
	// List of ignored risk resources.
	IgnoredRiskResources      []string `pulumi:"ignoredRiskResources"`
	IgnoredSensitiveResources []string `pulumi:"ignoredSensitiveResources"`
	// List of images.
	Images []string `pulumi:"images"`
	// Performs a Kubernetes CIS benchmark check for the host.
	KubeCisEnabled *bool `pulumi:"kubeCisEnabled"`
	// List of Kubernetes controls.
	KubernetesControls       []KubernetesAssurancePolicyKubernetesControl `pulumi:"kubernetesControls"`
	KubernetesControlsAvdIds []string                                     `pulumi:"kubernetesControlsAvdIds"`
	// List of kubernetes control names and available kubernetes controls are: 'Access to host IPC namespace', 'Access to host PID', 'Access to host network', 'Access to host ports', 'All container images must start with a GCR domain', 'All container images must start with an ECR domain', 'All container images must start with the *.azurecr.io domain', 'CPU not limited', 'CPU requests not specified', 'Can elevate its own privileges', 'ConfigMap with secrets', 'ConfigMap with sensitive content', 'Container images from public registries used', 'Default capabilitiessome containers do not drop all', 'Default capabilitiessome containers do not drop any', 'Delete pod logs', 'Exec into Pods', 'Image tag :latest used', 'Manage EKS IAM Auth ConfigMap', 'Manage Kubernetes RBAC resources', 'Manage Kubernetes networking', 'Manage Kubernetes workloads and pods', 'Manage all resources', 'Manage all resources at the namespace', 'Manage configmaps', 'Manage namespace secrets', 'Manage secrets', 'Manage webhookconfigurations', 'Manages /etc/hosts', 'Memory not limited', 'Memory requests not specified', 'Non-core volume types used.', 'Non-default /proc masks set', 'Privileged', 'Root file system is not read-only', 'Runs as root user', 'Runs with GID <= 10000', 'Runs with UID <= 10000', 'Runs with a root primary or supplementary GID', 'Runtime/Default AppArmor profile not set', 'Runtime/Default Seccomp profile not set', 'SELinux custom options set', 'SYS_ADMIN capability added', 'Seccomp policies disabled', 'Service with External IP', 'Specific capabilities added', 'Unsafe sysctl options set', 'User with admin access', 'Workloads in the default namespace', 'hostPath volume mounted with docker.sock', 'hostPath volumes mounted'
	KubernetesControlsNames []string `pulumi:"kubernetesControlsNames"`
	// List of labels.
	Labels          []string `pulumi:"labels"`
	Lastupdate      *string  `pulumi:"lastupdate"`
	LinuxCisEnabled *bool    `pulumi:"linuxCisEnabled"`
	MalwareAction   *string  `pulumi:"malwareAction"`
	// Value of allowed maximum score.
	MaximumScore *float64 `pulumi:"maximumScore"`
	// Indicates if exceeding the maximum score is scanned.
	MaximumScoreEnabled *bool `pulumi:"maximumScoreEnabled"`
	// Indicates that policy should ignore cases that do not have a known fix.
	MaximumScoreExcludeNoFix *bool    `pulumi:"maximumScoreExcludeNoFix"`
	MonitoredMalwarePaths    []string `pulumi:"monitoredMalwarePaths"`
	Name                     *string  `pulumi:"name"`
	// Indicates if raise a warning for images that should only be run as root.
	OnlyNoneRootUsers         *bool `pulumi:"onlyNoneRootUsers"`
	OpenshiftHardeningEnabled *bool `pulumi:"openshiftHardeningEnabled"`
	// Indicates if packages blacklist is relevant.
	PackagesBlackListEnabled *bool `pulumi:"packagesBlackListEnabled"`
	// List of blacklisted images.
	PackagesBlackLists []KubernetesAssurancePolicyPackagesBlackList `pulumi:"packagesBlackLists"`
	// Indicates if packages whitelist is relevant.
	PackagesWhiteListEnabled *bool `pulumi:"packagesWhiteListEnabled"`
	// List of whitelisted images.
	PackagesWhiteLists      []KubernetesAssurancePolicyPackagesWhiteList `pulumi:"packagesWhiteLists"`
	PartialResultsImageFail *bool                                        `pulumi:"partialResultsImageFail"`
	Permission              *string                                      `pulumi:"permission"`
	PolicySettings          *KubernetesAssurancePolicyPolicySettings     `pulumi:"policySettings"`
	ReadOnly                *bool                                        `pulumi:"readOnly"`
	// List of registries.
	Registries            []string                                 `pulumi:"registries"`
	Registry              *string                                  `pulumi:"registry"`
	RequiredLabels        []KubernetesAssurancePolicyRequiredLabel `pulumi:"requiredLabels"`
	RequiredLabelsEnabled *bool                                    `pulumi:"requiredLabelsEnabled"`
	ScanMalwareInArchives *bool                                    `pulumi:"scanMalwareInArchives"`
	ScanNfsMounts         *bool                                    `pulumi:"scanNfsMounts"`
	ScanProcessMemory     *bool                                    `pulumi:"scanProcessMemory"`
	// Indicates if scan should include sensitive data in the image.
	ScanSensitiveData   *bool `pulumi:"scanSensitiveData"`
	ScanWindowsRegistry *bool `pulumi:"scanWindowsRegistry"`
	// Indicates if scanning should include scap.
	ScapEnabled *bool `pulumi:"scapEnabled"`
	// List of SCAP user scripts for checks.
	ScapFiles []string                         `pulumi:"scapFiles"`
	Scopes    []KubernetesAssurancePolicyScope `pulumi:"scopes"`
	// List of trusted images.
	TrustedBaseImages []KubernetesAssurancePolicyTrustedBaseImage `pulumi:"trustedBaseImages"`
	// Indicates if list of trusted base images is relevant.
	TrustedBaseImagesEnabled    *bool `pulumi:"trustedBaseImagesEnabled"`
	VulnerabilityExploitability *bool `pulumi:"vulnerabilityExploitability"`
	VulnerabilityScoreRanges    []int `pulumi:"vulnerabilityScoreRanges"`
	// List of whitelisted licenses.
	WhitelistedLicenses []string `pulumi:"whitelistedLicenses"`
	// Indicates if license blacklist is relevant.
	WhitelistedLicensesEnabled *bool `pulumi:"whitelistedLicensesEnabled"`
}

// The set of arguments for constructing a KubernetesAssurancePolicy resource.
type KubernetesAssurancePolicyArgs struct {
	// Aggregated vulnerability information.
	AggregatedVulnerability pulumi.StringMapInput
	// List of explicitly allowed images.
	AllowedImages     pulumi.StringArrayInput
	ApplicationScopes pulumi.StringArrayInput
	// What type of assurance policy is described.
	AssuranceType pulumi.StringPtrInput
	// Indicates if auditing for failures.
	AuditOnFailure pulumi.BoolPtrInput
	// Name of user account that created the policy.
	Author             pulumi.StringPtrInput
	AutoScanConfigured pulumi.BoolPtrInput
	AutoScanEnabled    pulumi.BoolPtrInput
	AutoScanTimes      KubernetesAssurancePolicyAutoScanTimeArrayInput
	// List of function's forbidden permissions.
	BlacklistPermissions pulumi.StringArrayInput
	// Indicates if blacklist permissions is relevant.
	BlacklistPermissionsEnabled pulumi.BoolPtrInput
	// List of blacklisted licenses.
	BlacklistedLicenses pulumi.StringArrayInput
	// Indicates if license blacklist is relevant.
	BlacklistedLicensesEnabled pulumi.BoolPtrInput
	// Indicates if failed images are blocked.
	BlockFailed         pulumi.BoolPtrInput
	ControlExcludeNoFix pulumi.BoolPtrInput
	// List of Custom user scripts for checks.
	CustomChecks KubernetesAssurancePolicyCustomCheckArrayInput
	// Indicates if scanning should include custom checks.
	CustomChecksEnabled   pulumi.BoolPtrInput
	CustomSeverity        pulumi.StringPtrInput
	CustomSeverityEnabled pulumi.BoolPtrInput
	// Indicates if CVEs blacklist is relevant.
	CvesBlackListEnabled pulumi.BoolPtrInput
	// List of CVEs blacklisted items.
	CvesBlackLists pulumi.StringArrayInput
	// Indicates if CVEs whitelist is relevant.
	CvesWhiteListEnabled pulumi.BoolPtrInput
	// List of cves whitelisted licenses
	CvesWhiteLists pulumi.StringArrayInput
	// Identifier of the cvss severity.
	CvssSeverity pulumi.StringPtrInput
	// Indicates if the cvss severity is scanned.
	CvssSeverityEnabled pulumi.BoolPtrInput
	// Indicates that policy should ignore cvss cases that do not have a known fix.
	CvssSeverityExcludeNoFix pulumi.BoolPtrInput
	Description              pulumi.StringPtrInput
	DisallowExploitTypes     pulumi.StringArrayInput
	// Indicates if malware should block the image.
	DisallowMalware pulumi.BoolPtrInput
	// Checks the host according to the Docker CIS benchmark, if Docker is found on the host.
	DockerCisEnabled pulumi.BoolPtrInput
	// Name of the container image.
	Domain                           pulumi.StringPtrInput
	DomainName                       pulumi.StringPtrInput
	DtaEnabled                       pulumi.BoolPtrInput
	DtaSeverity                      pulumi.StringPtrInput
	Enabled                          pulumi.BoolPtrInput
	Enforce                          pulumi.BoolPtrInput
	EnforceAfterDays                 pulumi.IntPtrInput
	EnforceExcessivePermissions      pulumi.BoolPtrInput
	ExceptionalMonitoredMalwarePaths pulumi.StringArrayInput
	ExcludeApplicationScopes         pulumi.StringArrayInput
	// Indicates if cicd failures will fail the image.
	FailCicd                         pulumi.BoolPtrInput
	ForbiddenLabels                  KubernetesAssurancePolicyForbiddenLabelArrayInput
	ForbiddenLabelsEnabled           pulumi.BoolPtrInput
	ForceMicroenforcer               pulumi.BoolPtrInput
	FunctionIntegrityEnabled         pulumi.BoolPtrInput
	IgnoreBaseImageVln               pulumi.BoolPtrInput
	IgnoreRecentlyPublishedVln       pulumi.BoolPtrInput
	IgnoreRecentlyPublishedVlnPeriod pulumi.IntPtrInput
	// Indicates if risk resources are ignored.
	IgnoreRiskResourcesEnabled pulumi.BoolPtrInput
	// List of ignored risk resources.
	IgnoredRiskResources      pulumi.StringArrayInput
	IgnoredSensitiveResources pulumi.StringArrayInput
	// List of images.
	Images pulumi.StringArrayInput
	// Performs a Kubernetes CIS benchmark check for the host.
	KubeCisEnabled pulumi.BoolPtrInput
	// List of Kubernetes controls.
	KubernetesControls       KubernetesAssurancePolicyKubernetesControlArrayInput
	KubernetesControlsAvdIds pulumi.StringArrayInput
	// List of kubernetes control names and available kubernetes controls are: 'Access to host IPC namespace', 'Access to host PID', 'Access to host network', 'Access to host ports', 'All container images must start with a GCR domain', 'All container images must start with an ECR domain', 'All container images must start with the *.azurecr.io domain', 'CPU not limited', 'CPU requests not specified', 'Can elevate its own privileges', 'ConfigMap with secrets', 'ConfigMap with sensitive content', 'Container images from public registries used', 'Default capabilitiessome containers do not drop all', 'Default capabilitiessome containers do not drop any', 'Delete pod logs', 'Exec into Pods', 'Image tag :latest used', 'Manage EKS IAM Auth ConfigMap', 'Manage Kubernetes RBAC resources', 'Manage Kubernetes networking', 'Manage Kubernetes workloads and pods', 'Manage all resources', 'Manage all resources at the namespace', 'Manage configmaps', 'Manage namespace secrets', 'Manage secrets', 'Manage webhookconfigurations', 'Manages /etc/hosts', 'Memory not limited', 'Memory requests not specified', 'Non-core volume types used.', 'Non-default /proc masks set', 'Privileged', 'Root file system is not read-only', 'Runs as root user', 'Runs with GID <= 10000', 'Runs with UID <= 10000', 'Runs with a root primary or supplementary GID', 'Runtime/Default AppArmor profile not set', 'Runtime/Default Seccomp profile not set', 'SELinux custom options set', 'SYS_ADMIN capability added', 'Seccomp policies disabled', 'Service with External IP', 'Specific capabilities added', 'Unsafe sysctl options set', 'User with admin access', 'Workloads in the default namespace', 'hostPath volume mounted with docker.sock', 'hostPath volumes mounted'
	KubernetesControlsNames pulumi.StringArrayInput
	// List of labels.
	Labels          pulumi.StringArrayInput
	Lastupdate      pulumi.StringPtrInput
	LinuxCisEnabled pulumi.BoolPtrInput
	MalwareAction   pulumi.StringPtrInput
	// Value of allowed maximum score.
	MaximumScore pulumi.Float64PtrInput
	// Indicates if exceeding the maximum score is scanned.
	MaximumScoreEnabled pulumi.BoolPtrInput
	// Indicates that policy should ignore cases that do not have a known fix.
	MaximumScoreExcludeNoFix pulumi.BoolPtrInput
	MonitoredMalwarePaths    pulumi.StringArrayInput
	Name                     pulumi.StringPtrInput
	// Indicates if raise a warning for images that should only be run as root.
	OnlyNoneRootUsers         pulumi.BoolPtrInput
	OpenshiftHardeningEnabled pulumi.BoolPtrInput
	// Indicates if packages blacklist is relevant.
	PackagesBlackListEnabled pulumi.BoolPtrInput
	// List of blacklisted images.
	PackagesBlackLists KubernetesAssurancePolicyPackagesBlackListArrayInput
	// Indicates if packages whitelist is relevant.
	PackagesWhiteListEnabled pulumi.BoolPtrInput
	// List of whitelisted images.
	PackagesWhiteLists      KubernetesAssurancePolicyPackagesWhiteListArrayInput
	PartialResultsImageFail pulumi.BoolPtrInput
	Permission              pulumi.StringPtrInput
	PolicySettings          KubernetesAssurancePolicyPolicySettingsPtrInput
	ReadOnly                pulumi.BoolPtrInput
	// List of registries.
	Registries            pulumi.StringArrayInput
	Registry              pulumi.StringPtrInput
	RequiredLabels        KubernetesAssurancePolicyRequiredLabelArrayInput
	RequiredLabelsEnabled pulumi.BoolPtrInput
	ScanMalwareInArchives pulumi.BoolPtrInput
	ScanNfsMounts         pulumi.BoolPtrInput
	ScanProcessMemory     pulumi.BoolPtrInput
	// Indicates if scan should include sensitive data in the image.
	ScanSensitiveData   pulumi.BoolPtrInput
	ScanWindowsRegistry pulumi.BoolPtrInput
	// Indicates if scanning should include scap.
	ScapEnabled pulumi.BoolPtrInput
	// List of SCAP user scripts for checks.
	ScapFiles pulumi.StringArrayInput
	Scopes    KubernetesAssurancePolicyScopeArrayInput
	// List of trusted images.
	TrustedBaseImages KubernetesAssurancePolicyTrustedBaseImageArrayInput
	// Indicates if list of trusted base images is relevant.
	TrustedBaseImagesEnabled    pulumi.BoolPtrInput
	VulnerabilityExploitability pulumi.BoolPtrInput
	VulnerabilityScoreRanges    pulumi.IntArrayInput
	// List of whitelisted licenses.
	WhitelistedLicenses pulumi.StringArrayInput
	// Indicates if license blacklist is relevant.
	WhitelistedLicensesEnabled pulumi.BoolPtrInput
}

func (KubernetesAssurancePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kubernetesAssurancePolicyArgs)(nil)).Elem()
}

type KubernetesAssurancePolicyInput interface {
	pulumi.Input

	ToKubernetesAssurancePolicyOutput() KubernetesAssurancePolicyOutput
	ToKubernetesAssurancePolicyOutputWithContext(ctx context.Context) KubernetesAssurancePolicyOutput
}

func (*KubernetesAssurancePolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**KubernetesAssurancePolicy)(nil)).Elem()
}

func (i *KubernetesAssurancePolicy) ToKubernetesAssurancePolicyOutput() KubernetesAssurancePolicyOutput {
	return i.ToKubernetesAssurancePolicyOutputWithContext(context.Background())
}

func (i *KubernetesAssurancePolicy) ToKubernetesAssurancePolicyOutputWithContext(ctx context.Context) KubernetesAssurancePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesAssurancePolicyOutput)
}

// KubernetesAssurancePolicyArrayInput is an input type that accepts KubernetesAssurancePolicyArray and KubernetesAssurancePolicyArrayOutput values.
// You can construct a concrete instance of `KubernetesAssurancePolicyArrayInput` via:
//
//	KubernetesAssurancePolicyArray{ KubernetesAssurancePolicyArgs{...} }
type KubernetesAssurancePolicyArrayInput interface {
	pulumi.Input

	ToKubernetesAssurancePolicyArrayOutput() KubernetesAssurancePolicyArrayOutput
	ToKubernetesAssurancePolicyArrayOutputWithContext(context.Context) KubernetesAssurancePolicyArrayOutput
}

type KubernetesAssurancePolicyArray []KubernetesAssurancePolicyInput

func (KubernetesAssurancePolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KubernetesAssurancePolicy)(nil)).Elem()
}

func (i KubernetesAssurancePolicyArray) ToKubernetesAssurancePolicyArrayOutput() KubernetesAssurancePolicyArrayOutput {
	return i.ToKubernetesAssurancePolicyArrayOutputWithContext(context.Background())
}

func (i KubernetesAssurancePolicyArray) ToKubernetesAssurancePolicyArrayOutputWithContext(ctx context.Context) KubernetesAssurancePolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesAssurancePolicyArrayOutput)
}

// KubernetesAssurancePolicyMapInput is an input type that accepts KubernetesAssurancePolicyMap and KubernetesAssurancePolicyMapOutput values.
// You can construct a concrete instance of `KubernetesAssurancePolicyMapInput` via:
//
//	KubernetesAssurancePolicyMap{ "key": KubernetesAssurancePolicyArgs{...} }
type KubernetesAssurancePolicyMapInput interface {
	pulumi.Input

	ToKubernetesAssurancePolicyMapOutput() KubernetesAssurancePolicyMapOutput
	ToKubernetesAssurancePolicyMapOutputWithContext(context.Context) KubernetesAssurancePolicyMapOutput
}

type KubernetesAssurancePolicyMap map[string]KubernetesAssurancePolicyInput

func (KubernetesAssurancePolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KubernetesAssurancePolicy)(nil)).Elem()
}

func (i KubernetesAssurancePolicyMap) ToKubernetesAssurancePolicyMapOutput() KubernetesAssurancePolicyMapOutput {
	return i.ToKubernetesAssurancePolicyMapOutputWithContext(context.Background())
}

func (i KubernetesAssurancePolicyMap) ToKubernetesAssurancePolicyMapOutputWithContext(ctx context.Context) KubernetesAssurancePolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesAssurancePolicyMapOutput)
}

type KubernetesAssurancePolicyOutput struct{ *pulumi.OutputState }

func (KubernetesAssurancePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KubernetesAssurancePolicy)(nil)).Elem()
}

func (o KubernetesAssurancePolicyOutput) ToKubernetesAssurancePolicyOutput() KubernetesAssurancePolicyOutput {
	return o
}

func (o KubernetesAssurancePolicyOutput) ToKubernetesAssurancePolicyOutputWithContext(ctx context.Context) KubernetesAssurancePolicyOutput {
	return o
}

// Aggregated vulnerability information.
func (o KubernetesAssurancePolicyOutput) AggregatedVulnerability() pulumi.StringMapOutput {
	return o.ApplyT(func(v *KubernetesAssurancePolicy) pulumi.StringMapOutput { return v.AggregatedVulnerability }).(pulumi.StringMapOutput)
}

// List of explicitly allowed images.
func (o KubernetesAssurancePolicyOutput) AllowedImages() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *KubernetesAssurancePolicy) pulumi.StringArrayOutput { return v.AllowedImages }).(pulumi.StringArrayOutput)
}

func (o KubernetesAssurancePolicyOutput) ApplicationScopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *KubernetesAssurancePolicy) pulumi.StringArrayOutput { return v.ApplicationScopes }).(pulumi.StringArrayOutput)
}

// What type of assurance policy is described.
func (o KubernetesAssurancePolicyOutput) AssuranceType() pulumi.StringOutput {
	return o.ApplyT(func(v *KubernetesAssurancePolicy) pulumi.StringOutput { return v.AssuranceType }).(pulumi.StringOutput)
}

// Indicates if auditing for failures.
func (o KubernetesAssurancePolicyOutput) AuditOnFailure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KubernetesAssurancePolicy) pulumi.BoolPtrOutput { return v.AuditOnFailure }).(pulumi.BoolPtrOutput)
}

// Name of user account that created the policy.
func (o KubernetesAssurancePolicyOutput) Author() pulumi.StringOutput {
	return o.ApplyT(func(v *KubernetesAssurancePolicy) pulumi.StringOutput { return v.Author }).(pulumi.StringOutput)
}

func (o KubernetesAssurancePolicyOutput) AutoScanConfigured() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KubernetesAssurancePolicy) pulumi.BoolPtrOutput { return v.AutoScanConfigured }).(pulumi.BoolPtrOutput)
}

func (o KubernetesAssurancePolicyOutput) AutoScanEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KubernetesAssurancePolicy) pulumi.BoolPtrOutput { return v.AutoScanEnabled }).(pulumi.BoolPtrOutput)
}

func (o KubernetesAssurancePolicyOutput) AutoScanTimes() KubernetesAssurancePolicyAutoScanTimeArrayOutput {
	return o.ApplyT(func(v *KubernetesAssurancePolicy) KubernetesAssurancePolicyAutoScanTimeArrayOutput {
		return v.AutoScanTimes
	}).(KubernetesAssurancePolicyAutoScanTimeArrayOutput)
}

// List of function's forbidden permissions.
func (o KubernetesAssurancePolicyOutput) BlacklistPermissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *KubernetesAssurancePolicy) pulumi.StringArrayOutput { return v.BlacklistPermissions }).(pulumi.StringArrayOutput)
}

// Indicates if blacklist permissions is relevant.
func (o KubernetesAssurancePolicyOutput) BlacklistPermissionsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KubernetesAssurancePolicy) pulumi.BoolPtrOutput { return v.BlacklistPermissionsEnabled }).(pulumi.BoolPtrOutput)
}

// List of blacklisted licenses.
func (o KubernetesAssurancePolicyOutput) BlacklistedLicenses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *KubernetesAssurancePolicy) pulumi.StringArrayOutput { return v.BlacklistedLicenses }).(pulumi.StringArrayOutput)
}

// Indicates if license blacklist is relevant.
func (o KubernetesAssurancePolicyOutput) BlacklistedLicensesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KubernetesAssurancePolicy) pulumi.BoolPtrOutput { return v.BlacklistedLicensesEnabled }).(pulumi.BoolPtrOutput)
}

// Indicates if failed images are blocked.
func (o KubernetesAssurancePolicyOutput) BlockFailed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KubernetesAssurancePolicy) pulumi.BoolPtrOutput { return v.BlockFailed }).(pulumi.BoolPtrOutput)
}

func (o KubernetesAssurancePolicyOutput) ControlExcludeNoFix() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KubernetesAssurancePolicy) pulumi.BoolPtrOutput { return v.ControlExcludeNoFix }).(pulumi.BoolPtrOutput)
}

// List of Custom user scripts for checks.
func (o KubernetesAssurancePolicyOutput) CustomChecks() KubernetesAssurancePolicyCustomCheckArrayOutput {
	return o.ApplyT(func(v *KubernetesAssurancePolicy) KubernetesAssurancePolicyCustomCheckArrayOutput {
		return v.CustomChecks
	}).(KubernetesAssurancePolicyCustomCheckArrayOutput)
}

// Indicates if scanning should include custom checks.
func (o KubernetesAssurancePolicyOutput) CustomChecksEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KubernetesAssurancePolicy) pulumi.BoolPtrOutput { return v.CustomChecksEnabled }).(pulumi.BoolPtrOutput)
}

func (o KubernetesAssurancePolicyOutput) CustomSeverity() pulumi.StringOutput {
	return o.ApplyT(func(v *KubernetesAssurancePolicy) pulumi.StringOutput { return v.CustomSeverity }).(pulumi.StringOutput)
}

func (o KubernetesAssurancePolicyOutput) CustomSeverityEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KubernetesAssurancePolicy) pulumi.BoolPtrOutput { return v.CustomSeverityEnabled }).(pulumi.BoolPtrOutput)
}

// Indicates if CVEs blacklist is relevant.
func (o KubernetesAssurancePolicyOutput) CvesBlackListEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KubernetesAssurancePolicy) pulumi.BoolPtrOutput { return v.CvesBlackListEnabled }).(pulumi.BoolPtrOutput)
}

// List of CVEs blacklisted items.
func (o KubernetesAssurancePolicyOutput) CvesBlackLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *KubernetesAssurancePolicy) pulumi.StringArrayOutput { return v.CvesBlackLists }).(pulumi.StringArrayOutput)
}

// Indicates if CVEs whitelist is relevant.
func (o KubernetesAssurancePolicyOutput) CvesWhiteListEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KubernetesAssurancePolicy) pulumi.BoolPtrOutput { return v.CvesWhiteListEnabled }).(pulumi.BoolPtrOutput)
}

// List of cves whitelisted licenses
func (o KubernetesAssurancePolicyOutput) CvesWhiteLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *KubernetesAssurancePolicy) pulumi.StringArrayOutput { return v.CvesWhiteLists }).(pulumi.StringArrayOutput)
}

// Identifier of the cvss severity.
func (o KubernetesAssurancePolicyOutput) CvssSeverity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesAssurancePolicy) pulumi.StringPtrOutput { return v.CvssSeverity }).(pulumi.StringPtrOutput)
}

// Indicates if the cvss severity is scanned.
func (o KubernetesAssurancePolicyOutput) CvssSeverityEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KubernetesAssurancePolicy) pulumi.BoolPtrOutput { return v.CvssSeverityEnabled }).(pulumi.BoolPtrOutput)
}

// Indicates that policy should ignore cvss cases that do not have a known fix.
func (o KubernetesAssurancePolicyOutput) CvssSeverityExcludeNoFix() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KubernetesAssurancePolicy) pulumi.BoolPtrOutput { return v.CvssSeverityExcludeNoFix }).(pulumi.BoolPtrOutput)
}

func (o KubernetesAssurancePolicyOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesAssurancePolicy) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o KubernetesAssurancePolicyOutput) DisallowExploitTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *KubernetesAssurancePolicy) pulumi.StringArrayOutput { return v.DisallowExploitTypes }).(pulumi.StringArrayOutput)
}

// Indicates if malware should block the image.
func (o KubernetesAssurancePolicyOutput) DisallowMalware() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KubernetesAssurancePolicy) pulumi.BoolPtrOutput { return v.DisallowMalware }).(pulumi.BoolPtrOutput)
}

// Checks the host according to the Docker CIS benchmark, if Docker is found on the host.
func (o KubernetesAssurancePolicyOutput) DockerCisEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KubernetesAssurancePolicy) pulumi.BoolPtrOutput { return v.DockerCisEnabled }).(pulumi.BoolPtrOutput)
}

// Name of the container image.
func (o KubernetesAssurancePolicyOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesAssurancePolicy) pulumi.StringPtrOutput { return v.Domain }).(pulumi.StringPtrOutput)
}

func (o KubernetesAssurancePolicyOutput) DomainName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesAssurancePolicy) pulumi.StringPtrOutput { return v.DomainName }).(pulumi.StringPtrOutput)
}

func (o KubernetesAssurancePolicyOutput) DtaEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KubernetesAssurancePolicy) pulumi.BoolPtrOutput { return v.DtaEnabled }).(pulumi.BoolPtrOutput)
}

func (o KubernetesAssurancePolicyOutput) DtaSeverity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesAssurancePolicy) pulumi.StringPtrOutput { return v.DtaSeverity }).(pulumi.StringPtrOutput)
}

func (o KubernetesAssurancePolicyOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KubernetesAssurancePolicy) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o KubernetesAssurancePolicyOutput) Enforce() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KubernetesAssurancePolicy) pulumi.BoolPtrOutput { return v.Enforce }).(pulumi.BoolPtrOutput)
}

func (o KubernetesAssurancePolicyOutput) EnforceAfterDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KubernetesAssurancePolicy) pulumi.IntPtrOutput { return v.EnforceAfterDays }).(pulumi.IntPtrOutput)
}

func (o KubernetesAssurancePolicyOutput) EnforceExcessivePermissions() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KubernetesAssurancePolicy) pulumi.BoolPtrOutput { return v.EnforceExcessivePermissions }).(pulumi.BoolPtrOutput)
}

func (o KubernetesAssurancePolicyOutput) ExceptionalMonitoredMalwarePaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *KubernetesAssurancePolicy) pulumi.StringArrayOutput { return v.ExceptionalMonitoredMalwarePaths }).(pulumi.StringArrayOutput)
}

func (o KubernetesAssurancePolicyOutput) ExcludeApplicationScopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *KubernetesAssurancePolicy) pulumi.StringArrayOutput { return v.ExcludeApplicationScopes }).(pulumi.StringArrayOutput)
}

// Indicates if cicd failures will fail the image.
func (o KubernetesAssurancePolicyOutput) FailCicd() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KubernetesAssurancePolicy) pulumi.BoolPtrOutput { return v.FailCicd }).(pulumi.BoolPtrOutput)
}

func (o KubernetesAssurancePolicyOutput) ForbiddenLabels() KubernetesAssurancePolicyForbiddenLabelArrayOutput {
	return o.ApplyT(func(v *KubernetesAssurancePolicy) KubernetesAssurancePolicyForbiddenLabelArrayOutput {
		return v.ForbiddenLabels
	}).(KubernetesAssurancePolicyForbiddenLabelArrayOutput)
}

func (o KubernetesAssurancePolicyOutput) ForbiddenLabelsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KubernetesAssurancePolicy) pulumi.BoolPtrOutput { return v.ForbiddenLabelsEnabled }).(pulumi.BoolPtrOutput)
}

func (o KubernetesAssurancePolicyOutput) ForceMicroenforcer() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KubernetesAssurancePolicy) pulumi.BoolPtrOutput { return v.ForceMicroenforcer }).(pulumi.BoolPtrOutput)
}

func (o KubernetesAssurancePolicyOutput) FunctionIntegrityEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KubernetesAssurancePolicy) pulumi.BoolPtrOutput { return v.FunctionIntegrityEnabled }).(pulumi.BoolPtrOutput)
}

func (o KubernetesAssurancePolicyOutput) IgnoreBaseImageVln() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KubernetesAssurancePolicy) pulumi.BoolPtrOutput { return v.IgnoreBaseImageVln }).(pulumi.BoolPtrOutput)
}

func (o KubernetesAssurancePolicyOutput) IgnoreRecentlyPublishedVln() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KubernetesAssurancePolicy) pulumi.BoolPtrOutput { return v.IgnoreRecentlyPublishedVln }).(pulumi.BoolPtrOutput)
}

func (o KubernetesAssurancePolicyOutput) IgnoreRecentlyPublishedVlnPeriod() pulumi.IntOutput {
	return o.ApplyT(func(v *KubernetesAssurancePolicy) pulumi.IntOutput { return v.IgnoreRecentlyPublishedVlnPeriod }).(pulumi.IntOutput)
}

// Indicates if risk resources are ignored.
func (o KubernetesAssurancePolicyOutput) IgnoreRiskResourcesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KubernetesAssurancePolicy) pulumi.BoolPtrOutput { return v.IgnoreRiskResourcesEnabled }).(pulumi.BoolPtrOutput)
}

// List of ignored risk resources.
func (o KubernetesAssurancePolicyOutput) IgnoredRiskResources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *KubernetesAssurancePolicy) pulumi.StringArrayOutput { return v.IgnoredRiskResources }).(pulumi.StringArrayOutput)
}

func (o KubernetesAssurancePolicyOutput) IgnoredSensitiveResources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *KubernetesAssurancePolicy) pulumi.StringArrayOutput { return v.IgnoredSensitiveResources }).(pulumi.StringArrayOutput)
}

// List of images.
func (o KubernetesAssurancePolicyOutput) Images() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *KubernetesAssurancePolicy) pulumi.StringArrayOutput { return v.Images }).(pulumi.StringArrayOutput)
}

// Performs a Kubernetes CIS benchmark check for the host.
func (o KubernetesAssurancePolicyOutput) KubeCisEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KubernetesAssurancePolicy) pulumi.BoolPtrOutput { return v.KubeCisEnabled }).(pulumi.BoolPtrOutput)
}

// List of Kubernetes controls.
func (o KubernetesAssurancePolicyOutput) KubernetesControls() KubernetesAssurancePolicyKubernetesControlArrayOutput {
	return o.ApplyT(func(v *KubernetesAssurancePolicy) KubernetesAssurancePolicyKubernetesControlArrayOutput {
		return v.KubernetesControls
	}).(KubernetesAssurancePolicyKubernetesControlArrayOutput)
}

func (o KubernetesAssurancePolicyOutput) KubernetesControlsAvdIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *KubernetesAssurancePolicy) pulumi.StringArrayOutput { return v.KubernetesControlsAvdIds }).(pulumi.StringArrayOutput)
}

// List of kubernetes control names and available kubernetes controls are: 'Access to host IPC namespace', 'Access to host PID', 'Access to host network', 'Access to host ports', 'All container images must start with a GCR domain', 'All container images must start with an ECR domain', 'All container images must start with the *.azurecr.io domain', 'CPU not limited', 'CPU requests not specified', 'Can elevate its own privileges', 'ConfigMap with secrets', 'ConfigMap with sensitive content', 'Container images from public registries used', 'Default capabilitiessome containers do not drop all', 'Default capabilitiessome containers do not drop any', 'Delete pod logs', 'Exec into Pods', 'Image tag :latest used', 'Manage EKS IAM Auth ConfigMap', 'Manage Kubernetes RBAC resources', 'Manage Kubernetes networking', 'Manage Kubernetes workloads and pods', 'Manage all resources', 'Manage all resources at the namespace', 'Manage configmaps', 'Manage namespace secrets', 'Manage secrets', 'Manage webhookconfigurations', 'Manages /etc/hosts', 'Memory not limited', 'Memory requests not specified', 'Non-core volume types used.', 'Non-default /proc masks set', 'Privileged', 'Root file system is not read-only', 'Runs as root user', 'Runs with GID <= 10000', 'Runs with UID <= 10000', 'Runs with a root primary or supplementary GID', 'Runtime/Default AppArmor profile not set', 'Runtime/Default Seccomp profile not set', 'SELinux custom options set', 'SYS_ADMIN capability added', 'Seccomp policies disabled', 'Service with External IP', 'Specific capabilities added', 'Unsafe sysctl options set', 'User with admin access', 'Workloads in the default namespace', 'hostPath volume mounted with docker.sock', 'hostPath volumes mounted'
func (o KubernetesAssurancePolicyOutput) KubernetesControlsNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *KubernetesAssurancePolicy) pulumi.StringArrayOutput { return v.KubernetesControlsNames }).(pulumi.StringArrayOutput)
}

// List of labels.
func (o KubernetesAssurancePolicyOutput) Labels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *KubernetesAssurancePolicy) pulumi.StringArrayOutput { return v.Labels }).(pulumi.StringArrayOutput)
}

func (o KubernetesAssurancePolicyOutput) Lastupdate() pulumi.StringOutput {
	return o.ApplyT(func(v *KubernetesAssurancePolicy) pulumi.StringOutput { return v.Lastupdate }).(pulumi.StringOutput)
}

func (o KubernetesAssurancePolicyOutput) LinuxCisEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KubernetesAssurancePolicy) pulumi.BoolPtrOutput { return v.LinuxCisEnabled }).(pulumi.BoolPtrOutput)
}

func (o KubernetesAssurancePolicyOutput) MalwareAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesAssurancePolicy) pulumi.StringPtrOutput { return v.MalwareAction }).(pulumi.StringPtrOutput)
}

// Value of allowed maximum score.
func (o KubernetesAssurancePolicyOutput) MaximumScore() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *KubernetesAssurancePolicy) pulumi.Float64PtrOutput { return v.MaximumScore }).(pulumi.Float64PtrOutput)
}

// Indicates if exceeding the maximum score is scanned.
func (o KubernetesAssurancePolicyOutput) MaximumScoreEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KubernetesAssurancePolicy) pulumi.BoolPtrOutput { return v.MaximumScoreEnabled }).(pulumi.BoolPtrOutput)
}

// Indicates that policy should ignore cases that do not have a known fix.
func (o KubernetesAssurancePolicyOutput) MaximumScoreExcludeNoFix() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KubernetesAssurancePolicy) pulumi.BoolPtrOutput { return v.MaximumScoreExcludeNoFix }).(pulumi.BoolPtrOutput)
}

func (o KubernetesAssurancePolicyOutput) MonitoredMalwarePaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *KubernetesAssurancePolicy) pulumi.StringArrayOutput { return v.MonitoredMalwarePaths }).(pulumi.StringArrayOutput)
}

func (o KubernetesAssurancePolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *KubernetesAssurancePolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Indicates if raise a warning for images that should only be run as root.
func (o KubernetesAssurancePolicyOutput) OnlyNoneRootUsers() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KubernetesAssurancePolicy) pulumi.BoolPtrOutput { return v.OnlyNoneRootUsers }).(pulumi.BoolPtrOutput)
}

func (o KubernetesAssurancePolicyOutput) OpenshiftHardeningEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KubernetesAssurancePolicy) pulumi.BoolPtrOutput { return v.OpenshiftHardeningEnabled }).(pulumi.BoolPtrOutput)
}

// Indicates if packages blacklist is relevant.
func (o KubernetesAssurancePolicyOutput) PackagesBlackListEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KubernetesAssurancePolicy) pulumi.BoolPtrOutput { return v.PackagesBlackListEnabled }).(pulumi.BoolPtrOutput)
}

// List of blacklisted images.
func (o KubernetesAssurancePolicyOutput) PackagesBlackLists() KubernetesAssurancePolicyPackagesBlackListArrayOutput {
	return o.ApplyT(func(v *KubernetesAssurancePolicy) KubernetesAssurancePolicyPackagesBlackListArrayOutput {
		return v.PackagesBlackLists
	}).(KubernetesAssurancePolicyPackagesBlackListArrayOutput)
}

// Indicates if packages whitelist is relevant.
func (o KubernetesAssurancePolicyOutput) PackagesWhiteListEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KubernetesAssurancePolicy) pulumi.BoolPtrOutput { return v.PackagesWhiteListEnabled }).(pulumi.BoolPtrOutput)
}

// List of whitelisted images.
func (o KubernetesAssurancePolicyOutput) PackagesWhiteLists() KubernetesAssurancePolicyPackagesWhiteListArrayOutput {
	return o.ApplyT(func(v *KubernetesAssurancePolicy) KubernetesAssurancePolicyPackagesWhiteListArrayOutput {
		return v.PackagesWhiteLists
	}).(KubernetesAssurancePolicyPackagesWhiteListArrayOutput)
}

func (o KubernetesAssurancePolicyOutput) PartialResultsImageFail() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KubernetesAssurancePolicy) pulumi.BoolPtrOutput { return v.PartialResultsImageFail }).(pulumi.BoolPtrOutput)
}

func (o KubernetesAssurancePolicyOutput) Permission() pulumi.StringOutput {
	return o.ApplyT(func(v *KubernetesAssurancePolicy) pulumi.StringOutput { return v.Permission }).(pulumi.StringOutput)
}

func (o KubernetesAssurancePolicyOutput) PolicySettings() KubernetesAssurancePolicyPolicySettingsOutput {
	return o.ApplyT(func(v *KubernetesAssurancePolicy) KubernetesAssurancePolicyPolicySettingsOutput {
		return v.PolicySettings
	}).(KubernetesAssurancePolicyPolicySettingsOutput)
}

func (o KubernetesAssurancePolicyOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KubernetesAssurancePolicy) pulumi.BoolPtrOutput { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// List of registries.
func (o KubernetesAssurancePolicyOutput) Registries() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *KubernetesAssurancePolicy) pulumi.StringArrayOutput { return v.Registries }).(pulumi.StringArrayOutput)
}

func (o KubernetesAssurancePolicyOutput) Registry() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesAssurancePolicy) pulumi.StringPtrOutput { return v.Registry }).(pulumi.StringPtrOutput)
}

func (o KubernetesAssurancePolicyOutput) RequiredLabels() KubernetesAssurancePolicyRequiredLabelArrayOutput {
	return o.ApplyT(func(v *KubernetesAssurancePolicy) KubernetesAssurancePolicyRequiredLabelArrayOutput {
		return v.RequiredLabels
	}).(KubernetesAssurancePolicyRequiredLabelArrayOutput)
}

func (o KubernetesAssurancePolicyOutput) RequiredLabelsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KubernetesAssurancePolicy) pulumi.BoolPtrOutput { return v.RequiredLabelsEnabled }).(pulumi.BoolPtrOutput)
}

func (o KubernetesAssurancePolicyOutput) ScanMalwareInArchives() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KubernetesAssurancePolicy) pulumi.BoolPtrOutput { return v.ScanMalwareInArchives }).(pulumi.BoolPtrOutput)
}

func (o KubernetesAssurancePolicyOutput) ScanNfsMounts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KubernetesAssurancePolicy) pulumi.BoolPtrOutput { return v.ScanNfsMounts }).(pulumi.BoolPtrOutput)
}

func (o KubernetesAssurancePolicyOutput) ScanProcessMemory() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KubernetesAssurancePolicy) pulumi.BoolPtrOutput { return v.ScanProcessMemory }).(pulumi.BoolPtrOutput)
}

// Indicates if scan should include sensitive data in the image.
func (o KubernetesAssurancePolicyOutput) ScanSensitiveData() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KubernetesAssurancePolicy) pulumi.BoolPtrOutput { return v.ScanSensitiveData }).(pulumi.BoolPtrOutput)
}

func (o KubernetesAssurancePolicyOutput) ScanWindowsRegistry() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KubernetesAssurancePolicy) pulumi.BoolPtrOutput { return v.ScanWindowsRegistry }).(pulumi.BoolPtrOutput)
}

// Indicates if scanning should include scap.
func (o KubernetesAssurancePolicyOutput) ScapEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KubernetesAssurancePolicy) pulumi.BoolPtrOutput { return v.ScapEnabled }).(pulumi.BoolPtrOutput)
}

// List of SCAP user scripts for checks.
func (o KubernetesAssurancePolicyOutput) ScapFiles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *KubernetesAssurancePolicy) pulumi.StringArrayOutput { return v.ScapFiles }).(pulumi.StringArrayOutput)
}

func (o KubernetesAssurancePolicyOutput) Scopes() KubernetesAssurancePolicyScopeArrayOutput {
	return o.ApplyT(func(v *KubernetesAssurancePolicy) KubernetesAssurancePolicyScopeArrayOutput { return v.Scopes }).(KubernetesAssurancePolicyScopeArrayOutput)
}

// List of trusted images.
func (o KubernetesAssurancePolicyOutput) TrustedBaseImages() KubernetesAssurancePolicyTrustedBaseImageArrayOutput {
	return o.ApplyT(func(v *KubernetesAssurancePolicy) KubernetesAssurancePolicyTrustedBaseImageArrayOutput {
		return v.TrustedBaseImages
	}).(KubernetesAssurancePolicyTrustedBaseImageArrayOutput)
}

// Indicates if list of trusted base images is relevant.
func (o KubernetesAssurancePolicyOutput) TrustedBaseImagesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KubernetesAssurancePolicy) pulumi.BoolPtrOutput { return v.TrustedBaseImagesEnabled }).(pulumi.BoolPtrOutput)
}

func (o KubernetesAssurancePolicyOutput) VulnerabilityExploitability() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KubernetesAssurancePolicy) pulumi.BoolPtrOutput { return v.VulnerabilityExploitability }).(pulumi.BoolPtrOutput)
}

func (o KubernetesAssurancePolicyOutput) VulnerabilityScoreRanges() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *KubernetesAssurancePolicy) pulumi.IntArrayOutput { return v.VulnerabilityScoreRanges }).(pulumi.IntArrayOutput)
}

// List of whitelisted licenses.
func (o KubernetesAssurancePolicyOutput) WhitelistedLicenses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *KubernetesAssurancePolicy) pulumi.StringArrayOutput { return v.WhitelistedLicenses }).(pulumi.StringArrayOutput)
}

// Indicates if license blacklist is relevant.
func (o KubernetesAssurancePolicyOutput) WhitelistedLicensesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KubernetesAssurancePolicy) pulumi.BoolPtrOutput { return v.WhitelistedLicensesEnabled }).(pulumi.BoolPtrOutput)
}

type KubernetesAssurancePolicyArrayOutput struct{ *pulumi.OutputState }

func (KubernetesAssurancePolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KubernetesAssurancePolicy)(nil)).Elem()
}

func (o KubernetesAssurancePolicyArrayOutput) ToKubernetesAssurancePolicyArrayOutput() KubernetesAssurancePolicyArrayOutput {
	return o
}

func (o KubernetesAssurancePolicyArrayOutput) ToKubernetesAssurancePolicyArrayOutputWithContext(ctx context.Context) KubernetesAssurancePolicyArrayOutput {
	return o
}

func (o KubernetesAssurancePolicyArrayOutput) Index(i pulumi.IntInput) KubernetesAssurancePolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KubernetesAssurancePolicy {
		return vs[0].([]*KubernetesAssurancePolicy)[vs[1].(int)]
	}).(KubernetesAssurancePolicyOutput)
}

type KubernetesAssurancePolicyMapOutput struct{ *pulumi.OutputState }

func (KubernetesAssurancePolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KubernetesAssurancePolicy)(nil)).Elem()
}

func (o KubernetesAssurancePolicyMapOutput) ToKubernetesAssurancePolicyMapOutput() KubernetesAssurancePolicyMapOutput {
	return o
}

func (o KubernetesAssurancePolicyMapOutput) ToKubernetesAssurancePolicyMapOutputWithContext(ctx context.Context) KubernetesAssurancePolicyMapOutput {
	return o
}

func (o KubernetesAssurancePolicyMapOutput) MapIndex(k pulumi.StringInput) KubernetesAssurancePolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KubernetesAssurancePolicy {
		return vs[0].(map[string]*KubernetesAssurancePolicy)[vs[1].(string)]
	}).(KubernetesAssurancePolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KubernetesAssurancePolicyInput)(nil)).Elem(), &KubernetesAssurancePolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*KubernetesAssurancePolicyArrayInput)(nil)).Elem(), KubernetesAssurancePolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KubernetesAssurancePolicyMapInput)(nil)).Elem(), KubernetesAssurancePolicyMap{})
	pulumi.RegisterOutputType(KubernetesAssurancePolicyOutput{})
	pulumi.RegisterOutputType(KubernetesAssurancePolicyArrayOutput{})
	pulumi.RegisterOutputType(KubernetesAssurancePolicyMapOutput{})
}
