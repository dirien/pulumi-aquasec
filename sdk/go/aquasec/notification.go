// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aquasec

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-aquasec/sdk/go/aquasec/internal"
)

// Provides a Aquasec Notification resource. This can be used to create and manage Aquasec Notification resources.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-aquasec/sdk/go/aquasec"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := aquasec.NewNotification(ctx, "teams", &aquasec.NotificationArgs{
//				Properties: pulumi.StringMap{
//					"url": pulumi.String("<TEAMS-URL>"),
//				},
//				Type: pulumi.String("teams"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = aquasec.NewNotification(ctx, "slack", &aquasec.NotificationArgs{
//				Properties: pulumi.StringMap{
//					"url": pulumi.String("<SLACK-URL>"),
//				},
//				Type: pulumi.String("slack"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = aquasec.NewNotification(ctx, "webhook", &aquasec.NotificationArgs{
//				Properties: pulumi.StringMap{
//					"url": pulumi.String("<WEBHOOK-URL>"),
//				},
//				Type: pulumi.String("webhook"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = aquasec.NewNotification(ctx, "servicenow", &aquasec.NotificationArgs{
//				Properties: pulumi.StringMap{
//					"board_name":    pulumi.String(""),
//					"instance_name": pulumi.String(""),
//					"password":      pulumi.String("<PASSWORD>"),
//					"url":           pulumi.String("<SERVICENOW-URL>"),
//					"user":          pulumi.String("<USERNAME>"),
//				},
//				Type: pulumi.String("serviceNow"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = aquasec.NewNotification(ctx, "jiraWithToken", &aquasec.NotificationArgs{
//				Properties: pulumi.StringMap{
//					"definition_of_done": pulumi.String("Done"),
//					"project_key":        pulumi.String("<JIRA_PROJECT_KEY>"),
//					"summary":            pulumi.String("SOME_TEXT"),
//					"token":              pulumi.String("<JIRA-TOKEN>"),
//					"url":                pulumi.String("<JIRA-URL>"),
//				},
//				Type: pulumi.String("jira"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = aquasec.NewNotification(ctx, "jiraWithCreds", &aquasec.NotificationArgs{
//				Properties: pulumi.StringMap{
//					"password":    pulumi.String("<JIRA_PASSWORD>"),
//					"project_key": pulumi.String("<JIRA_PROJECT_KEY>"),
//					"summary":     pulumi.String("SOME_TEXT"),
//					"url":         pulumi.String("<JIRA-URL>"),
//					"user":        pulumi.String("<JIRA_USERNAME>"),
//				},
//				Type: pulumi.String("jira"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = aquasec.NewNotification(ctx, "emailWithCreds", &aquasec.NotificationArgs{
//				Properties: pulumi.StringMap{
//					"host":       pulumi.String("<EMAIL_HOST>"),
//					"password":   pulumi.String("<EMAIL_PASSWORD>"),
//					"port":       pulumi.String("<EMAIL_PORT>"),
//					"recipients": pulumi.String("<RECIPIENTS>"),
//					"sender":     pulumi.String("<SENDER_EMAIL_ADDRESS>"),
//					"user":       pulumi.String("<EMAIL_USERNAME>"),
//				},
//				Type: pulumi.String("email"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = aquasec.NewNotification(ctx, "emailWithMx", &aquasec.NotificationArgs{
//				Properties: pulumi.StringMap{
//					"port":       pulumi.String("<EMAIL_PORT>"),
//					"recipients": pulumi.String("<RECIPIENTS>"),
//					"sender":     pulumi.String("<SENDER_EMAIL_ADDRESS>"),
//					"use_mx":     pulumi.String("true"),
//				},
//				Type: pulumi.String("email"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Notification struct {
	pulumi.CustomResourceState

	// The user that created the notification
	Author pulumi.StringOutput `pulumi:"author"`
	// Notification last update time
	LastUpdated pulumi.StringOutput `pulumi:"lastUpdated"`
	// Notification name
	Name pulumi.StringOutput `pulumi:"name"`
	// Notification properties, please check the examples for setting it
	Properties pulumi.StringMapOutput `pulumi:"properties"`
	// Notification Template
	Template pulumi.StringMapOutput `pulumi:"template"`
	// Notifications types, allowed values: slack\ jira\ email\ teams\ webhook\ splunk\ serviceNow
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewNotification registers a new resource with the given unique name, arguments, and options.
func NewNotification(ctx *pulumi.Context,
	name string, args *NotificationArgs, opts ...pulumi.ResourceOption) (*Notification, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Properties == nil {
		return nil, errors.New("invalid value for required argument 'Properties'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Notification
	err := ctx.RegisterResource("aquasec:index/notification:Notification", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNotification gets an existing Notification resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNotification(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NotificationState, opts ...pulumi.ResourceOption) (*Notification, error) {
	var resource Notification
	err := ctx.ReadResource("aquasec:index/notification:Notification", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Notification resources.
type notificationState struct {
	// The user that created the notification
	Author *string `pulumi:"author"`
	// Notification last update time
	LastUpdated *string `pulumi:"lastUpdated"`
	// Notification name
	Name *string `pulumi:"name"`
	// Notification properties, please check the examples for setting it
	Properties map[string]string `pulumi:"properties"`
	// Notification Template
	Template map[string]string `pulumi:"template"`
	// Notifications types, allowed values: slack\ jira\ email\ teams\ webhook\ splunk\ serviceNow
	Type *string `pulumi:"type"`
}

type NotificationState struct {
	// The user that created the notification
	Author pulumi.StringPtrInput
	// Notification last update time
	LastUpdated pulumi.StringPtrInput
	// Notification name
	Name pulumi.StringPtrInput
	// Notification properties, please check the examples for setting it
	Properties pulumi.StringMapInput
	// Notification Template
	Template pulumi.StringMapInput
	// Notifications types, allowed values: slack\ jira\ email\ teams\ webhook\ splunk\ serviceNow
	Type pulumi.StringPtrInput
}

func (NotificationState) ElementType() reflect.Type {
	return reflect.TypeOf((*notificationState)(nil)).Elem()
}

type notificationArgs struct {
	// Notification name
	Name *string `pulumi:"name"`
	// Notification properties, please check the examples for setting it
	Properties map[string]string `pulumi:"properties"`
	// Notifications types, allowed values: slack\ jira\ email\ teams\ webhook\ splunk\ serviceNow
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a Notification resource.
type NotificationArgs struct {
	// Notification name
	Name pulumi.StringPtrInput
	// Notification properties, please check the examples for setting it
	Properties pulumi.StringMapInput
	// Notifications types, allowed values: slack\ jira\ email\ teams\ webhook\ splunk\ serviceNow
	Type pulumi.StringInput
}

func (NotificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*notificationArgs)(nil)).Elem()
}

type NotificationInput interface {
	pulumi.Input

	ToNotificationOutput() NotificationOutput
	ToNotificationOutputWithContext(ctx context.Context) NotificationOutput
}

func (*Notification) ElementType() reflect.Type {
	return reflect.TypeOf((**Notification)(nil)).Elem()
}

func (i *Notification) ToNotificationOutput() NotificationOutput {
	return i.ToNotificationOutputWithContext(context.Background())
}

func (i *Notification) ToNotificationOutputWithContext(ctx context.Context) NotificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationOutput)
}

// NotificationArrayInput is an input type that accepts NotificationArray and NotificationArrayOutput values.
// You can construct a concrete instance of `NotificationArrayInput` via:
//
//	NotificationArray{ NotificationArgs{...} }
type NotificationArrayInput interface {
	pulumi.Input

	ToNotificationArrayOutput() NotificationArrayOutput
	ToNotificationArrayOutputWithContext(context.Context) NotificationArrayOutput
}

type NotificationArray []NotificationInput

func (NotificationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Notification)(nil)).Elem()
}

func (i NotificationArray) ToNotificationArrayOutput() NotificationArrayOutput {
	return i.ToNotificationArrayOutputWithContext(context.Background())
}

func (i NotificationArray) ToNotificationArrayOutputWithContext(ctx context.Context) NotificationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationArrayOutput)
}

// NotificationMapInput is an input type that accepts NotificationMap and NotificationMapOutput values.
// You can construct a concrete instance of `NotificationMapInput` via:
//
//	NotificationMap{ "key": NotificationArgs{...} }
type NotificationMapInput interface {
	pulumi.Input

	ToNotificationMapOutput() NotificationMapOutput
	ToNotificationMapOutputWithContext(context.Context) NotificationMapOutput
}

type NotificationMap map[string]NotificationInput

func (NotificationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Notification)(nil)).Elem()
}

func (i NotificationMap) ToNotificationMapOutput() NotificationMapOutput {
	return i.ToNotificationMapOutputWithContext(context.Background())
}

func (i NotificationMap) ToNotificationMapOutputWithContext(ctx context.Context) NotificationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationMapOutput)
}

type NotificationOutput struct{ *pulumi.OutputState }

func (NotificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Notification)(nil)).Elem()
}

func (o NotificationOutput) ToNotificationOutput() NotificationOutput {
	return o
}

func (o NotificationOutput) ToNotificationOutputWithContext(ctx context.Context) NotificationOutput {
	return o
}

// The user that created the notification
func (o NotificationOutput) Author() pulumi.StringOutput {
	return o.ApplyT(func(v *Notification) pulumi.StringOutput { return v.Author }).(pulumi.StringOutput)
}

// Notification last update time
func (o NotificationOutput) LastUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v *Notification) pulumi.StringOutput { return v.LastUpdated }).(pulumi.StringOutput)
}

// Notification name
func (o NotificationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Notification) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Notification properties, please check the examples for setting it
func (o NotificationOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Notification) pulumi.StringMapOutput { return v.Properties }).(pulumi.StringMapOutput)
}

// Notification Template
func (o NotificationOutput) Template() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Notification) pulumi.StringMapOutput { return v.Template }).(pulumi.StringMapOutput)
}

// Notifications types, allowed values: slack\ jira\ email\ teams\ webhook\ splunk\ serviceNow
func (o NotificationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Notification) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type NotificationArrayOutput struct{ *pulumi.OutputState }

func (NotificationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Notification)(nil)).Elem()
}

func (o NotificationArrayOutput) ToNotificationArrayOutput() NotificationArrayOutput {
	return o
}

func (o NotificationArrayOutput) ToNotificationArrayOutputWithContext(ctx context.Context) NotificationArrayOutput {
	return o
}

func (o NotificationArrayOutput) Index(i pulumi.IntInput) NotificationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Notification {
		return vs[0].([]*Notification)[vs[1].(int)]
	}).(NotificationOutput)
}

type NotificationMapOutput struct{ *pulumi.OutputState }

func (NotificationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Notification)(nil)).Elem()
}

func (o NotificationMapOutput) ToNotificationMapOutput() NotificationMapOutput {
	return o
}

func (o NotificationMapOutput) ToNotificationMapOutputWithContext(ctx context.Context) NotificationMapOutput {
	return o
}

func (o NotificationMapOutput) MapIndex(k pulumi.StringInput) NotificationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Notification {
		return vs[0].(map[string]*Notification)[vs[1].(string)]
	}).(NotificationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationInput)(nil)).Elem(), &Notification{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationArrayInput)(nil)).Elem(), NotificationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationMapInput)(nil)).Elem(), NotificationMap{})
	pulumi.RegisterOutputType(NotificationOutput{})
	pulumi.RegisterOutputType(NotificationArrayOutput{})
	pulumi.RegisterOutputType(NotificationMapOutput{})
}
