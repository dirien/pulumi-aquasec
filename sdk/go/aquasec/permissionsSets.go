// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aquasec

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `PermissionsSets` resource manages your Permission Set within Aqua.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aquasec/sdk/go/aquasec"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := aquasec.NewPermissionsSets(ctx, "myTerraformPermSet", &aquasec.PermissionsSetsArgs{
//				Actions: pulumi.StringArray{
//					pulumi.String("acl_policies.read"),
//					pulumi.String("acl_policies.write"),
//					pulumi.String("image_profiles.read"),
//					pulumi.String("image_profiles.write"),
//					pulumi.String("network_policies.read"),
//					pulumi.String("network_policies.write"),
//					pulumi.String("runtime_policies.read"),
//					pulumi.String("runtime_policies.write"),
//					pulumi.String("response_policies.read"),
//					pulumi.String("response_policies.write"),
//					pulumi.String("image_assurance.read"),
//					pulumi.String("image_assurance.write"),
//					pulumi.String("dashboard.read"),
//					pulumi.String("dashboard.write"),
//					pulumi.String("risk_explorer.read"),
//					pulumi.String("images.read"),
//					pulumi.String("images.write"),
//					pulumi.String("risks.host_images.read"),
//					pulumi.String("risks.host_images.write"),
//					pulumi.String("functions.read"),
//					pulumi.String("functions.write"),
//					pulumi.String("enforcers.read"),
//					pulumi.String("enforcers.write"),
//					pulumi.String("containers.read"),
//					pulumi.String("services.read"),
//					pulumi.String("services.write"),
//					pulumi.String("infrastructure.read"),
//					pulumi.String("infrastructure.write"),
//					pulumi.String("risks.vulnerabilities.read"),
//					pulumi.String("risks.vulnerabilities.write"),
//					pulumi.String("risks.benchmark.read"),
//					pulumi.String("risks.benchmark.write"),
//					pulumi.String("audits.read"),
//					pulumi.String("secrets.read"),
//					pulumi.String("secrets.write"),
//					pulumi.String("settings.read"),
//					pulumi.String("settings.write"),
//					pulumi.String("integrations.read"),
//					pulumi.String("integrations.write"),
//					pulumi.String("registries_integrations.read"),
//					pulumi.String("registries_integrations.write"),
//					pulumi.String("scan.read"),
//					pulumi.String("gateways.read"),
//					pulumi.String("gateways.write"),
//					pulumi.String("consoles.read"),
//					pulumi.String("web_hook.read"),
//					pulumi.String("incidents.read"),
//				},
//				Author:      pulumi.String("system"),
//				Description: pulumi.String("Test Permissions Sets created by Terraform"),
//				IsSuper:     pulumi.Bool(false),
//				UiAccess:    pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type PermissionsSets struct {
	pulumi.CustomResourceState

	// List of allowed actions for the Permission Set (not relevant if 'is_super' is true).
	Actions pulumi.StringArrayOutput `pulumi:"actions"`
	// The name of the user who created the Permission Set.
	Author pulumi.StringPtrOutput `pulumi:"author"`
	// Free text description for the Permission Set.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Give the Permission Set full access, meaning all actions are allowed without restriction.
	IsSuper pulumi.BoolPtrOutput `pulumi:"isSuper"`
	// The name of the Permission Set, comprised of alphanumeric characters and '-', '_', ' ', ':', '.', '@', '!', '^'.
	Name pulumi.StringOutput `pulumi:"name"`
	// Whether to allow UI access for users with this Permission Set.
	UiAccess pulumi.BoolOutput `pulumi:"uiAccess"`
	// The date of the last modification of the Role.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewPermissionsSets registers a new resource with the given unique name, arguments, and options.
func NewPermissionsSets(ctx *pulumi.Context,
	name string, args *PermissionsSetsArgs, opts ...pulumi.ResourceOption) (*PermissionsSets, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Actions == nil {
		return nil, errors.New("invalid value for required argument 'Actions'")
	}
	if args.UiAccess == nil {
		return nil, errors.New("invalid value for required argument 'UiAccess'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource PermissionsSets
	err := ctx.RegisterResource("aquasec:index/permissionsSets:PermissionsSets", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPermissionsSets gets an existing PermissionsSets resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPermissionsSets(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PermissionsSetsState, opts ...pulumi.ResourceOption) (*PermissionsSets, error) {
	var resource PermissionsSets
	err := ctx.ReadResource("aquasec:index/permissionsSets:PermissionsSets", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PermissionsSets resources.
type permissionsSetsState struct {
	// List of allowed actions for the Permission Set (not relevant if 'is_super' is true).
	Actions []string `pulumi:"actions"`
	// The name of the user who created the Permission Set.
	Author *string `pulumi:"author"`
	// Free text description for the Permission Set.
	Description *string `pulumi:"description"`
	// Give the Permission Set full access, meaning all actions are allowed without restriction.
	IsSuper *bool `pulumi:"isSuper"`
	// The name of the Permission Set, comprised of alphanumeric characters and '-', '_', ' ', ':', '.', '@', '!', '^'.
	Name *string `pulumi:"name"`
	// Whether to allow UI access for users with this Permission Set.
	UiAccess *bool `pulumi:"uiAccess"`
	// The date of the last modification of the Role.
	UpdatedAt *string `pulumi:"updatedAt"`
}

type PermissionsSetsState struct {
	// List of allowed actions for the Permission Set (not relevant if 'is_super' is true).
	Actions pulumi.StringArrayInput
	// The name of the user who created the Permission Set.
	Author pulumi.StringPtrInput
	// Free text description for the Permission Set.
	Description pulumi.StringPtrInput
	// Give the Permission Set full access, meaning all actions are allowed without restriction.
	IsSuper pulumi.BoolPtrInput
	// The name of the Permission Set, comprised of alphanumeric characters and '-', '_', ' ', ':', '.', '@', '!', '^'.
	Name pulumi.StringPtrInput
	// Whether to allow UI access for users with this Permission Set.
	UiAccess pulumi.BoolPtrInput
	// The date of the last modification of the Role.
	UpdatedAt pulumi.StringPtrInput
}

func (PermissionsSetsState) ElementType() reflect.Type {
	return reflect.TypeOf((*permissionsSetsState)(nil)).Elem()
}

type permissionsSetsArgs struct {
	// List of allowed actions for the Permission Set (not relevant if 'is_super' is true).
	Actions []string `pulumi:"actions"`
	// The name of the user who created the Permission Set.
	Author *string `pulumi:"author"`
	// Free text description for the Permission Set.
	Description *string `pulumi:"description"`
	// Give the Permission Set full access, meaning all actions are allowed without restriction.
	IsSuper *bool `pulumi:"isSuper"`
	// The name of the Permission Set, comprised of alphanumeric characters and '-', '_', ' ', ':', '.', '@', '!', '^'.
	Name *string `pulumi:"name"`
	// Whether to allow UI access for users with this Permission Set.
	UiAccess bool `pulumi:"uiAccess"`
}

// The set of arguments for constructing a PermissionsSets resource.
type PermissionsSetsArgs struct {
	// List of allowed actions for the Permission Set (not relevant if 'is_super' is true).
	Actions pulumi.StringArrayInput
	// The name of the user who created the Permission Set.
	Author pulumi.StringPtrInput
	// Free text description for the Permission Set.
	Description pulumi.StringPtrInput
	// Give the Permission Set full access, meaning all actions are allowed without restriction.
	IsSuper pulumi.BoolPtrInput
	// The name of the Permission Set, comprised of alphanumeric characters and '-', '_', ' ', ':', '.', '@', '!', '^'.
	Name pulumi.StringPtrInput
	// Whether to allow UI access for users with this Permission Set.
	UiAccess pulumi.BoolInput
}

func (PermissionsSetsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*permissionsSetsArgs)(nil)).Elem()
}

type PermissionsSetsInput interface {
	pulumi.Input

	ToPermissionsSetsOutput() PermissionsSetsOutput
	ToPermissionsSetsOutputWithContext(ctx context.Context) PermissionsSetsOutput
}

func (*PermissionsSets) ElementType() reflect.Type {
	return reflect.TypeOf((**PermissionsSets)(nil)).Elem()
}

func (i *PermissionsSets) ToPermissionsSetsOutput() PermissionsSetsOutput {
	return i.ToPermissionsSetsOutputWithContext(context.Background())
}

func (i *PermissionsSets) ToPermissionsSetsOutputWithContext(ctx context.Context) PermissionsSetsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionsSetsOutput)
}

// PermissionsSetsArrayInput is an input type that accepts PermissionsSetsArray and PermissionsSetsArrayOutput values.
// You can construct a concrete instance of `PermissionsSetsArrayInput` via:
//
//	PermissionsSetsArray{ PermissionsSetsArgs{...} }
type PermissionsSetsArrayInput interface {
	pulumi.Input

	ToPermissionsSetsArrayOutput() PermissionsSetsArrayOutput
	ToPermissionsSetsArrayOutputWithContext(context.Context) PermissionsSetsArrayOutput
}

type PermissionsSetsArray []PermissionsSetsInput

func (PermissionsSetsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PermissionsSets)(nil)).Elem()
}

func (i PermissionsSetsArray) ToPermissionsSetsArrayOutput() PermissionsSetsArrayOutput {
	return i.ToPermissionsSetsArrayOutputWithContext(context.Background())
}

func (i PermissionsSetsArray) ToPermissionsSetsArrayOutputWithContext(ctx context.Context) PermissionsSetsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionsSetsArrayOutput)
}

// PermissionsSetsMapInput is an input type that accepts PermissionsSetsMap and PermissionsSetsMapOutput values.
// You can construct a concrete instance of `PermissionsSetsMapInput` via:
//
//	PermissionsSetsMap{ "key": PermissionsSetsArgs{...} }
type PermissionsSetsMapInput interface {
	pulumi.Input

	ToPermissionsSetsMapOutput() PermissionsSetsMapOutput
	ToPermissionsSetsMapOutputWithContext(context.Context) PermissionsSetsMapOutput
}

type PermissionsSetsMap map[string]PermissionsSetsInput

func (PermissionsSetsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PermissionsSets)(nil)).Elem()
}

func (i PermissionsSetsMap) ToPermissionsSetsMapOutput() PermissionsSetsMapOutput {
	return i.ToPermissionsSetsMapOutputWithContext(context.Background())
}

func (i PermissionsSetsMap) ToPermissionsSetsMapOutputWithContext(ctx context.Context) PermissionsSetsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionsSetsMapOutput)
}

type PermissionsSetsOutput struct{ *pulumi.OutputState }

func (PermissionsSetsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PermissionsSets)(nil)).Elem()
}

func (o PermissionsSetsOutput) ToPermissionsSetsOutput() PermissionsSetsOutput {
	return o
}

func (o PermissionsSetsOutput) ToPermissionsSetsOutputWithContext(ctx context.Context) PermissionsSetsOutput {
	return o
}

// List of allowed actions for the Permission Set (not relevant if 'is_super' is true).
func (o PermissionsSetsOutput) Actions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PermissionsSets) pulumi.StringArrayOutput { return v.Actions }).(pulumi.StringArrayOutput)
}

// The name of the user who created the Permission Set.
func (o PermissionsSetsOutput) Author() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PermissionsSets) pulumi.StringPtrOutput { return v.Author }).(pulumi.StringPtrOutput)
}

// Free text description for the Permission Set.
func (o PermissionsSetsOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PermissionsSets) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Give the Permission Set full access, meaning all actions are allowed without restriction.
func (o PermissionsSetsOutput) IsSuper() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PermissionsSets) pulumi.BoolPtrOutput { return v.IsSuper }).(pulumi.BoolPtrOutput)
}

// The name of the Permission Set, comprised of alphanumeric characters and '-', '_', ' ', ':', '.', '@', '!', '^'.
func (o PermissionsSetsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PermissionsSets) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Whether to allow UI access for users with this Permission Set.
func (o PermissionsSetsOutput) UiAccess() pulumi.BoolOutput {
	return o.ApplyT(func(v *PermissionsSets) pulumi.BoolOutput { return v.UiAccess }).(pulumi.BoolOutput)
}

// The date of the last modification of the Role.
func (o PermissionsSetsOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *PermissionsSets) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

type PermissionsSetsArrayOutput struct{ *pulumi.OutputState }

func (PermissionsSetsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PermissionsSets)(nil)).Elem()
}

func (o PermissionsSetsArrayOutput) ToPermissionsSetsArrayOutput() PermissionsSetsArrayOutput {
	return o
}

func (o PermissionsSetsArrayOutput) ToPermissionsSetsArrayOutputWithContext(ctx context.Context) PermissionsSetsArrayOutput {
	return o
}

func (o PermissionsSetsArrayOutput) Index(i pulumi.IntInput) PermissionsSetsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PermissionsSets {
		return vs[0].([]*PermissionsSets)[vs[1].(int)]
	}).(PermissionsSetsOutput)
}

type PermissionsSetsMapOutput struct{ *pulumi.OutputState }

func (PermissionsSetsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PermissionsSets)(nil)).Elem()
}

func (o PermissionsSetsMapOutput) ToPermissionsSetsMapOutput() PermissionsSetsMapOutput {
	return o
}

func (o PermissionsSetsMapOutput) ToPermissionsSetsMapOutputWithContext(ctx context.Context) PermissionsSetsMapOutput {
	return o
}

func (o PermissionsSetsMapOutput) MapIndex(k pulumi.StringInput) PermissionsSetsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PermissionsSets {
		return vs[0].(map[string]*PermissionsSets)[vs[1].(string)]
	}).(PermissionsSetsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionsSetsInput)(nil)).Elem(), &PermissionsSets{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionsSetsArrayInput)(nil)).Elem(), PermissionsSetsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionsSetsMapInput)(nil)).Elem(), PermissionsSetsMap{})
	pulumi.RegisterOutputType(PermissionsSetsOutput{})
	pulumi.RegisterOutputType(PermissionsSetsArrayOutput{})
	pulumi.RegisterOutputType(PermissionsSetsMapOutput{})
}
