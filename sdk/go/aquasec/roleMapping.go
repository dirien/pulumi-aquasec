// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aquasec

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-aquasec/sdk/go/aquasec/internal"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-aquasec/sdk/go/aquasec"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			roleMappingRoleMapping, err := aquasec.NewRoleMapping(ctx, "roleMappingRoleMapping", &aquasec.RoleMappingArgs{
//				Saml: &aquasec.RoleMappingSamlArgs{
//					RoleMapping: pulumi.StringMap{
//						"Administrator": pulumi.String("group1"),
//						"Scanner":       pulumi.String("group2|group3"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("roleMapping", roleMappingRoleMapping)
//			return nil
//		})
//	}
//
// ```
type RoleMapping struct {
	pulumi.CustomResourceState

	// LDAP Authentication
	Ldap RoleMappingLdapPtrOutput `pulumi:"ldap"`
	// Oauth2 Authentication
	Oauth2 RoleMappingOauth2PtrOutput `pulumi:"oauth2"`
	// OpenId Authentication
	Openid RoleMappingOpenidPtrOutput `pulumi:"openid"`
	// SAML Authentication
	Saml RoleMappingSamlPtrOutput `pulumi:"saml"`
}

// NewRoleMapping registers a new resource with the given unique name, arguments, and options.
func NewRoleMapping(ctx *pulumi.Context,
	name string, args *RoleMappingArgs, opts ...pulumi.ResourceOption) (*RoleMapping, error) {
	if args == nil {
		args = &RoleMappingArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RoleMapping
	err := ctx.RegisterResource("aquasec:index/roleMapping:RoleMapping", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRoleMapping gets an existing RoleMapping resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRoleMapping(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RoleMappingState, opts ...pulumi.ResourceOption) (*RoleMapping, error) {
	var resource RoleMapping
	err := ctx.ReadResource("aquasec:index/roleMapping:RoleMapping", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RoleMapping resources.
type roleMappingState struct {
	// LDAP Authentication
	Ldap *RoleMappingLdap `pulumi:"ldap"`
	// Oauth2 Authentication
	Oauth2 *RoleMappingOauth2 `pulumi:"oauth2"`
	// OpenId Authentication
	Openid *RoleMappingOpenid `pulumi:"openid"`
	// SAML Authentication
	Saml *RoleMappingSaml `pulumi:"saml"`
}

type RoleMappingState struct {
	// LDAP Authentication
	Ldap RoleMappingLdapPtrInput
	// Oauth2 Authentication
	Oauth2 RoleMappingOauth2PtrInput
	// OpenId Authentication
	Openid RoleMappingOpenidPtrInput
	// SAML Authentication
	Saml RoleMappingSamlPtrInput
}

func (RoleMappingState) ElementType() reflect.Type {
	return reflect.TypeOf((*roleMappingState)(nil)).Elem()
}

type roleMappingArgs struct {
	// LDAP Authentication
	Ldap *RoleMappingLdap `pulumi:"ldap"`
	// Oauth2 Authentication
	Oauth2 *RoleMappingOauth2 `pulumi:"oauth2"`
	// OpenId Authentication
	Openid *RoleMappingOpenid `pulumi:"openid"`
	// SAML Authentication
	Saml *RoleMappingSaml `pulumi:"saml"`
}

// The set of arguments for constructing a RoleMapping resource.
type RoleMappingArgs struct {
	// LDAP Authentication
	Ldap RoleMappingLdapPtrInput
	// Oauth2 Authentication
	Oauth2 RoleMappingOauth2PtrInput
	// OpenId Authentication
	Openid RoleMappingOpenidPtrInput
	// SAML Authentication
	Saml RoleMappingSamlPtrInput
}

func (RoleMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*roleMappingArgs)(nil)).Elem()
}

type RoleMappingInput interface {
	pulumi.Input

	ToRoleMappingOutput() RoleMappingOutput
	ToRoleMappingOutputWithContext(ctx context.Context) RoleMappingOutput
}

func (*RoleMapping) ElementType() reflect.Type {
	return reflect.TypeOf((**RoleMapping)(nil)).Elem()
}

func (i *RoleMapping) ToRoleMappingOutput() RoleMappingOutput {
	return i.ToRoleMappingOutputWithContext(context.Background())
}

func (i *RoleMapping) ToRoleMappingOutputWithContext(ctx context.Context) RoleMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleMappingOutput)
}

// RoleMappingArrayInput is an input type that accepts RoleMappingArray and RoleMappingArrayOutput values.
// You can construct a concrete instance of `RoleMappingArrayInput` via:
//
//	RoleMappingArray{ RoleMappingArgs{...} }
type RoleMappingArrayInput interface {
	pulumi.Input

	ToRoleMappingArrayOutput() RoleMappingArrayOutput
	ToRoleMappingArrayOutputWithContext(context.Context) RoleMappingArrayOutput
}

type RoleMappingArray []RoleMappingInput

func (RoleMappingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RoleMapping)(nil)).Elem()
}

func (i RoleMappingArray) ToRoleMappingArrayOutput() RoleMappingArrayOutput {
	return i.ToRoleMappingArrayOutputWithContext(context.Background())
}

func (i RoleMappingArray) ToRoleMappingArrayOutputWithContext(ctx context.Context) RoleMappingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleMappingArrayOutput)
}

// RoleMappingMapInput is an input type that accepts RoleMappingMap and RoleMappingMapOutput values.
// You can construct a concrete instance of `RoleMappingMapInput` via:
//
//	RoleMappingMap{ "key": RoleMappingArgs{...} }
type RoleMappingMapInput interface {
	pulumi.Input

	ToRoleMappingMapOutput() RoleMappingMapOutput
	ToRoleMappingMapOutputWithContext(context.Context) RoleMappingMapOutput
}

type RoleMappingMap map[string]RoleMappingInput

func (RoleMappingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RoleMapping)(nil)).Elem()
}

func (i RoleMappingMap) ToRoleMappingMapOutput() RoleMappingMapOutput {
	return i.ToRoleMappingMapOutputWithContext(context.Background())
}

func (i RoleMappingMap) ToRoleMappingMapOutputWithContext(ctx context.Context) RoleMappingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleMappingMapOutput)
}

type RoleMappingOutput struct{ *pulumi.OutputState }

func (RoleMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RoleMapping)(nil)).Elem()
}

func (o RoleMappingOutput) ToRoleMappingOutput() RoleMappingOutput {
	return o
}

func (o RoleMappingOutput) ToRoleMappingOutputWithContext(ctx context.Context) RoleMappingOutput {
	return o
}

// LDAP Authentication
func (o RoleMappingOutput) Ldap() RoleMappingLdapPtrOutput {
	return o.ApplyT(func(v *RoleMapping) RoleMappingLdapPtrOutput { return v.Ldap }).(RoleMappingLdapPtrOutput)
}

// Oauth2 Authentication
func (o RoleMappingOutput) Oauth2() RoleMappingOauth2PtrOutput {
	return o.ApplyT(func(v *RoleMapping) RoleMappingOauth2PtrOutput { return v.Oauth2 }).(RoleMappingOauth2PtrOutput)
}

// OpenId Authentication
func (o RoleMappingOutput) Openid() RoleMappingOpenidPtrOutput {
	return o.ApplyT(func(v *RoleMapping) RoleMappingOpenidPtrOutput { return v.Openid }).(RoleMappingOpenidPtrOutput)
}

// SAML Authentication
func (o RoleMappingOutput) Saml() RoleMappingSamlPtrOutput {
	return o.ApplyT(func(v *RoleMapping) RoleMappingSamlPtrOutput { return v.Saml }).(RoleMappingSamlPtrOutput)
}

type RoleMappingArrayOutput struct{ *pulumi.OutputState }

func (RoleMappingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RoleMapping)(nil)).Elem()
}

func (o RoleMappingArrayOutput) ToRoleMappingArrayOutput() RoleMappingArrayOutput {
	return o
}

func (o RoleMappingArrayOutput) ToRoleMappingArrayOutputWithContext(ctx context.Context) RoleMappingArrayOutput {
	return o
}

func (o RoleMappingArrayOutput) Index(i pulumi.IntInput) RoleMappingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RoleMapping {
		return vs[0].([]*RoleMapping)[vs[1].(int)]
	}).(RoleMappingOutput)
}

type RoleMappingMapOutput struct{ *pulumi.OutputState }

func (RoleMappingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RoleMapping)(nil)).Elem()
}

func (o RoleMappingMapOutput) ToRoleMappingMapOutput() RoleMappingMapOutput {
	return o
}

func (o RoleMappingMapOutput) ToRoleMappingMapOutputWithContext(ctx context.Context) RoleMappingMapOutput {
	return o
}

func (o RoleMappingMapOutput) MapIndex(k pulumi.StringInput) RoleMappingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RoleMapping {
		return vs[0].(map[string]*RoleMapping)[vs[1].(string)]
	}).(RoleMappingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RoleMappingInput)(nil)).Elem(), &RoleMapping{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoleMappingArrayInput)(nil)).Elem(), RoleMappingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoleMappingMapInput)(nil)).Elem(), RoleMappingMap{})
	pulumi.RegisterOutputType(RoleMappingOutput{})
	pulumi.RegisterOutputType(RoleMappingArrayOutput{})
	pulumi.RegisterOutputType(RoleMappingMapOutput{})
}
