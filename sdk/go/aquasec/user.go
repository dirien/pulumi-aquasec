// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aquasec

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `User` resource manages your users within Aqua.
//
// The users created must have at least one Role that is already present within Aqua.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-aquasec/sdk/go/aquasec"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := aquasec.NewUser(ctx, "iaC", &aquasec.UserArgs{
//				UserId:   pulumi.String("IaC"),
//				Password: pulumi.Any(_var.Password),
//				Roles: pulumi.StringArray{
//					pulumi.String("infrastructure"),
//				},
//				Email:     pulumi.String("infrastructure@example.com"),
//				FirstTime: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type User struct {
	pulumi.CustomResourceState

	// The user Email.
	Email pulumi.StringPtrOutput `pulumi:"email"`
	// If the user must change the password first login. Applicable only one time, Later for user password resets use aqua console.
	FirstTime pulumi.BoolPtrOutput `pulumi:"firstTime"`
	// Give the Permission Set full access, meaning all actions are allowed without restriction.
	IsSuper pulumi.BoolOutput `pulumi:"isSuper"`
	// The user name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Login password for the user; string, required, at least 8 characters long.
	Password pulumi.StringOutput `pulumi:"password"`
	// Password confirmation.
	PasswordConfirm pulumi.StringPtrOutput `pulumi:"passwordConfirm"`
	// User's Aqua plan (Developer / Team / Advanced).
	Plan pulumi.StringOutput `pulumi:"plan"`
	// The first role that assigned to the user for backward compatibility.
	Role pulumi.StringOutput `pulumi:"role"`
	// The roles that will be assigned to the user.
	Roles pulumi.StringArrayOutput `pulumi:"roles"`
	// The user type (Aqua, LDAP, SAML, OAuth2, OpenID, Tenant Manager).
	Type pulumi.StringOutput `pulumi:"type"`
	// Whether to allow UI access for users with this Permission Set.
	UiAccess pulumi.BoolOutput `pulumi:"uiAccess"`
	// The user ID.
	UserId pulumi.StringOutput `pulumi:"userId"`
}

// NewUser registers a new resource with the given unique name, arguments, and options.
func NewUser(ctx *pulumi.Context,
	name string, args *UserArgs, opts ...pulumi.ResourceOption) (*User, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Password == nil {
		return nil, errors.New("invalid value for required argument 'Password'")
	}
	if args.Roles == nil {
		return nil, errors.New("invalid value for required argument 'Roles'")
	}
	if args.UserId == nil {
		return nil, errors.New("invalid value for required argument 'UserId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource User
	err := ctx.RegisterResource("aquasec:index/user:User", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUser gets an existing User resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserState, opts ...pulumi.ResourceOption) (*User, error) {
	var resource User
	err := ctx.ReadResource("aquasec:index/user:User", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering User resources.
type userState struct {
	// The user Email.
	Email *string `pulumi:"email"`
	// If the user must change the password first login. Applicable only one time, Later for user password resets use aqua console.
	FirstTime *bool `pulumi:"firstTime"`
	// Give the Permission Set full access, meaning all actions are allowed without restriction.
	IsSuper *bool `pulumi:"isSuper"`
	// The user name.
	Name *string `pulumi:"name"`
	// Login password for the user; string, required, at least 8 characters long.
	Password *string `pulumi:"password"`
	// Password confirmation.
	PasswordConfirm *string `pulumi:"passwordConfirm"`
	// User's Aqua plan (Developer / Team / Advanced).
	Plan *string `pulumi:"plan"`
	// The first role that assigned to the user for backward compatibility.
	Role *string `pulumi:"role"`
	// The roles that will be assigned to the user.
	Roles []string `pulumi:"roles"`
	// The user type (Aqua, LDAP, SAML, OAuth2, OpenID, Tenant Manager).
	Type *string `pulumi:"type"`
	// Whether to allow UI access for users with this Permission Set.
	UiAccess *bool `pulumi:"uiAccess"`
	// The user ID.
	UserId *string `pulumi:"userId"`
}

type UserState struct {
	// The user Email.
	Email pulumi.StringPtrInput
	// If the user must change the password first login. Applicable only one time, Later for user password resets use aqua console.
	FirstTime pulumi.BoolPtrInput
	// Give the Permission Set full access, meaning all actions are allowed without restriction.
	IsSuper pulumi.BoolPtrInput
	// The user name.
	Name pulumi.StringPtrInput
	// Login password for the user; string, required, at least 8 characters long.
	Password pulumi.StringPtrInput
	// Password confirmation.
	PasswordConfirm pulumi.StringPtrInput
	// User's Aqua plan (Developer / Team / Advanced).
	Plan pulumi.StringPtrInput
	// The first role that assigned to the user for backward compatibility.
	Role pulumi.StringPtrInput
	// The roles that will be assigned to the user.
	Roles pulumi.StringArrayInput
	// The user type (Aqua, LDAP, SAML, OAuth2, OpenID, Tenant Manager).
	Type pulumi.StringPtrInput
	// Whether to allow UI access for users with this Permission Set.
	UiAccess pulumi.BoolPtrInput
	// The user ID.
	UserId pulumi.StringPtrInput
}

func (UserState) ElementType() reflect.Type {
	return reflect.TypeOf((*userState)(nil)).Elem()
}

type userArgs struct {
	// The user Email.
	Email *string `pulumi:"email"`
	// If the user must change the password first login. Applicable only one time, Later for user password resets use aqua console.
	FirstTime *bool `pulumi:"firstTime"`
	// The user name.
	Name *string `pulumi:"name"`
	// Login password for the user; string, required, at least 8 characters long.
	Password string `pulumi:"password"`
	// Password confirmation.
	PasswordConfirm *string `pulumi:"passwordConfirm"`
	// The roles that will be assigned to the user.
	Roles []string `pulumi:"roles"`
	// The user ID.
	UserId string `pulumi:"userId"`
}

// The set of arguments for constructing a User resource.
type UserArgs struct {
	// The user Email.
	Email pulumi.StringPtrInput
	// If the user must change the password first login. Applicable only one time, Later for user password resets use aqua console.
	FirstTime pulumi.BoolPtrInput
	// The user name.
	Name pulumi.StringPtrInput
	// Login password for the user; string, required, at least 8 characters long.
	Password pulumi.StringInput
	// Password confirmation.
	PasswordConfirm pulumi.StringPtrInput
	// The roles that will be assigned to the user.
	Roles pulumi.StringArrayInput
	// The user ID.
	UserId pulumi.StringInput
}

func (UserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userArgs)(nil)).Elem()
}

type UserInput interface {
	pulumi.Input

	ToUserOutput() UserOutput
	ToUserOutputWithContext(ctx context.Context) UserOutput
}

func (*User) ElementType() reflect.Type {
	return reflect.TypeOf((**User)(nil)).Elem()
}

func (i *User) ToUserOutput() UserOutput {
	return i.ToUserOutputWithContext(context.Background())
}

func (i *User) ToUserOutputWithContext(ctx context.Context) UserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserOutput)
}

// UserArrayInput is an input type that accepts UserArray and UserArrayOutput values.
// You can construct a concrete instance of `UserArrayInput` via:
//
//	UserArray{ UserArgs{...} }
type UserArrayInput interface {
	pulumi.Input

	ToUserArrayOutput() UserArrayOutput
	ToUserArrayOutputWithContext(context.Context) UserArrayOutput
}

type UserArray []UserInput

func (UserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*User)(nil)).Elem()
}

func (i UserArray) ToUserArrayOutput() UserArrayOutput {
	return i.ToUserArrayOutputWithContext(context.Background())
}

func (i UserArray) ToUserArrayOutputWithContext(ctx context.Context) UserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserArrayOutput)
}

// UserMapInput is an input type that accepts UserMap and UserMapOutput values.
// You can construct a concrete instance of `UserMapInput` via:
//
//	UserMap{ "key": UserArgs{...} }
type UserMapInput interface {
	pulumi.Input

	ToUserMapOutput() UserMapOutput
	ToUserMapOutputWithContext(context.Context) UserMapOutput
}

type UserMap map[string]UserInput

func (UserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*User)(nil)).Elem()
}

func (i UserMap) ToUserMapOutput() UserMapOutput {
	return i.ToUserMapOutputWithContext(context.Background())
}

func (i UserMap) ToUserMapOutputWithContext(ctx context.Context) UserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserMapOutput)
}

type UserOutput struct{ *pulumi.OutputState }

func (UserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**User)(nil)).Elem()
}

func (o UserOutput) ToUserOutput() UserOutput {
	return o
}

func (o UserOutput) ToUserOutputWithContext(ctx context.Context) UserOutput {
	return o
}

// The user Email.
func (o UserOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.Email }).(pulumi.StringPtrOutput)
}

// If the user must change the password first login. Applicable only one time, Later for user password resets use aqua console.
func (o UserOutput) FirstTime() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *User) pulumi.BoolPtrOutput { return v.FirstTime }).(pulumi.BoolPtrOutput)
}

// Give the Permission Set full access, meaning all actions are allowed without restriction.
func (o UserOutput) IsSuper() pulumi.BoolOutput {
	return o.ApplyT(func(v *User) pulumi.BoolOutput { return v.IsSuper }).(pulumi.BoolOutput)
}

// The user name.
func (o UserOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Login password for the user; string, required, at least 8 characters long.
func (o UserOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

// Password confirmation.
func (o UserOutput) PasswordConfirm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.PasswordConfirm }).(pulumi.StringPtrOutput)
}

// User's Aqua plan (Developer / Team / Advanced).
func (o UserOutput) Plan() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.Plan }).(pulumi.StringOutput)
}

// The first role that assigned to the user for backward compatibility.
func (o UserOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

// The roles that will be assigned to the user.
func (o UserOutput) Roles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *User) pulumi.StringArrayOutput { return v.Roles }).(pulumi.StringArrayOutput)
}

// The user type (Aqua, LDAP, SAML, OAuth2, OpenID, Tenant Manager).
func (o UserOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Whether to allow UI access for users with this Permission Set.
func (o UserOutput) UiAccess() pulumi.BoolOutput {
	return o.ApplyT(func(v *User) pulumi.BoolOutput { return v.UiAccess }).(pulumi.BoolOutput)
}

// The user ID.
func (o UserOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.UserId }).(pulumi.StringOutput)
}

type UserArrayOutput struct{ *pulumi.OutputState }

func (UserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*User)(nil)).Elem()
}

func (o UserArrayOutput) ToUserArrayOutput() UserArrayOutput {
	return o
}

func (o UserArrayOutput) ToUserArrayOutputWithContext(ctx context.Context) UserArrayOutput {
	return o
}

func (o UserArrayOutput) Index(i pulumi.IntInput) UserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *User {
		return vs[0].([]*User)[vs[1].(int)]
	}).(UserOutput)
}

type UserMapOutput struct{ *pulumi.OutputState }

func (UserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*User)(nil)).Elem()
}

func (o UserMapOutput) ToUserMapOutput() UserMapOutput {
	return o
}

func (o UserMapOutput) ToUserMapOutputWithContext(ctx context.Context) UserMapOutput {
	return o
}

func (o UserMapOutput) MapIndex(k pulumi.StringInput) UserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *User {
		return vs[0].(map[string]*User)[vs[1].(string)]
	}).(UserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserInput)(nil)).Elem(), &User{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserArrayInput)(nil)).Elem(), UserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserMapInput)(nil)).Elem(), UserMap{})
	pulumi.RegisterOutputType(UserOutput{})
	pulumi.RegisterOutputType(UserArrayOutput{})
	pulumi.RegisterOutputType(UserMapOutput{})
}
