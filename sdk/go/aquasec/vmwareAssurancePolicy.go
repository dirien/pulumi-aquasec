// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aquasec

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-aquasec/sdk/go/aquasec/internal"
)

type VmwareAssurancePolicy struct {
	pulumi.CustomResourceState

	// Aggregated vulnerability information.
	AggregatedVulnerability pulumi.StringMapOutput `pulumi:"aggregatedVulnerability"`
	// List of explicitly allowed images.
	AllowedImages     pulumi.StringArrayOutput `pulumi:"allowedImages"`
	ApplicationScopes pulumi.StringArrayOutput `pulumi:"applicationScopes"`
	// What type of assurance policy is described.
	AssuranceType pulumi.StringOutput `pulumi:"assuranceType"`
	// Indicates if auditing for failures.
	AuditOnFailure pulumi.BoolPtrOutput `pulumi:"auditOnFailure"`
	// Name of user account that created the policy.
	Author             pulumi.StringOutput                          `pulumi:"author"`
	AutoScanConfigured pulumi.BoolPtrOutput                         `pulumi:"autoScanConfigured"`
	AutoScanEnabled    pulumi.BoolPtrOutput                         `pulumi:"autoScanEnabled"`
	AutoScanTimes      VmwareAssurancePolicyAutoScanTimeArrayOutput `pulumi:"autoScanTimes"`
	// List of function's forbidden permissions.
	BlacklistPermissions pulumi.StringArrayOutput `pulumi:"blacklistPermissions"`
	// Indicates if blacklist permissions is relevant.
	BlacklistPermissionsEnabled pulumi.BoolPtrOutput `pulumi:"blacklistPermissionsEnabled"`
	// List of blacklisted licenses.
	BlacklistedLicenses pulumi.StringArrayOutput `pulumi:"blacklistedLicenses"`
	// Indicates if license blacklist is relevant.
	BlacklistedLicensesEnabled pulumi.BoolPtrOutput `pulumi:"blacklistedLicensesEnabled"`
	// Indicates if failed images are blocked.
	BlockFailed         pulumi.BoolPtrOutput `pulumi:"blockFailed"`
	ControlExcludeNoFix pulumi.BoolPtrOutput `pulumi:"controlExcludeNoFix"`
	// List of Custom user scripts for checks.
	CustomChecks VmwareAssurancePolicyCustomCheckArrayOutput `pulumi:"customChecks"`
	// Indicates if scanning should include custom checks.
	CustomChecksEnabled   pulumi.BoolPtrOutput `pulumi:"customChecksEnabled"`
	CustomSeverity        pulumi.StringOutput  `pulumi:"customSeverity"`
	CustomSeverityEnabled pulumi.BoolPtrOutput `pulumi:"customSeverityEnabled"`
	// Indicates if CVEs blacklist is relevant.
	CvesBlackListEnabled pulumi.BoolPtrOutput `pulumi:"cvesBlackListEnabled"`
	// List of cves blacklisted items.
	CvesBlackLists pulumi.StringArrayOutput `pulumi:"cvesBlackLists"`
	// Indicates if cves whitelist is relevant.
	CvesWhiteListEnabled pulumi.BoolPtrOutput `pulumi:"cvesWhiteListEnabled"`
	// List of cves whitelisted licenses
	CvesWhiteLists pulumi.StringArrayOutput `pulumi:"cvesWhiteLists"`
	// Identifier of the cvss severity.
	CvssSeverity pulumi.StringPtrOutput `pulumi:"cvssSeverity"`
	// Indicates if the cvss severity is scanned.
	CvssSeverityEnabled pulumi.BoolPtrOutput `pulumi:"cvssSeverityEnabled"`
	// Indicates that policy should ignore cvss cases that do not have a known fix.
	CvssSeverityExcludeNoFix pulumi.BoolPtrOutput     `pulumi:"cvssSeverityExcludeNoFix"`
	Description              pulumi.StringPtrOutput   `pulumi:"description"`
	DisallowExploitTypes     pulumi.StringArrayOutput `pulumi:"disallowExploitTypes"`
	// Indicates if malware should block the image.
	DisallowMalware pulumi.BoolPtrOutput `pulumi:"disallowMalware"`
	// Checks the host according to the Docker CIS benchmark, if Docker is found on the host.
	DockerCisEnabled pulumi.BoolPtrOutput `pulumi:"dockerCisEnabled"`
	// Name of the container image.
	Domain                           pulumi.StringPtrOutput   `pulumi:"domain"`
	DomainName                       pulumi.StringPtrOutput   `pulumi:"domainName"`
	DtaEnabled                       pulumi.BoolPtrOutput     `pulumi:"dtaEnabled"`
	DtaSeverity                      pulumi.StringPtrOutput   `pulumi:"dtaSeverity"`
	Enabled                          pulumi.BoolPtrOutput     `pulumi:"enabled"`
	Enforce                          pulumi.BoolPtrOutput     `pulumi:"enforce"`
	EnforceAfterDays                 pulumi.IntPtrOutput      `pulumi:"enforceAfterDays"`
	EnforceExcessivePermissions      pulumi.BoolPtrOutput     `pulumi:"enforceExcessivePermissions"`
	ExceptionalMonitoredMalwarePaths pulumi.StringArrayOutput `pulumi:"exceptionalMonitoredMalwarePaths"`
	ExcludeApplicationScopes         pulumi.StringArrayOutput `pulumi:"excludeApplicationScopes"`
	// Indicates if cicd failures will fail the image.
	FailCicd                         pulumi.BoolPtrOutput                           `pulumi:"failCicd"`
	ForbiddenLabels                  VmwareAssurancePolicyForbiddenLabelArrayOutput `pulumi:"forbiddenLabels"`
	ForbiddenLabelsEnabled           pulumi.BoolPtrOutput                           `pulumi:"forbiddenLabelsEnabled"`
	ForceMicroenforcer               pulumi.BoolPtrOutput                           `pulumi:"forceMicroenforcer"`
	FunctionIntegrityEnabled         pulumi.BoolPtrOutput                           `pulumi:"functionIntegrityEnabled"`
	IgnoreBaseImageVln               pulumi.BoolPtrOutput                           `pulumi:"ignoreBaseImageVln"`
	IgnoreRecentlyPublishedVln       pulumi.BoolPtrOutput                           `pulumi:"ignoreRecentlyPublishedVln"`
	IgnoreRecentlyPublishedVlnPeriod pulumi.IntOutput                               `pulumi:"ignoreRecentlyPublishedVlnPeriod"`
	// Indicates if risk resources are ignored.
	IgnoreRiskResourcesEnabled pulumi.BoolPtrOutput `pulumi:"ignoreRiskResourcesEnabled"`
	// List of ignored risk resources.
	IgnoredRiskResources      pulumi.StringArrayOutput `pulumi:"ignoredRiskResources"`
	IgnoredSensitiveResources pulumi.StringArrayOutput `pulumi:"ignoredSensitiveResources"`
	// List of images.
	Images pulumi.StringArrayOutput `pulumi:"images"`
	// Performs a Kubernetes CIS benchmark check for the host.
	KubeCisEnabled pulumi.BoolPtrOutput `pulumi:"kubeCisEnabled"`
	// List of Kubernetes controls.
	KubernetesControls       VmwareAssurancePolicyKubernetesControlArrayOutput `pulumi:"kubernetesControls"`
	KubernetesControlsAvdIds pulumi.StringArrayOutput                          `pulumi:"kubernetesControlsAvdIds"`
	KubernetesControlsNames  pulumi.StringArrayOutput                          `pulumi:"kubernetesControlsNames"`
	// List of labels.
	Labels          pulumi.StringArrayOutput `pulumi:"labels"`
	Lastupdate      pulumi.StringOutput      `pulumi:"lastupdate"`
	LinuxCisEnabled pulumi.BoolPtrOutput     `pulumi:"linuxCisEnabled"`
	MalwareAction   pulumi.StringPtrOutput   `pulumi:"malwareAction"`
	// Value of allowed maximum score.
	MaximumScore pulumi.Float64PtrOutput `pulumi:"maximumScore"`
	// Indicates if exceeding the maximum score is scanned.
	MaximumScoreEnabled      pulumi.BoolPtrOutput     `pulumi:"maximumScoreEnabled"`
	MaximumScoreExcludeNoFix pulumi.BoolPtrOutput     `pulumi:"maximumScoreExcludeNoFix"`
	MonitoredMalwarePaths    pulumi.StringArrayOutput `pulumi:"monitoredMalwarePaths"`
	Name                     pulumi.StringOutput      `pulumi:"name"`
	// Indicates if raise a warning for images that should only be run as root.
	OnlyNoneRootUsers         pulumi.BoolPtrOutput `pulumi:"onlyNoneRootUsers"`
	OpenshiftHardeningEnabled pulumi.BoolPtrOutput `pulumi:"openshiftHardeningEnabled"`
	// Indicates if packages blacklist is relevant.
	PackagesBlackListEnabled pulumi.BoolPtrOutput `pulumi:"packagesBlackListEnabled"`
	// List of blacklisted images.
	PackagesBlackLists VmwareAssurancePolicyPackagesBlackListArrayOutput `pulumi:"packagesBlackLists"`
	// Indicates if packages whitelist is relevant.
	PackagesWhiteListEnabled pulumi.BoolPtrOutput `pulumi:"packagesWhiteListEnabled"`
	// List of whitelisted images.
	PackagesWhiteLists      VmwareAssurancePolicyPackagesWhiteListArrayOutput `pulumi:"packagesWhiteLists"`
	PartialResultsImageFail pulumi.BoolPtrOutput                              `pulumi:"partialResultsImageFail"`
	Permission              pulumi.StringOutput                               `pulumi:"permission"`
	PolicySettings          VmwareAssurancePolicyPolicySettingsOutput         `pulumi:"policySettings"`
	ReadOnly                pulumi.BoolPtrOutput                              `pulumi:"readOnly"`
	// List of registries.
	Registries            pulumi.StringArrayOutput                      `pulumi:"registries"`
	Registry              pulumi.StringPtrOutput                        `pulumi:"registry"`
	RequiredLabels        VmwareAssurancePolicyRequiredLabelArrayOutput `pulumi:"requiredLabels"`
	RequiredLabelsEnabled pulumi.BoolPtrOutput                          `pulumi:"requiredLabelsEnabled"`
	ScanMalwareInArchives pulumi.BoolPtrOutput                          `pulumi:"scanMalwareInArchives"`
	ScanNfsMounts         pulumi.BoolPtrOutput                          `pulumi:"scanNfsMounts"`
	ScanProcessMemory     pulumi.BoolPtrOutput                          `pulumi:"scanProcessMemory"`
	// Indicates if scan should include sensitive data in the image.
	ScanSensitiveData   pulumi.BoolPtrOutput `pulumi:"scanSensitiveData"`
	ScanWindowsRegistry pulumi.BoolPtrOutput `pulumi:"scanWindowsRegistry"`
	// Indicates if scanning should include scap.
	ScapEnabled pulumi.BoolPtrOutput `pulumi:"scapEnabled"`
	// List of SCAP user scripts for checks.
	ScapFiles pulumi.StringArrayOutput              `pulumi:"scapFiles"`
	Scopes    VmwareAssurancePolicyScopeArrayOutput `pulumi:"scopes"`
	// List of trusted images.
	TrustedBaseImages VmwareAssurancePolicyTrustedBaseImageArrayOutput `pulumi:"trustedBaseImages"`
	// Indicates if list of trusted base images is relevant.
	TrustedBaseImagesEnabled    pulumi.BoolPtrOutput  `pulumi:"trustedBaseImagesEnabled"`
	VulnerabilityExploitability pulumi.BoolPtrOutput  `pulumi:"vulnerabilityExploitability"`
	VulnerabilityScoreRanges    pulumi.IntArrayOutput `pulumi:"vulnerabilityScoreRanges"`
	// List of whitelisted licenses.
	WhitelistedLicenses pulumi.StringArrayOutput `pulumi:"whitelistedLicenses"`
	// Indicates if license blacklist is relevant.
	WhitelistedLicensesEnabled pulumi.BoolPtrOutput `pulumi:"whitelistedLicensesEnabled"`
}

// NewVmwareAssurancePolicy registers a new resource with the given unique name, arguments, and options.
func NewVmwareAssurancePolicy(ctx *pulumi.Context,
	name string, args *VmwareAssurancePolicyArgs, opts ...pulumi.ResourceOption) (*VmwareAssurancePolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApplicationScopes == nil {
		return nil, errors.New("invalid value for required argument 'ApplicationScopes'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VmwareAssurancePolicy
	err := ctx.RegisterResource("aquasec:index/vmwareAssurancePolicy:VmwareAssurancePolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVmwareAssurancePolicy gets an existing VmwareAssurancePolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVmwareAssurancePolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VmwareAssurancePolicyState, opts ...pulumi.ResourceOption) (*VmwareAssurancePolicy, error) {
	var resource VmwareAssurancePolicy
	err := ctx.ReadResource("aquasec:index/vmwareAssurancePolicy:VmwareAssurancePolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VmwareAssurancePolicy resources.
type vmwareAssurancePolicyState struct {
	// Aggregated vulnerability information.
	AggregatedVulnerability map[string]string `pulumi:"aggregatedVulnerability"`
	// List of explicitly allowed images.
	AllowedImages     []string `pulumi:"allowedImages"`
	ApplicationScopes []string `pulumi:"applicationScopes"`
	// What type of assurance policy is described.
	AssuranceType *string `pulumi:"assuranceType"`
	// Indicates if auditing for failures.
	AuditOnFailure *bool `pulumi:"auditOnFailure"`
	// Name of user account that created the policy.
	Author             *string                             `pulumi:"author"`
	AutoScanConfigured *bool                               `pulumi:"autoScanConfigured"`
	AutoScanEnabled    *bool                               `pulumi:"autoScanEnabled"`
	AutoScanTimes      []VmwareAssurancePolicyAutoScanTime `pulumi:"autoScanTimes"`
	// List of function's forbidden permissions.
	BlacklistPermissions []string `pulumi:"blacklistPermissions"`
	// Indicates if blacklist permissions is relevant.
	BlacklistPermissionsEnabled *bool `pulumi:"blacklistPermissionsEnabled"`
	// List of blacklisted licenses.
	BlacklistedLicenses []string `pulumi:"blacklistedLicenses"`
	// Indicates if license blacklist is relevant.
	BlacklistedLicensesEnabled *bool `pulumi:"blacklistedLicensesEnabled"`
	// Indicates if failed images are blocked.
	BlockFailed         *bool `pulumi:"blockFailed"`
	ControlExcludeNoFix *bool `pulumi:"controlExcludeNoFix"`
	// List of Custom user scripts for checks.
	CustomChecks []VmwareAssurancePolicyCustomCheck `pulumi:"customChecks"`
	// Indicates if scanning should include custom checks.
	CustomChecksEnabled   *bool   `pulumi:"customChecksEnabled"`
	CustomSeverity        *string `pulumi:"customSeverity"`
	CustomSeverityEnabled *bool   `pulumi:"customSeverityEnabled"`
	// Indicates if CVEs blacklist is relevant.
	CvesBlackListEnabled *bool `pulumi:"cvesBlackListEnabled"`
	// List of cves blacklisted items.
	CvesBlackLists []string `pulumi:"cvesBlackLists"`
	// Indicates if cves whitelist is relevant.
	CvesWhiteListEnabled *bool `pulumi:"cvesWhiteListEnabled"`
	// List of cves whitelisted licenses
	CvesWhiteLists []string `pulumi:"cvesWhiteLists"`
	// Identifier of the cvss severity.
	CvssSeverity *string `pulumi:"cvssSeverity"`
	// Indicates if the cvss severity is scanned.
	CvssSeverityEnabled *bool `pulumi:"cvssSeverityEnabled"`
	// Indicates that policy should ignore cvss cases that do not have a known fix.
	CvssSeverityExcludeNoFix *bool    `pulumi:"cvssSeverityExcludeNoFix"`
	Description              *string  `pulumi:"description"`
	DisallowExploitTypes     []string `pulumi:"disallowExploitTypes"`
	// Indicates if malware should block the image.
	DisallowMalware *bool `pulumi:"disallowMalware"`
	// Checks the host according to the Docker CIS benchmark, if Docker is found on the host.
	DockerCisEnabled *bool `pulumi:"dockerCisEnabled"`
	// Name of the container image.
	Domain                           *string  `pulumi:"domain"`
	DomainName                       *string  `pulumi:"domainName"`
	DtaEnabled                       *bool    `pulumi:"dtaEnabled"`
	DtaSeverity                      *string  `pulumi:"dtaSeverity"`
	Enabled                          *bool    `pulumi:"enabled"`
	Enforce                          *bool    `pulumi:"enforce"`
	EnforceAfterDays                 *int     `pulumi:"enforceAfterDays"`
	EnforceExcessivePermissions      *bool    `pulumi:"enforceExcessivePermissions"`
	ExceptionalMonitoredMalwarePaths []string `pulumi:"exceptionalMonitoredMalwarePaths"`
	ExcludeApplicationScopes         []string `pulumi:"excludeApplicationScopes"`
	// Indicates if cicd failures will fail the image.
	FailCicd                         *bool                                 `pulumi:"failCicd"`
	ForbiddenLabels                  []VmwareAssurancePolicyForbiddenLabel `pulumi:"forbiddenLabels"`
	ForbiddenLabelsEnabled           *bool                                 `pulumi:"forbiddenLabelsEnabled"`
	ForceMicroenforcer               *bool                                 `pulumi:"forceMicroenforcer"`
	FunctionIntegrityEnabled         *bool                                 `pulumi:"functionIntegrityEnabled"`
	IgnoreBaseImageVln               *bool                                 `pulumi:"ignoreBaseImageVln"`
	IgnoreRecentlyPublishedVln       *bool                                 `pulumi:"ignoreRecentlyPublishedVln"`
	IgnoreRecentlyPublishedVlnPeriod *int                                  `pulumi:"ignoreRecentlyPublishedVlnPeriod"`
	// Indicates if risk resources are ignored.
	IgnoreRiskResourcesEnabled *bool `pulumi:"ignoreRiskResourcesEnabled"`
	// List of ignored risk resources.
	IgnoredRiskResources      []string `pulumi:"ignoredRiskResources"`
	IgnoredSensitiveResources []string `pulumi:"ignoredSensitiveResources"`
	// List of images.
	Images []string `pulumi:"images"`
	// Performs a Kubernetes CIS benchmark check for the host.
	KubeCisEnabled *bool `pulumi:"kubeCisEnabled"`
	// List of Kubernetes controls.
	KubernetesControls       []VmwareAssurancePolicyKubernetesControl `pulumi:"kubernetesControls"`
	KubernetesControlsAvdIds []string                                 `pulumi:"kubernetesControlsAvdIds"`
	KubernetesControlsNames  []string                                 `pulumi:"kubernetesControlsNames"`
	// List of labels.
	Labels          []string `pulumi:"labels"`
	Lastupdate      *string  `pulumi:"lastupdate"`
	LinuxCisEnabled *bool    `pulumi:"linuxCisEnabled"`
	MalwareAction   *string  `pulumi:"malwareAction"`
	// Value of allowed maximum score.
	MaximumScore *float64 `pulumi:"maximumScore"`
	// Indicates if exceeding the maximum score is scanned.
	MaximumScoreEnabled      *bool    `pulumi:"maximumScoreEnabled"`
	MaximumScoreExcludeNoFix *bool    `pulumi:"maximumScoreExcludeNoFix"`
	MonitoredMalwarePaths    []string `pulumi:"monitoredMalwarePaths"`
	Name                     *string  `pulumi:"name"`
	// Indicates if raise a warning for images that should only be run as root.
	OnlyNoneRootUsers         *bool `pulumi:"onlyNoneRootUsers"`
	OpenshiftHardeningEnabled *bool `pulumi:"openshiftHardeningEnabled"`
	// Indicates if packages blacklist is relevant.
	PackagesBlackListEnabled *bool `pulumi:"packagesBlackListEnabled"`
	// List of blacklisted images.
	PackagesBlackLists []VmwareAssurancePolicyPackagesBlackList `pulumi:"packagesBlackLists"`
	// Indicates if packages whitelist is relevant.
	PackagesWhiteListEnabled *bool `pulumi:"packagesWhiteListEnabled"`
	// List of whitelisted images.
	PackagesWhiteLists      []VmwareAssurancePolicyPackagesWhiteList `pulumi:"packagesWhiteLists"`
	PartialResultsImageFail *bool                                    `pulumi:"partialResultsImageFail"`
	Permission              *string                                  `pulumi:"permission"`
	PolicySettings          *VmwareAssurancePolicyPolicySettings     `pulumi:"policySettings"`
	ReadOnly                *bool                                    `pulumi:"readOnly"`
	// List of registries.
	Registries            []string                             `pulumi:"registries"`
	Registry              *string                              `pulumi:"registry"`
	RequiredLabels        []VmwareAssurancePolicyRequiredLabel `pulumi:"requiredLabels"`
	RequiredLabelsEnabled *bool                                `pulumi:"requiredLabelsEnabled"`
	ScanMalwareInArchives *bool                                `pulumi:"scanMalwareInArchives"`
	ScanNfsMounts         *bool                                `pulumi:"scanNfsMounts"`
	ScanProcessMemory     *bool                                `pulumi:"scanProcessMemory"`
	// Indicates if scan should include sensitive data in the image.
	ScanSensitiveData   *bool `pulumi:"scanSensitiveData"`
	ScanWindowsRegistry *bool `pulumi:"scanWindowsRegistry"`
	// Indicates if scanning should include scap.
	ScapEnabled *bool `pulumi:"scapEnabled"`
	// List of SCAP user scripts for checks.
	ScapFiles []string                     `pulumi:"scapFiles"`
	Scopes    []VmwareAssurancePolicyScope `pulumi:"scopes"`
	// List of trusted images.
	TrustedBaseImages []VmwareAssurancePolicyTrustedBaseImage `pulumi:"trustedBaseImages"`
	// Indicates if list of trusted base images is relevant.
	TrustedBaseImagesEnabled    *bool `pulumi:"trustedBaseImagesEnabled"`
	VulnerabilityExploitability *bool `pulumi:"vulnerabilityExploitability"`
	VulnerabilityScoreRanges    []int `pulumi:"vulnerabilityScoreRanges"`
	// List of whitelisted licenses.
	WhitelistedLicenses []string `pulumi:"whitelistedLicenses"`
	// Indicates if license blacklist is relevant.
	WhitelistedLicensesEnabled *bool `pulumi:"whitelistedLicensesEnabled"`
}

type VmwareAssurancePolicyState struct {
	// Aggregated vulnerability information.
	AggregatedVulnerability pulumi.StringMapInput
	// List of explicitly allowed images.
	AllowedImages     pulumi.StringArrayInput
	ApplicationScopes pulumi.StringArrayInput
	// What type of assurance policy is described.
	AssuranceType pulumi.StringPtrInput
	// Indicates if auditing for failures.
	AuditOnFailure pulumi.BoolPtrInput
	// Name of user account that created the policy.
	Author             pulumi.StringPtrInput
	AutoScanConfigured pulumi.BoolPtrInput
	AutoScanEnabled    pulumi.BoolPtrInput
	AutoScanTimes      VmwareAssurancePolicyAutoScanTimeArrayInput
	// List of function's forbidden permissions.
	BlacklistPermissions pulumi.StringArrayInput
	// Indicates if blacklist permissions is relevant.
	BlacklistPermissionsEnabled pulumi.BoolPtrInput
	// List of blacklisted licenses.
	BlacklistedLicenses pulumi.StringArrayInput
	// Indicates if license blacklist is relevant.
	BlacklistedLicensesEnabled pulumi.BoolPtrInput
	// Indicates if failed images are blocked.
	BlockFailed         pulumi.BoolPtrInput
	ControlExcludeNoFix pulumi.BoolPtrInput
	// List of Custom user scripts for checks.
	CustomChecks VmwareAssurancePolicyCustomCheckArrayInput
	// Indicates if scanning should include custom checks.
	CustomChecksEnabled   pulumi.BoolPtrInput
	CustomSeverity        pulumi.StringPtrInput
	CustomSeverityEnabled pulumi.BoolPtrInput
	// Indicates if CVEs blacklist is relevant.
	CvesBlackListEnabled pulumi.BoolPtrInput
	// List of cves blacklisted items.
	CvesBlackLists pulumi.StringArrayInput
	// Indicates if cves whitelist is relevant.
	CvesWhiteListEnabled pulumi.BoolPtrInput
	// List of cves whitelisted licenses
	CvesWhiteLists pulumi.StringArrayInput
	// Identifier of the cvss severity.
	CvssSeverity pulumi.StringPtrInput
	// Indicates if the cvss severity is scanned.
	CvssSeverityEnabled pulumi.BoolPtrInput
	// Indicates that policy should ignore cvss cases that do not have a known fix.
	CvssSeverityExcludeNoFix pulumi.BoolPtrInput
	Description              pulumi.StringPtrInput
	DisallowExploitTypes     pulumi.StringArrayInput
	// Indicates if malware should block the image.
	DisallowMalware pulumi.BoolPtrInput
	// Checks the host according to the Docker CIS benchmark, if Docker is found on the host.
	DockerCisEnabled pulumi.BoolPtrInput
	// Name of the container image.
	Domain                           pulumi.StringPtrInput
	DomainName                       pulumi.StringPtrInput
	DtaEnabled                       pulumi.BoolPtrInput
	DtaSeverity                      pulumi.StringPtrInput
	Enabled                          pulumi.BoolPtrInput
	Enforce                          pulumi.BoolPtrInput
	EnforceAfterDays                 pulumi.IntPtrInput
	EnforceExcessivePermissions      pulumi.BoolPtrInput
	ExceptionalMonitoredMalwarePaths pulumi.StringArrayInput
	ExcludeApplicationScopes         pulumi.StringArrayInput
	// Indicates if cicd failures will fail the image.
	FailCicd                         pulumi.BoolPtrInput
	ForbiddenLabels                  VmwareAssurancePolicyForbiddenLabelArrayInput
	ForbiddenLabelsEnabled           pulumi.BoolPtrInput
	ForceMicroenforcer               pulumi.BoolPtrInput
	FunctionIntegrityEnabled         pulumi.BoolPtrInput
	IgnoreBaseImageVln               pulumi.BoolPtrInput
	IgnoreRecentlyPublishedVln       pulumi.BoolPtrInput
	IgnoreRecentlyPublishedVlnPeriod pulumi.IntPtrInput
	// Indicates if risk resources are ignored.
	IgnoreRiskResourcesEnabled pulumi.BoolPtrInput
	// List of ignored risk resources.
	IgnoredRiskResources      pulumi.StringArrayInput
	IgnoredSensitiveResources pulumi.StringArrayInput
	// List of images.
	Images pulumi.StringArrayInput
	// Performs a Kubernetes CIS benchmark check for the host.
	KubeCisEnabled pulumi.BoolPtrInput
	// List of Kubernetes controls.
	KubernetesControls       VmwareAssurancePolicyKubernetesControlArrayInput
	KubernetesControlsAvdIds pulumi.StringArrayInput
	KubernetesControlsNames  pulumi.StringArrayInput
	// List of labels.
	Labels          pulumi.StringArrayInput
	Lastupdate      pulumi.StringPtrInput
	LinuxCisEnabled pulumi.BoolPtrInput
	MalwareAction   pulumi.StringPtrInput
	// Value of allowed maximum score.
	MaximumScore pulumi.Float64PtrInput
	// Indicates if exceeding the maximum score is scanned.
	MaximumScoreEnabled      pulumi.BoolPtrInput
	MaximumScoreExcludeNoFix pulumi.BoolPtrInput
	MonitoredMalwarePaths    pulumi.StringArrayInput
	Name                     pulumi.StringPtrInput
	// Indicates if raise a warning for images that should only be run as root.
	OnlyNoneRootUsers         pulumi.BoolPtrInput
	OpenshiftHardeningEnabled pulumi.BoolPtrInput
	// Indicates if packages blacklist is relevant.
	PackagesBlackListEnabled pulumi.BoolPtrInput
	// List of blacklisted images.
	PackagesBlackLists VmwareAssurancePolicyPackagesBlackListArrayInput
	// Indicates if packages whitelist is relevant.
	PackagesWhiteListEnabled pulumi.BoolPtrInput
	// List of whitelisted images.
	PackagesWhiteLists      VmwareAssurancePolicyPackagesWhiteListArrayInput
	PartialResultsImageFail pulumi.BoolPtrInput
	Permission              pulumi.StringPtrInput
	PolicySettings          VmwareAssurancePolicyPolicySettingsPtrInput
	ReadOnly                pulumi.BoolPtrInput
	// List of registries.
	Registries            pulumi.StringArrayInput
	Registry              pulumi.StringPtrInput
	RequiredLabels        VmwareAssurancePolicyRequiredLabelArrayInput
	RequiredLabelsEnabled pulumi.BoolPtrInput
	ScanMalwareInArchives pulumi.BoolPtrInput
	ScanNfsMounts         pulumi.BoolPtrInput
	ScanProcessMemory     pulumi.BoolPtrInput
	// Indicates if scan should include sensitive data in the image.
	ScanSensitiveData   pulumi.BoolPtrInput
	ScanWindowsRegistry pulumi.BoolPtrInput
	// Indicates if scanning should include scap.
	ScapEnabled pulumi.BoolPtrInput
	// List of SCAP user scripts for checks.
	ScapFiles pulumi.StringArrayInput
	Scopes    VmwareAssurancePolicyScopeArrayInput
	// List of trusted images.
	TrustedBaseImages VmwareAssurancePolicyTrustedBaseImageArrayInput
	// Indicates if list of trusted base images is relevant.
	TrustedBaseImagesEnabled    pulumi.BoolPtrInput
	VulnerabilityExploitability pulumi.BoolPtrInput
	VulnerabilityScoreRanges    pulumi.IntArrayInput
	// List of whitelisted licenses.
	WhitelistedLicenses pulumi.StringArrayInput
	// Indicates if license blacklist is relevant.
	WhitelistedLicensesEnabled pulumi.BoolPtrInput
}

func (VmwareAssurancePolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*vmwareAssurancePolicyState)(nil)).Elem()
}

type vmwareAssurancePolicyArgs struct {
	// Aggregated vulnerability information.
	AggregatedVulnerability map[string]string `pulumi:"aggregatedVulnerability"`
	// List of explicitly allowed images.
	AllowedImages     []string `pulumi:"allowedImages"`
	ApplicationScopes []string `pulumi:"applicationScopes"`
	// What type of assurance policy is described.
	AssuranceType *string `pulumi:"assuranceType"`
	// Indicates if auditing for failures.
	AuditOnFailure *bool `pulumi:"auditOnFailure"`
	// Name of user account that created the policy.
	Author             *string                             `pulumi:"author"`
	AutoScanConfigured *bool                               `pulumi:"autoScanConfigured"`
	AutoScanEnabled    *bool                               `pulumi:"autoScanEnabled"`
	AutoScanTimes      []VmwareAssurancePolicyAutoScanTime `pulumi:"autoScanTimes"`
	// List of function's forbidden permissions.
	BlacklistPermissions []string `pulumi:"blacklistPermissions"`
	// Indicates if blacklist permissions is relevant.
	BlacklistPermissionsEnabled *bool `pulumi:"blacklistPermissionsEnabled"`
	// List of blacklisted licenses.
	BlacklistedLicenses []string `pulumi:"blacklistedLicenses"`
	// Indicates if license blacklist is relevant.
	BlacklistedLicensesEnabled *bool `pulumi:"blacklistedLicensesEnabled"`
	// Indicates if failed images are blocked.
	BlockFailed         *bool `pulumi:"blockFailed"`
	ControlExcludeNoFix *bool `pulumi:"controlExcludeNoFix"`
	// List of Custom user scripts for checks.
	CustomChecks []VmwareAssurancePolicyCustomCheck `pulumi:"customChecks"`
	// Indicates if scanning should include custom checks.
	CustomChecksEnabled   *bool   `pulumi:"customChecksEnabled"`
	CustomSeverity        *string `pulumi:"customSeverity"`
	CustomSeverityEnabled *bool   `pulumi:"customSeverityEnabled"`
	// Indicates if CVEs blacklist is relevant.
	CvesBlackListEnabled *bool `pulumi:"cvesBlackListEnabled"`
	// List of cves blacklisted items.
	CvesBlackLists []string `pulumi:"cvesBlackLists"`
	// Indicates if cves whitelist is relevant.
	CvesWhiteListEnabled *bool `pulumi:"cvesWhiteListEnabled"`
	// List of cves whitelisted licenses
	CvesWhiteLists []string `pulumi:"cvesWhiteLists"`
	// Identifier of the cvss severity.
	CvssSeverity *string `pulumi:"cvssSeverity"`
	// Indicates if the cvss severity is scanned.
	CvssSeverityEnabled *bool `pulumi:"cvssSeverityEnabled"`
	// Indicates that policy should ignore cvss cases that do not have a known fix.
	CvssSeverityExcludeNoFix *bool    `pulumi:"cvssSeverityExcludeNoFix"`
	Description              *string  `pulumi:"description"`
	DisallowExploitTypes     []string `pulumi:"disallowExploitTypes"`
	// Indicates if malware should block the image.
	DisallowMalware *bool `pulumi:"disallowMalware"`
	// Checks the host according to the Docker CIS benchmark, if Docker is found on the host.
	DockerCisEnabled *bool `pulumi:"dockerCisEnabled"`
	// Name of the container image.
	Domain                           *string  `pulumi:"domain"`
	DomainName                       *string  `pulumi:"domainName"`
	DtaEnabled                       *bool    `pulumi:"dtaEnabled"`
	DtaSeverity                      *string  `pulumi:"dtaSeverity"`
	Enabled                          *bool    `pulumi:"enabled"`
	Enforce                          *bool    `pulumi:"enforce"`
	EnforceAfterDays                 *int     `pulumi:"enforceAfterDays"`
	EnforceExcessivePermissions      *bool    `pulumi:"enforceExcessivePermissions"`
	ExceptionalMonitoredMalwarePaths []string `pulumi:"exceptionalMonitoredMalwarePaths"`
	ExcludeApplicationScopes         []string `pulumi:"excludeApplicationScopes"`
	// Indicates if cicd failures will fail the image.
	FailCicd                         *bool                                 `pulumi:"failCicd"`
	ForbiddenLabels                  []VmwareAssurancePolicyForbiddenLabel `pulumi:"forbiddenLabels"`
	ForbiddenLabelsEnabled           *bool                                 `pulumi:"forbiddenLabelsEnabled"`
	ForceMicroenforcer               *bool                                 `pulumi:"forceMicroenforcer"`
	FunctionIntegrityEnabled         *bool                                 `pulumi:"functionIntegrityEnabled"`
	IgnoreBaseImageVln               *bool                                 `pulumi:"ignoreBaseImageVln"`
	IgnoreRecentlyPublishedVln       *bool                                 `pulumi:"ignoreRecentlyPublishedVln"`
	IgnoreRecentlyPublishedVlnPeriod *int                                  `pulumi:"ignoreRecentlyPublishedVlnPeriod"`
	// Indicates if risk resources are ignored.
	IgnoreRiskResourcesEnabled *bool `pulumi:"ignoreRiskResourcesEnabled"`
	// List of ignored risk resources.
	IgnoredRiskResources      []string `pulumi:"ignoredRiskResources"`
	IgnoredSensitiveResources []string `pulumi:"ignoredSensitiveResources"`
	// List of images.
	Images []string `pulumi:"images"`
	// Performs a Kubernetes CIS benchmark check for the host.
	KubeCisEnabled *bool `pulumi:"kubeCisEnabled"`
	// List of Kubernetes controls.
	KubernetesControls       []VmwareAssurancePolicyKubernetesControl `pulumi:"kubernetesControls"`
	KubernetesControlsAvdIds []string                                 `pulumi:"kubernetesControlsAvdIds"`
	KubernetesControlsNames  []string                                 `pulumi:"kubernetesControlsNames"`
	// List of labels.
	Labels          []string `pulumi:"labels"`
	Lastupdate      *string  `pulumi:"lastupdate"`
	LinuxCisEnabled *bool    `pulumi:"linuxCisEnabled"`
	MalwareAction   *string  `pulumi:"malwareAction"`
	// Value of allowed maximum score.
	MaximumScore *float64 `pulumi:"maximumScore"`
	// Indicates if exceeding the maximum score is scanned.
	MaximumScoreEnabled      *bool    `pulumi:"maximumScoreEnabled"`
	MaximumScoreExcludeNoFix *bool    `pulumi:"maximumScoreExcludeNoFix"`
	MonitoredMalwarePaths    []string `pulumi:"monitoredMalwarePaths"`
	Name                     *string  `pulumi:"name"`
	// Indicates if raise a warning for images that should only be run as root.
	OnlyNoneRootUsers         *bool `pulumi:"onlyNoneRootUsers"`
	OpenshiftHardeningEnabled *bool `pulumi:"openshiftHardeningEnabled"`
	// Indicates if packages blacklist is relevant.
	PackagesBlackListEnabled *bool `pulumi:"packagesBlackListEnabled"`
	// List of blacklisted images.
	PackagesBlackLists []VmwareAssurancePolicyPackagesBlackList `pulumi:"packagesBlackLists"`
	// Indicates if packages whitelist is relevant.
	PackagesWhiteListEnabled *bool `pulumi:"packagesWhiteListEnabled"`
	// List of whitelisted images.
	PackagesWhiteLists      []VmwareAssurancePolicyPackagesWhiteList `pulumi:"packagesWhiteLists"`
	PartialResultsImageFail *bool                                    `pulumi:"partialResultsImageFail"`
	Permission              *string                                  `pulumi:"permission"`
	PolicySettings          *VmwareAssurancePolicyPolicySettings     `pulumi:"policySettings"`
	ReadOnly                *bool                                    `pulumi:"readOnly"`
	// List of registries.
	Registries            []string                             `pulumi:"registries"`
	Registry              *string                              `pulumi:"registry"`
	RequiredLabels        []VmwareAssurancePolicyRequiredLabel `pulumi:"requiredLabels"`
	RequiredLabelsEnabled *bool                                `pulumi:"requiredLabelsEnabled"`
	ScanMalwareInArchives *bool                                `pulumi:"scanMalwareInArchives"`
	ScanNfsMounts         *bool                                `pulumi:"scanNfsMounts"`
	ScanProcessMemory     *bool                                `pulumi:"scanProcessMemory"`
	// Indicates if scan should include sensitive data in the image.
	ScanSensitiveData   *bool `pulumi:"scanSensitiveData"`
	ScanWindowsRegistry *bool `pulumi:"scanWindowsRegistry"`
	// Indicates if scanning should include scap.
	ScapEnabled *bool `pulumi:"scapEnabled"`
	// List of SCAP user scripts for checks.
	ScapFiles []string                     `pulumi:"scapFiles"`
	Scopes    []VmwareAssurancePolicyScope `pulumi:"scopes"`
	// List of trusted images.
	TrustedBaseImages []VmwareAssurancePolicyTrustedBaseImage `pulumi:"trustedBaseImages"`
	// Indicates if list of trusted base images is relevant.
	TrustedBaseImagesEnabled    *bool `pulumi:"trustedBaseImagesEnabled"`
	VulnerabilityExploitability *bool `pulumi:"vulnerabilityExploitability"`
	VulnerabilityScoreRanges    []int `pulumi:"vulnerabilityScoreRanges"`
	// List of whitelisted licenses.
	WhitelistedLicenses []string `pulumi:"whitelistedLicenses"`
	// Indicates if license blacklist is relevant.
	WhitelistedLicensesEnabled *bool `pulumi:"whitelistedLicensesEnabled"`
}

// The set of arguments for constructing a VmwareAssurancePolicy resource.
type VmwareAssurancePolicyArgs struct {
	// Aggregated vulnerability information.
	AggregatedVulnerability pulumi.StringMapInput
	// List of explicitly allowed images.
	AllowedImages     pulumi.StringArrayInput
	ApplicationScopes pulumi.StringArrayInput
	// What type of assurance policy is described.
	AssuranceType pulumi.StringPtrInput
	// Indicates if auditing for failures.
	AuditOnFailure pulumi.BoolPtrInput
	// Name of user account that created the policy.
	Author             pulumi.StringPtrInput
	AutoScanConfigured pulumi.BoolPtrInput
	AutoScanEnabled    pulumi.BoolPtrInput
	AutoScanTimes      VmwareAssurancePolicyAutoScanTimeArrayInput
	// List of function's forbidden permissions.
	BlacklistPermissions pulumi.StringArrayInput
	// Indicates if blacklist permissions is relevant.
	BlacklistPermissionsEnabled pulumi.BoolPtrInput
	// List of blacklisted licenses.
	BlacklistedLicenses pulumi.StringArrayInput
	// Indicates if license blacklist is relevant.
	BlacklistedLicensesEnabled pulumi.BoolPtrInput
	// Indicates if failed images are blocked.
	BlockFailed         pulumi.BoolPtrInput
	ControlExcludeNoFix pulumi.BoolPtrInput
	// List of Custom user scripts for checks.
	CustomChecks VmwareAssurancePolicyCustomCheckArrayInput
	// Indicates if scanning should include custom checks.
	CustomChecksEnabled   pulumi.BoolPtrInput
	CustomSeverity        pulumi.StringPtrInput
	CustomSeverityEnabled pulumi.BoolPtrInput
	// Indicates if CVEs blacklist is relevant.
	CvesBlackListEnabled pulumi.BoolPtrInput
	// List of cves blacklisted items.
	CvesBlackLists pulumi.StringArrayInput
	// Indicates if cves whitelist is relevant.
	CvesWhiteListEnabled pulumi.BoolPtrInput
	// List of cves whitelisted licenses
	CvesWhiteLists pulumi.StringArrayInput
	// Identifier of the cvss severity.
	CvssSeverity pulumi.StringPtrInput
	// Indicates if the cvss severity is scanned.
	CvssSeverityEnabled pulumi.BoolPtrInput
	// Indicates that policy should ignore cvss cases that do not have a known fix.
	CvssSeverityExcludeNoFix pulumi.BoolPtrInput
	Description              pulumi.StringPtrInput
	DisallowExploitTypes     pulumi.StringArrayInput
	// Indicates if malware should block the image.
	DisallowMalware pulumi.BoolPtrInput
	// Checks the host according to the Docker CIS benchmark, if Docker is found on the host.
	DockerCisEnabled pulumi.BoolPtrInput
	// Name of the container image.
	Domain                           pulumi.StringPtrInput
	DomainName                       pulumi.StringPtrInput
	DtaEnabled                       pulumi.BoolPtrInput
	DtaSeverity                      pulumi.StringPtrInput
	Enabled                          pulumi.BoolPtrInput
	Enforce                          pulumi.BoolPtrInput
	EnforceAfterDays                 pulumi.IntPtrInput
	EnforceExcessivePermissions      pulumi.BoolPtrInput
	ExceptionalMonitoredMalwarePaths pulumi.StringArrayInput
	ExcludeApplicationScopes         pulumi.StringArrayInput
	// Indicates if cicd failures will fail the image.
	FailCicd                         pulumi.BoolPtrInput
	ForbiddenLabels                  VmwareAssurancePolicyForbiddenLabelArrayInput
	ForbiddenLabelsEnabled           pulumi.BoolPtrInput
	ForceMicroenforcer               pulumi.BoolPtrInput
	FunctionIntegrityEnabled         pulumi.BoolPtrInput
	IgnoreBaseImageVln               pulumi.BoolPtrInput
	IgnoreRecentlyPublishedVln       pulumi.BoolPtrInput
	IgnoreRecentlyPublishedVlnPeriod pulumi.IntPtrInput
	// Indicates if risk resources are ignored.
	IgnoreRiskResourcesEnabled pulumi.BoolPtrInput
	// List of ignored risk resources.
	IgnoredRiskResources      pulumi.StringArrayInput
	IgnoredSensitiveResources pulumi.StringArrayInput
	// List of images.
	Images pulumi.StringArrayInput
	// Performs a Kubernetes CIS benchmark check for the host.
	KubeCisEnabled pulumi.BoolPtrInput
	// List of Kubernetes controls.
	KubernetesControls       VmwareAssurancePolicyKubernetesControlArrayInput
	KubernetesControlsAvdIds pulumi.StringArrayInput
	KubernetesControlsNames  pulumi.StringArrayInput
	// List of labels.
	Labels          pulumi.StringArrayInput
	Lastupdate      pulumi.StringPtrInput
	LinuxCisEnabled pulumi.BoolPtrInput
	MalwareAction   pulumi.StringPtrInput
	// Value of allowed maximum score.
	MaximumScore pulumi.Float64PtrInput
	// Indicates if exceeding the maximum score is scanned.
	MaximumScoreEnabled      pulumi.BoolPtrInput
	MaximumScoreExcludeNoFix pulumi.BoolPtrInput
	MonitoredMalwarePaths    pulumi.StringArrayInput
	Name                     pulumi.StringPtrInput
	// Indicates if raise a warning for images that should only be run as root.
	OnlyNoneRootUsers         pulumi.BoolPtrInput
	OpenshiftHardeningEnabled pulumi.BoolPtrInput
	// Indicates if packages blacklist is relevant.
	PackagesBlackListEnabled pulumi.BoolPtrInput
	// List of blacklisted images.
	PackagesBlackLists VmwareAssurancePolicyPackagesBlackListArrayInput
	// Indicates if packages whitelist is relevant.
	PackagesWhiteListEnabled pulumi.BoolPtrInput
	// List of whitelisted images.
	PackagesWhiteLists      VmwareAssurancePolicyPackagesWhiteListArrayInput
	PartialResultsImageFail pulumi.BoolPtrInput
	Permission              pulumi.StringPtrInput
	PolicySettings          VmwareAssurancePolicyPolicySettingsPtrInput
	ReadOnly                pulumi.BoolPtrInput
	// List of registries.
	Registries            pulumi.StringArrayInput
	Registry              pulumi.StringPtrInput
	RequiredLabels        VmwareAssurancePolicyRequiredLabelArrayInput
	RequiredLabelsEnabled pulumi.BoolPtrInput
	ScanMalwareInArchives pulumi.BoolPtrInput
	ScanNfsMounts         pulumi.BoolPtrInput
	ScanProcessMemory     pulumi.BoolPtrInput
	// Indicates if scan should include sensitive data in the image.
	ScanSensitiveData   pulumi.BoolPtrInput
	ScanWindowsRegistry pulumi.BoolPtrInput
	// Indicates if scanning should include scap.
	ScapEnabled pulumi.BoolPtrInput
	// List of SCAP user scripts for checks.
	ScapFiles pulumi.StringArrayInput
	Scopes    VmwareAssurancePolicyScopeArrayInput
	// List of trusted images.
	TrustedBaseImages VmwareAssurancePolicyTrustedBaseImageArrayInput
	// Indicates if list of trusted base images is relevant.
	TrustedBaseImagesEnabled    pulumi.BoolPtrInput
	VulnerabilityExploitability pulumi.BoolPtrInput
	VulnerabilityScoreRanges    pulumi.IntArrayInput
	// List of whitelisted licenses.
	WhitelistedLicenses pulumi.StringArrayInput
	// Indicates if license blacklist is relevant.
	WhitelistedLicensesEnabled pulumi.BoolPtrInput
}

func (VmwareAssurancePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vmwareAssurancePolicyArgs)(nil)).Elem()
}

type VmwareAssurancePolicyInput interface {
	pulumi.Input

	ToVmwareAssurancePolicyOutput() VmwareAssurancePolicyOutput
	ToVmwareAssurancePolicyOutputWithContext(ctx context.Context) VmwareAssurancePolicyOutput
}

func (*VmwareAssurancePolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**VmwareAssurancePolicy)(nil)).Elem()
}

func (i *VmwareAssurancePolicy) ToVmwareAssurancePolicyOutput() VmwareAssurancePolicyOutput {
	return i.ToVmwareAssurancePolicyOutputWithContext(context.Background())
}

func (i *VmwareAssurancePolicy) ToVmwareAssurancePolicyOutputWithContext(ctx context.Context) VmwareAssurancePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmwareAssurancePolicyOutput)
}

// VmwareAssurancePolicyArrayInput is an input type that accepts VmwareAssurancePolicyArray and VmwareAssurancePolicyArrayOutput values.
// You can construct a concrete instance of `VmwareAssurancePolicyArrayInput` via:
//
//	VmwareAssurancePolicyArray{ VmwareAssurancePolicyArgs{...} }
type VmwareAssurancePolicyArrayInput interface {
	pulumi.Input

	ToVmwareAssurancePolicyArrayOutput() VmwareAssurancePolicyArrayOutput
	ToVmwareAssurancePolicyArrayOutputWithContext(context.Context) VmwareAssurancePolicyArrayOutput
}

type VmwareAssurancePolicyArray []VmwareAssurancePolicyInput

func (VmwareAssurancePolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VmwareAssurancePolicy)(nil)).Elem()
}

func (i VmwareAssurancePolicyArray) ToVmwareAssurancePolicyArrayOutput() VmwareAssurancePolicyArrayOutput {
	return i.ToVmwareAssurancePolicyArrayOutputWithContext(context.Background())
}

func (i VmwareAssurancePolicyArray) ToVmwareAssurancePolicyArrayOutputWithContext(ctx context.Context) VmwareAssurancePolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmwareAssurancePolicyArrayOutput)
}

// VmwareAssurancePolicyMapInput is an input type that accepts VmwareAssurancePolicyMap and VmwareAssurancePolicyMapOutput values.
// You can construct a concrete instance of `VmwareAssurancePolicyMapInput` via:
//
//	VmwareAssurancePolicyMap{ "key": VmwareAssurancePolicyArgs{...} }
type VmwareAssurancePolicyMapInput interface {
	pulumi.Input

	ToVmwareAssurancePolicyMapOutput() VmwareAssurancePolicyMapOutput
	ToVmwareAssurancePolicyMapOutputWithContext(context.Context) VmwareAssurancePolicyMapOutput
}

type VmwareAssurancePolicyMap map[string]VmwareAssurancePolicyInput

func (VmwareAssurancePolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VmwareAssurancePolicy)(nil)).Elem()
}

func (i VmwareAssurancePolicyMap) ToVmwareAssurancePolicyMapOutput() VmwareAssurancePolicyMapOutput {
	return i.ToVmwareAssurancePolicyMapOutputWithContext(context.Background())
}

func (i VmwareAssurancePolicyMap) ToVmwareAssurancePolicyMapOutputWithContext(ctx context.Context) VmwareAssurancePolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmwareAssurancePolicyMapOutput)
}

type VmwareAssurancePolicyOutput struct{ *pulumi.OutputState }

func (VmwareAssurancePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VmwareAssurancePolicy)(nil)).Elem()
}

func (o VmwareAssurancePolicyOutput) ToVmwareAssurancePolicyOutput() VmwareAssurancePolicyOutput {
	return o
}

func (o VmwareAssurancePolicyOutput) ToVmwareAssurancePolicyOutputWithContext(ctx context.Context) VmwareAssurancePolicyOutput {
	return o
}

// Aggregated vulnerability information.
func (o VmwareAssurancePolicyOutput) AggregatedVulnerability() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VmwareAssurancePolicy) pulumi.StringMapOutput { return v.AggregatedVulnerability }).(pulumi.StringMapOutput)
}

// List of explicitly allowed images.
func (o VmwareAssurancePolicyOutput) AllowedImages() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VmwareAssurancePolicy) pulumi.StringArrayOutput { return v.AllowedImages }).(pulumi.StringArrayOutput)
}

func (o VmwareAssurancePolicyOutput) ApplicationScopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VmwareAssurancePolicy) pulumi.StringArrayOutput { return v.ApplicationScopes }).(pulumi.StringArrayOutput)
}

// What type of assurance policy is described.
func (o VmwareAssurancePolicyOutput) AssuranceType() pulumi.StringOutput {
	return o.ApplyT(func(v *VmwareAssurancePolicy) pulumi.StringOutput { return v.AssuranceType }).(pulumi.StringOutput)
}

// Indicates if auditing for failures.
func (o VmwareAssurancePolicyOutput) AuditOnFailure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VmwareAssurancePolicy) pulumi.BoolPtrOutput { return v.AuditOnFailure }).(pulumi.BoolPtrOutput)
}

// Name of user account that created the policy.
func (o VmwareAssurancePolicyOutput) Author() pulumi.StringOutput {
	return o.ApplyT(func(v *VmwareAssurancePolicy) pulumi.StringOutput { return v.Author }).(pulumi.StringOutput)
}

func (o VmwareAssurancePolicyOutput) AutoScanConfigured() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VmwareAssurancePolicy) pulumi.BoolPtrOutput { return v.AutoScanConfigured }).(pulumi.BoolPtrOutput)
}

func (o VmwareAssurancePolicyOutput) AutoScanEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VmwareAssurancePolicy) pulumi.BoolPtrOutput { return v.AutoScanEnabled }).(pulumi.BoolPtrOutput)
}

func (o VmwareAssurancePolicyOutput) AutoScanTimes() VmwareAssurancePolicyAutoScanTimeArrayOutput {
	return o.ApplyT(func(v *VmwareAssurancePolicy) VmwareAssurancePolicyAutoScanTimeArrayOutput { return v.AutoScanTimes }).(VmwareAssurancePolicyAutoScanTimeArrayOutput)
}

// List of function's forbidden permissions.
func (o VmwareAssurancePolicyOutput) BlacklistPermissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VmwareAssurancePolicy) pulumi.StringArrayOutput { return v.BlacklistPermissions }).(pulumi.StringArrayOutput)
}

// Indicates if blacklist permissions is relevant.
func (o VmwareAssurancePolicyOutput) BlacklistPermissionsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VmwareAssurancePolicy) pulumi.BoolPtrOutput { return v.BlacklistPermissionsEnabled }).(pulumi.BoolPtrOutput)
}

// List of blacklisted licenses.
func (o VmwareAssurancePolicyOutput) BlacklistedLicenses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VmwareAssurancePolicy) pulumi.StringArrayOutput { return v.BlacklistedLicenses }).(pulumi.StringArrayOutput)
}

// Indicates if license blacklist is relevant.
func (o VmwareAssurancePolicyOutput) BlacklistedLicensesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VmwareAssurancePolicy) pulumi.BoolPtrOutput { return v.BlacklistedLicensesEnabled }).(pulumi.BoolPtrOutput)
}

// Indicates if failed images are blocked.
func (o VmwareAssurancePolicyOutput) BlockFailed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VmwareAssurancePolicy) pulumi.BoolPtrOutput { return v.BlockFailed }).(pulumi.BoolPtrOutput)
}

func (o VmwareAssurancePolicyOutput) ControlExcludeNoFix() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VmwareAssurancePolicy) pulumi.BoolPtrOutput { return v.ControlExcludeNoFix }).(pulumi.BoolPtrOutput)
}

// List of Custom user scripts for checks.
func (o VmwareAssurancePolicyOutput) CustomChecks() VmwareAssurancePolicyCustomCheckArrayOutput {
	return o.ApplyT(func(v *VmwareAssurancePolicy) VmwareAssurancePolicyCustomCheckArrayOutput { return v.CustomChecks }).(VmwareAssurancePolicyCustomCheckArrayOutput)
}

// Indicates if scanning should include custom checks.
func (o VmwareAssurancePolicyOutput) CustomChecksEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VmwareAssurancePolicy) pulumi.BoolPtrOutput { return v.CustomChecksEnabled }).(pulumi.BoolPtrOutput)
}

func (o VmwareAssurancePolicyOutput) CustomSeverity() pulumi.StringOutput {
	return o.ApplyT(func(v *VmwareAssurancePolicy) pulumi.StringOutput { return v.CustomSeverity }).(pulumi.StringOutput)
}

func (o VmwareAssurancePolicyOutput) CustomSeverityEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VmwareAssurancePolicy) pulumi.BoolPtrOutput { return v.CustomSeverityEnabled }).(pulumi.BoolPtrOutput)
}

// Indicates if CVEs blacklist is relevant.
func (o VmwareAssurancePolicyOutput) CvesBlackListEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VmwareAssurancePolicy) pulumi.BoolPtrOutput { return v.CvesBlackListEnabled }).(pulumi.BoolPtrOutput)
}

// List of cves blacklisted items.
func (o VmwareAssurancePolicyOutput) CvesBlackLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VmwareAssurancePolicy) pulumi.StringArrayOutput { return v.CvesBlackLists }).(pulumi.StringArrayOutput)
}

// Indicates if cves whitelist is relevant.
func (o VmwareAssurancePolicyOutput) CvesWhiteListEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VmwareAssurancePolicy) pulumi.BoolPtrOutput { return v.CvesWhiteListEnabled }).(pulumi.BoolPtrOutput)
}

// List of cves whitelisted licenses
func (o VmwareAssurancePolicyOutput) CvesWhiteLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VmwareAssurancePolicy) pulumi.StringArrayOutput { return v.CvesWhiteLists }).(pulumi.StringArrayOutput)
}

// Identifier of the cvss severity.
func (o VmwareAssurancePolicyOutput) CvssSeverity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VmwareAssurancePolicy) pulumi.StringPtrOutput { return v.CvssSeverity }).(pulumi.StringPtrOutput)
}

// Indicates if the cvss severity is scanned.
func (o VmwareAssurancePolicyOutput) CvssSeverityEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VmwareAssurancePolicy) pulumi.BoolPtrOutput { return v.CvssSeverityEnabled }).(pulumi.BoolPtrOutput)
}

// Indicates that policy should ignore cvss cases that do not have a known fix.
func (o VmwareAssurancePolicyOutput) CvssSeverityExcludeNoFix() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VmwareAssurancePolicy) pulumi.BoolPtrOutput { return v.CvssSeverityExcludeNoFix }).(pulumi.BoolPtrOutput)
}

func (o VmwareAssurancePolicyOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VmwareAssurancePolicy) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o VmwareAssurancePolicyOutput) DisallowExploitTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VmwareAssurancePolicy) pulumi.StringArrayOutput { return v.DisallowExploitTypes }).(pulumi.StringArrayOutput)
}

// Indicates if malware should block the image.
func (o VmwareAssurancePolicyOutput) DisallowMalware() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VmwareAssurancePolicy) pulumi.BoolPtrOutput { return v.DisallowMalware }).(pulumi.BoolPtrOutput)
}

// Checks the host according to the Docker CIS benchmark, if Docker is found on the host.
func (o VmwareAssurancePolicyOutput) DockerCisEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VmwareAssurancePolicy) pulumi.BoolPtrOutput { return v.DockerCisEnabled }).(pulumi.BoolPtrOutput)
}

// Name of the container image.
func (o VmwareAssurancePolicyOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VmwareAssurancePolicy) pulumi.StringPtrOutput { return v.Domain }).(pulumi.StringPtrOutput)
}

func (o VmwareAssurancePolicyOutput) DomainName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VmwareAssurancePolicy) pulumi.StringPtrOutput { return v.DomainName }).(pulumi.StringPtrOutput)
}

func (o VmwareAssurancePolicyOutput) DtaEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VmwareAssurancePolicy) pulumi.BoolPtrOutput { return v.DtaEnabled }).(pulumi.BoolPtrOutput)
}

func (o VmwareAssurancePolicyOutput) DtaSeverity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VmwareAssurancePolicy) pulumi.StringPtrOutput { return v.DtaSeverity }).(pulumi.StringPtrOutput)
}

func (o VmwareAssurancePolicyOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VmwareAssurancePolicy) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o VmwareAssurancePolicyOutput) Enforce() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VmwareAssurancePolicy) pulumi.BoolPtrOutput { return v.Enforce }).(pulumi.BoolPtrOutput)
}

func (o VmwareAssurancePolicyOutput) EnforceAfterDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VmwareAssurancePolicy) pulumi.IntPtrOutput { return v.EnforceAfterDays }).(pulumi.IntPtrOutput)
}

func (o VmwareAssurancePolicyOutput) EnforceExcessivePermissions() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VmwareAssurancePolicy) pulumi.BoolPtrOutput { return v.EnforceExcessivePermissions }).(pulumi.BoolPtrOutput)
}

func (o VmwareAssurancePolicyOutput) ExceptionalMonitoredMalwarePaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VmwareAssurancePolicy) pulumi.StringArrayOutput { return v.ExceptionalMonitoredMalwarePaths }).(pulumi.StringArrayOutput)
}

func (o VmwareAssurancePolicyOutput) ExcludeApplicationScopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VmwareAssurancePolicy) pulumi.StringArrayOutput { return v.ExcludeApplicationScopes }).(pulumi.StringArrayOutput)
}

// Indicates if cicd failures will fail the image.
func (o VmwareAssurancePolicyOutput) FailCicd() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VmwareAssurancePolicy) pulumi.BoolPtrOutput { return v.FailCicd }).(pulumi.BoolPtrOutput)
}

func (o VmwareAssurancePolicyOutput) ForbiddenLabels() VmwareAssurancePolicyForbiddenLabelArrayOutput {
	return o.ApplyT(func(v *VmwareAssurancePolicy) VmwareAssurancePolicyForbiddenLabelArrayOutput {
		return v.ForbiddenLabels
	}).(VmwareAssurancePolicyForbiddenLabelArrayOutput)
}

func (o VmwareAssurancePolicyOutput) ForbiddenLabelsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VmwareAssurancePolicy) pulumi.BoolPtrOutput { return v.ForbiddenLabelsEnabled }).(pulumi.BoolPtrOutput)
}

func (o VmwareAssurancePolicyOutput) ForceMicroenforcer() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VmwareAssurancePolicy) pulumi.BoolPtrOutput { return v.ForceMicroenforcer }).(pulumi.BoolPtrOutput)
}

func (o VmwareAssurancePolicyOutput) FunctionIntegrityEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VmwareAssurancePolicy) pulumi.BoolPtrOutput { return v.FunctionIntegrityEnabled }).(pulumi.BoolPtrOutput)
}

func (o VmwareAssurancePolicyOutput) IgnoreBaseImageVln() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VmwareAssurancePolicy) pulumi.BoolPtrOutput { return v.IgnoreBaseImageVln }).(pulumi.BoolPtrOutput)
}

func (o VmwareAssurancePolicyOutput) IgnoreRecentlyPublishedVln() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VmwareAssurancePolicy) pulumi.BoolPtrOutput { return v.IgnoreRecentlyPublishedVln }).(pulumi.BoolPtrOutput)
}

func (o VmwareAssurancePolicyOutput) IgnoreRecentlyPublishedVlnPeriod() pulumi.IntOutput {
	return o.ApplyT(func(v *VmwareAssurancePolicy) pulumi.IntOutput { return v.IgnoreRecentlyPublishedVlnPeriod }).(pulumi.IntOutput)
}

// Indicates if risk resources are ignored.
func (o VmwareAssurancePolicyOutput) IgnoreRiskResourcesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VmwareAssurancePolicy) pulumi.BoolPtrOutput { return v.IgnoreRiskResourcesEnabled }).(pulumi.BoolPtrOutput)
}

// List of ignored risk resources.
func (o VmwareAssurancePolicyOutput) IgnoredRiskResources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VmwareAssurancePolicy) pulumi.StringArrayOutput { return v.IgnoredRiskResources }).(pulumi.StringArrayOutput)
}

func (o VmwareAssurancePolicyOutput) IgnoredSensitiveResources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VmwareAssurancePolicy) pulumi.StringArrayOutput { return v.IgnoredSensitiveResources }).(pulumi.StringArrayOutput)
}

// List of images.
func (o VmwareAssurancePolicyOutput) Images() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VmwareAssurancePolicy) pulumi.StringArrayOutput { return v.Images }).(pulumi.StringArrayOutput)
}

// Performs a Kubernetes CIS benchmark check for the host.
func (o VmwareAssurancePolicyOutput) KubeCisEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VmwareAssurancePolicy) pulumi.BoolPtrOutput { return v.KubeCisEnabled }).(pulumi.BoolPtrOutput)
}

// List of Kubernetes controls.
func (o VmwareAssurancePolicyOutput) KubernetesControls() VmwareAssurancePolicyKubernetesControlArrayOutput {
	return o.ApplyT(func(v *VmwareAssurancePolicy) VmwareAssurancePolicyKubernetesControlArrayOutput {
		return v.KubernetesControls
	}).(VmwareAssurancePolicyKubernetesControlArrayOutput)
}

func (o VmwareAssurancePolicyOutput) KubernetesControlsAvdIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VmwareAssurancePolicy) pulumi.StringArrayOutput { return v.KubernetesControlsAvdIds }).(pulumi.StringArrayOutput)
}

func (o VmwareAssurancePolicyOutput) KubernetesControlsNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VmwareAssurancePolicy) pulumi.StringArrayOutput { return v.KubernetesControlsNames }).(pulumi.StringArrayOutput)
}

// List of labels.
func (o VmwareAssurancePolicyOutput) Labels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VmwareAssurancePolicy) pulumi.StringArrayOutput { return v.Labels }).(pulumi.StringArrayOutput)
}

func (o VmwareAssurancePolicyOutput) Lastupdate() pulumi.StringOutput {
	return o.ApplyT(func(v *VmwareAssurancePolicy) pulumi.StringOutput { return v.Lastupdate }).(pulumi.StringOutput)
}

func (o VmwareAssurancePolicyOutput) LinuxCisEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VmwareAssurancePolicy) pulumi.BoolPtrOutput { return v.LinuxCisEnabled }).(pulumi.BoolPtrOutput)
}

func (o VmwareAssurancePolicyOutput) MalwareAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VmwareAssurancePolicy) pulumi.StringPtrOutput { return v.MalwareAction }).(pulumi.StringPtrOutput)
}

// Value of allowed maximum score.
func (o VmwareAssurancePolicyOutput) MaximumScore() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *VmwareAssurancePolicy) pulumi.Float64PtrOutput { return v.MaximumScore }).(pulumi.Float64PtrOutput)
}

// Indicates if exceeding the maximum score is scanned.
func (o VmwareAssurancePolicyOutput) MaximumScoreEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VmwareAssurancePolicy) pulumi.BoolPtrOutput { return v.MaximumScoreEnabled }).(pulumi.BoolPtrOutput)
}

func (o VmwareAssurancePolicyOutput) MaximumScoreExcludeNoFix() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VmwareAssurancePolicy) pulumi.BoolPtrOutput { return v.MaximumScoreExcludeNoFix }).(pulumi.BoolPtrOutput)
}

func (o VmwareAssurancePolicyOutput) MonitoredMalwarePaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VmwareAssurancePolicy) pulumi.StringArrayOutput { return v.MonitoredMalwarePaths }).(pulumi.StringArrayOutput)
}

func (o VmwareAssurancePolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VmwareAssurancePolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Indicates if raise a warning for images that should only be run as root.
func (o VmwareAssurancePolicyOutput) OnlyNoneRootUsers() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VmwareAssurancePolicy) pulumi.BoolPtrOutput { return v.OnlyNoneRootUsers }).(pulumi.BoolPtrOutput)
}

func (o VmwareAssurancePolicyOutput) OpenshiftHardeningEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VmwareAssurancePolicy) pulumi.BoolPtrOutput { return v.OpenshiftHardeningEnabled }).(pulumi.BoolPtrOutput)
}

// Indicates if packages blacklist is relevant.
func (o VmwareAssurancePolicyOutput) PackagesBlackListEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VmwareAssurancePolicy) pulumi.BoolPtrOutput { return v.PackagesBlackListEnabled }).(pulumi.BoolPtrOutput)
}

// List of blacklisted images.
func (o VmwareAssurancePolicyOutput) PackagesBlackLists() VmwareAssurancePolicyPackagesBlackListArrayOutput {
	return o.ApplyT(func(v *VmwareAssurancePolicy) VmwareAssurancePolicyPackagesBlackListArrayOutput {
		return v.PackagesBlackLists
	}).(VmwareAssurancePolicyPackagesBlackListArrayOutput)
}

// Indicates if packages whitelist is relevant.
func (o VmwareAssurancePolicyOutput) PackagesWhiteListEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VmwareAssurancePolicy) pulumi.BoolPtrOutput { return v.PackagesWhiteListEnabled }).(pulumi.BoolPtrOutput)
}

// List of whitelisted images.
func (o VmwareAssurancePolicyOutput) PackagesWhiteLists() VmwareAssurancePolicyPackagesWhiteListArrayOutput {
	return o.ApplyT(func(v *VmwareAssurancePolicy) VmwareAssurancePolicyPackagesWhiteListArrayOutput {
		return v.PackagesWhiteLists
	}).(VmwareAssurancePolicyPackagesWhiteListArrayOutput)
}

func (o VmwareAssurancePolicyOutput) PartialResultsImageFail() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VmwareAssurancePolicy) pulumi.BoolPtrOutput { return v.PartialResultsImageFail }).(pulumi.BoolPtrOutput)
}

func (o VmwareAssurancePolicyOutput) Permission() pulumi.StringOutput {
	return o.ApplyT(func(v *VmwareAssurancePolicy) pulumi.StringOutput { return v.Permission }).(pulumi.StringOutput)
}

func (o VmwareAssurancePolicyOutput) PolicySettings() VmwareAssurancePolicyPolicySettingsOutput {
	return o.ApplyT(func(v *VmwareAssurancePolicy) VmwareAssurancePolicyPolicySettingsOutput { return v.PolicySettings }).(VmwareAssurancePolicyPolicySettingsOutput)
}

func (o VmwareAssurancePolicyOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VmwareAssurancePolicy) pulumi.BoolPtrOutput { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// List of registries.
func (o VmwareAssurancePolicyOutput) Registries() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VmwareAssurancePolicy) pulumi.StringArrayOutput { return v.Registries }).(pulumi.StringArrayOutput)
}

func (o VmwareAssurancePolicyOutput) Registry() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VmwareAssurancePolicy) pulumi.StringPtrOutput { return v.Registry }).(pulumi.StringPtrOutput)
}

func (o VmwareAssurancePolicyOutput) RequiredLabels() VmwareAssurancePolicyRequiredLabelArrayOutput {
	return o.ApplyT(func(v *VmwareAssurancePolicy) VmwareAssurancePolicyRequiredLabelArrayOutput { return v.RequiredLabels }).(VmwareAssurancePolicyRequiredLabelArrayOutput)
}

func (o VmwareAssurancePolicyOutput) RequiredLabelsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VmwareAssurancePolicy) pulumi.BoolPtrOutput { return v.RequiredLabelsEnabled }).(pulumi.BoolPtrOutput)
}

func (o VmwareAssurancePolicyOutput) ScanMalwareInArchives() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VmwareAssurancePolicy) pulumi.BoolPtrOutput { return v.ScanMalwareInArchives }).(pulumi.BoolPtrOutput)
}

func (o VmwareAssurancePolicyOutput) ScanNfsMounts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VmwareAssurancePolicy) pulumi.BoolPtrOutput { return v.ScanNfsMounts }).(pulumi.BoolPtrOutput)
}

func (o VmwareAssurancePolicyOutput) ScanProcessMemory() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VmwareAssurancePolicy) pulumi.BoolPtrOutput { return v.ScanProcessMemory }).(pulumi.BoolPtrOutput)
}

// Indicates if scan should include sensitive data in the image.
func (o VmwareAssurancePolicyOutput) ScanSensitiveData() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VmwareAssurancePolicy) pulumi.BoolPtrOutput { return v.ScanSensitiveData }).(pulumi.BoolPtrOutput)
}

func (o VmwareAssurancePolicyOutput) ScanWindowsRegistry() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VmwareAssurancePolicy) pulumi.BoolPtrOutput { return v.ScanWindowsRegistry }).(pulumi.BoolPtrOutput)
}

// Indicates if scanning should include scap.
func (o VmwareAssurancePolicyOutput) ScapEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VmwareAssurancePolicy) pulumi.BoolPtrOutput { return v.ScapEnabled }).(pulumi.BoolPtrOutput)
}

// List of SCAP user scripts for checks.
func (o VmwareAssurancePolicyOutput) ScapFiles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VmwareAssurancePolicy) pulumi.StringArrayOutput { return v.ScapFiles }).(pulumi.StringArrayOutput)
}

func (o VmwareAssurancePolicyOutput) Scopes() VmwareAssurancePolicyScopeArrayOutput {
	return o.ApplyT(func(v *VmwareAssurancePolicy) VmwareAssurancePolicyScopeArrayOutput { return v.Scopes }).(VmwareAssurancePolicyScopeArrayOutput)
}

// List of trusted images.
func (o VmwareAssurancePolicyOutput) TrustedBaseImages() VmwareAssurancePolicyTrustedBaseImageArrayOutput {
	return o.ApplyT(func(v *VmwareAssurancePolicy) VmwareAssurancePolicyTrustedBaseImageArrayOutput {
		return v.TrustedBaseImages
	}).(VmwareAssurancePolicyTrustedBaseImageArrayOutput)
}

// Indicates if list of trusted base images is relevant.
func (o VmwareAssurancePolicyOutput) TrustedBaseImagesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VmwareAssurancePolicy) pulumi.BoolPtrOutput { return v.TrustedBaseImagesEnabled }).(pulumi.BoolPtrOutput)
}

func (o VmwareAssurancePolicyOutput) VulnerabilityExploitability() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VmwareAssurancePolicy) pulumi.BoolPtrOutput { return v.VulnerabilityExploitability }).(pulumi.BoolPtrOutput)
}

func (o VmwareAssurancePolicyOutput) VulnerabilityScoreRanges() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *VmwareAssurancePolicy) pulumi.IntArrayOutput { return v.VulnerabilityScoreRanges }).(pulumi.IntArrayOutput)
}

// List of whitelisted licenses.
func (o VmwareAssurancePolicyOutput) WhitelistedLicenses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VmwareAssurancePolicy) pulumi.StringArrayOutput { return v.WhitelistedLicenses }).(pulumi.StringArrayOutput)
}

// Indicates if license blacklist is relevant.
func (o VmwareAssurancePolicyOutput) WhitelistedLicensesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VmwareAssurancePolicy) pulumi.BoolPtrOutput { return v.WhitelistedLicensesEnabled }).(pulumi.BoolPtrOutput)
}

type VmwareAssurancePolicyArrayOutput struct{ *pulumi.OutputState }

func (VmwareAssurancePolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VmwareAssurancePolicy)(nil)).Elem()
}

func (o VmwareAssurancePolicyArrayOutput) ToVmwareAssurancePolicyArrayOutput() VmwareAssurancePolicyArrayOutput {
	return o
}

func (o VmwareAssurancePolicyArrayOutput) ToVmwareAssurancePolicyArrayOutputWithContext(ctx context.Context) VmwareAssurancePolicyArrayOutput {
	return o
}

func (o VmwareAssurancePolicyArrayOutput) Index(i pulumi.IntInput) VmwareAssurancePolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VmwareAssurancePolicy {
		return vs[0].([]*VmwareAssurancePolicy)[vs[1].(int)]
	}).(VmwareAssurancePolicyOutput)
}

type VmwareAssurancePolicyMapOutput struct{ *pulumi.OutputState }

func (VmwareAssurancePolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VmwareAssurancePolicy)(nil)).Elem()
}

func (o VmwareAssurancePolicyMapOutput) ToVmwareAssurancePolicyMapOutput() VmwareAssurancePolicyMapOutput {
	return o
}

func (o VmwareAssurancePolicyMapOutput) ToVmwareAssurancePolicyMapOutputWithContext(ctx context.Context) VmwareAssurancePolicyMapOutput {
	return o
}

func (o VmwareAssurancePolicyMapOutput) MapIndex(k pulumi.StringInput) VmwareAssurancePolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VmwareAssurancePolicy {
		return vs[0].(map[string]*VmwareAssurancePolicy)[vs[1].(string)]
	}).(VmwareAssurancePolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VmwareAssurancePolicyInput)(nil)).Elem(), &VmwareAssurancePolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmwareAssurancePolicyArrayInput)(nil)).Elem(), VmwareAssurancePolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmwareAssurancePolicyMapInput)(nil)).Elem(), VmwareAssurancePolicyMap{})
	pulumi.RegisterOutputType(VmwareAssurancePolicyOutput{})
	pulumi.RegisterOutputType(VmwareAssurancePolicyArrayOutput{})
	pulumi.RegisterOutputType(VmwareAssurancePolicyMapOutput{})
}
