// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumiverse.aquasec;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumiverse.aquasec.inputs.AcknowledgeIssueArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class AcknowledgeArgs extends com.pulumi.resources.ResourceArgs {

    public static final AcknowledgeArgs Empty = new AcknowledgeArgs();

    /**
     * A comment describing the reason for the acknowledgment
     * 
     */
    @Import(name="comment", required=true)
    private Output<String> comment;

    /**
     * @return A comment describing the reason for the acknowledgment
     * 
     */
    public Output<String> comment() {
        return this.comment;
    }

    /**
     * A list of existing security acknowledges.
     * 
     */
    @Import(name="issues", required=true)
    private Output<List<AcknowledgeIssueArgs>> issues;

    /**
     * @return A list of existing security acknowledges.
     * 
     */
    public Output<List<AcknowledgeIssueArgs>> issues() {
        return this.issues;
    }

    private AcknowledgeArgs() {}

    private AcknowledgeArgs(AcknowledgeArgs $) {
        this.comment = $.comment;
        this.issues = $.issues;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AcknowledgeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AcknowledgeArgs $;

        public Builder() {
            $ = new AcknowledgeArgs();
        }

        public Builder(AcknowledgeArgs defaults) {
            $ = new AcknowledgeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param comment A comment describing the reason for the acknowledgment
         * 
         * @return builder
         * 
         */
        public Builder comment(Output<String> comment) {
            $.comment = comment;
            return this;
        }

        /**
         * @param comment A comment describing the reason for the acknowledgment
         * 
         * @return builder
         * 
         */
        public Builder comment(String comment) {
            return comment(Output.of(comment));
        }

        /**
         * @param issues A list of existing security acknowledges.
         * 
         * @return builder
         * 
         */
        public Builder issues(Output<List<AcknowledgeIssueArgs>> issues) {
            $.issues = issues;
            return this;
        }

        /**
         * @param issues A list of existing security acknowledges.
         * 
         * @return builder
         * 
         */
        public Builder issues(List<AcknowledgeIssueArgs> issues) {
            return issues(Output.of(issues));
        }

        /**
         * @param issues A list of existing security acknowledges.
         * 
         * @return builder
         * 
         */
        public Builder issues(AcknowledgeIssueArgs... issues) {
            return issues(List.of(issues));
        }

        public AcknowledgeArgs build() {
            $.comment = Objects.requireNonNull($.comment, "expected parameter 'comment' to be non-null");
            $.issues = Objects.requireNonNull($.issues, "expected parameter 'issues' to be non-null");
            return $;
        }
    }

}
