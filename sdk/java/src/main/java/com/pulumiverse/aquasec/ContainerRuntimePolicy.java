// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumiverse.aquasec;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumiverse.aquasec.ContainerRuntimePolicyArgs;
import com.pulumiverse.aquasec.Utilities;
import com.pulumiverse.aquasec.inputs.ContainerRuntimePolicyState;
import com.pulumiverse.aquasec.outputs.ContainerRuntimePolicyFileIntegrityMonitoring;
import com.pulumiverse.aquasec.outputs.ContainerRuntimePolicyMalwareScanOptions;
import com.pulumiverse.aquasec.outputs.ContainerRuntimePolicyScopeVariable;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.aquasec.ContainerRuntimePolicy;
 * import com.pulumi.aquasec.ContainerRuntimePolicyArgs;
 * import com.pulumi.aquasec.inputs.ContainerRuntimePolicyFileIntegrityMonitoringArgs;
 * import com.pulumi.aquasec.inputs.ContainerRuntimePolicyMalwareScanOptionsArgs;
 * import com.pulumi.aquasec.inputs.ContainerRuntimePolicyScopeVariableArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var containerRuntimePolicy = new ContainerRuntimePolicy(&#34;containerRuntimePolicy&#34;, ContainerRuntimePolicyArgs.builder()        
 *             .allowedExecutables(            
 *                 &#34;exe&#34;,
 *                 &#34;bin&#34;)
 *             .allowedRegistries(            
 *                 &#34;registry1&#34;,
 *                 &#34;registry2&#34;)
 *             .applicationScopes(&#34;Global&#34;)
 *             .auditAllNetworkActivity(true)
 *             .auditAllProcessesActivity(true)
 *             .auditFullCommandArguments(true)
 *             .blockAccessHostNetwork(true)
 *             .blockAddingCapabilities(true)
 *             .blockContainerExec(true)
 *             .blockCryptocurrencyMining(true)
 *             .blockFilelessExec(true)
 *             .blockLowPortBinding(true)
 *             .blockNonCompliantImages(true)
 *             .blockNonCompliantWorkloads(true)
 *             .blockNonK8sContainers(true)
 *             .blockPrivilegedContainers(true)
 *             .blockReverseShell(true)
 *             .blockRootUser(true)
 *             .blockUnregisteredImages(true)
 *             .blockUseIpcNamespace(true)
 *             .blockUsePidNamespace(true)
 *             .blockUseUserNamespace(true)
 *             .blockUseUtsNamespace(true)
 *             .blockedCapabilities(            
 *                 &#34;AUDIT_CONTROL&#34;,
 *                 &#34;AUDIT_WRITE&#34;)
 *             .blockedExecutables(            
 *                 &#34;exe1&#34;,
 *                 &#34;exe2&#34;)
 *             .blockedFiles(            
 *                 &#34;test1&#34;,
 *                 &#34;test2&#34;)
 *             .blockedInboundPorts(            
 *                 &#34;80&#34;,
 *                 &#34;8080&#34;)
 *             .blockedOutboundPorts(            
 *                 &#34;90&#34;,
 *                 &#34;9090&#34;)
 *             .blockedPackages(            
 *                 &#34;pkg&#34;,
 *                 &#34;pkg2&#34;)
 *             .blockedVolumes(            
 *                 &#34;blocked&#34;,
 *                 &#34;vol&#34;)
 *             .containerExecAllowedProcesses(            
 *                 &#34;proc1&#34;,
 *                 &#34;proc2&#34;)
 *             .description(&#34;container_runtime_policy&#34;)
 *             .enableDriftPrevention(true)
 *             .enableForkGuard(true)
 *             .enableIpReputationSecurity(true)
 *             .enablePortScanDetection(true)
 *             .enabled(true)
 *             .enforce(false)
 *             .exceptionalReadonlyFilesAndDirectories(            
 *                 &#34;readonly2&#34;,
 *                 &#34;/dir2/&#34;)
 *             .fileIntegrityMonitoring(ContainerRuntimePolicyFileIntegrityMonitoringArgs.builder()
 *                 .excludedPaths(&#34;expaths&#34;)
 *                 .excludedProcesses(&#34;exprocess&#34;)
 *                 .excludedUsers(&#34;expuser&#34;)
 *                 .monitorAttributes(true)
 *                 .monitorCreate(true)
 *                 .monitorDelete(true)
 *                 .monitorModify(true)
 *                 .monitorRead(true)
 *                 .monitoredPaths(&#34;paths&#34;)
 *                 .monitoredProcesses(&#34;process&#34;)
 *                 .monitoredUsers(&#34;user&#34;)
 *                 .build())
 *             .forkGuardProcessLimit(13)
 *             .limitNewPrivileges(true)
 *             .malwareScanOptions(ContainerRuntimePolicyMalwareScanOptionsArgs.builder()
 *                 .action(&#34;alert&#34;)
 *                 .enabled(true)
 *                 .build())
 *             .monitorSystemTimeChanges(&#34;true&#34;)
 *             .readonlyFilesAndDirectories(            
 *                 &#34;readonly&#34;,
 *                 &#34;/dir/&#34;)
 *             .reverseShellAllowedIps(            
 *                 &#34;ip1&#34;,
 *                 &#34;ip2&#34;)
 *             .reverseShellAllowedProcesses(            
 *                 &#34;proc1&#34;,
 *                 &#34;proc2&#34;)
 *             .scopeExpression(&#34;v1 || v2&#34;)
 *             .scopeVariables(            
 *                 ContainerRuntimePolicyScopeVariableArgs.builder()
 *                     .attribute(&#34;kubernetes.cluster&#34;)
 *                     .value(&#34;default&#34;)
 *                     .build(),
 *                 ContainerRuntimePolicyScopeVariableArgs.builder()
 *                     .attribute(&#34;kubernetes.label&#34;)
 *                     .name(&#34;app&#34;)
 *                     .value(&#34;aqua&#34;)
 *                     .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 */
@ResourceType(type="aquasec:index/containerRuntimePolicy:ContainerRuntimePolicy")
public class ContainerRuntimePolicy extends com.pulumi.resources.CustomResource {
    /**
     * List of executables that are allowed for the user.
     * 
     */
    @Export(name="allowedExecutables", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> allowedExecutables;

    /**
     * @return List of executables that are allowed for the user.
     * 
     */
    public Output<Optional<List<String>>> allowedExecutables() {
        return Codegen.optional(this.allowedExecutables);
    }
    /**
     * List of registries that allowed for running containers.
     * 
     */
    @Export(name="allowedRegistries", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> allowedRegistries;

    /**
     * @return List of registries that allowed for running containers.
     * 
     */
    public Output<Optional<List<String>>> allowedRegistries() {
        return Codegen.optional(this.allowedRegistries);
    }
    /**
     * Indicates the application scope of the service.
     * 
     */
    @Export(name="applicationScopes", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> applicationScopes;

    /**
     * @return Indicates the application scope of the service.
     * 
     */
    public Output<List<String>> applicationScopes() {
        return this.applicationScopes;
    }
    /**
     * If true, all network activity will be audited.
     * 
     */
    @Export(name="auditAllNetworkActivity", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> auditAllNetworkActivity;

    /**
     * @return If true, all network activity will be audited.
     * 
     */
    public Output<Optional<Boolean>> auditAllNetworkActivity() {
        return Codegen.optional(this.auditAllNetworkActivity);
    }
    /**
     * If true, all process activity will be audited.
     * 
     */
    @Export(name="auditAllProcessesActivity", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> auditAllProcessesActivity;

    /**
     * @return If true, all process activity will be audited.
     * 
     */
    public Output<Optional<Boolean>> auditAllProcessesActivity() {
        return Codegen.optional(this.auditAllProcessesActivity);
    }
    /**
     * If true, full command arguments will be audited.
     * 
     */
    @Export(name="auditFullCommandArguments", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> auditFullCommandArguments;

    /**
     * @return If true, full command arguments will be audited.
     * 
     */
    public Output<Optional<Boolean>> auditFullCommandArguments() {
        return Codegen.optional(this.auditFullCommandArguments);
    }
    /**
     * Username of the account that created the service.
     * 
     */
    @Export(name="author", refs={String.class}, tree="[0]")
    private Output<String> author;

    /**
     * @return Username of the account that created the service.
     * 
     */
    public Output<String> author() {
        return this.author;
    }
    /**
     * If true, prevent containers from running with access to host network.
     * 
     */
    @Export(name="blockAccessHostNetwork", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> blockAccessHostNetwork;

    /**
     * @return If true, prevent containers from running with access to host network.
     * 
     */
    public Output<Optional<Boolean>> blockAccessHostNetwork() {
        return Codegen.optional(this.blockAccessHostNetwork);
    }
    /**
     * If true, prevent containers from running with adding capabilities with `--cap-add` privilege.
     * 
     */
    @Export(name="blockAddingCapabilities", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> blockAddingCapabilities;

    /**
     * @return If true, prevent containers from running with adding capabilities with `--cap-add` privilege.
     * 
     */
    public Output<Optional<Boolean>> blockAddingCapabilities() {
        return Codegen.optional(this.blockAddingCapabilities);
    }
    /**
     * If true, exec into a container is prevented.
     * 
     */
    @Export(name="blockContainerExec", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> blockContainerExec;

    /**
     * @return If true, exec into a container is prevented.
     * 
     */
    public Output<Optional<Boolean>> blockContainerExec() {
        return Codegen.optional(this.blockContainerExec);
    }
    /**
     * Detect and prevent communication to DNS/IP addresses known to be used for Cryptocurrency Mining
     * 
     */
    @Export(name="blockCryptocurrencyMining", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> blockCryptocurrencyMining;

    /**
     * @return Detect and prevent communication to DNS/IP addresses known to be used for Cryptocurrency Mining
     * 
     */
    public Output<Optional<Boolean>> blockCryptocurrencyMining() {
        return Codegen.optional(this.blockCryptocurrencyMining);
    }
    /**
     * Detect and prevent running in-memory execution
     * 
     */
    @Export(name="blockFilelessExec", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> blockFilelessExec;

    /**
     * @return Detect and prevent running in-memory execution
     * 
     */
    public Output<Optional<Boolean>> blockFilelessExec() {
        return Codegen.optional(this.blockFilelessExec);
    }
    /**
     * If true, prevent containers from running with the capability to bind in port lower than 1024.
     * 
     */
    @Export(name="blockLowPortBinding", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> blockLowPortBinding;

    /**
     * @return If true, prevent containers from running with the capability to bind in port lower than 1024.
     * 
     */
    public Output<Optional<Boolean>> blockLowPortBinding() {
        return Codegen.optional(this.blockLowPortBinding);
    }
    /**
     * If true, running non-compliant image in the container is prevented.
     * 
     */
    @Export(name="blockNonCompliantImages", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> blockNonCompliantImages;

    /**
     * @return If true, running non-compliant image in the container is prevented.
     * 
     */
    public Output<Optional<Boolean>> blockNonCompliantImages() {
        return Codegen.optional(this.blockNonCompliantImages);
    }
    /**
     * If true, running containers in non-compliant pods is prevented.
     * 
     */
    @Export(name="blockNonCompliantWorkloads", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> blockNonCompliantWorkloads;

    /**
     * @return If true, running containers in non-compliant pods is prevented.
     * 
     */
    public Output<Optional<Boolean>> blockNonCompliantWorkloads() {
        return Codegen.optional(this.blockNonCompliantWorkloads);
    }
    /**
     * If true, running non-kubernetes containers is prevented.
     * 
     */
    @Export(name="blockNonK8sContainers", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> blockNonK8sContainers;

    /**
     * @return If true, running non-kubernetes containers is prevented.
     * 
     */
    public Output<Optional<Boolean>> blockNonK8sContainers() {
        return Codegen.optional(this.blockNonK8sContainers);
    }
    /**
     * If true, prevent containers from running with privileged container capability.
     * 
     */
    @Export(name="blockPrivilegedContainers", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> blockPrivilegedContainers;

    /**
     * @return If true, prevent containers from running with privileged container capability.
     * 
     */
    public Output<Optional<Boolean>> blockPrivilegedContainers() {
        return Codegen.optional(this.blockPrivilegedContainers);
    }
    /**
     * If true, reverse shell is prevented.
     * 
     */
    @Export(name="blockReverseShell", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> blockReverseShell;

    /**
     * @return If true, reverse shell is prevented.
     * 
     */
    public Output<Optional<Boolean>> blockReverseShell() {
        return Codegen.optional(this.blockReverseShell);
    }
    /**
     * If true, prevent containers from running with root user.
     * 
     */
    @Export(name="blockRootUser", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> blockRootUser;

    /**
     * @return If true, prevent containers from running with root user.
     * 
     */
    public Output<Optional<Boolean>> blockRootUser() {
        return Codegen.optional(this.blockRootUser);
    }
    /**
     * If true, running images in the container that are not registered in Aqua is prevented.
     * 
     */
    @Export(name="blockUnregisteredImages", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> blockUnregisteredImages;

    /**
     * @return If true, running images in the container that are not registered in Aqua is prevented.
     * 
     */
    public Output<Optional<Boolean>> blockUnregisteredImages() {
        return Codegen.optional(this.blockUnregisteredImages);
    }
    /**
     * If true, prevent containers from running with the privilege to use the IPC namespace.
     * 
     */
    @Export(name="blockUseIpcNamespace", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> blockUseIpcNamespace;

    /**
     * @return If true, prevent containers from running with the privilege to use the IPC namespace.
     * 
     */
    public Output<Optional<Boolean>> blockUseIpcNamespace() {
        return Codegen.optional(this.blockUseIpcNamespace);
    }
    /**
     * If true, prevent containers from running with the privilege to use the PID namespace.
     * 
     */
    @Export(name="blockUsePidNamespace", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> blockUsePidNamespace;

    /**
     * @return If true, prevent containers from running with the privilege to use the PID namespace.
     * 
     */
    public Output<Optional<Boolean>> blockUsePidNamespace() {
        return Codegen.optional(this.blockUsePidNamespace);
    }
    /**
     * If true, prevent containers from running with the privilege to use the user namespace.
     * 
     */
    @Export(name="blockUseUserNamespace", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> blockUseUserNamespace;

    /**
     * @return If true, prevent containers from running with the privilege to use the user namespace.
     * 
     */
    public Output<Optional<Boolean>> blockUseUserNamespace() {
        return Codegen.optional(this.blockUseUserNamespace);
    }
    /**
     * If true, prevent containers from running with the privilege to use the UTS namespace.
     * 
     */
    @Export(name="blockUseUtsNamespace", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> blockUseUtsNamespace;

    /**
     * @return If true, prevent containers from running with the privilege to use the UTS namespace.
     * 
     */
    public Output<Optional<Boolean>> blockUseUtsNamespace() {
        return Codegen.optional(this.blockUseUtsNamespace);
    }
    /**
     * If true, prevents containers from using specific Unix capabilities.
     * 
     */
    @Export(name="blockedCapabilities", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> blockedCapabilities;

    /**
     * @return If true, prevents containers from using specific Unix capabilities.
     * 
     */
    public Output<Optional<List<String>>> blockedCapabilities() {
        return Codegen.optional(this.blockedCapabilities);
    }
    /**
     * List of executables that are prevented from running in containers.
     * 
     */
    @Export(name="blockedExecutables", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> blockedExecutables;

    /**
     * @return List of executables that are prevented from running in containers.
     * 
     */
    public Output<Optional<List<String>>> blockedExecutables() {
        return Codegen.optional(this.blockedExecutables);
    }
    /**
     * List of files that are prevented from being read, modified and executed in the containers.
     * 
     */
    @Export(name="blockedFiles", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> blockedFiles;

    /**
     * @return List of files that are prevented from being read, modified and executed in the containers.
     * 
     */
    public Output<Optional<List<String>>> blockedFiles() {
        return Codegen.optional(this.blockedFiles);
    }
    /**
     * List of blocked inbound ports.
     * 
     */
    @Export(name="blockedInboundPorts", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> blockedInboundPorts;

    /**
     * @return List of blocked inbound ports.
     * 
     */
    public Output<Optional<List<String>>> blockedInboundPorts() {
        return Codegen.optional(this.blockedInboundPorts);
    }
    /**
     * List of blocked outbound ports.
     * 
     */
    @Export(name="blockedOutboundPorts", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> blockedOutboundPorts;

    /**
     * @return List of blocked outbound ports.
     * 
     */
    public Output<Optional<List<String>>> blockedOutboundPorts() {
        return Codegen.optional(this.blockedOutboundPorts);
    }
    /**
     * Prevent containers from reading, writing, or executing all files in the list of packages.
     * 
     */
    @Export(name="blockedPackages", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> blockedPackages;

    /**
     * @return Prevent containers from reading, writing, or executing all files in the list of packages.
     * 
     */
    public Output<Optional<List<String>>> blockedPackages() {
        return Codegen.optional(this.blockedPackages);
    }
    /**
     * List of volumes that are prevented from being mounted in the containers.
     * 
     */
    @Export(name="blockedVolumes", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> blockedVolumes;

    /**
     * @return List of volumes that are prevented from being mounted in the containers.
     * 
     */
    public Output<Optional<List<String>>> blockedVolumes() {
        return Codegen.optional(this.blockedVolumes);
    }
    /**
     * List of processes that will be allowed.
     * 
     */
    @Export(name="containerExecAllowedProcesses", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> containerExecAllowedProcesses;

    /**
     * @return List of processes that will be allowed.
     * 
     */
    public Output<Optional<List<String>>> containerExecAllowedProcesses() {
        return Codegen.optional(this.containerExecAllowedProcesses);
    }
    /**
     * The description of the container runtime policy
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return The description of the container runtime policy
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * If true, executables that are not in the original image is prevented from running.
     * 
     */
    @Export(name="enableDriftPrevention", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableDriftPrevention;

    /**
     * @return If true, executables that are not in the original image is prevented from running.
     * 
     */
    public Output<Optional<Boolean>> enableDriftPrevention() {
        return Codegen.optional(this.enableDriftPrevention);
    }
    /**
     * If true, fork bombs are prevented in the containers.
     * 
     */
    @Export(name="enableForkGuard", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableForkGuard;

    /**
     * @return If true, fork bombs are prevented in the containers.
     * 
     */
    public Output<Optional<Boolean>> enableForkGuard() {
        return Codegen.optional(this.enableForkGuard);
    }
    /**
     * If true, detect and prevent communication from containers to IP addresses known to have a bad reputation.
     * 
     */
    @Export(name="enableIpReputationSecurity", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableIpReputationSecurity;

    /**
     * @return If true, detect and prevent communication from containers to IP addresses known to have a bad reputation.
     * 
     */
    public Output<Optional<Boolean>> enableIpReputationSecurity() {
        return Codegen.optional(this.enableIpReputationSecurity);
    }
    /**
     * If true, detects port scanning behavior in the container.
     * 
     */
    @Export(name="enablePortScanDetection", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enablePortScanDetection;

    /**
     * @return If true, detects port scanning behavior in the container.
     * 
     */
    public Output<Optional<Boolean>> enablePortScanDetection() {
        return Codegen.optional(this.enablePortScanDetection);
    }
    /**
     * Indicates if the runtime policy is enabled or not.
     * 
     */
    @Export(name="enabled", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enabled;

    /**
     * @return Indicates if the runtime policy is enabled or not.
     * 
     */
    public Output<Optional<Boolean>> enabled() {
        return Codegen.optional(this.enabled);
    }
    /**
     * Indicates that policy should effect container execution (not just for audit).
     * 
     */
    @Export(name="enforce", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enforce;

    /**
     * @return Indicates that policy should effect container execution (not just for audit).
     * 
     */
    public Output<Optional<Boolean>> enforce() {
        return Codegen.optional(this.enforce);
    }
    /**
     * Indicates the number of days after which the runtime policy will be changed to enforce mode.
     * 
     */
    @Export(name="enforceAfterDays", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> enforceAfterDays;

    /**
     * @return Indicates the number of days after which the runtime policy will be changed to enforce mode.
     * 
     */
    public Output<Optional<Integer>> enforceAfterDays() {
        return Codegen.optional(this.enforceAfterDays);
    }
    /**
     * List of files and directories to be excluded from the read-only list.
     * 
     */
    @Export(name="exceptionalReadonlyFilesAndDirectories", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> exceptionalReadonlyFilesAndDirectories;

    /**
     * @return List of files and directories to be excluded from the read-only list.
     * 
     */
    public Output<Optional<List<String>>> exceptionalReadonlyFilesAndDirectories() {
        return Codegen.optional(this.exceptionalReadonlyFilesAndDirectories);
    }
    /**
     * Specify processes that will be allowed
     * 
     */
    @Export(name="execLockdownWhiteLists", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> execLockdownWhiteLists;

    /**
     * @return Specify processes that will be allowed
     * 
     */
    public Output<Optional<List<String>>> execLockdownWhiteLists() {
        return Codegen.optional(this.execLockdownWhiteLists);
    }
    /**
     * Configuration for file integrity monitoring.
     * 
     */
    @Export(name="fileIntegrityMonitoring", refs={ContainerRuntimePolicyFileIntegrityMonitoring.class}, tree="[0]")
    private Output</* @Nullable */ ContainerRuntimePolicyFileIntegrityMonitoring> fileIntegrityMonitoring;

    /**
     * @return Configuration for file integrity monitoring.
     * 
     */
    public Output<Optional<ContainerRuntimePolicyFileIntegrityMonitoring>> fileIntegrityMonitoring() {
        return Codegen.optional(this.fileIntegrityMonitoring);
    }
    /**
     * Process limit for the fork guard.
     * 
     */
    @Export(name="forkGuardProcessLimit", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> forkGuardProcessLimit;

    /**
     * @return Process limit for the fork guard.
     * 
     */
    public Output<Optional<Integer>> forkGuardProcessLimit() {
        return Codegen.optional(this.forkGuardProcessLimit);
    }
    /**
     * If true, prevents the container from obtaining new privileges at runtime. (only enabled in enforce mode)
     * 
     */
    @Export(name="limitNewPrivileges", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> limitNewPrivileges;

    /**
     * @return If true, prevents the container from obtaining new privileges at runtime. (only enabled in enforce mode)
     * 
     */
    public Output<Optional<Boolean>> limitNewPrivileges() {
        return Codegen.optional(this.limitNewPrivileges);
    }
    /**
     * Configuration for Real-Time Malware Protection.
     * 
     */
    @Export(name="malwareScanOptions", refs={ContainerRuntimePolicyMalwareScanOptions.class}, tree="[0]")
    private Output</* @Nullable */ ContainerRuntimePolicyMalwareScanOptions> malwareScanOptions;

    /**
     * @return Configuration for Real-Time Malware Protection.
     * 
     */
    public Output<Optional<ContainerRuntimePolicyMalwareScanOptions>> malwareScanOptions() {
        return Codegen.optional(this.malwareScanOptions);
    }
    /**
     * If true, system time changes will be monitored.
     * 
     */
    @Export(name="monitorSystemTimeChanges", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> monitorSystemTimeChanges;

    /**
     * @return If true, system time changes will be monitored.
     * 
     */
    public Output<Optional<Boolean>> monitorSystemTimeChanges() {
        return Codegen.optional(this.monitorSystemTimeChanges);
    }
    /**
     * Name of the container runtime policy
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of the container runtime policy
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * List of files and directories to be restricted as read-only
     * 
     */
    @Export(name="readonlyFilesAndDirectories", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> readonlyFilesAndDirectories;

    /**
     * @return List of files and directories to be restricted as read-only
     * 
     */
    public Output<Optional<List<String>>> readonlyFilesAndDirectories() {
        return Codegen.optional(this.readonlyFilesAndDirectories);
    }
    /**
     * List of IPs/ CIDRs that will be allowed
     * 
     */
    @Export(name="reverseShellAllowedIps", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> reverseShellAllowedIps;

    /**
     * @return List of IPs/ CIDRs that will be allowed
     * 
     */
    public Output<Optional<List<String>>> reverseShellAllowedIps() {
        return Codegen.optional(this.reverseShellAllowedIps);
    }
    /**
     * List of processes that will be allowed
     * 
     */
    @Export(name="reverseShellAllowedProcesses", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> reverseShellAllowedProcesses;

    /**
     * @return List of processes that will be allowed
     * 
     */
    public Output<Optional<List<String>>> reverseShellAllowedProcesses() {
        return Codegen.optional(this.reverseShellAllowedProcesses);
    }
    /**
     * Logical expression of how to compute the dependency of the scope variables.
     * 
     */
    @Export(name="scopeExpression", refs={String.class}, tree="[0]")
    private Output<String> scopeExpression;

    /**
     * @return Logical expression of how to compute the dependency of the scope variables.
     * 
     */
    public Output<String> scopeExpression() {
        return this.scopeExpression;
    }
    /**
     * List of scope attributes.
     * 
     */
    @Export(name="scopeVariables", refs={List.class,ContainerRuntimePolicyScopeVariable.class}, tree="[0,1]")
    private Output<List<ContainerRuntimePolicyScopeVariable>> scopeVariables;

    /**
     * @return List of scope attributes.
     * 
     */
    public Output<List<ContainerRuntimePolicyScopeVariable>> scopeVariables() {
        return this.scopeVariables;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ContainerRuntimePolicy(String name) {
        this(name, ContainerRuntimePolicyArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ContainerRuntimePolicy(String name, @Nullable ContainerRuntimePolicyArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ContainerRuntimePolicy(String name, @Nullable ContainerRuntimePolicyArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("aquasec:index/containerRuntimePolicy:ContainerRuntimePolicy", name, args == null ? ContainerRuntimePolicyArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private ContainerRuntimePolicy(String name, Output<String> id, @Nullable ContainerRuntimePolicyState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("aquasec:index/containerRuntimePolicy:ContainerRuntimePolicy", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ContainerRuntimePolicy get(String name, Output<String> id, @Nullable ContainerRuntimePolicyState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ContainerRuntimePolicy(name, id, state, options);
    }
}
