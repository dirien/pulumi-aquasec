// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumiverse.aquasec;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumiverse.aquasec.inputs.FunctionAssurancePolicyAutoScanTimeArgs;
import com.pulumiverse.aquasec.inputs.FunctionAssurancePolicyCustomCheckArgs;
import com.pulumiverse.aquasec.inputs.FunctionAssurancePolicyForbiddenLabelArgs;
import com.pulumiverse.aquasec.inputs.FunctionAssurancePolicyPackagesBlackListArgs;
import com.pulumiverse.aquasec.inputs.FunctionAssurancePolicyPackagesWhiteListArgs;
import com.pulumiverse.aquasec.inputs.FunctionAssurancePolicyRequiredLabelArgs;
import com.pulumiverse.aquasec.inputs.FunctionAssurancePolicyScopeArgs;
import com.pulumiverse.aquasec.inputs.FunctionAssurancePolicyTrustedBaseImageArgs;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FunctionAssurancePolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final FunctionAssurancePolicyArgs Empty = new FunctionAssurancePolicyArgs();

    /**
     * List of explicitly allowed images.
     * 
     */
    @Import(name="allowedImages")
    private @Nullable Output<List<String>> allowedImages;

    /**
     * @return List of explicitly allowed images.
     * 
     */
    public Optional<Output<List<String>>> allowedImages() {
        return Optional.ofNullable(this.allowedImages);
    }

    @Import(name="applicationScopes", required=true)
    private Output<List<String>> applicationScopes;

    public Output<List<String>> applicationScopes() {
        return this.applicationScopes;
    }

    /**
     * Indicates if auditing for failures.
     * 
     */
    @Import(name="auditOnFailure")
    private @Nullable Output<Boolean> auditOnFailure;

    /**
     * @return Indicates if auditing for failures.
     * 
     */
    public Optional<Output<Boolean>> auditOnFailure() {
        return Optional.ofNullable(this.auditOnFailure);
    }

    @Import(name="autoScanConfigured")
    private @Nullable Output<Boolean> autoScanConfigured;

    public Optional<Output<Boolean>> autoScanConfigured() {
        return Optional.ofNullable(this.autoScanConfigured);
    }

    @Import(name="autoScanEnabled")
    private @Nullable Output<Boolean> autoScanEnabled;

    public Optional<Output<Boolean>> autoScanEnabled() {
        return Optional.ofNullable(this.autoScanEnabled);
    }

    @Import(name="autoScanTimes")
    private @Nullable Output<List<FunctionAssurancePolicyAutoScanTimeArgs>> autoScanTimes;

    public Optional<Output<List<FunctionAssurancePolicyAutoScanTimeArgs>>> autoScanTimes() {
        return Optional.ofNullable(this.autoScanTimes);
    }

    /**
     * List of function&#39;s forbidden permissions.
     * 
     */
    @Import(name="blacklistPermissions")
    private @Nullable Output<List<String>> blacklistPermissions;

    /**
     * @return List of function&#39;s forbidden permissions.
     * 
     */
    public Optional<Output<List<String>>> blacklistPermissions() {
        return Optional.ofNullable(this.blacklistPermissions);
    }

    /**
     * Indicates if blacklist permissions is relevant.
     * 
     */
    @Import(name="blacklistPermissionsEnabled")
    private @Nullable Output<Boolean> blacklistPermissionsEnabled;

    /**
     * @return Indicates if blacklist permissions is relevant.
     * 
     */
    public Optional<Output<Boolean>> blacklistPermissionsEnabled() {
        return Optional.ofNullable(this.blacklistPermissionsEnabled);
    }

    /**
     * List of blacklisted licenses.
     * 
     */
    @Import(name="blacklistedLicenses")
    private @Nullable Output<List<String>> blacklistedLicenses;

    /**
     * @return List of blacklisted licenses.
     * 
     */
    public Optional<Output<List<String>>> blacklistedLicenses() {
        return Optional.ofNullable(this.blacklistedLicenses);
    }

    /**
     * Lndicates if license blacklist is relevant.
     * 
     */
    @Import(name="blacklistedLicensesEnabled")
    private @Nullable Output<Boolean> blacklistedLicensesEnabled;

    /**
     * @return Lndicates if license blacklist is relevant.
     * 
     */
    public Optional<Output<Boolean>> blacklistedLicensesEnabled() {
        return Optional.ofNullable(this.blacklistedLicensesEnabled);
    }

    /**
     * Indicates if failed images are blocked.
     * 
     */
    @Import(name="blockFailed")
    private @Nullable Output<Boolean> blockFailed;

    /**
     * @return Indicates if failed images are blocked.
     * 
     */
    public Optional<Output<Boolean>> blockFailed() {
        return Optional.ofNullable(this.blockFailed);
    }

    @Import(name="controlExcludeNoFix")
    private @Nullable Output<Boolean> controlExcludeNoFix;

    public Optional<Output<Boolean>> controlExcludeNoFix() {
        return Optional.ofNullable(this.controlExcludeNoFix);
    }

    /**
     * List of Custom user scripts for checks.
     * 
     */
    @Import(name="customChecks")
    private @Nullable Output<List<FunctionAssurancePolicyCustomCheckArgs>> customChecks;

    /**
     * @return List of Custom user scripts for checks.
     * 
     */
    public Optional<Output<List<FunctionAssurancePolicyCustomCheckArgs>>> customChecks() {
        return Optional.ofNullable(this.customChecks);
    }

    /**
     * Indicates if scanning should include custom checks.
     * 
     */
    @Import(name="customChecksEnabled")
    private @Nullable Output<Boolean> customChecksEnabled;

    /**
     * @return Indicates if scanning should include custom checks.
     * 
     */
    public Optional<Output<Boolean>> customChecksEnabled() {
        return Optional.ofNullable(this.customChecksEnabled);
    }

    @Import(name="customSeverityEnabled")
    private @Nullable Output<Boolean> customSeverityEnabled;

    public Optional<Output<Boolean>> customSeverityEnabled() {
        return Optional.ofNullable(this.customSeverityEnabled);
    }

    /**
     * Indicates if cves blacklist is relevant.
     * 
     */
    @Import(name="cvesBlackListEnabled")
    private @Nullable Output<Boolean> cvesBlackListEnabled;

    /**
     * @return Indicates if cves blacklist is relevant.
     * 
     */
    public Optional<Output<Boolean>> cvesBlackListEnabled() {
        return Optional.ofNullable(this.cvesBlackListEnabled);
    }

    /**
     * List of cves blacklisted items.
     * 
     */
    @Import(name="cvesBlackLists")
    private @Nullable Output<List<String>> cvesBlackLists;

    /**
     * @return List of cves blacklisted items.
     * 
     */
    public Optional<Output<List<String>>> cvesBlackLists() {
        return Optional.ofNullable(this.cvesBlackLists);
    }

    /**
     * Indicates if cves whitelist is relevant.
     * 
     */
    @Import(name="cvesWhiteListEnabled")
    private @Nullable Output<Boolean> cvesWhiteListEnabled;

    /**
     * @return Indicates if cves whitelist is relevant.
     * 
     */
    public Optional<Output<Boolean>> cvesWhiteListEnabled() {
        return Optional.ofNullable(this.cvesWhiteListEnabled);
    }

    /**
     * List of cves whitelisted licenses
     * 
     */
    @Import(name="cvesWhiteLists")
    private @Nullable Output<List<String>> cvesWhiteLists;

    /**
     * @return List of cves whitelisted licenses
     * 
     */
    public Optional<Output<List<String>>> cvesWhiteLists() {
        return Optional.ofNullable(this.cvesWhiteLists);
    }

    /**
     * Identifier of the cvss severity.
     * 
     */
    @Import(name="cvssSeverity")
    private @Nullable Output<String> cvssSeverity;

    /**
     * @return Identifier of the cvss severity.
     * 
     */
    public Optional<Output<String>> cvssSeverity() {
        return Optional.ofNullable(this.cvssSeverity);
    }

    /**
     * Indicates if the cvss severity is scanned.
     * 
     */
    @Import(name="cvssSeverityEnabled")
    private @Nullable Output<Boolean> cvssSeverityEnabled;

    /**
     * @return Indicates if the cvss severity is scanned.
     * 
     */
    public Optional<Output<Boolean>> cvssSeverityEnabled() {
        return Optional.ofNullable(this.cvssSeverityEnabled);
    }

    /**
     * Indicates that policy should ignore cvss cases that do not have a known fix.
     * 
     */
    @Import(name="cvssSeverityExcludeNoFix")
    private @Nullable Output<Boolean> cvssSeverityExcludeNoFix;

    /**
     * @return Indicates that policy should ignore cvss cases that do not have a known fix.
     * 
     */
    public Optional<Output<Boolean>> cvssSeverityExcludeNoFix() {
        return Optional.ofNullable(this.cvssSeverityExcludeNoFix);
    }

    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Indicates if malware should block the image.
     * 
     */
    @Import(name="disallowMalware")
    private @Nullable Output<Boolean> disallowMalware;

    /**
     * @return Indicates if malware should block the image.
     * 
     */
    public Optional<Output<Boolean>> disallowMalware() {
        return Optional.ofNullable(this.disallowMalware);
    }

    @Import(name="dockerCisEnabled")
    private @Nullable Output<Boolean> dockerCisEnabled;

    public Optional<Output<Boolean>> dockerCisEnabled() {
        return Optional.ofNullable(this.dockerCisEnabled);
    }

    /**
     * Name of the container image.
     * 
     */
    @Import(name="domain")
    private @Nullable Output<String> domain;

    /**
     * @return Name of the container image.
     * 
     */
    public Optional<Output<String>> domain() {
        return Optional.ofNullable(this.domain);
    }

    @Import(name="domainName")
    private @Nullable Output<String> domainName;

    public Optional<Output<String>> domainName() {
        return Optional.ofNullable(this.domainName);
    }

    @Import(name="dtaEnabled")
    private @Nullable Output<Boolean> dtaEnabled;

    public Optional<Output<Boolean>> dtaEnabled() {
        return Optional.ofNullable(this.dtaEnabled);
    }

    @Import(name="dtaSeverity")
    private @Nullable Output<String> dtaSeverity;

    public Optional<Output<String>> dtaSeverity() {
        return Optional.ofNullable(this.dtaSeverity);
    }

    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    @Import(name="enforce")
    private @Nullable Output<Boolean> enforce;

    public Optional<Output<Boolean>> enforce() {
        return Optional.ofNullable(this.enforce);
    }

    @Import(name="enforceAfterDays")
    private @Nullable Output<Integer> enforceAfterDays;

    public Optional<Output<Integer>> enforceAfterDays() {
        return Optional.ofNullable(this.enforceAfterDays);
    }

    @Import(name="enforceExcessivePermissions")
    private @Nullable Output<Boolean> enforceExcessivePermissions;

    public Optional<Output<Boolean>> enforceExcessivePermissions() {
        return Optional.ofNullable(this.enforceExcessivePermissions);
    }

    @Import(name="exceptionalMonitoredMalwarePaths")
    private @Nullable Output<List<String>> exceptionalMonitoredMalwarePaths;

    public Optional<Output<List<String>>> exceptionalMonitoredMalwarePaths() {
        return Optional.ofNullable(this.exceptionalMonitoredMalwarePaths);
    }

    /**
     * Indicates if cicd failures will fail the image.
     * 
     */
    @Import(name="failCicd")
    private @Nullable Output<Boolean> failCicd;

    /**
     * @return Indicates if cicd failures will fail the image.
     * 
     */
    public Optional<Output<Boolean>> failCicd() {
        return Optional.ofNullable(this.failCicd);
    }

    @Import(name="forbiddenLabels")
    private @Nullable Output<List<FunctionAssurancePolicyForbiddenLabelArgs>> forbiddenLabels;

    public Optional<Output<List<FunctionAssurancePolicyForbiddenLabelArgs>>> forbiddenLabels() {
        return Optional.ofNullable(this.forbiddenLabels);
    }

    @Import(name="forbiddenLabelsEnabled")
    private @Nullable Output<Boolean> forbiddenLabelsEnabled;

    public Optional<Output<Boolean>> forbiddenLabelsEnabled() {
        return Optional.ofNullable(this.forbiddenLabelsEnabled);
    }

    @Import(name="forceMicroenforcer")
    private @Nullable Output<Boolean> forceMicroenforcer;

    public Optional<Output<Boolean>> forceMicroenforcer() {
        return Optional.ofNullable(this.forceMicroenforcer);
    }

    @Import(name="functionIntegrityEnabled")
    private @Nullable Output<Boolean> functionIntegrityEnabled;

    public Optional<Output<Boolean>> functionIntegrityEnabled() {
        return Optional.ofNullable(this.functionIntegrityEnabled);
    }

    @Import(name="ignoreRecentlyPublishedVln")
    private @Nullable Output<Boolean> ignoreRecentlyPublishedVln;

    public Optional<Output<Boolean>> ignoreRecentlyPublishedVln() {
        return Optional.ofNullable(this.ignoreRecentlyPublishedVln);
    }

    /**
     * Indicates if risk resources are ignored.
     * 
     */
    @Import(name="ignoreRiskResourcesEnabled")
    private @Nullable Output<Boolean> ignoreRiskResourcesEnabled;

    /**
     * @return Indicates if risk resources are ignored.
     * 
     */
    public Optional<Output<Boolean>> ignoreRiskResourcesEnabled() {
        return Optional.ofNullable(this.ignoreRiskResourcesEnabled);
    }

    /**
     * List of ignored risk resources.
     * 
     */
    @Import(name="ignoredRiskResources")
    private @Nullable Output<List<String>> ignoredRiskResources;

    /**
     * @return List of ignored risk resources.
     * 
     */
    public Optional<Output<List<String>>> ignoredRiskResources() {
        return Optional.ofNullable(this.ignoredRiskResources);
    }

    /**
     * List of images.
     * 
     */
    @Import(name="images")
    private @Nullable Output<List<String>> images;

    /**
     * @return List of images.
     * 
     */
    public Optional<Output<List<String>>> images() {
        return Optional.ofNullable(this.images);
    }

    @Import(name="kubeCisEnabled")
    private @Nullable Output<Boolean> kubeCisEnabled;

    public Optional<Output<Boolean>> kubeCisEnabled() {
        return Optional.ofNullable(this.kubeCisEnabled);
    }

    /**
     * List of labels.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<List<String>> labels;

    /**
     * @return List of labels.
     * 
     */
    public Optional<Output<List<String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    @Import(name="malwareAction")
    private @Nullable Output<String> malwareAction;

    public Optional<Output<String>> malwareAction() {
        return Optional.ofNullable(this.malwareAction);
    }

    /**
     * Value of allowed maximum score.
     * 
     */
    @Import(name="maximumScore")
    private @Nullable Output<Double> maximumScore;

    /**
     * @return Value of allowed maximum score.
     * 
     */
    public Optional<Output<Double>> maximumScore() {
        return Optional.ofNullable(this.maximumScore);
    }

    /**
     * Indicates if exceeding the maximum score is scanned.
     * 
     */
    @Import(name="maximumScoreEnabled")
    private @Nullable Output<Boolean> maximumScoreEnabled;

    /**
     * @return Indicates if exceeding the maximum score is scanned.
     * 
     */
    public Optional<Output<Boolean>> maximumScoreEnabled() {
        return Optional.ofNullable(this.maximumScoreEnabled);
    }

    /**
     * Indicates that policy should ignore cases that do not have a known fix.
     * 
     */
    @Import(name="maximumScoreExcludeNoFix")
    private @Nullable Output<Boolean> maximumScoreExcludeNoFix;

    /**
     * @return Indicates that policy should ignore cases that do not have a known fix.
     * 
     */
    public Optional<Output<Boolean>> maximumScoreExcludeNoFix() {
        return Optional.ofNullable(this.maximumScoreExcludeNoFix);
    }

    @Import(name="monitoredMalwarePaths")
    private @Nullable Output<List<String>> monitoredMalwarePaths;

    public Optional<Output<List<String>>> monitoredMalwarePaths() {
        return Optional.ofNullable(this.monitoredMalwarePaths);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Indicates if raise a warning for images that should only be run as root.
     * 
     */
    @Import(name="onlyNoneRootUsers")
    private @Nullable Output<Boolean> onlyNoneRootUsers;

    /**
     * @return Indicates if raise a warning for images that should only be run as root.
     * 
     */
    public Optional<Output<Boolean>> onlyNoneRootUsers() {
        return Optional.ofNullable(this.onlyNoneRootUsers);
    }

    /**
     * Indicates if packages blacklist is relevant.
     * 
     */
    @Import(name="packagesBlackListEnabled")
    private @Nullable Output<Boolean> packagesBlackListEnabled;

    /**
     * @return Indicates if packages blacklist is relevant.
     * 
     */
    public Optional<Output<Boolean>> packagesBlackListEnabled() {
        return Optional.ofNullable(this.packagesBlackListEnabled);
    }

    /**
     * List of backlisted images.
     * 
     */
    @Import(name="packagesBlackLists")
    private @Nullable Output<List<FunctionAssurancePolicyPackagesBlackListArgs>> packagesBlackLists;

    /**
     * @return List of backlisted images.
     * 
     */
    public Optional<Output<List<FunctionAssurancePolicyPackagesBlackListArgs>>> packagesBlackLists() {
        return Optional.ofNullable(this.packagesBlackLists);
    }

    /**
     * Indicates if packages whitelist is relevant.
     * 
     */
    @Import(name="packagesWhiteListEnabled")
    private @Nullable Output<Boolean> packagesWhiteListEnabled;

    /**
     * @return Indicates if packages whitelist is relevant.
     * 
     */
    public Optional<Output<Boolean>> packagesWhiteListEnabled() {
        return Optional.ofNullable(this.packagesWhiteListEnabled);
    }

    /**
     * List of whitelisted images.
     * 
     */
    @Import(name="packagesWhiteLists")
    private @Nullable Output<List<FunctionAssurancePolicyPackagesWhiteListArgs>> packagesWhiteLists;

    /**
     * @return List of whitelisted images.
     * 
     */
    public Optional<Output<List<FunctionAssurancePolicyPackagesWhiteListArgs>>> packagesWhiteLists() {
        return Optional.ofNullable(this.packagesWhiteLists);
    }

    @Import(name="partialResultsImageFail")
    private @Nullable Output<Boolean> partialResultsImageFail;

    public Optional<Output<Boolean>> partialResultsImageFail() {
        return Optional.ofNullable(this.partialResultsImageFail);
    }

    @Import(name="readOnly")
    private @Nullable Output<Boolean> readOnly;

    public Optional<Output<Boolean>> readOnly() {
        return Optional.ofNullable(this.readOnly);
    }

    /**
     * List of registries.
     * 
     */
    @Import(name="registries")
    private @Nullable Output<List<String>> registries;

    /**
     * @return List of registries.
     * 
     */
    public Optional<Output<List<String>>> registries() {
        return Optional.ofNullable(this.registries);
    }

    @Import(name="registry")
    private @Nullable Output<String> registry;

    public Optional<Output<String>> registry() {
        return Optional.ofNullable(this.registry);
    }

    @Import(name="requiredLabels")
    private @Nullable Output<List<FunctionAssurancePolicyRequiredLabelArgs>> requiredLabels;

    public Optional<Output<List<FunctionAssurancePolicyRequiredLabelArgs>>> requiredLabels() {
        return Optional.ofNullable(this.requiredLabels);
    }

    @Import(name="requiredLabelsEnabled")
    private @Nullable Output<Boolean> requiredLabelsEnabled;

    public Optional<Output<Boolean>> requiredLabelsEnabled() {
        return Optional.ofNullable(this.requiredLabelsEnabled);
    }

    @Import(name="scanNfsMounts")
    private @Nullable Output<Boolean> scanNfsMounts;

    public Optional<Output<Boolean>> scanNfsMounts() {
        return Optional.ofNullable(this.scanNfsMounts);
    }

    /**
     * Indicates if scan should include sensitive data in the image.
     * 
     */
    @Import(name="scanSensitiveData")
    private @Nullable Output<Boolean> scanSensitiveData;

    /**
     * @return Indicates if scan should include sensitive data in the image.
     * 
     */
    public Optional<Output<Boolean>> scanSensitiveData() {
        return Optional.ofNullable(this.scanSensitiveData);
    }

    /**
     * Indicates if scanning should include scap.
     * 
     */
    @Import(name="scapEnabled")
    private @Nullable Output<Boolean> scapEnabled;

    /**
     * @return Indicates if scanning should include scap.
     * 
     */
    public Optional<Output<Boolean>> scapEnabled() {
        return Optional.ofNullable(this.scapEnabled);
    }

    /**
     * List of SCAP user scripts for checks.
     * 
     */
    @Import(name="scapFiles")
    private @Nullable Output<List<String>> scapFiles;

    /**
     * @return List of SCAP user scripts for checks.
     * 
     */
    public Optional<Output<List<String>>> scapFiles() {
        return Optional.ofNullable(this.scapFiles);
    }

    @Import(name="scopes")
    private @Nullable Output<List<FunctionAssurancePolicyScopeArgs>> scopes;

    public Optional<Output<List<FunctionAssurancePolicyScopeArgs>>> scopes() {
        return Optional.ofNullable(this.scopes);
    }

    /**
     * List of trusted images.
     * 
     */
    @Import(name="trustedBaseImages")
    private @Nullable Output<List<FunctionAssurancePolicyTrustedBaseImageArgs>> trustedBaseImages;

    /**
     * @return List of trusted images.
     * 
     */
    public Optional<Output<List<FunctionAssurancePolicyTrustedBaseImageArgs>>> trustedBaseImages() {
        return Optional.ofNullable(this.trustedBaseImages);
    }

    /**
     * Indicates if list of trusted base images is relevant.
     * 
     */
    @Import(name="trustedBaseImagesEnabled")
    private @Nullable Output<Boolean> trustedBaseImagesEnabled;

    /**
     * @return Indicates if list of trusted base images is relevant.
     * 
     */
    public Optional<Output<Boolean>> trustedBaseImagesEnabled() {
        return Optional.ofNullable(this.trustedBaseImagesEnabled);
    }

    /**
     * List of whitelisted licenses.
     * 
     */
    @Import(name="whitelistedLicenses")
    private @Nullable Output<List<String>> whitelistedLicenses;

    /**
     * @return List of whitelisted licenses.
     * 
     */
    public Optional<Output<List<String>>> whitelistedLicenses() {
        return Optional.ofNullable(this.whitelistedLicenses);
    }

    /**
     * Indicates if license blacklist is relevant.
     * 
     */
    @Import(name="whitelistedLicensesEnabled")
    private @Nullable Output<Boolean> whitelistedLicensesEnabled;

    /**
     * @return Indicates if license blacklist is relevant.
     * 
     */
    public Optional<Output<Boolean>> whitelistedLicensesEnabled() {
        return Optional.ofNullable(this.whitelistedLicensesEnabled);
    }

    private FunctionAssurancePolicyArgs() {}

    private FunctionAssurancePolicyArgs(FunctionAssurancePolicyArgs $) {
        this.allowedImages = $.allowedImages;
        this.applicationScopes = $.applicationScopes;
        this.auditOnFailure = $.auditOnFailure;
        this.autoScanConfigured = $.autoScanConfigured;
        this.autoScanEnabled = $.autoScanEnabled;
        this.autoScanTimes = $.autoScanTimes;
        this.blacklistPermissions = $.blacklistPermissions;
        this.blacklistPermissionsEnabled = $.blacklistPermissionsEnabled;
        this.blacklistedLicenses = $.blacklistedLicenses;
        this.blacklistedLicensesEnabled = $.blacklistedLicensesEnabled;
        this.blockFailed = $.blockFailed;
        this.controlExcludeNoFix = $.controlExcludeNoFix;
        this.customChecks = $.customChecks;
        this.customChecksEnabled = $.customChecksEnabled;
        this.customSeverityEnabled = $.customSeverityEnabled;
        this.cvesBlackListEnabled = $.cvesBlackListEnabled;
        this.cvesBlackLists = $.cvesBlackLists;
        this.cvesWhiteListEnabled = $.cvesWhiteListEnabled;
        this.cvesWhiteLists = $.cvesWhiteLists;
        this.cvssSeverity = $.cvssSeverity;
        this.cvssSeverityEnabled = $.cvssSeverityEnabled;
        this.cvssSeverityExcludeNoFix = $.cvssSeverityExcludeNoFix;
        this.description = $.description;
        this.disallowMalware = $.disallowMalware;
        this.dockerCisEnabled = $.dockerCisEnabled;
        this.domain = $.domain;
        this.domainName = $.domainName;
        this.dtaEnabled = $.dtaEnabled;
        this.dtaSeverity = $.dtaSeverity;
        this.enabled = $.enabled;
        this.enforce = $.enforce;
        this.enforceAfterDays = $.enforceAfterDays;
        this.enforceExcessivePermissions = $.enforceExcessivePermissions;
        this.exceptionalMonitoredMalwarePaths = $.exceptionalMonitoredMalwarePaths;
        this.failCicd = $.failCicd;
        this.forbiddenLabels = $.forbiddenLabels;
        this.forbiddenLabelsEnabled = $.forbiddenLabelsEnabled;
        this.forceMicroenforcer = $.forceMicroenforcer;
        this.functionIntegrityEnabled = $.functionIntegrityEnabled;
        this.ignoreRecentlyPublishedVln = $.ignoreRecentlyPublishedVln;
        this.ignoreRiskResourcesEnabled = $.ignoreRiskResourcesEnabled;
        this.ignoredRiskResources = $.ignoredRiskResources;
        this.images = $.images;
        this.kubeCisEnabled = $.kubeCisEnabled;
        this.labels = $.labels;
        this.malwareAction = $.malwareAction;
        this.maximumScore = $.maximumScore;
        this.maximumScoreEnabled = $.maximumScoreEnabled;
        this.maximumScoreExcludeNoFix = $.maximumScoreExcludeNoFix;
        this.monitoredMalwarePaths = $.monitoredMalwarePaths;
        this.name = $.name;
        this.onlyNoneRootUsers = $.onlyNoneRootUsers;
        this.packagesBlackListEnabled = $.packagesBlackListEnabled;
        this.packagesBlackLists = $.packagesBlackLists;
        this.packagesWhiteListEnabled = $.packagesWhiteListEnabled;
        this.packagesWhiteLists = $.packagesWhiteLists;
        this.partialResultsImageFail = $.partialResultsImageFail;
        this.readOnly = $.readOnly;
        this.registries = $.registries;
        this.registry = $.registry;
        this.requiredLabels = $.requiredLabels;
        this.requiredLabelsEnabled = $.requiredLabelsEnabled;
        this.scanNfsMounts = $.scanNfsMounts;
        this.scanSensitiveData = $.scanSensitiveData;
        this.scapEnabled = $.scapEnabled;
        this.scapFiles = $.scapFiles;
        this.scopes = $.scopes;
        this.trustedBaseImages = $.trustedBaseImages;
        this.trustedBaseImagesEnabled = $.trustedBaseImagesEnabled;
        this.whitelistedLicenses = $.whitelistedLicenses;
        this.whitelistedLicensesEnabled = $.whitelistedLicensesEnabled;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FunctionAssurancePolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FunctionAssurancePolicyArgs $;

        public Builder() {
            $ = new FunctionAssurancePolicyArgs();
        }

        public Builder(FunctionAssurancePolicyArgs defaults) {
            $ = new FunctionAssurancePolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowedImages List of explicitly allowed images.
         * 
         * @return builder
         * 
         */
        public Builder allowedImages(@Nullable Output<List<String>> allowedImages) {
            $.allowedImages = allowedImages;
            return this;
        }

        /**
         * @param allowedImages List of explicitly allowed images.
         * 
         * @return builder
         * 
         */
        public Builder allowedImages(List<String> allowedImages) {
            return allowedImages(Output.of(allowedImages));
        }

        /**
         * @param allowedImages List of explicitly allowed images.
         * 
         * @return builder
         * 
         */
        public Builder allowedImages(String... allowedImages) {
            return allowedImages(List.of(allowedImages));
        }

        public Builder applicationScopes(Output<List<String>> applicationScopes) {
            $.applicationScopes = applicationScopes;
            return this;
        }

        public Builder applicationScopes(List<String> applicationScopes) {
            return applicationScopes(Output.of(applicationScopes));
        }

        public Builder applicationScopes(String... applicationScopes) {
            return applicationScopes(List.of(applicationScopes));
        }

        /**
         * @param auditOnFailure Indicates if auditing for failures.
         * 
         * @return builder
         * 
         */
        public Builder auditOnFailure(@Nullable Output<Boolean> auditOnFailure) {
            $.auditOnFailure = auditOnFailure;
            return this;
        }

        /**
         * @param auditOnFailure Indicates if auditing for failures.
         * 
         * @return builder
         * 
         */
        public Builder auditOnFailure(Boolean auditOnFailure) {
            return auditOnFailure(Output.of(auditOnFailure));
        }

        public Builder autoScanConfigured(@Nullable Output<Boolean> autoScanConfigured) {
            $.autoScanConfigured = autoScanConfigured;
            return this;
        }

        public Builder autoScanConfigured(Boolean autoScanConfigured) {
            return autoScanConfigured(Output.of(autoScanConfigured));
        }

        public Builder autoScanEnabled(@Nullable Output<Boolean> autoScanEnabled) {
            $.autoScanEnabled = autoScanEnabled;
            return this;
        }

        public Builder autoScanEnabled(Boolean autoScanEnabled) {
            return autoScanEnabled(Output.of(autoScanEnabled));
        }

        public Builder autoScanTimes(@Nullable Output<List<FunctionAssurancePolicyAutoScanTimeArgs>> autoScanTimes) {
            $.autoScanTimes = autoScanTimes;
            return this;
        }

        public Builder autoScanTimes(List<FunctionAssurancePolicyAutoScanTimeArgs> autoScanTimes) {
            return autoScanTimes(Output.of(autoScanTimes));
        }

        public Builder autoScanTimes(FunctionAssurancePolicyAutoScanTimeArgs... autoScanTimes) {
            return autoScanTimes(List.of(autoScanTimes));
        }

        /**
         * @param blacklistPermissions List of function&#39;s forbidden permissions.
         * 
         * @return builder
         * 
         */
        public Builder blacklistPermissions(@Nullable Output<List<String>> blacklistPermissions) {
            $.blacklistPermissions = blacklistPermissions;
            return this;
        }

        /**
         * @param blacklistPermissions List of function&#39;s forbidden permissions.
         * 
         * @return builder
         * 
         */
        public Builder blacklistPermissions(List<String> blacklistPermissions) {
            return blacklistPermissions(Output.of(blacklistPermissions));
        }

        /**
         * @param blacklistPermissions List of function&#39;s forbidden permissions.
         * 
         * @return builder
         * 
         */
        public Builder blacklistPermissions(String... blacklistPermissions) {
            return blacklistPermissions(List.of(blacklistPermissions));
        }

        /**
         * @param blacklistPermissionsEnabled Indicates if blacklist permissions is relevant.
         * 
         * @return builder
         * 
         */
        public Builder blacklistPermissionsEnabled(@Nullable Output<Boolean> blacklistPermissionsEnabled) {
            $.blacklistPermissionsEnabled = blacklistPermissionsEnabled;
            return this;
        }

        /**
         * @param blacklistPermissionsEnabled Indicates if blacklist permissions is relevant.
         * 
         * @return builder
         * 
         */
        public Builder blacklistPermissionsEnabled(Boolean blacklistPermissionsEnabled) {
            return blacklistPermissionsEnabled(Output.of(blacklistPermissionsEnabled));
        }

        /**
         * @param blacklistedLicenses List of blacklisted licenses.
         * 
         * @return builder
         * 
         */
        public Builder blacklistedLicenses(@Nullable Output<List<String>> blacklistedLicenses) {
            $.blacklistedLicenses = blacklistedLicenses;
            return this;
        }

        /**
         * @param blacklistedLicenses List of blacklisted licenses.
         * 
         * @return builder
         * 
         */
        public Builder blacklistedLicenses(List<String> blacklistedLicenses) {
            return blacklistedLicenses(Output.of(blacklistedLicenses));
        }

        /**
         * @param blacklistedLicenses List of blacklisted licenses.
         * 
         * @return builder
         * 
         */
        public Builder blacklistedLicenses(String... blacklistedLicenses) {
            return blacklistedLicenses(List.of(blacklistedLicenses));
        }

        /**
         * @param blacklistedLicensesEnabled Lndicates if license blacklist is relevant.
         * 
         * @return builder
         * 
         */
        public Builder blacklistedLicensesEnabled(@Nullable Output<Boolean> blacklistedLicensesEnabled) {
            $.blacklistedLicensesEnabled = blacklistedLicensesEnabled;
            return this;
        }

        /**
         * @param blacklistedLicensesEnabled Lndicates if license blacklist is relevant.
         * 
         * @return builder
         * 
         */
        public Builder blacklistedLicensesEnabled(Boolean blacklistedLicensesEnabled) {
            return blacklistedLicensesEnabled(Output.of(blacklistedLicensesEnabled));
        }

        /**
         * @param blockFailed Indicates if failed images are blocked.
         * 
         * @return builder
         * 
         */
        public Builder blockFailed(@Nullable Output<Boolean> blockFailed) {
            $.blockFailed = blockFailed;
            return this;
        }

        /**
         * @param blockFailed Indicates if failed images are blocked.
         * 
         * @return builder
         * 
         */
        public Builder blockFailed(Boolean blockFailed) {
            return blockFailed(Output.of(blockFailed));
        }

        public Builder controlExcludeNoFix(@Nullable Output<Boolean> controlExcludeNoFix) {
            $.controlExcludeNoFix = controlExcludeNoFix;
            return this;
        }

        public Builder controlExcludeNoFix(Boolean controlExcludeNoFix) {
            return controlExcludeNoFix(Output.of(controlExcludeNoFix));
        }

        /**
         * @param customChecks List of Custom user scripts for checks.
         * 
         * @return builder
         * 
         */
        public Builder customChecks(@Nullable Output<List<FunctionAssurancePolicyCustomCheckArgs>> customChecks) {
            $.customChecks = customChecks;
            return this;
        }

        /**
         * @param customChecks List of Custom user scripts for checks.
         * 
         * @return builder
         * 
         */
        public Builder customChecks(List<FunctionAssurancePolicyCustomCheckArgs> customChecks) {
            return customChecks(Output.of(customChecks));
        }

        /**
         * @param customChecks List of Custom user scripts for checks.
         * 
         * @return builder
         * 
         */
        public Builder customChecks(FunctionAssurancePolicyCustomCheckArgs... customChecks) {
            return customChecks(List.of(customChecks));
        }

        /**
         * @param customChecksEnabled Indicates if scanning should include custom checks.
         * 
         * @return builder
         * 
         */
        public Builder customChecksEnabled(@Nullable Output<Boolean> customChecksEnabled) {
            $.customChecksEnabled = customChecksEnabled;
            return this;
        }

        /**
         * @param customChecksEnabled Indicates if scanning should include custom checks.
         * 
         * @return builder
         * 
         */
        public Builder customChecksEnabled(Boolean customChecksEnabled) {
            return customChecksEnabled(Output.of(customChecksEnabled));
        }

        public Builder customSeverityEnabled(@Nullable Output<Boolean> customSeverityEnabled) {
            $.customSeverityEnabled = customSeverityEnabled;
            return this;
        }

        public Builder customSeverityEnabled(Boolean customSeverityEnabled) {
            return customSeverityEnabled(Output.of(customSeverityEnabled));
        }

        /**
         * @param cvesBlackListEnabled Indicates if cves blacklist is relevant.
         * 
         * @return builder
         * 
         */
        public Builder cvesBlackListEnabled(@Nullable Output<Boolean> cvesBlackListEnabled) {
            $.cvesBlackListEnabled = cvesBlackListEnabled;
            return this;
        }

        /**
         * @param cvesBlackListEnabled Indicates if cves blacklist is relevant.
         * 
         * @return builder
         * 
         */
        public Builder cvesBlackListEnabled(Boolean cvesBlackListEnabled) {
            return cvesBlackListEnabled(Output.of(cvesBlackListEnabled));
        }

        /**
         * @param cvesBlackLists List of cves blacklisted items.
         * 
         * @return builder
         * 
         */
        public Builder cvesBlackLists(@Nullable Output<List<String>> cvesBlackLists) {
            $.cvesBlackLists = cvesBlackLists;
            return this;
        }

        /**
         * @param cvesBlackLists List of cves blacklisted items.
         * 
         * @return builder
         * 
         */
        public Builder cvesBlackLists(List<String> cvesBlackLists) {
            return cvesBlackLists(Output.of(cvesBlackLists));
        }

        /**
         * @param cvesBlackLists List of cves blacklisted items.
         * 
         * @return builder
         * 
         */
        public Builder cvesBlackLists(String... cvesBlackLists) {
            return cvesBlackLists(List.of(cvesBlackLists));
        }

        /**
         * @param cvesWhiteListEnabled Indicates if cves whitelist is relevant.
         * 
         * @return builder
         * 
         */
        public Builder cvesWhiteListEnabled(@Nullable Output<Boolean> cvesWhiteListEnabled) {
            $.cvesWhiteListEnabled = cvesWhiteListEnabled;
            return this;
        }

        /**
         * @param cvesWhiteListEnabled Indicates if cves whitelist is relevant.
         * 
         * @return builder
         * 
         */
        public Builder cvesWhiteListEnabled(Boolean cvesWhiteListEnabled) {
            return cvesWhiteListEnabled(Output.of(cvesWhiteListEnabled));
        }

        /**
         * @param cvesWhiteLists List of cves whitelisted licenses
         * 
         * @return builder
         * 
         */
        public Builder cvesWhiteLists(@Nullable Output<List<String>> cvesWhiteLists) {
            $.cvesWhiteLists = cvesWhiteLists;
            return this;
        }

        /**
         * @param cvesWhiteLists List of cves whitelisted licenses
         * 
         * @return builder
         * 
         */
        public Builder cvesWhiteLists(List<String> cvesWhiteLists) {
            return cvesWhiteLists(Output.of(cvesWhiteLists));
        }

        /**
         * @param cvesWhiteLists List of cves whitelisted licenses
         * 
         * @return builder
         * 
         */
        public Builder cvesWhiteLists(String... cvesWhiteLists) {
            return cvesWhiteLists(List.of(cvesWhiteLists));
        }

        /**
         * @param cvssSeverity Identifier of the cvss severity.
         * 
         * @return builder
         * 
         */
        public Builder cvssSeverity(@Nullable Output<String> cvssSeverity) {
            $.cvssSeverity = cvssSeverity;
            return this;
        }

        /**
         * @param cvssSeverity Identifier of the cvss severity.
         * 
         * @return builder
         * 
         */
        public Builder cvssSeverity(String cvssSeverity) {
            return cvssSeverity(Output.of(cvssSeverity));
        }

        /**
         * @param cvssSeverityEnabled Indicates if the cvss severity is scanned.
         * 
         * @return builder
         * 
         */
        public Builder cvssSeverityEnabled(@Nullable Output<Boolean> cvssSeverityEnabled) {
            $.cvssSeverityEnabled = cvssSeverityEnabled;
            return this;
        }

        /**
         * @param cvssSeverityEnabled Indicates if the cvss severity is scanned.
         * 
         * @return builder
         * 
         */
        public Builder cvssSeverityEnabled(Boolean cvssSeverityEnabled) {
            return cvssSeverityEnabled(Output.of(cvssSeverityEnabled));
        }

        /**
         * @param cvssSeverityExcludeNoFix Indicates that policy should ignore cvss cases that do not have a known fix.
         * 
         * @return builder
         * 
         */
        public Builder cvssSeverityExcludeNoFix(@Nullable Output<Boolean> cvssSeverityExcludeNoFix) {
            $.cvssSeverityExcludeNoFix = cvssSeverityExcludeNoFix;
            return this;
        }

        /**
         * @param cvssSeverityExcludeNoFix Indicates that policy should ignore cvss cases that do not have a known fix.
         * 
         * @return builder
         * 
         */
        public Builder cvssSeverityExcludeNoFix(Boolean cvssSeverityExcludeNoFix) {
            return cvssSeverityExcludeNoFix(Output.of(cvssSeverityExcludeNoFix));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param disallowMalware Indicates if malware should block the image.
         * 
         * @return builder
         * 
         */
        public Builder disallowMalware(@Nullable Output<Boolean> disallowMalware) {
            $.disallowMalware = disallowMalware;
            return this;
        }

        /**
         * @param disallowMalware Indicates if malware should block the image.
         * 
         * @return builder
         * 
         */
        public Builder disallowMalware(Boolean disallowMalware) {
            return disallowMalware(Output.of(disallowMalware));
        }

        public Builder dockerCisEnabled(@Nullable Output<Boolean> dockerCisEnabled) {
            $.dockerCisEnabled = dockerCisEnabled;
            return this;
        }

        public Builder dockerCisEnabled(Boolean dockerCisEnabled) {
            return dockerCisEnabled(Output.of(dockerCisEnabled));
        }

        /**
         * @param domain Name of the container image.
         * 
         * @return builder
         * 
         */
        public Builder domain(@Nullable Output<String> domain) {
            $.domain = domain;
            return this;
        }

        /**
         * @param domain Name of the container image.
         * 
         * @return builder
         * 
         */
        public Builder domain(String domain) {
            return domain(Output.of(domain));
        }

        public Builder domainName(@Nullable Output<String> domainName) {
            $.domainName = domainName;
            return this;
        }

        public Builder domainName(String domainName) {
            return domainName(Output.of(domainName));
        }

        public Builder dtaEnabled(@Nullable Output<Boolean> dtaEnabled) {
            $.dtaEnabled = dtaEnabled;
            return this;
        }

        public Builder dtaEnabled(Boolean dtaEnabled) {
            return dtaEnabled(Output.of(dtaEnabled));
        }

        public Builder dtaSeverity(@Nullable Output<String> dtaSeverity) {
            $.dtaSeverity = dtaSeverity;
            return this;
        }

        public Builder dtaSeverity(String dtaSeverity) {
            return dtaSeverity(Output.of(dtaSeverity));
        }

        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        public Builder enforce(@Nullable Output<Boolean> enforce) {
            $.enforce = enforce;
            return this;
        }

        public Builder enforce(Boolean enforce) {
            return enforce(Output.of(enforce));
        }

        public Builder enforceAfterDays(@Nullable Output<Integer> enforceAfterDays) {
            $.enforceAfterDays = enforceAfterDays;
            return this;
        }

        public Builder enforceAfterDays(Integer enforceAfterDays) {
            return enforceAfterDays(Output.of(enforceAfterDays));
        }

        public Builder enforceExcessivePermissions(@Nullable Output<Boolean> enforceExcessivePermissions) {
            $.enforceExcessivePermissions = enforceExcessivePermissions;
            return this;
        }

        public Builder enforceExcessivePermissions(Boolean enforceExcessivePermissions) {
            return enforceExcessivePermissions(Output.of(enforceExcessivePermissions));
        }

        public Builder exceptionalMonitoredMalwarePaths(@Nullable Output<List<String>> exceptionalMonitoredMalwarePaths) {
            $.exceptionalMonitoredMalwarePaths = exceptionalMonitoredMalwarePaths;
            return this;
        }

        public Builder exceptionalMonitoredMalwarePaths(List<String> exceptionalMonitoredMalwarePaths) {
            return exceptionalMonitoredMalwarePaths(Output.of(exceptionalMonitoredMalwarePaths));
        }

        public Builder exceptionalMonitoredMalwarePaths(String... exceptionalMonitoredMalwarePaths) {
            return exceptionalMonitoredMalwarePaths(List.of(exceptionalMonitoredMalwarePaths));
        }

        /**
         * @param failCicd Indicates if cicd failures will fail the image.
         * 
         * @return builder
         * 
         */
        public Builder failCicd(@Nullable Output<Boolean> failCicd) {
            $.failCicd = failCicd;
            return this;
        }

        /**
         * @param failCicd Indicates if cicd failures will fail the image.
         * 
         * @return builder
         * 
         */
        public Builder failCicd(Boolean failCicd) {
            return failCicd(Output.of(failCicd));
        }

        public Builder forbiddenLabels(@Nullable Output<List<FunctionAssurancePolicyForbiddenLabelArgs>> forbiddenLabels) {
            $.forbiddenLabels = forbiddenLabels;
            return this;
        }

        public Builder forbiddenLabels(List<FunctionAssurancePolicyForbiddenLabelArgs> forbiddenLabels) {
            return forbiddenLabels(Output.of(forbiddenLabels));
        }

        public Builder forbiddenLabels(FunctionAssurancePolicyForbiddenLabelArgs... forbiddenLabels) {
            return forbiddenLabels(List.of(forbiddenLabels));
        }

        public Builder forbiddenLabelsEnabled(@Nullable Output<Boolean> forbiddenLabelsEnabled) {
            $.forbiddenLabelsEnabled = forbiddenLabelsEnabled;
            return this;
        }

        public Builder forbiddenLabelsEnabled(Boolean forbiddenLabelsEnabled) {
            return forbiddenLabelsEnabled(Output.of(forbiddenLabelsEnabled));
        }

        public Builder forceMicroenforcer(@Nullable Output<Boolean> forceMicroenforcer) {
            $.forceMicroenforcer = forceMicroenforcer;
            return this;
        }

        public Builder forceMicroenforcer(Boolean forceMicroenforcer) {
            return forceMicroenforcer(Output.of(forceMicroenforcer));
        }

        public Builder functionIntegrityEnabled(@Nullable Output<Boolean> functionIntegrityEnabled) {
            $.functionIntegrityEnabled = functionIntegrityEnabled;
            return this;
        }

        public Builder functionIntegrityEnabled(Boolean functionIntegrityEnabled) {
            return functionIntegrityEnabled(Output.of(functionIntegrityEnabled));
        }

        public Builder ignoreRecentlyPublishedVln(@Nullable Output<Boolean> ignoreRecentlyPublishedVln) {
            $.ignoreRecentlyPublishedVln = ignoreRecentlyPublishedVln;
            return this;
        }

        public Builder ignoreRecentlyPublishedVln(Boolean ignoreRecentlyPublishedVln) {
            return ignoreRecentlyPublishedVln(Output.of(ignoreRecentlyPublishedVln));
        }

        /**
         * @param ignoreRiskResourcesEnabled Indicates if risk resources are ignored.
         * 
         * @return builder
         * 
         */
        public Builder ignoreRiskResourcesEnabled(@Nullable Output<Boolean> ignoreRiskResourcesEnabled) {
            $.ignoreRiskResourcesEnabled = ignoreRiskResourcesEnabled;
            return this;
        }

        /**
         * @param ignoreRiskResourcesEnabled Indicates if risk resources are ignored.
         * 
         * @return builder
         * 
         */
        public Builder ignoreRiskResourcesEnabled(Boolean ignoreRiskResourcesEnabled) {
            return ignoreRiskResourcesEnabled(Output.of(ignoreRiskResourcesEnabled));
        }

        /**
         * @param ignoredRiskResources List of ignored risk resources.
         * 
         * @return builder
         * 
         */
        public Builder ignoredRiskResources(@Nullable Output<List<String>> ignoredRiskResources) {
            $.ignoredRiskResources = ignoredRiskResources;
            return this;
        }

        /**
         * @param ignoredRiskResources List of ignored risk resources.
         * 
         * @return builder
         * 
         */
        public Builder ignoredRiskResources(List<String> ignoredRiskResources) {
            return ignoredRiskResources(Output.of(ignoredRiskResources));
        }

        /**
         * @param ignoredRiskResources List of ignored risk resources.
         * 
         * @return builder
         * 
         */
        public Builder ignoredRiskResources(String... ignoredRiskResources) {
            return ignoredRiskResources(List.of(ignoredRiskResources));
        }

        /**
         * @param images List of images.
         * 
         * @return builder
         * 
         */
        public Builder images(@Nullable Output<List<String>> images) {
            $.images = images;
            return this;
        }

        /**
         * @param images List of images.
         * 
         * @return builder
         * 
         */
        public Builder images(List<String> images) {
            return images(Output.of(images));
        }

        /**
         * @param images List of images.
         * 
         * @return builder
         * 
         */
        public Builder images(String... images) {
            return images(List.of(images));
        }

        public Builder kubeCisEnabled(@Nullable Output<Boolean> kubeCisEnabled) {
            $.kubeCisEnabled = kubeCisEnabled;
            return this;
        }

        public Builder kubeCisEnabled(Boolean kubeCisEnabled) {
            return kubeCisEnabled(Output.of(kubeCisEnabled));
        }

        /**
         * @param labels List of labels.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<List<String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels List of labels.
         * 
         * @return builder
         * 
         */
        public Builder labels(List<String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param labels List of labels.
         * 
         * @return builder
         * 
         */
        public Builder labels(String... labels) {
            return labels(List.of(labels));
        }

        public Builder malwareAction(@Nullable Output<String> malwareAction) {
            $.malwareAction = malwareAction;
            return this;
        }

        public Builder malwareAction(String malwareAction) {
            return malwareAction(Output.of(malwareAction));
        }

        /**
         * @param maximumScore Value of allowed maximum score.
         * 
         * @return builder
         * 
         */
        public Builder maximumScore(@Nullable Output<Double> maximumScore) {
            $.maximumScore = maximumScore;
            return this;
        }

        /**
         * @param maximumScore Value of allowed maximum score.
         * 
         * @return builder
         * 
         */
        public Builder maximumScore(Double maximumScore) {
            return maximumScore(Output.of(maximumScore));
        }

        /**
         * @param maximumScoreEnabled Indicates if exceeding the maximum score is scanned.
         * 
         * @return builder
         * 
         */
        public Builder maximumScoreEnabled(@Nullable Output<Boolean> maximumScoreEnabled) {
            $.maximumScoreEnabled = maximumScoreEnabled;
            return this;
        }

        /**
         * @param maximumScoreEnabled Indicates if exceeding the maximum score is scanned.
         * 
         * @return builder
         * 
         */
        public Builder maximumScoreEnabled(Boolean maximumScoreEnabled) {
            return maximumScoreEnabled(Output.of(maximumScoreEnabled));
        }

        /**
         * @param maximumScoreExcludeNoFix Indicates that policy should ignore cases that do not have a known fix.
         * 
         * @return builder
         * 
         */
        public Builder maximumScoreExcludeNoFix(@Nullable Output<Boolean> maximumScoreExcludeNoFix) {
            $.maximumScoreExcludeNoFix = maximumScoreExcludeNoFix;
            return this;
        }

        /**
         * @param maximumScoreExcludeNoFix Indicates that policy should ignore cases that do not have a known fix.
         * 
         * @return builder
         * 
         */
        public Builder maximumScoreExcludeNoFix(Boolean maximumScoreExcludeNoFix) {
            return maximumScoreExcludeNoFix(Output.of(maximumScoreExcludeNoFix));
        }

        public Builder monitoredMalwarePaths(@Nullable Output<List<String>> monitoredMalwarePaths) {
            $.monitoredMalwarePaths = monitoredMalwarePaths;
            return this;
        }

        public Builder monitoredMalwarePaths(List<String> monitoredMalwarePaths) {
            return monitoredMalwarePaths(Output.of(monitoredMalwarePaths));
        }

        public Builder monitoredMalwarePaths(String... monitoredMalwarePaths) {
            return monitoredMalwarePaths(List.of(monitoredMalwarePaths));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param onlyNoneRootUsers Indicates if raise a warning for images that should only be run as root.
         * 
         * @return builder
         * 
         */
        public Builder onlyNoneRootUsers(@Nullable Output<Boolean> onlyNoneRootUsers) {
            $.onlyNoneRootUsers = onlyNoneRootUsers;
            return this;
        }

        /**
         * @param onlyNoneRootUsers Indicates if raise a warning for images that should only be run as root.
         * 
         * @return builder
         * 
         */
        public Builder onlyNoneRootUsers(Boolean onlyNoneRootUsers) {
            return onlyNoneRootUsers(Output.of(onlyNoneRootUsers));
        }

        /**
         * @param packagesBlackListEnabled Indicates if packages blacklist is relevant.
         * 
         * @return builder
         * 
         */
        public Builder packagesBlackListEnabled(@Nullable Output<Boolean> packagesBlackListEnabled) {
            $.packagesBlackListEnabled = packagesBlackListEnabled;
            return this;
        }

        /**
         * @param packagesBlackListEnabled Indicates if packages blacklist is relevant.
         * 
         * @return builder
         * 
         */
        public Builder packagesBlackListEnabled(Boolean packagesBlackListEnabled) {
            return packagesBlackListEnabled(Output.of(packagesBlackListEnabled));
        }

        /**
         * @param packagesBlackLists List of backlisted images.
         * 
         * @return builder
         * 
         */
        public Builder packagesBlackLists(@Nullable Output<List<FunctionAssurancePolicyPackagesBlackListArgs>> packagesBlackLists) {
            $.packagesBlackLists = packagesBlackLists;
            return this;
        }

        /**
         * @param packagesBlackLists List of backlisted images.
         * 
         * @return builder
         * 
         */
        public Builder packagesBlackLists(List<FunctionAssurancePolicyPackagesBlackListArgs> packagesBlackLists) {
            return packagesBlackLists(Output.of(packagesBlackLists));
        }

        /**
         * @param packagesBlackLists List of backlisted images.
         * 
         * @return builder
         * 
         */
        public Builder packagesBlackLists(FunctionAssurancePolicyPackagesBlackListArgs... packagesBlackLists) {
            return packagesBlackLists(List.of(packagesBlackLists));
        }

        /**
         * @param packagesWhiteListEnabled Indicates if packages whitelist is relevant.
         * 
         * @return builder
         * 
         */
        public Builder packagesWhiteListEnabled(@Nullable Output<Boolean> packagesWhiteListEnabled) {
            $.packagesWhiteListEnabled = packagesWhiteListEnabled;
            return this;
        }

        /**
         * @param packagesWhiteListEnabled Indicates if packages whitelist is relevant.
         * 
         * @return builder
         * 
         */
        public Builder packagesWhiteListEnabled(Boolean packagesWhiteListEnabled) {
            return packagesWhiteListEnabled(Output.of(packagesWhiteListEnabled));
        }

        /**
         * @param packagesWhiteLists List of whitelisted images.
         * 
         * @return builder
         * 
         */
        public Builder packagesWhiteLists(@Nullable Output<List<FunctionAssurancePolicyPackagesWhiteListArgs>> packagesWhiteLists) {
            $.packagesWhiteLists = packagesWhiteLists;
            return this;
        }

        /**
         * @param packagesWhiteLists List of whitelisted images.
         * 
         * @return builder
         * 
         */
        public Builder packagesWhiteLists(List<FunctionAssurancePolicyPackagesWhiteListArgs> packagesWhiteLists) {
            return packagesWhiteLists(Output.of(packagesWhiteLists));
        }

        /**
         * @param packagesWhiteLists List of whitelisted images.
         * 
         * @return builder
         * 
         */
        public Builder packagesWhiteLists(FunctionAssurancePolicyPackagesWhiteListArgs... packagesWhiteLists) {
            return packagesWhiteLists(List.of(packagesWhiteLists));
        }

        public Builder partialResultsImageFail(@Nullable Output<Boolean> partialResultsImageFail) {
            $.partialResultsImageFail = partialResultsImageFail;
            return this;
        }

        public Builder partialResultsImageFail(Boolean partialResultsImageFail) {
            return partialResultsImageFail(Output.of(partialResultsImageFail));
        }

        public Builder readOnly(@Nullable Output<Boolean> readOnly) {
            $.readOnly = readOnly;
            return this;
        }

        public Builder readOnly(Boolean readOnly) {
            return readOnly(Output.of(readOnly));
        }

        /**
         * @param registries List of registries.
         * 
         * @return builder
         * 
         */
        public Builder registries(@Nullable Output<List<String>> registries) {
            $.registries = registries;
            return this;
        }

        /**
         * @param registries List of registries.
         * 
         * @return builder
         * 
         */
        public Builder registries(List<String> registries) {
            return registries(Output.of(registries));
        }

        /**
         * @param registries List of registries.
         * 
         * @return builder
         * 
         */
        public Builder registries(String... registries) {
            return registries(List.of(registries));
        }

        public Builder registry(@Nullable Output<String> registry) {
            $.registry = registry;
            return this;
        }

        public Builder registry(String registry) {
            return registry(Output.of(registry));
        }

        public Builder requiredLabels(@Nullable Output<List<FunctionAssurancePolicyRequiredLabelArgs>> requiredLabels) {
            $.requiredLabels = requiredLabels;
            return this;
        }

        public Builder requiredLabels(List<FunctionAssurancePolicyRequiredLabelArgs> requiredLabels) {
            return requiredLabels(Output.of(requiredLabels));
        }

        public Builder requiredLabels(FunctionAssurancePolicyRequiredLabelArgs... requiredLabels) {
            return requiredLabels(List.of(requiredLabels));
        }

        public Builder requiredLabelsEnabled(@Nullable Output<Boolean> requiredLabelsEnabled) {
            $.requiredLabelsEnabled = requiredLabelsEnabled;
            return this;
        }

        public Builder requiredLabelsEnabled(Boolean requiredLabelsEnabled) {
            return requiredLabelsEnabled(Output.of(requiredLabelsEnabled));
        }

        public Builder scanNfsMounts(@Nullable Output<Boolean> scanNfsMounts) {
            $.scanNfsMounts = scanNfsMounts;
            return this;
        }

        public Builder scanNfsMounts(Boolean scanNfsMounts) {
            return scanNfsMounts(Output.of(scanNfsMounts));
        }

        /**
         * @param scanSensitiveData Indicates if scan should include sensitive data in the image.
         * 
         * @return builder
         * 
         */
        public Builder scanSensitiveData(@Nullable Output<Boolean> scanSensitiveData) {
            $.scanSensitiveData = scanSensitiveData;
            return this;
        }

        /**
         * @param scanSensitiveData Indicates if scan should include sensitive data in the image.
         * 
         * @return builder
         * 
         */
        public Builder scanSensitiveData(Boolean scanSensitiveData) {
            return scanSensitiveData(Output.of(scanSensitiveData));
        }

        /**
         * @param scapEnabled Indicates if scanning should include scap.
         * 
         * @return builder
         * 
         */
        public Builder scapEnabled(@Nullable Output<Boolean> scapEnabled) {
            $.scapEnabled = scapEnabled;
            return this;
        }

        /**
         * @param scapEnabled Indicates if scanning should include scap.
         * 
         * @return builder
         * 
         */
        public Builder scapEnabled(Boolean scapEnabled) {
            return scapEnabled(Output.of(scapEnabled));
        }

        /**
         * @param scapFiles List of SCAP user scripts for checks.
         * 
         * @return builder
         * 
         */
        public Builder scapFiles(@Nullable Output<List<String>> scapFiles) {
            $.scapFiles = scapFiles;
            return this;
        }

        /**
         * @param scapFiles List of SCAP user scripts for checks.
         * 
         * @return builder
         * 
         */
        public Builder scapFiles(List<String> scapFiles) {
            return scapFiles(Output.of(scapFiles));
        }

        /**
         * @param scapFiles List of SCAP user scripts for checks.
         * 
         * @return builder
         * 
         */
        public Builder scapFiles(String... scapFiles) {
            return scapFiles(List.of(scapFiles));
        }

        public Builder scopes(@Nullable Output<List<FunctionAssurancePolicyScopeArgs>> scopes) {
            $.scopes = scopes;
            return this;
        }

        public Builder scopes(List<FunctionAssurancePolicyScopeArgs> scopes) {
            return scopes(Output.of(scopes));
        }

        public Builder scopes(FunctionAssurancePolicyScopeArgs... scopes) {
            return scopes(List.of(scopes));
        }

        /**
         * @param trustedBaseImages List of trusted images.
         * 
         * @return builder
         * 
         */
        public Builder trustedBaseImages(@Nullable Output<List<FunctionAssurancePolicyTrustedBaseImageArgs>> trustedBaseImages) {
            $.trustedBaseImages = trustedBaseImages;
            return this;
        }

        /**
         * @param trustedBaseImages List of trusted images.
         * 
         * @return builder
         * 
         */
        public Builder trustedBaseImages(List<FunctionAssurancePolicyTrustedBaseImageArgs> trustedBaseImages) {
            return trustedBaseImages(Output.of(trustedBaseImages));
        }

        /**
         * @param trustedBaseImages List of trusted images.
         * 
         * @return builder
         * 
         */
        public Builder trustedBaseImages(FunctionAssurancePolicyTrustedBaseImageArgs... trustedBaseImages) {
            return trustedBaseImages(List.of(trustedBaseImages));
        }

        /**
         * @param trustedBaseImagesEnabled Indicates if list of trusted base images is relevant.
         * 
         * @return builder
         * 
         */
        public Builder trustedBaseImagesEnabled(@Nullable Output<Boolean> trustedBaseImagesEnabled) {
            $.trustedBaseImagesEnabled = trustedBaseImagesEnabled;
            return this;
        }

        /**
         * @param trustedBaseImagesEnabled Indicates if list of trusted base images is relevant.
         * 
         * @return builder
         * 
         */
        public Builder trustedBaseImagesEnabled(Boolean trustedBaseImagesEnabled) {
            return trustedBaseImagesEnabled(Output.of(trustedBaseImagesEnabled));
        }

        /**
         * @param whitelistedLicenses List of whitelisted licenses.
         * 
         * @return builder
         * 
         */
        public Builder whitelistedLicenses(@Nullable Output<List<String>> whitelistedLicenses) {
            $.whitelistedLicenses = whitelistedLicenses;
            return this;
        }

        /**
         * @param whitelistedLicenses List of whitelisted licenses.
         * 
         * @return builder
         * 
         */
        public Builder whitelistedLicenses(List<String> whitelistedLicenses) {
            return whitelistedLicenses(Output.of(whitelistedLicenses));
        }

        /**
         * @param whitelistedLicenses List of whitelisted licenses.
         * 
         * @return builder
         * 
         */
        public Builder whitelistedLicenses(String... whitelistedLicenses) {
            return whitelistedLicenses(List.of(whitelistedLicenses));
        }

        /**
         * @param whitelistedLicensesEnabled Indicates if license blacklist is relevant.
         * 
         * @return builder
         * 
         */
        public Builder whitelistedLicensesEnabled(@Nullable Output<Boolean> whitelistedLicensesEnabled) {
            $.whitelistedLicensesEnabled = whitelistedLicensesEnabled;
            return this;
        }

        /**
         * @param whitelistedLicensesEnabled Indicates if license blacklist is relevant.
         * 
         * @return builder
         * 
         */
        public Builder whitelistedLicensesEnabled(Boolean whitelistedLicensesEnabled) {
            return whitelistedLicensesEnabled(Output.of(whitelistedLicensesEnabled));
        }

        public FunctionAssurancePolicyArgs build() {
            $.applicationScopes = Objects.requireNonNull($.applicationScopes, "expected parameter 'applicationScopes' to be non-null");
            return $;
        }
    }

}
