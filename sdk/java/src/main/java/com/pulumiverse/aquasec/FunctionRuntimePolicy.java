// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumiverse.aquasec;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumiverse.aquasec.FunctionRuntimePolicyArgs;
import com.pulumiverse.aquasec.Utilities;
import com.pulumiverse.aquasec.inputs.FunctionRuntimePolicyState;
import com.pulumiverse.aquasec.outputs.FunctionRuntimePolicyScopeVariable;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.aquasec.FunctionRuntimePolicy;
 * import com.pulumi.aquasec.FunctionRuntimePolicyArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var functionRuntimePolicy = new FunctionRuntimePolicy(&#34;functionRuntimePolicy&#34;, FunctionRuntimePolicyArgs.builder()        
 *             .blockMaliciousExecutables(true)
 *             .blockMaliciousExecutablesAllowedProcesses(            
 *                 &#34;proc1&#34;,
 *                 &#34;proc2&#34;)
 *             .blockRunningExecutablesInTmpFolder(true)
 *             .blockedExecutables(            
 *                 &#34;exe1&#34;,
 *                 &#34;exe2&#34;)
 *             .description(&#34;function_runtime_policy&#34;)
 *             .enabled(true)
 *             .enforce(false)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 */
@ResourceType(type="aquasec:index/functionRuntimePolicy:FunctionRuntimePolicy")
public class FunctionRuntimePolicy extends com.pulumi.resources.CustomResource {
    /**
     * Indicates the application scope of the service.
     * 
     */
    @Export(name="applicationScopes", type=List.class, parameters={String.class})
    private Output<List<String>> applicationScopes;

    /**
     * @return Indicates the application scope of the service.
     * 
     */
    public Output<List<String>> applicationScopes() {
        return this.applicationScopes;
    }
    /**
     * Username of the account that created the service.
     * 
     */
    @Export(name="author", type=String.class, parameters={})
    private Output<String> author;

    /**
     * @return Username of the account that created the service.
     * 
     */
    public Output<String> author() {
        return this.author;
    }
    /**
     * If true, prevent creation of malicious executables in functions during their runtime post invocation.
     * 
     */
    @Export(name="blockMaliciousExecutables", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> blockMaliciousExecutables;

    /**
     * @return If true, prevent creation of malicious executables in functions during their runtime post invocation.
     * 
     */
    public Output<Optional<Boolean>> blockMaliciousExecutables() {
        return Codegen.optional(this.blockMaliciousExecutables);
    }
    /**
     * List of processes that will be allowed
     * 
     */
    @Export(name="blockMaliciousExecutablesAllowedProcesses", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> blockMaliciousExecutablesAllowedProcesses;

    /**
     * @return List of processes that will be allowed
     * 
     */
    public Output<Optional<List<String>>> blockMaliciousExecutablesAllowedProcesses() {
        return Codegen.optional(this.blockMaliciousExecutablesAllowedProcesses);
    }
    /**
     * If true, prevent running of executables in functions locate in /tmp folder during their runtime post invocation.
     * 
     */
    @Export(name="blockRunningExecutablesInTmpFolder", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> blockRunningExecutablesInTmpFolder;

    /**
     * @return If true, prevent running of executables in functions locate in /tmp folder during their runtime post invocation.
     * 
     */
    public Output<Optional<Boolean>> blockRunningExecutablesInTmpFolder() {
        return Codegen.optional(this.blockRunningExecutablesInTmpFolder);
    }
    /**
     * List of executables that are prevented from running in containers.
     * 
     */
    @Export(name="blockedExecutables", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> blockedExecutables;

    /**
     * @return List of executables that are prevented from running in containers.
     * 
     */
    public Output<Optional<List<String>>> blockedExecutables() {
        return Codegen.optional(this.blockedExecutables);
    }
    /**
     * The description of the function runtime policy
     * 
     */
    @Export(name="description", type=String.class, parameters={})
    private Output</* @Nullable */ String> description;

    /**
     * @return The description of the function runtime policy
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * Indicates if the runtime policy is enabled or not.
     * 
     */
    @Export(name="enabled", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> enabled;

    /**
     * @return Indicates if the runtime policy is enabled or not.
     * 
     */
    public Output<Optional<Boolean>> enabled() {
        return Codegen.optional(this.enabled);
    }
    /**
     * Indicates that policy should effect container execution (not just for audit).
     * 
     */
    @Export(name="enforce", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> enforce;

    /**
     * @return Indicates that policy should effect container execution (not just for audit).
     * 
     */
    public Output<Optional<Boolean>> enforce() {
        return Codegen.optional(this.enforce);
    }
    /**
     * Honeypot User ID (Access Key)
     * 
     */
    @Export(name="honeypotAccessKey", type=String.class, parameters={})
    private Output</* @Nullable */ String> honeypotAccessKey;

    /**
     * @return Honeypot User ID (Access Key)
     * 
     */
    public Output<Optional<String>> honeypotAccessKey() {
        return Codegen.optional(this.honeypotAccessKey);
    }
    /**
     * List of options to apply the honeypot on (Environment Vairable, Layer, File)
     * 
     */
    @Export(name="honeypotApplyOns", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> honeypotApplyOns;

    /**
     * @return List of options to apply the honeypot on (Environment Vairable, Layer, File)
     * 
     */
    public Output<Optional<List<String>>> honeypotApplyOns() {
        return Codegen.optional(this.honeypotApplyOns);
    }
    /**
     * Honeypot User Password (Secret Key)
     * 
     */
    @Export(name="honeypotSecretKey", type=String.class, parameters={})
    private Output</* @Nullable */ String> honeypotSecretKey;

    /**
     * @return Honeypot User Password (Secret Key)
     * 
     */
    public Output<Optional<String>> honeypotSecretKey() {
        return Codegen.optional(this.honeypotSecretKey);
    }
    /**
     * Serverless application name
     * 
     */
    @Export(name="honeypotServerlessAppName", type=String.class, parameters={})
    private Output</* @Nullable */ String> honeypotServerlessAppName;

    /**
     * @return Serverless application name
     * 
     */
    public Output<Optional<String>> honeypotServerlessAppName() {
        return Codegen.optional(this.honeypotServerlessAppName);
    }
    /**
     * Name of the function runtime policy
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return Name of the function runtime policy
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Logical expression of how to compute the dependency of the scope variables.
     * 
     */
    @Export(name="scopeExpression", type=String.class, parameters={})
    private Output<String> scopeExpression;

    /**
     * @return Logical expression of how to compute the dependency of the scope variables.
     * 
     */
    public Output<String> scopeExpression() {
        return this.scopeExpression;
    }
    /**
     * List of scope attributes.
     * 
     */
    @Export(name="scopeVariables", type=List.class, parameters={FunctionRuntimePolicyScopeVariable.class})
    private Output<List<FunctionRuntimePolicyScopeVariable>> scopeVariables;

    /**
     * @return List of scope attributes.
     * 
     */
    public Output<List<FunctionRuntimePolicyScopeVariable>> scopeVariables() {
        return this.scopeVariables;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public FunctionRuntimePolicy(String name) {
        this(name, FunctionRuntimePolicyArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public FunctionRuntimePolicy(String name, @Nullable FunctionRuntimePolicyArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public FunctionRuntimePolicy(String name, @Nullable FunctionRuntimePolicyArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("aquasec:index/functionRuntimePolicy:FunctionRuntimePolicy", name, args == null ? FunctionRuntimePolicyArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private FunctionRuntimePolicy(String name, Output<String> id, @Nullable FunctionRuntimePolicyState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("aquasec:index/functionRuntimePolicy:FunctionRuntimePolicy", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "honeypotSecretKey"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static FunctionRuntimePolicy get(String name, Output<String> id, @Nullable FunctionRuntimePolicyState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new FunctionRuntimePolicy(name, id, state, options);
    }
}
