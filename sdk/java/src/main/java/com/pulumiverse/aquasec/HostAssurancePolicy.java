// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumiverse.aquasec;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumiverse.aquasec.HostAssurancePolicyArgs;
import com.pulumiverse.aquasec.Utilities;
import com.pulumiverse.aquasec.inputs.HostAssurancePolicyState;
import com.pulumiverse.aquasec.outputs.HostAssurancePolicyAutoScanTime;
import com.pulumiverse.aquasec.outputs.HostAssurancePolicyCustomCheck;
import com.pulumiverse.aquasec.outputs.HostAssurancePolicyForbiddenLabel;
import com.pulumiverse.aquasec.outputs.HostAssurancePolicyPackagesBlackList;
import com.pulumiverse.aquasec.outputs.HostAssurancePolicyPackagesWhiteList;
import com.pulumiverse.aquasec.outputs.HostAssurancePolicyRequiredLabel;
import com.pulumiverse.aquasec.outputs.HostAssurancePolicyScope;
import com.pulumiverse.aquasec.outputs.HostAssurancePolicyTrustedBaseImage;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

@ResourceType(type="aquasec:index/hostAssurancePolicy:HostAssurancePolicy")
public class HostAssurancePolicy extends com.pulumi.resources.CustomResource {
    /**
     * List of explicitly allowed images.
     * 
     */
    @Export(name="allowedImages", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> allowedImages;

    /**
     * @return List of explicitly allowed images.
     * 
     */
    public Output<Optional<List<String>>> allowedImages() {
        return Codegen.optional(this.allowedImages);
    }
    @Export(name="applicationScopes", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> applicationScopes;

    public Output<List<String>> applicationScopes() {
        return this.applicationScopes;
    }
    /**
     * Indicates if auditing for failures.
     * 
     */
    @Export(name="auditOnFailure", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> auditOnFailure;

    /**
     * @return Indicates if auditing for failures.
     * 
     */
    public Output<Optional<Boolean>> auditOnFailure() {
        return Codegen.optional(this.auditOnFailure);
    }
    /**
     * Name of user account that created the policy.
     * 
     */
    @Export(name="author", refs={String.class}, tree="[0]")
    private Output<String> author;

    /**
     * @return Name of user account that created the policy.
     * 
     */
    public Output<String> author() {
        return this.author;
    }
    @Export(name="autoScanConfigured", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> autoScanConfigured;

    public Output<Optional<Boolean>> autoScanConfigured() {
        return Codegen.optional(this.autoScanConfigured);
    }
    @Export(name="autoScanEnabled", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> autoScanEnabled;

    public Output<Optional<Boolean>> autoScanEnabled() {
        return Codegen.optional(this.autoScanEnabled);
    }
    @Export(name="autoScanTimes", refs={List.class,HostAssurancePolicyAutoScanTime.class}, tree="[0,1]")
    private Output<List<HostAssurancePolicyAutoScanTime>> autoScanTimes;

    public Output<List<HostAssurancePolicyAutoScanTime>> autoScanTimes() {
        return this.autoScanTimes;
    }
    /**
     * List of function&#39;s forbidden permissions.
     * 
     */
    @Export(name="blacklistPermissions", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> blacklistPermissions;

    /**
     * @return List of function&#39;s forbidden permissions.
     * 
     */
    public Output<Optional<List<String>>> blacklistPermissions() {
        return Codegen.optional(this.blacklistPermissions);
    }
    /**
     * Indicates if blacklist permissions is relevant.
     * 
     */
    @Export(name="blacklistPermissionsEnabled", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> blacklistPermissionsEnabled;

    /**
     * @return Indicates if blacklist permissions is relevant.
     * 
     */
    public Output<Optional<Boolean>> blacklistPermissionsEnabled() {
        return Codegen.optional(this.blacklistPermissionsEnabled);
    }
    /**
     * List of blacklisted licenses.
     * 
     */
    @Export(name="blacklistedLicenses", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> blacklistedLicenses;

    /**
     * @return List of blacklisted licenses.
     * 
     */
    public Output<Optional<List<String>>> blacklistedLicenses() {
        return Codegen.optional(this.blacklistedLicenses);
    }
    /**
     * Lndicates if license blacklist is relevant.
     * 
     */
    @Export(name="blacklistedLicensesEnabled", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> blacklistedLicensesEnabled;

    /**
     * @return Lndicates if license blacklist is relevant.
     * 
     */
    public Output<Optional<Boolean>> blacklistedLicensesEnabled() {
        return Codegen.optional(this.blacklistedLicensesEnabled);
    }
    /**
     * Indicates if failed images are blocked.
     * 
     */
    @Export(name="blockFailed", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> blockFailed;

    /**
     * @return Indicates if failed images are blocked.
     * 
     */
    public Output<Optional<Boolean>> blockFailed() {
        return Codegen.optional(this.blockFailed);
    }
    @Export(name="controlExcludeNoFix", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> controlExcludeNoFix;

    public Output<Optional<Boolean>> controlExcludeNoFix() {
        return Codegen.optional(this.controlExcludeNoFix);
    }
    /**
     * List of Custom user scripts for checks.
     * 
     */
    @Export(name="customChecks", refs={List.class,HostAssurancePolicyCustomCheck.class}, tree="[0,1]")
    private Output</* @Nullable */ List<HostAssurancePolicyCustomCheck>> customChecks;

    /**
     * @return List of Custom user scripts for checks.
     * 
     */
    public Output<Optional<List<HostAssurancePolicyCustomCheck>>> customChecks() {
        return Codegen.optional(this.customChecks);
    }
    /**
     * Indicates if scanning should include custom checks.
     * 
     */
    @Export(name="customChecksEnabled", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> customChecksEnabled;

    /**
     * @return Indicates if scanning should include custom checks.
     * 
     */
    public Output<Optional<Boolean>> customChecksEnabled() {
        return Codegen.optional(this.customChecksEnabled);
    }
    @Export(name="customSeverityEnabled", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> customSeverityEnabled;

    public Output<Optional<Boolean>> customSeverityEnabled() {
        return Codegen.optional(this.customSeverityEnabled);
    }
    /**
     * Indicates if cves blacklist is relevant.
     * 
     */
    @Export(name="cvesBlackListEnabled", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> cvesBlackListEnabled;

    /**
     * @return Indicates if cves blacklist is relevant.
     * 
     */
    public Output<Optional<Boolean>> cvesBlackListEnabled() {
        return Codegen.optional(this.cvesBlackListEnabled);
    }
    /**
     * List of cves blacklisted items.
     * 
     */
    @Export(name="cvesBlackLists", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> cvesBlackLists;

    /**
     * @return List of cves blacklisted items.
     * 
     */
    public Output<Optional<List<String>>> cvesBlackLists() {
        return Codegen.optional(this.cvesBlackLists);
    }
    /**
     * Indicates if cves whitelist is relevant.
     * 
     */
    @Export(name="cvesWhiteListEnabled", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> cvesWhiteListEnabled;

    /**
     * @return Indicates if cves whitelist is relevant.
     * 
     */
    public Output<Optional<Boolean>> cvesWhiteListEnabled() {
        return Codegen.optional(this.cvesWhiteListEnabled);
    }
    /**
     * List of cves whitelisted licenses
     * 
     */
    @Export(name="cvesWhiteLists", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> cvesWhiteLists;

    /**
     * @return List of cves whitelisted licenses
     * 
     */
    public Output<Optional<List<String>>> cvesWhiteLists() {
        return Codegen.optional(this.cvesWhiteLists);
    }
    /**
     * Identifier of the cvss severity.
     * 
     */
    @Export(name="cvssSeverity", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> cvssSeverity;

    /**
     * @return Identifier of the cvss severity.
     * 
     */
    public Output<Optional<String>> cvssSeverity() {
        return Codegen.optional(this.cvssSeverity);
    }
    /**
     * Indicates if the cvss severity is scanned.
     * 
     */
    @Export(name="cvssSeverityEnabled", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> cvssSeverityEnabled;

    /**
     * @return Indicates if the cvss severity is scanned.
     * 
     */
    public Output<Optional<Boolean>> cvssSeverityEnabled() {
        return Codegen.optional(this.cvssSeverityEnabled);
    }
    /**
     * Indicates that policy should ignore cvss cases that do not have a known fix.
     * 
     */
    @Export(name="cvssSeverityExcludeNoFix", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> cvssSeverityExcludeNoFix;

    /**
     * @return Indicates that policy should ignore cvss cases that do not have a known fix.
     * 
     */
    public Output<Optional<Boolean>> cvssSeverityExcludeNoFix() {
        return Codegen.optional(this.cvssSeverityExcludeNoFix);
    }
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * Indicates if malware should block the image.
     * 
     */
    @Export(name="disallowMalware", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> disallowMalware;

    /**
     * @return Indicates if malware should block the image.
     * 
     */
    public Output<Optional<Boolean>> disallowMalware() {
        return Codegen.optional(this.disallowMalware);
    }
    @Export(name="dockerCisEnabled", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> dockerCisEnabled;

    public Output<Optional<Boolean>> dockerCisEnabled() {
        return Codegen.optional(this.dockerCisEnabled);
    }
    /**
     * Name of the container image.
     * 
     */
    @Export(name="domain", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> domain;

    /**
     * @return Name of the container image.
     * 
     */
    public Output<Optional<String>> domain() {
        return Codegen.optional(this.domain);
    }
    @Export(name="domainName", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> domainName;

    public Output<Optional<String>> domainName() {
        return Codegen.optional(this.domainName);
    }
    @Export(name="dtaEnabled", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> dtaEnabled;

    public Output<Optional<Boolean>> dtaEnabled() {
        return Codegen.optional(this.dtaEnabled);
    }
    @Export(name="dtaSeverity", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> dtaSeverity;

    public Output<Optional<String>> dtaSeverity() {
        return Codegen.optional(this.dtaSeverity);
    }
    @Export(name="enabled", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enabled;

    public Output<Optional<Boolean>> enabled() {
        return Codegen.optional(this.enabled);
    }
    @Export(name="enforce", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enforce;

    public Output<Optional<Boolean>> enforce() {
        return Codegen.optional(this.enforce);
    }
    @Export(name="enforceAfterDays", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> enforceAfterDays;

    public Output<Optional<Integer>> enforceAfterDays() {
        return Codegen.optional(this.enforceAfterDays);
    }
    @Export(name="enforceExcessivePermissions", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enforceExcessivePermissions;

    public Output<Optional<Boolean>> enforceExcessivePermissions() {
        return Codegen.optional(this.enforceExcessivePermissions);
    }
    @Export(name="exceptionalMonitoredMalwarePaths", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> exceptionalMonitoredMalwarePaths;

    public Output<Optional<List<String>>> exceptionalMonitoredMalwarePaths() {
        return Codegen.optional(this.exceptionalMonitoredMalwarePaths);
    }
    /**
     * Indicates if cicd failures will fail the image.
     * 
     */
    @Export(name="failCicd", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> failCicd;

    /**
     * @return Indicates if cicd failures will fail the image.
     * 
     */
    public Output<Optional<Boolean>> failCicd() {
        return Codegen.optional(this.failCicd);
    }
    @Export(name="forbiddenLabels", refs={List.class,HostAssurancePolicyForbiddenLabel.class}, tree="[0,1]")
    private Output</* @Nullable */ List<HostAssurancePolicyForbiddenLabel>> forbiddenLabels;

    public Output<Optional<List<HostAssurancePolicyForbiddenLabel>>> forbiddenLabels() {
        return Codegen.optional(this.forbiddenLabels);
    }
    @Export(name="forbiddenLabelsEnabled", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> forbiddenLabelsEnabled;

    public Output<Optional<Boolean>> forbiddenLabelsEnabled() {
        return Codegen.optional(this.forbiddenLabelsEnabled);
    }
    @Export(name="forceMicroenforcer", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> forceMicroenforcer;

    public Output<Optional<Boolean>> forceMicroenforcer() {
        return Codegen.optional(this.forceMicroenforcer);
    }
    @Export(name="functionIntegrityEnabled", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> functionIntegrityEnabled;

    public Output<Optional<Boolean>> functionIntegrityEnabled() {
        return Codegen.optional(this.functionIntegrityEnabled);
    }
    @Export(name="ignoreRecentlyPublishedVln", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> ignoreRecentlyPublishedVln;

    public Output<Optional<Boolean>> ignoreRecentlyPublishedVln() {
        return Codegen.optional(this.ignoreRecentlyPublishedVln);
    }
    @Export(name="ignoreRecentlyPublishedVlnPeriod", refs={Integer.class}, tree="[0]")
    private Output<Integer> ignoreRecentlyPublishedVlnPeriod;

    public Output<Integer> ignoreRecentlyPublishedVlnPeriod() {
        return this.ignoreRecentlyPublishedVlnPeriod;
    }
    /**
     * Indicates if risk resources are ignored.
     * 
     */
    @Export(name="ignoreRiskResourcesEnabled", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> ignoreRiskResourcesEnabled;

    /**
     * @return Indicates if risk resources are ignored.
     * 
     */
    public Output<Optional<Boolean>> ignoreRiskResourcesEnabled() {
        return Codegen.optional(this.ignoreRiskResourcesEnabled);
    }
    /**
     * List of ignored risk resources.
     * 
     */
    @Export(name="ignoredRiskResources", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> ignoredRiskResources;

    /**
     * @return List of ignored risk resources.
     * 
     */
    public Output<Optional<List<String>>> ignoredRiskResources() {
        return Codegen.optional(this.ignoredRiskResources);
    }
    /**
     * List of images.
     * 
     */
    @Export(name="images", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> images;

    /**
     * @return List of images.
     * 
     */
    public Output<Optional<List<String>>> images() {
        return Codegen.optional(this.images);
    }
    @Export(name="kubeCisEnabled", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> kubeCisEnabled;

    public Output<Optional<Boolean>> kubeCisEnabled() {
        return Codegen.optional(this.kubeCisEnabled);
    }
    /**
     * List of labels.
     * 
     */
    @Export(name="labels", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> labels;

    /**
     * @return List of labels.
     * 
     */
    public Output<Optional<List<String>>> labels() {
        return Codegen.optional(this.labels);
    }
    @Export(name="malwareAction", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> malwareAction;

    public Output<Optional<String>> malwareAction() {
        return Codegen.optional(this.malwareAction);
    }
    /**
     * Value of allowed maximum score.
     * 
     */
    @Export(name="maximumScore", refs={Double.class}, tree="[0]")
    private Output</* @Nullable */ Double> maximumScore;

    /**
     * @return Value of allowed maximum score.
     * 
     */
    public Output<Optional<Double>> maximumScore() {
        return Codegen.optional(this.maximumScore);
    }
    /**
     * Indicates if exceeding the maximum score is scanned.
     * 
     */
    @Export(name="maximumScoreEnabled", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> maximumScoreEnabled;

    /**
     * @return Indicates if exceeding the maximum score is scanned.
     * 
     */
    public Output<Optional<Boolean>> maximumScoreEnabled() {
        return Codegen.optional(this.maximumScoreEnabled);
    }
    /**
     * Indicates that policy should ignore cases that do not have a known fix.
     * 
     */
    @Export(name="maximumScoreExcludeNoFix", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> maximumScoreExcludeNoFix;

    /**
     * @return Indicates that policy should ignore cases that do not have a known fix.
     * 
     */
    public Output<Optional<Boolean>> maximumScoreExcludeNoFix() {
        return Codegen.optional(this.maximumScoreExcludeNoFix);
    }
    @Export(name="monitoredMalwarePaths", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> monitoredMalwarePaths;

    public Output<Optional<List<String>>> monitoredMalwarePaths() {
        return Codegen.optional(this.monitoredMalwarePaths);
    }
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    public Output<String> name() {
        return this.name;
    }
    /**
     * Indicates if raise a warning for images that should only be run as root.
     * 
     */
    @Export(name="onlyNoneRootUsers", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> onlyNoneRootUsers;

    /**
     * @return Indicates if raise a warning for images that should only be run as root.
     * 
     */
    public Output<Optional<Boolean>> onlyNoneRootUsers() {
        return Codegen.optional(this.onlyNoneRootUsers);
    }
    /**
     * Indicates if packages blacklist is relevant.
     * 
     */
    @Export(name="packagesBlackListEnabled", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> packagesBlackListEnabled;

    /**
     * @return Indicates if packages blacklist is relevant.
     * 
     */
    public Output<Optional<Boolean>> packagesBlackListEnabled() {
        return Codegen.optional(this.packagesBlackListEnabled);
    }
    /**
     * List of backlisted images.
     * 
     */
    @Export(name="packagesBlackLists", refs={List.class,HostAssurancePolicyPackagesBlackList.class}, tree="[0,1]")
    private Output</* @Nullable */ List<HostAssurancePolicyPackagesBlackList>> packagesBlackLists;

    /**
     * @return List of backlisted images.
     * 
     */
    public Output<Optional<List<HostAssurancePolicyPackagesBlackList>>> packagesBlackLists() {
        return Codegen.optional(this.packagesBlackLists);
    }
    /**
     * Indicates if packages whitelist is relevant.
     * 
     */
    @Export(name="packagesWhiteListEnabled", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> packagesWhiteListEnabled;

    /**
     * @return Indicates if packages whitelist is relevant.
     * 
     */
    public Output<Optional<Boolean>> packagesWhiteListEnabled() {
        return Codegen.optional(this.packagesWhiteListEnabled);
    }
    /**
     * List of whitelisted images.
     * 
     */
    @Export(name="packagesWhiteLists", refs={List.class,HostAssurancePolicyPackagesWhiteList.class}, tree="[0,1]")
    private Output</* @Nullable */ List<HostAssurancePolicyPackagesWhiteList>> packagesWhiteLists;

    /**
     * @return List of whitelisted images.
     * 
     */
    public Output<Optional<List<HostAssurancePolicyPackagesWhiteList>>> packagesWhiteLists() {
        return Codegen.optional(this.packagesWhiteLists);
    }
    @Export(name="partialResultsImageFail", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> partialResultsImageFail;

    public Output<Optional<Boolean>> partialResultsImageFail() {
        return Codegen.optional(this.partialResultsImageFail);
    }
    @Export(name="readOnly", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> readOnly;

    public Output<Optional<Boolean>> readOnly() {
        return Codegen.optional(this.readOnly);
    }
    /**
     * List of registries.
     * 
     */
    @Export(name="registries", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> registries;

    /**
     * @return List of registries.
     * 
     */
    public Output<Optional<List<String>>> registries() {
        return Codegen.optional(this.registries);
    }
    @Export(name="registry", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> registry;

    public Output<Optional<String>> registry() {
        return Codegen.optional(this.registry);
    }
    @Export(name="requiredLabels", refs={List.class,HostAssurancePolicyRequiredLabel.class}, tree="[0,1]")
    private Output</* @Nullable */ List<HostAssurancePolicyRequiredLabel>> requiredLabels;

    public Output<Optional<List<HostAssurancePolicyRequiredLabel>>> requiredLabels() {
        return Codegen.optional(this.requiredLabels);
    }
    @Export(name="requiredLabelsEnabled", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> requiredLabelsEnabled;

    public Output<Optional<Boolean>> requiredLabelsEnabled() {
        return Codegen.optional(this.requiredLabelsEnabled);
    }
    @Export(name="scanNfsMounts", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> scanNfsMounts;

    public Output<Optional<Boolean>> scanNfsMounts() {
        return Codegen.optional(this.scanNfsMounts);
    }
    /**
     * Indicates if scan should include sensitive data in the image.
     * 
     */
    @Export(name="scanSensitiveData", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> scanSensitiveData;

    /**
     * @return Indicates if scan should include sensitive data in the image.
     * 
     */
    public Output<Optional<Boolean>> scanSensitiveData() {
        return Codegen.optional(this.scanSensitiveData);
    }
    /**
     * Indicates if scanning should include scap.
     * 
     */
    @Export(name="scapEnabled", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> scapEnabled;

    /**
     * @return Indicates if scanning should include scap.
     * 
     */
    public Output<Optional<Boolean>> scapEnabled() {
        return Codegen.optional(this.scapEnabled);
    }
    /**
     * List of SCAP user scripts for checks.
     * 
     */
    @Export(name="scapFiles", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> scapFiles;

    /**
     * @return List of SCAP user scripts for checks.
     * 
     */
    public Output<Optional<List<String>>> scapFiles() {
        return Codegen.optional(this.scapFiles);
    }
    @Export(name="scopes", refs={List.class,HostAssurancePolicyScope.class}, tree="[0,1]")
    private Output<List<HostAssurancePolicyScope>> scopes;

    public Output<List<HostAssurancePolicyScope>> scopes() {
        return this.scopes;
    }
    /**
     * List of trusted images.
     * 
     */
    @Export(name="trustedBaseImages", refs={List.class,HostAssurancePolicyTrustedBaseImage.class}, tree="[0,1]")
    private Output</* @Nullable */ List<HostAssurancePolicyTrustedBaseImage>> trustedBaseImages;

    /**
     * @return List of trusted images.
     * 
     */
    public Output<Optional<List<HostAssurancePolicyTrustedBaseImage>>> trustedBaseImages() {
        return Codegen.optional(this.trustedBaseImages);
    }
    /**
     * Indicates if list of trusted base images is relevant.
     * 
     */
    @Export(name="trustedBaseImagesEnabled", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> trustedBaseImagesEnabled;

    /**
     * @return Indicates if list of trusted base images is relevant.
     * 
     */
    public Output<Optional<Boolean>> trustedBaseImagesEnabled() {
        return Codegen.optional(this.trustedBaseImagesEnabled);
    }
    /**
     * List of whitelisted licenses.
     * 
     */
    @Export(name="whitelistedLicenses", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> whitelistedLicenses;

    /**
     * @return List of whitelisted licenses.
     * 
     */
    public Output<Optional<List<String>>> whitelistedLicenses() {
        return Codegen.optional(this.whitelistedLicenses);
    }
    /**
     * Indicates if license blacklist is relevant.
     * 
     */
    @Export(name="whitelistedLicensesEnabled", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> whitelistedLicensesEnabled;

    /**
     * @return Indicates if license blacklist is relevant.
     * 
     */
    public Output<Optional<Boolean>> whitelistedLicensesEnabled() {
        return Codegen.optional(this.whitelistedLicensesEnabled);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public HostAssurancePolicy(String name) {
        this(name, HostAssurancePolicyArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public HostAssurancePolicy(String name, HostAssurancePolicyArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public HostAssurancePolicy(String name, HostAssurancePolicyArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("aquasec:index/hostAssurancePolicy:HostAssurancePolicy", name, args == null ? HostAssurancePolicyArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private HostAssurancePolicy(String name, Output<String> id, @Nullable HostAssurancePolicyState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("aquasec:index/hostAssurancePolicy:HostAssurancePolicy", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static HostAssurancePolicy get(String name, Output<String> id, @Nullable HostAssurancePolicyState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new HostAssurancePolicy(name, id, state, options);
    }
}
