// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumiverse.aquasec;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumiverse.aquasec.inputs.HostRuntimePolicyFileIntegrityMonitoringArgs;
import com.pulumiverse.aquasec.inputs.HostRuntimePolicyMalwareScanOptionsArgs;
import com.pulumiverse.aquasec.inputs.HostRuntimePolicyScopeVariableArgs;
import com.pulumiverse.aquasec.inputs.HostRuntimePolicyWindowsRegistryMonitoringArgs;
import com.pulumiverse.aquasec.inputs.HostRuntimePolicyWindowsRegistryProtectionArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class HostRuntimePolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final HostRuntimePolicyArgs Empty = new HostRuntimePolicyArgs();

    /**
     * Indicates the application scope of the service.
     * 
     */
    @Import(name="applicationScopes")
    private @Nullable Output<List<String>> applicationScopes;

    /**
     * @return Indicates the application scope of the service.
     * 
     */
    public Optional<Output<List<String>>> applicationScopes() {
        return Optional.ofNullable(this.applicationScopes);
    }

    /**
     * If true, all process activity will be audited.
     * 
     */
    @Import(name="auditAllOsUserActivity")
    private @Nullable Output<Boolean> auditAllOsUserActivity;

    /**
     * @return If true, all process activity will be audited.
     * 
     */
    public Optional<Output<Boolean>> auditAllOsUserActivity() {
        return Optional.ofNullable(this.auditAllOsUserActivity);
    }

    /**
     * Detects brute force login attempts
     * 
     */
    @Import(name="auditBruteForceLogin")
    private @Nullable Output<Boolean> auditBruteForceLogin;

    /**
     * @return Detects brute force login attempts
     * 
     */
    public Optional<Output<Boolean>> auditBruteForceLogin() {
        return Optional.ofNullable(this.auditBruteForceLogin);
    }

    /**
     * If true, full command arguments will be audited.
     * 
     */
    @Import(name="auditFullCommandArguments")
    private @Nullable Output<Boolean> auditFullCommandArguments;

    /**
     * @return If true, full command arguments will be audited.
     * 
     */
    public Optional<Output<Boolean>> auditFullCommandArguments() {
        return Optional.ofNullable(this.auditFullCommandArguments);
    }

    /**
     * If true, host failed logins will be audited.
     * 
     */
    @Import(name="auditHostFailedLoginEvents")
    private @Nullable Output<Boolean> auditHostFailedLoginEvents;

    /**
     * @return If true, host failed logins will be audited.
     * 
     */
    public Optional<Output<Boolean>> auditHostFailedLoginEvents() {
        return Optional.ofNullable(this.auditHostFailedLoginEvents);
    }

    /**
     * If true, host successful logins will be audited.
     * 
     */
    @Import(name="auditHostSuccessfulLoginEvents")
    private @Nullable Output<Boolean> auditHostSuccessfulLoginEvents;

    /**
     * @return If true, host successful logins will be audited.
     * 
     */
    public Optional<Output<Boolean>> auditHostSuccessfulLoginEvents() {
        return Optional.ofNullable(this.auditHostSuccessfulLoginEvents);
    }

    /**
     * If true, account management will be audited.
     * 
     */
    @Import(name="auditUserAccountManagement")
    private @Nullable Output<Boolean> auditUserAccountManagement;

    /**
     * @return If true, account management will be audited.
     * 
     */
    public Optional<Output<Boolean>> auditUserAccountManagement() {
        return Optional.ofNullable(this.auditUserAccountManagement);
    }

    /**
     * Detect and prevent communication to DNS/IP addresses known to be used for Cryptocurrency Mining
     * 
     */
    @Import(name="blockCryptocurrencyMining")
    private @Nullable Output<Boolean> blockCryptocurrencyMining;

    /**
     * @return Detect and prevent communication to DNS/IP addresses known to be used for Cryptocurrency Mining
     * 
     */
    public Optional<Output<Boolean>> blockCryptocurrencyMining() {
        return Optional.ofNullable(this.blockCryptocurrencyMining);
    }

    /**
     * List of files that are prevented from being read, modified and executed in the containers.
     * 
     */
    @Import(name="blockedFiles")
    private @Nullable Output<List<String>> blockedFiles;

    /**
     * @return List of files that are prevented from being read, modified and executed in the containers.
     * 
     */
    public Optional<Output<List<String>>> blockedFiles() {
        return Optional.ofNullable(this.blockedFiles);
    }

    /**
     * The description of the host runtime policy
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the host runtime policy
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * If true, detect and prevent communication from containers to IP addresses known to have a bad reputation.
     * 
     */
    @Import(name="enableIpReputationSecurity")
    private @Nullable Output<Boolean> enableIpReputationSecurity;

    /**
     * @return If true, detect and prevent communication from containers to IP addresses known to have a bad reputation.
     * 
     */
    public Optional<Output<Boolean>> enableIpReputationSecurity() {
        return Optional.ofNullable(this.enableIpReputationSecurity);
    }

    /**
     * Indicates if the runtime policy is enabled or not.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Indicates if the runtime policy is enabled or not.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * Indicates that policy should effect container execution (not just for audit).
     * 
     */
    @Import(name="enforce")
    private @Nullable Output<Boolean> enforce;

    /**
     * @return Indicates that policy should effect container execution (not just for audit).
     * 
     */
    public Optional<Output<Boolean>> enforce() {
        return Optional.ofNullable(this.enforce);
    }

    /**
     * Indicates the number of days after which the runtime policy will be changed to enforce mode.
     * 
     */
    @Import(name="enforceAfterDays")
    private @Nullable Output<Integer> enforceAfterDays;

    /**
     * @return Indicates the number of days after which the runtime policy will be changed to enforce mode.
     * 
     */
    public Optional<Output<Integer>> enforceAfterDays() {
        return Optional.ofNullable(this.enforceAfterDays);
    }

    /**
     * Configuration for file integrity monitoring.
     * 
     */
    @Import(name="fileIntegrityMonitoring")
    private @Nullable Output<HostRuntimePolicyFileIntegrityMonitoringArgs> fileIntegrityMonitoring;

    /**
     * @return Configuration for file integrity monitoring.
     * 
     */
    public Optional<Output<HostRuntimePolicyFileIntegrityMonitoringArgs>> fileIntegrityMonitoring() {
        return Optional.ofNullable(this.fileIntegrityMonitoring);
    }

    /**
     * Configuration for Real-Time Malware Protection.
     * 
     */
    @Import(name="malwareScanOptions")
    private @Nullable Output<HostRuntimePolicyMalwareScanOptionsArgs> malwareScanOptions;

    /**
     * @return Configuration for Real-Time Malware Protection.
     * 
     */
    public Optional<Output<HostRuntimePolicyMalwareScanOptionsArgs>> malwareScanOptions() {
        return Optional.ofNullable(this.malwareScanOptions);
    }

    /**
     * If true, system log will be monitored.
     * 
     */
    @Import(name="monitorSystemLogIntegrity")
    private @Nullable Output<Boolean> monitorSystemLogIntegrity;

    /**
     * @return If true, system log will be monitored.
     * 
     */
    public Optional<Output<Boolean>> monitorSystemLogIntegrity() {
        return Optional.ofNullable(this.monitorSystemLogIntegrity);
    }

    /**
     * If true, system time changes will be monitored.
     * 
     */
    @Import(name="monitorSystemTimeChanges")
    private @Nullable Output<Boolean> monitorSystemTimeChanges;

    /**
     * @return If true, system time changes will be monitored.
     * 
     */
    public Optional<Output<Boolean>> monitorSystemTimeChanges() {
        return Optional.ofNullable(this.monitorSystemTimeChanges);
    }

    /**
     * If true, windows service operations will be monitored.
     * 
     */
    @Import(name="monitorWindowsServices")
    private @Nullable Output<Boolean> monitorWindowsServices;

    /**
     * @return If true, windows service operations will be monitored.
     * 
     */
    public Optional<Output<Boolean>> monitorWindowsServices() {
        return Optional.ofNullable(this.monitorWindowsServices);
    }

    /**
     * Name of the host runtime policy
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the host runtime policy
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * List of OS (Linux or Windows) groups that are allowed to authenticate to the host, and block authentication requests from all others. Groups can be either Linux groups or Windows AD groups.
     * 
     */
    @Import(name="osGroupsAlloweds")
    private @Nullable Output<List<String>> osGroupsAlloweds;

    /**
     * @return List of OS (Linux or Windows) groups that are allowed to authenticate to the host, and block authentication requests from all others. Groups can be either Linux groups or Windows AD groups.
     * 
     */
    public Optional<Output<List<String>>> osGroupsAlloweds() {
        return Optional.ofNullable(this.osGroupsAlloweds);
    }

    /**
     * List of OS (Linux or Windows) groups that are not allowed to authenticate to the host, and block authentication requests from all others. Groups can be either Linux groups or Windows AD groups.
     * 
     */
    @Import(name="osGroupsBlockeds")
    private @Nullable Output<List<String>> osGroupsBlockeds;

    /**
     * @return List of OS (Linux or Windows) groups that are not allowed to authenticate to the host, and block authentication requests from all others. Groups can be either Linux groups or Windows AD groups.
     * 
     */
    public Optional<Output<List<String>>> osGroupsBlockeds() {
        return Optional.ofNullable(this.osGroupsBlockeds);
    }

    /**
     * List of OS (Linux or Windows) users that are allowed to authenticate to the host, and block authentication requests from all others.
     * 
     */
    @Import(name="osUsersAlloweds")
    private @Nullable Output<List<String>> osUsersAlloweds;

    /**
     * @return List of OS (Linux or Windows) users that are allowed to authenticate to the host, and block authentication requests from all others.
     * 
     */
    public Optional<Output<List<String>>> osUsersAlloweds() {
        return Optional.ofNullable(this.osUsersAlloweds);
    }

    /**
     * List of OS (Linux or Windows) users that are not allowed to authenticate to the host, and block authentication requests from all others.
     * 
     */
    @Import(name="osUsersBlockeds")
    private @Nullable Output<List<String>> osUsersBlockeds;

    /**
     * @return List of OS (Linux or Windows) users that are not allowed to authenticate to the host, and block authentication requests from all others.
     * 
     */
    public Optional<Output<List<String>>> osUsersBlockeds() {
        return Optional.ofNullable(this.osUsersBlockeds);
    }

    /**
     * List of packages that are not allowed read, write or execute all files that under the packages.
     * 
     */
    @Import(name="packageBlocks")
    private @Nullable Output<List<String>> packageBlocks;

    /**
     * @return List of packages that are not allowed read, write or execute all files that under the packages.
     * 
     */
    public Optional<Output<List<String>>> packageBlocks() {
        return Optional.ofNullable(this.packageBlocks);
    }

    /**
     * If true, port scanning behaviors will be audited.
     * 
     */
    @Import(name="portScanningDetection")
    private @Nullable Output<Boolean> portScanningDetection;

    /**
     * @return If true, port scanning behaviors will be audited.
     * 
     */
    public Optional<Output<Boolean>> portScanningDetection() {
        return Optional.ofNullable(this.portScanningDetection);
    }

    /**
     * Logical expression of how to compute the dependency of the scope variables.
     * 
     */
    @Import(name="scopeExpression")
    private @Nullable Output<String> scopeExpression;

    /**
     * @return Logical expression of how to compute the dependency of the scope variables.
     * 
     */
    public Optional<Output<String>> scopeExpression() {
        return Optional.ofNullable(this.scopeExpression);
    }

    /**
     * List of scope attributes.
     * 
     */
    @Import(name="scopeVariables")
    private @Nullable Output<List<HostRuntimePolicyScopeVariableArgs>> scopeVariables;

    /**
     * @return List of scope attributes.
     * 
     */
    public Optional<Output<List<HostRuntimePolicyScopeVariableArgs>>> scopeVariables() {
        return Optional.ofNullable(this.scopeVariables);
    }

    /**
     * Configuration for windows registry monitoring.
     * 
     */
    @Import(name="windowsRegistryMonitoring")
    private @Nullable Output<HostRuntimePolicyWindowsRegistryMonitoringArgs> windowsRegistryMonitoring;

    /**
     * @return Configuration for windows registry monitoring.
     * 
     */
    public Optional<Output<HostRuntimePolicyWindowsRegistryMonitoringArgs>> windowsRegistryMonitoring() {
        return Optional.ofNullable(this.windowsRegistryMonitoring);
    }

    /**
     * Configuration for windows registry protection.
     * 
     */
    @Import(name="windowsRegistryProtection")
    private @Nullable Output<HostRuntimePolicyWindowsRegistryProtectionArgs> windowsRegistryProtection;

    /**
     * @return Configuration for windows registry protection.
     * 
     */
    public Optional<Output<HostRuntimePolicyWindowsRegistryProtectionArgs>> windowsRegistryProtection() {
        return Optional.ofNullable(this.windowsRegistryProtection);
    }

    private HostRuntimePolicyArgs() {}

    private HostRuntimePolicyArgs(HostRuntimePolicyArgs $) {
        this.applicationScopes = $.applicationScopes;
        this.auditAllOsUserActivity = $.auditAllOsUserActivity;
        this.auditBruteForceLogin = $.auditBruteForceLogin;
        this.auditFullCommandArguments = $.auditFullCommandArguments;
        this.auditHostFailedLoginEvents = $.auditHostFailedLoginEvents;
        this.auditHostSuccessfulLoginEvents = $.auditHostSuccessfulLoginEvents;
        this.auditUserAccountManagement = $.auditUserAccountManagement;
        this.blockCryptocurrencyMining = $.blockCryptocurrencyMining;
        this.blockedFiles = $.blockedFiles;
        this.description = $.description;
        this.enableIpReputationSecurity = $.enableIpReputationSecurity;
        this.enabled = $.enabled;
        this.enforce = $.enforce;
        this.enforceAfterDays = $.enforceAfterDays;
        this.fileIntegrityMonitoring = $.fileIntegrityMonitoring;
        this.malwareScanOptions = $.malwareScanOptions;
        this.monitorSystemLogIntegrity = $.monitorSystemLogIntegrity;
        this.monitorSystemTimeChanges = $.monitorSystemTimeChanges;
        this.monitorWindowsServices = $.monitorWindowsServices;
        this.name = $.name;
        this.osGroupsAlloweds = $.osGroupsAlloweds;
        this.osGroupsBlockeds = $.osGroupsBlockeds;
        this.osUsersAlloweds = $.osUsersAlloweds;
        this.osUsersBlockeds = $.osUsersBlockeds;
        this.packageBlocks = $.packageBlocks;
        this.portScanningDetection = $.portScanningDetection;
        this.scopeExpression = $.scopeExpression;
        this.scopeVariables = $.scopeVariables;
        this.windowsRegistryMonitoring = $.windowsRegistryMonitoring;
        this.windowsRegistryProtection = $.windowsRegistryProtection;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HostRuntimePolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HostRuntimePolicyArgs $;

        public Builder() {
            $ = new HostRuntimePolicyArgs();
        }

        public Builder(HostRuntimePolicyArgs defaults) {
            $ = new HostRuntimePolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param applicationScopes Indicates the application scope of the service.
         * 
         * @return builder
         * 
         */
        public Builder applicationScopes(@Nullable Output<List<String>> applicationScopes) {
            $.applicationScopes = applicationScopes;
            return this;
        }

        /**
         * @param applicationScopes Indicates the application scope of the service.
         * 
         * @return builder
         * 
         */
        public Builder applicationScopes(List<String> applicationScopes) {
            return applicationScopes(Output.of(applicationScopes));
        }

        /**
         * @param applicationScopes Indicates the application scope of the service.
         * 
         * @return builder
         * 
         */
        public Builder applicationScopes(String... applicationScopes) {
            return applicationScopes(List.of(applicationScopes));
        }

        /**
         * @param auditAllOsUserActivity If true, all process activity will be audited.
         * 
         * @return builder
         * 
         */
        public Builder auditAllOsUserActivity(@Nullable Output<Boolean> auditAllOsUserActivity) {
            $.auditAllOsUserActivity = auditAllOsUserActivity;
            return this;
        }

        /**
         * @param auditAllOsUserActivity If true, all process activity will be audited.
         * 
         * @return builder
         * 
         */
        public Builder auditAllOsUserActivity(Boolean auditAllOsUserActivity) {
            return auditAllOsUserActivity(Output.of(auditAllOsUserActivity));
        }

        /**
         * @param auditBruteForceLogin Detects brute force login attempts
         * 
         * @return builder
         * 
         */
        public Builder auditBruteForceLogin(@Nullable Output<Boolean> auditBruteForceLogin) {
            $.auditBruteForceLogin = auditBruteForceLogin;
            return this;
        }

        /**
         * @param auditBruteForceLogin Detects brute force login attempts
         * 
         * @return builder
         * 
         */
        public Builder auditBruteForceLogin(Boolean auditBruteForceLogin) {
            return auditBruteForceLogin(Output.of(auditBruteForceLogin));
        }

        /**
         * @param auditFullCommandArguments If true, full command arguments will be audited.
         * 
         * @return builder
         * 
         */
        public Builder auditFullCommandArguments(@Nullable Output<Boolean> auditFullCommandArguments) {
            $.auditFullCommandArguments = auditFullCommandArguments;
            return this;
        }

        /**
         * @param auditFullCommandArguments If true, full command arguments will be audited.
         * 
         * @return builder
         * 
         */
        public Builder auditFullCommandArguments(Boolean auditFullCommandArguments) {
            return auditFullCommandArguments(Output.of(auditFullCommandArguments));
        }

        /**
         * @param auditHostFailedLoginEvents If true, host failed logins will be audited.
         * 
         * @return builder
         * 
         */
        public Builder auditHostFailedLoginEvents(@Nullable Output<Boolean> auditHostFailedLoginEvents) {
            $.auditHostFailedLoginEvents = auditHostFailedLoginEvents;
            return this;
        }

        /**
         * @param auditHostFailedLoginEvents If true, host failed logins will be audited.
         * 
         * @return builder
         * 
         */
        public Builder auditHostFailedLoginEvents(Boolean auditHostFailedLoginEvents) {
            return auditHostFailedLoginEvents(Output.of(auditHostFailedLoginEvents));
        }

        /**
         * @param auditHostSuccessfulLoginEvents If true, host successful logins will be audited.
         * 
         * @return builder
         * 
         */
        public Builder auditHostSuccessfulLoginEvents(@Nullable Output<Boolean> auditHostSuccessfulLoginEvents) {
            $.auditHostSuccessfulLoginEvents = auditHostSuccessfulLoginEvents;
            return this;
        }

        /**
         * @param auditHostSuccessfulLoginEvents If true, host successful logins will be audited.
         * 
         * @return builder
         * 
         */
        public Builder auditHostSuccessfulLoginEvents(Boolean auditHostSuccessfulLoginEvents) {
            return auditHostSuccessfulLoginEvents(Output.of(auditHostSuccessfulLoginEvents));
        }

        /**
         * @param auditUserAccountManagement If true, account management will be audited.
         * 
         * @return builder
         * 
         */
        public Builder auditUserAccountManagement(@Nullable Output<Boolean> auditUserAccountManagement) {
            $.auditUserAccountManagement = auditUserAccountManagement;
            return this;
        }

        /**
         * @param auditUserAccountManagement If true, account management will be audited.
         * 
         * @return builder
         * 
         */
        public Builder auditUserAccountManagement(Boolean auditUserAccountManagement) {
            return auditUserAccountManagement(Output.of(auditUserAccountManagement));
        }

        /**
         * @param blockCryptocurrencyMining Detect and prevent communication to DNS/IP addresses known to be used for Cryptocurrency Mining
         * 
         * @return builder
         * 
         */
        public Builder blockCryptocurrencyMining(@Nullable Output<Boolean> blockCryptocurrencyMining) {
            $.blockCryptocurrencyMining = blockCryptocurrencyMining;
            return this;
        }

        /**
         * @param blockCryptocurrencyMining Detect and prevent communication to DNS/IP addresses known to be used for Cryptocurrency Mining
         * 
         * @return builder
         * 
         */
        public Builder blockCryptocurrencyMining(Boolean blockCryptocurrencyMining) {
            return blockCryptocurrencyMining(Output.of(blockCryptocurrencyMining));
        }

        /**
         * @param blockedFiles List of files that are prevented from being read, modified and executed in the containers.
         * 
         * @return builder
         * 
         */
        public Builder blockedFiles(@Nullable Output<List<String>> blockedFiles) {
            $.blockedFiles = blockedFiles;
            return this;
        }

        /**
         * @param blockedFiles List of files that are prevented from being read, modified and executed in the containers.
         * 
         * @return builder
         * 
         */
        public Builder blockedFiles(List<String> blockedFiles) {
            return blockedFiles(Output.of(blockedFiles));
        }

        /**
         * @param blockedFiles List of files that are prevented from being read, modified and executed in the containers.
         * 
         * @return builder
         * 
         */
        public Builder blockedFiles(String... blockedFiles) {
            return blockedFiles(List.of(blockedFiles));
        }

        /**
         * @param description The description of the host runtime policy
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the host runtime policy
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param enableIpReputationSecurity If true, detect and prevent communication from containers to IP addresses known to have a bad reputation.
         * 
         * @return builder
         * 
         */
        public Builder enableIpReputationSecurity(@Nullable Output<Boolean> enableIpReputationSecurity) {
            $.enableIpReputationSecurity = enableIpReputationSecurity;
            return this;
        }

        /**
         * @param enableIpReputationSecurity If true, detect and prevent communication from containers to IP addresses known to have a bad reputation.
         * 
         * @return builder
         * 
         */
        public Builder enableIpReputationSecurity(Boolean enableIpReputationSecurity) {
            return enableIpReputationSecurity(Output.of(enableIpReputationSecurity));
        }

        /**
         * @param enabled Indicates if the runtime policy is enabled or not.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Indicates if the runtime policy is enabled or not.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param enforce Indicates that policy should effect container execution (not just for audit).
         * 
         * @return builder
         * 
         */
        public Builder enforce(@Nullable Output<Boolean> enforce) {
            $.enforce = enforce;
            return this;
        }

        /**
         * @param enforce Indicates that policy should effect container execution (not just for audit).
         * 
         * @return builder
         * 
         */
        public Builder enforce(Boolean enforce) {
            return enforce(Output.of(enforce));
        }

        /**
         * @param enforceAfterDays Indicates the number of days after which the runtime policy will be changed to enforce mode.
         * 
         * @return builder
         * 
         */
        public Builder enforceAfterDays(@Nullable Output<Integer> enforceAfterDays) {
            $.enforceAfterDays = enforceAfterDays;
            return this;
        }

        /**
         * @param enforceAfterDays Indicates the number of days after which the runtime policy will be changed to enforce mode.
         * 
         * @return builder
         * 
         */
        public Builder enforceAfterDays(Integer enforceAfterDays) {
            return enforceAfterDays(Output.of(enforceAfterDays));
        }

        /**
         * @param fileIntegrityMonitoring Configuration for file integrity monitoring.
         * 
         * @return builder
         * 
         */
        public Builder fileIntegrityMonitoring(@Nullable Output<HostRuntimePolicyFileIntegrityMonitoringArgs> fileIntegrityMonitoring) {
            $.fileIntegrityMonitoring = fileIntegrityMonitoring;
            return this;
        }

        /**
         * @param fileIntegrityMonitoring Configuration for file integrity monitoring.
         * 
         * @return builder
         * 
         */
        public Builder fileIntegrityMonitoring(HostRuntimePolicyFileIntegrityMonitoringArgs fileIntegrityMonitoring) {
            return fileIntegrityMonitoring(Output.of(fileIntegrityMonitoring));
        }

        /**
         * @param malwareScanOptions Configuration for Real-Time Malware Protection.
         * 
         * @return builder
         * 
         */
        public Builder malwareScanOptions(@Nullable Output<HostRuntimePolicyMalwareScanOptionsArgs> malwareScanOptions) {
            $.malwareScanOptions = malwareScanOptions;
            return this;
        }

        /**
         * @param malwareScanOptions Configuration for Real-Time Malware Protection.
         * 
         * @return builder
         * 
         */
        public Builder malwareScanOptions(HostRuntimePolicyMalwareScanOptionsArgs malwareScanOptions) {
            return malwareScanOptions(Output.of(malwareScanOptions));
        }

        /**
         * @param monitorSystemLogIntegrity If true, system log will be monitored.
         * 
         * @return builder
         * 
         */
        public Builder monitorSystemLogIntegrity(@Nullable Output<Boolean> monitorSystemLogIntegrity) {
            $.monitorSystemLogIntegrity = monitorSystemLogIntegrity;
            return this;
        }

        /**
         * @param monitorSystemLogIntegrity If true, system log will be monitored.
         * 
         * @return builder
         * 
         */
        public Builder monitorSystemLogIntegrity(Boolean monitorSystemLogIntegrity) {
            return monitorSystemLogIntegrity(Output.of(monitorSystemLogIntegrity));
        }

        /**
         * @param monitorSystemTimeChanges If true, system time changes will be monitored.
         * 
         * @return builder
         * 
         */
        public Builder monitorSystemTimeChanges(@Nullable Output<Boolean> monitorSystemTimeChanges) {
            $.monitorSystemTimeChanges = monitorSystemTimeChanges;
            return this;
        }

        /**
         * @param monitorSystemTimeChanges If true, system time changes will be monitored.
         * 
         * @return builder
         * 
         */
        public Builder monitorSystemTimeChanges(Boolean monitorSystemTimeChanges) {
            return monitorSystemTimeChanges(Output.of(monitorSystemTimeChanges));
        }

        /**
         * @param monitorWindowsServices If true, windows service operations will be monitored.
         * 
         * @return builder
         * 
         */
        public Builder monitorWindowsServices(@Nullable Output<Boolean> monitorWindowsServices) {
            $.monitorWindowsServices = monitorWindowsServices;
            return this;
        }

        /**
         * @param monitorWindowsServices If true, windows service operations will be monitored.
         * 
         * @return builder
         * 
         */
        public Builder monitorWindowsServices(Boolean monitorWindowsServices) {
            return monitorWindowsServices(Output.of(monitorWindowsServices));
        }

        /**
         * @param name Name of the host runtime policy
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the host runtime policy
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param osGroupsAlloweds List of OS (Linux or Windows) groups that are allowed to authenticate to the host, and block authentication requests from all others. Groups can be either Linux groups or Windows AD groups.
         * 
         * @return builder
         * 
         */
        public Builder osGroupsAlloweds(@Nullable Output<List<String>> osGroupsAlloweds) {
            $.osGroupsAlloweds = osGroupsAlloweds;
            return this;
        }

        /**
         * @param osGroupsAlloweds List of OS (Linux or Windows) groups that are allowed to authenticate to the host, and block authentication requests from all others. Groups can be either Linux groups or Windows AD groups.
         * 
         * @return builder
         * 
         */
        public Builder osGroupsAlloweds(List<String> osGroupsAlloweds) {
            return osGroupsAlloweds(Output.of(osGroupsAlloweds));
        }

        /**
         * @param osGroupsAlloweds List of OS (Linux or Windows) groups that are allowed to authenticate to the host, and block authentication requests from all others. Groups can be either Linux groups or Windows AD groups.
         * 
         * @return builder
         * 
         */
        public Builder osGroupsAlloweds(String... osGroupsAlloweds) {
            return osGroupsAlloweds(List.of(osGroupsAlloweds));
        }

        /**
         * @param osGroupsBlockeds List of OS (Linux or Windows) groups that are not allowed to authenticate to the host, and block authentication requests from all others. Groups can be either Linux groups or Windows AD groups.
         * 
         * @return builder
         * 
         */
        public Builder osGroupsBlockeds(@Nullable Output<List<String>> osGroupsBlockeds) {
            $.osGroupsBlockeds = osGroupsBlockeds;
            return this;
        }

        /**
         * @param osGroupsBlockeds List of OS (Linux or Windows) groups that are not allowed to authenticate to the host, and block authentication requests from all others. Groups can be either Linux groups or Windows AD groups.
         * 
         * @return builder
         * 
         */
        public Builder osGroupsBlockeds(List<String> osGroupsBlockeds) {
            return osGroupsBlockeds(Output.of(osGroupsBlockeds));
        }

        /**
         * @param osGroupsBlockeds List of OS (Linux or Windows) groups that are not allowed to authenticate to the host, and block authentication requests from all others. Groups can be either Linux groups or Windows AD groups.
         * 
         * @return builder
         * 
         */
        public Builder osGroupsBlockeds(String... osGroupsBlockeds) {
            return osGroupsBlockeds(List.of(osGroupsBlockeds));
        }

        /**
         * @param osUsersAlloweds List of OS (Linux or Windows) users that are allowed to authenticate to the host, and block authentication requests from all others.
         * 
         * @return builder
         * 
         */
        public Builder osUsersAlloweds(@Nullable Output<List<String>> osUsersAlloweds) {
            $.osUsersAlloweds = osUsersAlloweds;
            return this;
        }

        /**
         * @param osUsersAlloweds List of OS (Linux or Windows) users that are allowed to authenticate to the host, and block authentication requests from all others.
         * 
         * @return builder
         * 
         */
        public Builder osUsersAlloweds(List<String> osUsersAlloweds) {
            return osUsersAlloweds(Output.of(osUsersAlloweds));
        }

        /**
         * @param osUsersAlloweds List of OS (Linux or Windows) users that are allowed to authenticate to the host, and block authentication requests from all others.
         * 
         * @return builder
         * 
         */
        public Builder osUsersAlloweds(String... osUsersAlloweds) {
            return osUsersAlloweds(List.of(osUsersAlloweds));
        }

        /**
         * @param osUsersBlockeds List of OS (Linux or Windows) users that are not allowed to authenticate to the host, and block authentication requests from all others.
         * 
         * @return builder
         * 
         */
        public Builder osUsersBlockeds(@Nullable Output<List<String>> osUsersBlockeds) {
            $.osUsersBlockeds = osUsersBlockeds;
            return this;
        }

        /**
         * @param osUsersBlockeds List of OS (Linux or Windows) users that are not allowed to authenticate to the host, and block authentication requests from all others.
         * 
         * @return builder
         * 
         */
        public Builder osUsersBlockeds(List<String> osUsersBlockeds) {
            return osUsersBlockeds(Output.of(osUsersBlockeds));
        }

        /**
         * @param osUsersBlockeds List of OS (Linux or Windows) users that are not allowed to authenticate to the host, and block authentication requests from all others.
         * 
         * @return builder
         * 
         */
        public Builder osUsersBlockeds(String... osUsersBlockeds) {
            return osUsersBlockeds(List.of(osUsersBlockeds));
        }

        /**
         * @param packageBlocks List of packages that are not allowed read, write or execute all files that under the packages.
         * 
         * @return builder
         * 
         */
        public Builder packageBlocks(@Nullable Output<List<String>> packageBlocks) {
            $.packageBlocks = packageBlocks;
            return this;
        }

        /**
         * @param packageBlocks List of packages that are not allowed read, write or execute all files that under the packages.
         * 
         * @return builder
         * 
         */
        public Builder packageBlocks(List<String> packageBlocks) {
            return packageBlocks(Output.of(packageBlocks));
        }

        /**
         * @param packageBlocks List of packages that are not allowed read, write or execute all files that under the packages.
         * 
         * @return builder
         * 
         */
        public Builder packageBlocks(String... packageBlocks) {
            return packageBlocks(List.of(packageBlocks));
        }

        /**
         * @param portScanningDetection If true, port scanning behaviors will be audited.
         * 
         * @return builder
         * 
         */
        public Builder portScanningDetection(@Nullable Output<Boolean> portScanningDetection) {
            $.portScanningDetection = portScanningDetection;
            return this;
        }

        /**
         * @param portScanningDetection If true, port scanning behaviors will be audited.
         * 
         * @return builder
         * 
         */
        public Builder portScanningDetection(Boolean portScanningDetection) {
            return portScanningDetection(Output.of(portScanningDetection));
        }

        /**
         * @param scopeExpression Logical expression of how to compute the dependency of the scope variables.
         * 
         * @return builder
         * 
         */
        public Builder scopeExpression(@Nullable Output<String> scopeExpression) {
            $.scopeExpression = scopeExpression;
            return this;
        }

        /**
         * @param scopeExpression Logical expression of how to compute the dependency of the scope variables.
         * 
         * @return builder
         * 
         */
        public Builder scopeExpression(String scopeExpression) {
            return scopeExpression(Output.of(scopeExpression));
        }

        /**
         * @param scopeVariables List of scope attributes.
         * 
         * @return builder
         * 
         */
        public Builder scopeVariables(@Nullable Output<List<HostRuntimePolicyScopeVariableArgs>> scopeVariables) {
            $.scopeVariables = scopeVariables;
            return this;
        }

        /**
         * @param scopeVariables List of scope attributes.
         * 
         * @return builder
         * 
         */
        public Builder scopeVariables(List<HostRuntimePolicyScopeVariableArgs> scopeVariables) {
            return scopeVariables(Output.of(scopeVariables));
        }

        /**
         * @param scopeVariables List of scope attributes.
         * 
         * @return builder
         * 
         */
        public Builder scopeVariables(HostRuntimePolicyScopeVariableArgs... scopeVariables) {
            return scopeVariables(List.of(scopeVariables));
        }

        /**
         * @param windowsRegistryMonitoring Configuration for windows registry monitoring.
         * 
         * @return builder
         * 
         */
        public Builder windowsRegistryMonitoring(@Nullable Output<HostRuntimePolicyWindowsRegistryMonitoringArgs> windowsRegistryMonitoring) {
            $.windowsRegistryMonitoring = windowsRegistryMonitoring;
            return this;
        }

        /**
         * @param windowsRegistryMonitoring Configuration for windows registry monitoring.
         * 
         * @return builder
         * 
         */
        public Builder windowsRegistryMonitoring(HostRuntimePolicyWindowsRegistryMonitoringArgs windowsRegistryMonitoring) {
            return windowsRegistryMonitoring(Output.of(windowsRegistryMonitoring));
        }

        /**
         * @param windowsRegistryProtection Configuration for windows registry protection.
         * 
         * @return builder
         * 
         */
        public Builder windowsRegistryProtection(@Nullable Output<HostRuntimePolicyWindowsRegistryProtectionArgs> windowsRegistryProtection) {
            $.windowsRegistryProtection = windowsRegistryProtection;
            return this;
        }

        /**
         * @param windowsRegistryProtection Configuration for windows registry protection.
         * 
         * @return builder
         * 
         */
        public Builder windowsRegistryProtection(HostRuntimePolicyWindowsRegistryProtectionArgs windowsRegistryProtection) {
            return windowsRegistryProtection(Output.of(windowsRegistryProtection));
        }

        public HostRuntimePolicyArgs build() {
            return $;
        }
    }

}
