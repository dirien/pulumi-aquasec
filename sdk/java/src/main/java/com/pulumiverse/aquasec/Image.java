// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumiverse.aquasec;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumiverse.aquasec.ImageArgs;
import com.pulumiverse.aquasec.Utilities;
import com.pulumiverse.aquasec.inputs.ImageState;
import com.pulumiverse.aquasec.outputs.ImageAssuranceChecksPerformed;
import com.pulumiverse.aquasec.outputs.ImageHistory;
import com.pulumiverse.aquasec.outputs.ImageVulnerability;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

@ResourceType(type="aquasec:index/image:Image")
public class Image extends com.pulumi.resources.CustomResource {
    /**
     * If this field is set to true, the image will be whitelisted.
     * 
     */
    @Export(name="allowImage", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> allowImage;

    /**
     * @return If this field is set to true, the image will be whitelisted.
     * 
     */
    public Output<Optional<Boolean>> allowImage() {
        return Codegen.optional(this.allowImage);
    }
    /**
     * The image architecture.
     * 
     */
    @Export(name="architecture", type=String.class, parameters={})
    private Output<String> architecture;

    /**
     * @return The image architecture.
     * 
     */
    public Output<String> architecture() {
        return this.architecture;
    }
    /**
     * The list of image assurance checks performed on the image.
     * 
     */
    @Export(name="assuranceChecksPerformeds", type=List.class, parameters={ImageAssuranceChecksPerformed.class})
    private Output<List<ImageAssuranceChecksPerformed>> assuranceChecksPerformeds;

    /**
     * @return The list of image assurance checks performed on the image.
     * 
     */
    public Output<List<ImageAssuranceChecksPerformed>> assuranceChecksPerformeds() {
        return this.assuranceChecksPerformeds;
    }
    /**
     * The name of the user who registered the image.
     * 
     */
    @Export(name="author", type=String.class, parameters={})
    private Output<String> author;

    /**
     * @return The name of the user who registered the image.
     * 
     */
    public Output<String> author() {
        return this.author;
    }
    /**
     * Whether the image is blacklisted.
     * 
     */
    @Export(name="blacklisted", type=Boolean.class, parameters={})
    private Output<Boolean> blacklisted;

    /**
     * @return Whether the image is blacklisted.
     * 
     */
    public Output<Boolean> blacklisted() {
        return this.blacklisted;
    }
    /**
     * If this field is set to true, the image will be blacklisted.
     * 
     */
    @Export(name="blockImage", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> blockImage;

    /**
     * @return If this field is set to true, the image will be blacklisted.
     * 
     */
    public Output<Optional<Boolean>> blockImage() {
        return Codegen.optional(this.blockImage);
    }
    /**
     * The image creation comment.
     * 
     */
    @Export(name="comment", type=String.class, parameters={})
    private Output<String> comment;

    /**
     * @return The image creation comment.
     * 
     */
    public Output<String> comment() {
        return this.comment;
    }
    /**
     * The date and time when the image was registered.
     * 
     */
    @Export(name="created", type=String.class, parameters={})
    private Output<String> created;

    /**
     * @return The date and time when the image was registered.
     * 
     */
    public Output<String> created() {
        return this.created;
    }
    /**
     * Number of critical severity vulnerabilities detected in the image.
     * 
     */
    @Export(name="criticalVulnerabilities", type=Integer.class, parameters={})
    private Output<Integer> criticalVulnerabilities;

    /**
     * @return Number of critical severity vulnerabilities detected in the image.
     * 
     */
    public Output<Integer> criticalVulnerabilities() {
        return this.criticalVulnerabilities;
    }
    /**
     * The default user of the image.
     * 
     */
    @Export(name="defaultUser", type=String.class, parameters={})
    private Output<String> defaultUser;

    /**
     * @return The default user of the image.
     * 
     */
    public Output<String> defaultUser() {
        return this.defaultUser;
    }
    /**
     * The content digest of the image.
     * 
     */
    @Export(name="digest", type=String.class, parameters={})
    private Output<String> digest;

    /**
     * @return The content digest of the image.
     * 
     */
    public Output<String> digest() {
        return this.digest;
    }
    /**
     * Whether the image is disallowed (non-compliant).
     * 
     */
    @Export(name="disallowed", type=Boolean.class, parameters={})
    private Output<Boolean> disallowed;

    /**
     * @return Whether the image is disallowed (non-compliant).
     * 
     */
    public Output<Boolean> disallowed() {
        return this.disallowed;
    }
    /**
     * Whether the image was disallowed because of Image Assurance Policies.
     * 
     */
    @Export(name="disallowedByAssuranceChecks", type=Boolean.class, parameters={})
    private Output<Boolean> disallowedByAssuranceChecks;

    /**
     * @return Whether the image was disallowed because of Image Assurance Policies.
     * 
     */
    public Output<Boolean> disallowedByAssuranceChecks() {
        return this.disallowedByAssuranceChecks;
    }
    /**
     * The Docker image ID.
     * 
     */
    @Export(name="dockerId", type=String.class, parameters={})
    private Output<String> dockerId;

    /**
     * @return The Docker image ID.
     * 
     */
    public Output<String> dockerId() {
        return this.dockerId;
    }
    /**
     * Docker labels of the image.
     * 
     */
    @Export(name="dockerLabels", type=List.class, parameters={String.class})
    private Output<List<String>> dockerLabels;

    /**
     * @return Docker labels of the image.
     * 
     */
    public Output<List<String>> dockerLabels() {
        return this.dockerLabels;
    }
    /**
     * The Docker version used when building the image.
     * 
     */
    @Export(name="dockerVersion", type=String.class, parameters={})
    private Output<String> dockerVersion;

    /**
     * @return The Docker version used when building the image.
     * 
     */
    public Output<String> dockerVersion() {
        return this.dockerVersion;
    }
    /**
     * DTA severity score.
     * 
     */
    @Export(name="dtaSeverityScore", type=String.class, parameters={})
    private Output<String> dtaSeverityScore;

    /**
     * @return DTA severity score.
     * 
     */
    public Output<String> dtaSeverityScore() {
        return this.dtaSeverityScore;
    }
    /**
     * If DTA was skipped.
     * 
     */
    @Export(name="dtaSkipped", type=Boolean.class, parameters={})
    private Output<Boolean> dtaSkipped;

    /**
     * @return If DTA was skipped.
     * 
     */
    public Output<Boolean> dtaSkipped() {
        return this.dtaSkipped;
    }
    /**
     * The reason why DTA was skipped.
     * 
     */
    @Export(name="dtaSkippedReason", type=String.class, parameters={})
    private Output<String> dtaSkippedReason;

    /**
     * @return The reason why DTA was skipped.
     * 
     */
    public Output<String> dtaSkippedReason() {
        return this.dtaSkippedReason;
    }
    /**
     * Environment variables in the image.
     * 
     */
    @Export(name="environmentVariables", type=List.class, parameters={String.class})
    private Output<List<String>> environmentVariables;

    /**
     * @return Environment variables in the image.
     * 
     */
    public Output<List<String>> environmentVariables() {
        return this.environmentVariables;
    }
    /**
     * Number of high severity vulnerabilities detected in the image.
     * 
     */
    @Export(name="highVulnerabilities", type=Integer.class, parameters={})
    private Output<Integer> highVulnerabilities;

    /**
     * @return Number of high severity vulnerabilities detected in the image.
     * 
     */
    public Output<Integer> highVulnerabilities() {
        return this.highVulnerabilities;
    }
    /**
     * The Docker history of the image.
     * 
     */
    @Export(name="histories", type=List.class, parameters={ImageHistory.class})
    private Output<List<ImageHistory>> histories;

    /**
     * @return The Docker history of the image.
     * 
     */
    public Output<List<ImageHistory>> histories() {
        return this.histories;
    }
    /**
     * The size of the image in bytes.
     * 
     */
    @Export(name="imageSize", type=Integer.class, parameters={})
    private Output<Integer> imageSize;

    /**
     * @return The size of the image in bytes.
     * 
     */
    public Output<Integer> imageSize() {
        return this.imageSize;
    }
    /**
     * The type of the image.
     * 
     */
    @Export(name="imageType", type=String.class, parameters={})
    private Output<String> imageType;

    /**
     * @return The type of the image.
     * 
     */
    public Output<String> imageType() {
        return this.imageType;
    }
    /**
     * Aqua labels of the image.
     * 
     */
    @Export(name="labels", type=List.class, parameters={String.class})
    private Output<List<String>> labels;

    /**
     * @return Aqua labels of the image.
     * 
     */
    public Output<List<String>> labels() {
        return this.labels;
    }
    /**
     * Number of low severity vulnerabilities detected in the image.
     * 
     */
    @Export(name="lowVulnerabilities", type=Integer.class, parameters={})
    private Output<Integer> lowVulnerabilities;

    /**
     * @return Number of low severity vulnerabilities detected in the image.
     * 
     */
    public Output<Integer> lowVulnerabilities() {
        return this.lowVulnerabilities;
    }
    /**
     * Number of malware found on the image.
     * 
     */
    @Export(name="malware", type=Integer.class, parameters={})
    private Output<Integer> malware;

    /**
     * @return Number of malware found on the image.
     * 
     */
    public Output<Integer> malware() {
        return this.malware;
    }
    /**
     * Number of medium severity vulnerabilities detected in the image.
     * 
     */
    @Export(name="mediumVulnerabilities", type=Integer.class, parameters={})
    private Output<Integer> mediumVulnerabilities;

    /**
     * @return Number of medium severity vulnerabilities detected in the image.
     * 
     */
    public Output<Integer> mediumVulnerabilities() {
        return this.mediumVulnerabilities;
    }
    /**
     * The name of the image.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The name of the image.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Number of negligible severity vulnerabilities detected in the image.
     * 
     */
    @Export(name="negligibleVulnerabilities", type=Integer.class, parameters={})
    private Output<Integer> negligibleVulnerabilities;

    /**
     * @return Number of negligible severity vulnerabilities detected in the image.
     * 
     */
    public Output<Integer> negligibleVulnerabilities() {
        return this.negligibleVulnerabilities;
    }
    /**
     * Whether a new version of the image is available in the registry but is not scanned and registered yet.
     * 
     */
    @Export(name="newerImageExists", type=Boolean.class, parameters={})
    private Output<Boolean> newerImageExists;

    /**
     * @return Whether a new version of the image is available in the registry but is not scanned and registered yet.
     * 
     */
    public Output<Boolean> newerImageExists() {
        return this.newerImageExists;
    }
    /**
     * The operating system detected in the image
     * 
     */
    @Export(name="os", type=String.class, parameters={})
    private Output<String> os;

    /**
     * @return The operating system detected in the image
     * 
     */
    public Output<String> os() {
        return this.os;
    }
    /**
     * The version of the OS detected in the image.
     * 
     */
    @Export(name="osVersion", type=String.class, parameters={})
    private Output<String> osVersion;

    /**
     * @return The version of the OS detected in the image.
     * 
     */
    public Output<String> osVersion() {
        return this.osVersion;
    }
    /**
     * The ID of the parent image.
     * 
     */
    @Export(name="parent", type=String.class, parameters={})
    private Output<String> parent;

    /**
     * @return The ID of the parent image.
     * 
     */
    public Output<String> parent() {
        return this.parent;
    }
    /**
     * Whether the image could only be partially scanned.
     * 
     */
    @Export(name="partialResults", type=Boolean.class, parameters={})
    private Output<Boolean> partialResults;

    /**
     * @return Whether the image could only be partially scanned.
     * 
     */
    public Output<Boolean> partialResults() {
        return this.partialResults;
    }
    /**
     * Whether the image is non-compliant, but is pending this status due to running containers.
     * 
     */
    @Export(name="pendingDisallowed", type=Boolean.class, parameters={})
    private Output<Boolean> pendingDisallowed;

    /**
     * @return Whether the image is non-compliant, but is pending this status due to running containers.
     * 
     */
    public Output<Boolean> pendingDisallowed() {
        return this.pendingDisallowed;
    }
    /**
     * Permission of the image.
     * 
     */
    @Export(name="permission", type=String.class, parameters={})
    private Output<String> permission;

    /**
     * @return Permission of the image.
     * 
     */
    public Output<String> permission() {
        return this.permission;
    }
    /**
     * The name of the user who last modified the image permissions.
     * 
     */
    @Export(name="permissionAuthor", type=String.class, parameters={})
    private Output<String> permissionAuthor;

    /**
     * @return The name of the user who last modified the image permissions.
     * 
     */
    public Output<String> permissionAuthor() {
        return this.permissionAuthor;
    }
    /**
     * The comment provided when the image permissions were last modified
     * 
     */
    @Export(name="permissionComment", type=String.class, parameters={})
    private Output<String> permissionComment;

    /**
     * @return The comment provided when the image permissions were last modified
     * 
     */
    public Output<String> permissionComment() {
        return this.permissionComment;
    }
    /**
     * A comment on why the image was whitelisted or blacklisted
     * 
     */
    @Export(name="permissionModificationComment", type=String.class, parameters={})
    private Output</* @Nullable */ String> permissionModificationComment;

    /**
     * @return A comment on why the image was whitelisted or blacklisted
     * 
     */
    public Output<Optional<String>> permissionModificationComment() {
        return Codegen.optional(this.permissionModificationComment);
    }
    /**
     * The name of the registry where the image is stored.
     * 
     */
    @Export(name="registry", type=String.class, parameters={})
    private Output<String> registry;

    /**
     * @return The name of the registry where the image is stored.
     * 
     */
    public Output<String> registry() {
        return this.registry;
    }
    /**
     * Type of the registry.
     * 
     */
    @Export(name="registryType", type=String.class, parameters={})
    private Output<String> registryType;

    /**
     * @return Type of the registry.
     * 
     */
    public Output<String> registryType() {
        return this.registryType;
    }
    /**
     * The repository digests.
     * 
     */
    @Export(name="repoDigests", type=List.class, parameters={String.class})
    private Output<List<String>> repoDigests;

    /**
     * @return The repository digests.
     * 
     */
    public Output<List<String>> repoDigests() {
        return this.repoDigests;
    }
    /**
     * The name of the image&#39;s repository.
     * 
     */
    @Export(name="repository", type=String.class, parameters={})
    private Output<String> repository;

    /**
     * @return The name of the image&#39;s repository.
     * 
     */
    public Output<String> repository() {
        return this.repository;
    }
    /**
     * The date and time when the image was last scanned.
     * 
     */
    @Export(name="scanDate", type=String.class, parameters={})
    private Output<String> scanDate;

    /**
     * @return The date and time when the image was last scanned.
     * 
     */
    public Output<String> scanDate() {
        return this.scanDate;
    }
    /**
     * If the image scan failed, the failure message.
     * 
     */
    @Export(name="scanError", type=String.class, parameters={})
    private Output<String> scanError;

    /**
     * @return If the image scan failed, the failure message.
     * 
     */
    public Output<String> scanError() {
        return this.scanError;
    }
    /**
     * The scan status of the image (either &#39;pending&#39;, &#39;in*progress&#39;, &#39;finished&#39;, &#39;failed&#39; or &#39;not*started&#39;).
     * 
     */
    @Export(name="scanStatus", type=String.class, parameters={})
    private Output<String> scanStatus;

    /**
     * @return The scan status of the image (either &#39;pending&#39;, &#39;in*progress&#39;, &#39;finished&#39;, &#39;failed&#39; or &#39;not*started&#39;).
     * 
     */
    public Output<String> scanStatus() {
        return this.scanStatus;
    }
    /**
     * Number of sensitive data detected in the image.
     * 
     */
    @Export(name="sensitiveData", type=Integer.class, parameters={})
    private Output<Integer> sensitiveData;

    /**
     * @return Number of sensitive data detected in the image.
     * 
     */
    public Output<Integer> sensitiveData() {
        return this.sensitiveData;
    }
    /**
     * The tag of the image.
     * 
     */
    @Export(name="tag", type=String.class, parameters={})
    private Output<String> tag;

    /**
     * @return The tag of the image.
     * 
     */
    public Output<String> tag() {
        return this.tag;
    }
    /**
     * The total number of vulnerabilities detected in the image.
     * 
     */
    @Export(name="totalVulnerabilities", type=Integer.class, parameters={})
    private Output<Integer> totalVulnerabilities;

    /**
     * @return The total number of vulnerabilities detected in the image.
     * 
     */
    public Output<Integer> totalVulnerabilities() {
        return this.totalVulnerabilities;
    }
    /**
     * The virtual size of the image.
     * 
     */
    @Export(name="virtualSize", type=Integer.class, parameters={})
    private Output<Integer> virtualSize;

    /**
     * @return The virtual size of the image.
     * 
     */
    public Output<Integer> virtualSize() {
        return this.virtualSize;
    }
    /**
     * A list of all the vulnerabilities found in the image
     * 
     */
    @Export(name="vulnerabilities", type=List.class, parameters={ImageVulnerability.class})
    private Output<List<ImageVulnerability>> vulnerabilities;

    /**
     * @return A list of all the vulnerabilities found in the image
     * 
     */
    public Output<List<ImageVulnerability>> vulnerabilities() {
        return this.vulnerabilities;
    }
    /**
     * Whether the image is whitelisted.
     * 
     */
    @Export(name="whitelisted", type=Boolean.class, parameters={})
    private Output<Boolean> whitelisted;

    /**
     * @return Whether the image is whitelisted.
     * 
     */
    public Output<Boolean> whitelisted() {
        return this.whitelisted;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Image(String name) {
        this(name, ImageArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Image(String name, ImageArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Image(String name, ImageArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("aquasec:index/image:Image", name, args == null ? ImageArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Image(String name, Output<String> id, @Nullable ImageState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("aquasec:index/image:Image", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Image get(String name, Output<String> id, @Nullable ImageState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Image(name, id, state, options);
    }
}
