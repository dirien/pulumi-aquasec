// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumiverse.aquasec;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ImageArgs extends com.pulumi.resources.ResourceArgs {

    public static final ImageArgs Empty = new ImageArgs();

    /**
     * If this field is set to true, the image will be whitelisted.
     * 
     */
    @Import(name="allowImage")
    private @Nullable Output<Boolean> allowImage;

    /**
     * @return If this field is set to true, the image will be whitelisted.
     * 
     */
    public Optional<Output<Boolean>> allowImage() {
        return Optional.ofNullable(this.allowImage);
    }

    /**
     * If this field is set to true, the image will be blacklisted.
     * 
     */
    @Import(name="blockImage")
    private @Nullable Output<Boolean> blockImage;

    /**
     * @return If this field is set to true, the image will be blacklisted.
     * 
     */
    public Optional<Output<Boolean>> blockImage() {
        return Optional.ofNullable(this.blockImage);
    }

    /**
     * A comment on why the image was whitelisted or blacklisted
     * 
     */
    @Import(name="permissionModificationComment")
    private @Nullable Output<String> permissionModificationComment;

    /**
     * @return A comment on why the image was whitelisted or blacklisted
     * 
     */
    public Optional<Output<String>> permissionModificationComment() {
        return Optional.ofNullable(this.permissionModificationComment);
    }

    /**
     * The name of the registry where the image is stored.
     * 
     */
    @Import(name="registry", required=true)
    private Output<String> registry;

    /**
     * @return The name of the registry where the image is stored.
     * 
     */
    public Output<String> registry() {
        return this.registry;
    }

    /**
     * The name of the image&#39;s repository.
     * 
     */
    @Import(name="repository", required=true)
    private Output<String> repository;

    /**
     * @return The name of the image&#39;s repository.
     * 
     */
    public Output<String> repository() {
        return this.repository;
    }

    /**
     * The tag of the image.
     * 
     */
    @Import(name="tag", required=true)
    private Output<String> tag;

    /**
     * @return The tag of the image.
     * 
     */
    public Output<String> tag() {
        return this.tag;
    }

    private ImageArgs() {}

    private ImageArgs(ImageArgs $) {
        this.allowImage = $.allowImage;
        this.blockImage = $.blockImage;
        this.permissionModificationComment = $.permissionModificationComment;
        this.registry = $.registry;
        this.repository = $.repository;
        this.tag = $.tag;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ImageArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ImageArgs $;

        public Builder() {
            $ = new ImageArgs();
        }

        public Builder(ImageArgs defaults) {
            $ = new ImageArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowImage If this field is set to true, the image will be whitelisted.
         * 
         * @return builder
         * 
         */
        public Builder allowImage(@Nullable Output<Boolean> allowImage) {
            $.allowImage = allowImage;
            return this;
        }

        /**
         * @param allowImage If this field is set to true, the image will be whitelisted.
         * 
         * @return builder
         * 
         */
        public Builder allowImage(Boolean allowImage) {
            return allowImage(Output.of(allowImage));
        }

        /**
         * @param blockImage If this field is set to true, the image will be blacklisted.
         * 
         * @return builder
         * 
         */
        public Builder blockImage(@Nullable Output<Boolean> blockImage) {
            $.blockImage = blockImage;
            return this;
        }

        /**
         * @param blockImage If this field is set to true, the image will be blacklisted.
         * 
         * @return builder
         * 
         */
        public Builder blockImage(Boolean blockImage) {
            return blockImage(Output.of(blockImage));
        }

        /**
         * @param permissionModificationComment A comment on why the image was whitelisted or blacklisted
         * 
         * @return builder
         * 
         */
        public Builder permissionModificationComment(@Nullable Output<String> permissionModificationComment) {
            $.permissionModificationComment = permissionModificationComment;
            return this;
        }

        /**
         * @param permissionModificationComment A comment on why the image was whitelisted or blacklisted
         * 
         * @return builder
         * 
         */
        public Builder permissionModificationComment(String permissionModificationComment) {
            return permissionModificationComment(Output.of(permissionModificationComment));
        }

        /**
         * @param registry The name of the registry where the image is stored.
         * 
         * @return builder
         * 
         */
        public Builder registry(Output<String> registry) {
            $.registry = registry;
            return this;
        }

        /**
         * @param registry The name of the registry where the image is stored.
         * 
         * @return builder
         * 
         */
        public Builder registry(String registry) {
            return registry(Output.of(registry));
        }

        /**
         * @param repository The name of the image&#39;s repository.
         * 
         * @return builder
         * 
         */
        public Builder repository(Output<String> repository) {
            $.repository = repository;
            return this;
        }

        /**
         * @param repository The name of the image&#39;s repository.
         * 
         * @return builder
         * 
         */
        public Builder repository(String repository) {
            return repository(Output.of(repository));
        }

        /**
         * @param tag The tag of the image.
         * 
         * @return builder
         * 
         */
        public Builder tag(Output<String> tag) {
            $.tag = tag;
            return this;
        }

        /**
         * @param tag The tag of the image.
         * 
         * @return builder
         * 
         */
        public Builder tag(String tag) {
            return tag(Output.of(tag));
        }

        public ImageArgs build() {
            $.registry = Objects.requireNonNull($.registry, "expected parameter 'registry' to be non-null");
            $.repository = Objects.requireNonNull($.repository, "expected parameter 'repository' to be non-null");
            $.tag = Objects.requireNonNull($.tag, "expected parameter 'tag' to be non-null");
            return $;
        }
    }

}
