// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumiverse.aquasec;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumiverse.aquasec.IntegrationRegistryArgs;
import com.pulumiverse.aquasec.Utilities;
import com.pulumiverse.aquasec.inputs.IntegrationRegistryState;
import com.pulumiverse.aquasec.outputs.IntegrationRegistryOption;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

@ResourceType(type="aquasec:index/integrationRegistry:IntegrationRegistry")
public class IntegrationRegistry extends com.pulumi.resources.CustomResource {
    /**
     * The username of the user who created or last modified the registry
     * 
     */
    @Export(name="author", type=String.class, parameters={})
    private Output<String> author;

    /**
     * @return The username of the user who created or last modified the registry
     * 
     */
    public Output<String> author() {
        return this.author;
    }
    /**
     * Whether to automatically pull images from the registry on creation and daily
     * 
     */
    @Export(name="autoPull", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> autoPull;

    /**
     * @return Whether to automatically pull images from the registry on creation and daily
     * 
     */
    public Output<Optional<Boolean>> autoPull() {
        return Codegen.optional(this.autoPull);
    }
    /**
     * The interval in days to start pulling new images from the registry, Defaults to 1
     * 
     */
    @Export(name="autoPullInterval", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> autoPullInterval;

    /**
     * @return The interval in days to start pulling new images from the registry, Defaults to 1
     * 
     */
    public Output<Optional<Integer>> autoPullInterval() {
        return Codegen.optional(this.autoPullInterval);
    }
    /**
     * Maximum number of repositories to pull every day, defaults to 100
     * 
     */
    @Export(name="autoPullMax", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> autoPullMax;

    /**
     * @return Maximum number of repositories to pull every day, defaults to 100
     * 
     */
    public Output<Optional<Integer>> autoPullMax() {
        return Codegen.optional(this.autoPullMax);
    }
    /**
     * Whether to automatically pull and rescan images from the registry on creation and daily
     * 
     */
    @Export(name="autoPullRescan", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> autoPullRescan;

    /**
     * @return Whether to automatically pull and rescan images from the registry on creation and daily
     * 
     */
    public Output<Optional<Boolean>> autoPullRescan() {
        return Codegen.optional(this.autoPullRescan);
    }
    /**
     * The time of day to start pulling new images from the registry, in the format HH:MM (24-hour clock), defaults to 03:00
     * 
     */
    @Export(name="autoPullTime", type=String.class, parameters={})
    private Output</* @Nullable */ String> autoPullTime;

    /**
     * @return The time of day to start pulling new images from the registry, in the format HH:MM (24-hour clock), defaults to 03:00
     * 
     */
    public Output<Optional<String>> autoPullTime() {
        return Codegen.optional(this.autoPullTime);
    }
    /**
     * Additional condition for pulling and rescanning images, Defaults to &#39;none&#39;
     * 
     */
    @Export(name="imageCreationDateCondition", type=String.class, parameters={})
    private Output<String> imageCreationDateCondition;

    /**
     * @return Additional condition for pulling and rescanning images, Defaults to &#39;none&#39;
     * 
     */
    public Output<String> imageCreationDateCondition() {
        return this.imageCreationDateCondition;
    }
    /**
     * The last time the registry was modified in UNIX time
     * 
     */
    @Export(name="lastUpdated", type=String.class, parameters={})
    private Output<String> lastUpdated;

    /**
     * @return The last time the registry was modified in UNIX time
     * 
     */
    public Output<String> lastUpdated() {
        return this.lastUpdated;
    }
    /**
     * The name of the registry; string, required - this will be treated as the registry&#39;s ID, so choose a simple alphanumerical name without special signs and spaces
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The name of the registry; string, required - this will be treated as the registry&#39;s ID, so choose a simple alphanumerical name without special signs and spaces
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    @Export(name="options", type=List.class, parameters={IntegrationRegistryOption.class})
    private Output</* @Nullable */ List<IntegrationRegistryOption>> options;

    public Output<Optional<List<IntegrationRegistryOption>>> options() {
        return Codegen.optional(this.options);
    }
    /**
     * The password for registry authentication
     * 
     */
    @Export(name="password", type=String.class, parameters={})
    private Output</* @Nullable */ String> password;

    /**
     * @return The password for registry authentication
     * 
     */
    public Output<Optional<String>> password() {
        return Codegen.optional(this.password);
    }
    /**
     * List of possible prefixes to image names pulled from the registry
     * 
     */
    @Export(name="prefixes", type=List.class, parameters={String.class})
    private Output<List<String>> prefixes;

    /**
     * @return List of possible prefixes to image names pulled from the registry
     * 
     */
    public Output<List<String>> prefixes() {
        return this.prefixes;
    }
    /**
     * When auto pull image enabled, sets maximum age of auto pulled images (for example for 5 Days the value should be: 5D), Requires `image_creation_date_condition = &#34;image_age&#34;`
     * 
     */
    @Export(name="pullImageAge", type=String.class, parameters={})
    private Output<String> pullImageAge;

    /**
     * @return When auto pull image enabled, sets maximum age of auto pulled images (for example for 5 Days the value should be: 5D), Requires `image_creation_date_condition = &#34;image_age&#34;`
     * 
     */
    public Output<String> pullImageAge() {
        return this.pullImageAge;
    }
    /**
     * When auto pull image enabled, sets maximum age of auto pulled images tags from each repository (based on image creation date) Requires `image_creation_date_condition = &#34;image_count&#34;`
     * 
     */
    @Export(name="pullImageCount", type=Integer.class, parameters={})
    private Output<Integer> pullImageCount;

    /**
     * @return When auto pull image enabled, sets maximum age of auto pulled images tags from each repository (based on image creation date) Requires `image_creation_date_condition = &#34;image_count&#34;`
     * 
     */
    public Output<Integer> pullImageCount() {
        return this.pullImageCount;
    }
    /**
     * List of scanner names
     * 
     */
    @Export(name="scannerNames", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> scannerNames;

    /**
     * @return List of scanner names
     * 
     */
    public Output<Optional<List<String>>> scannerNames() {
        return Codegen.optional(this.scannerNames);
    }
    /**
     * The Scanner type
     * 
     */
    @Export(name="scannerType", type=String.class, parameters={})
    private Output<String> scannerType;

    /**
     * @return The Scanner type
     * 
     */
    public Output<String> scannerType() {
        return this.scannerType;
    }
    /**
     * Registry type (HUB / V1 / V2 / ENGINE / AWS / GCR).
     * 
     */
    @Export(name="type", type=String.class, parameters={})
    private Output<String> type;

    /**
     * @return Registry type (HUB / V1 / V2 / ENGINE / AWS / GCR).
     * 
     */
    public Output<String> type() {
        return this.type;
    }
    /**
     * The URL, address or region of the registry
     * 
     */
    @Export(name="url", type=String.class, parameters={})
    private Output<String> url;

    /**
     * @return The URL, address or region of the registry
     * 
     */
    public Output<String> url() {
        return this.url;
    }
    /**
     * The username for registry authentication.
     * 
     */
    @Export(name="username", type=String.class, parameters={})
    private Output</* @Nullable */ String> username;

    /**
     * @return The username for registry authentication.
     * 
     */
    public Output<Optional<String>> username() {
        return Codegen.optional(this.username);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public IntegrationRegistry(String name) {
        this(name, IntegrationRegistryArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public IntegrationRegistry(String name, IntegrationRegistryArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public IntegrationRegistry(String name, IntegrationRegistryArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("aquasec:index/integrationRegistry:IntegrationRegistry", name, args == null ? IntegrationRegistryArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private IntegrationRegistry(String name, Output<String> id, @Nullable IntegrationRegistryState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("aquasec:index/integrationRegistry:IntegrationRegistry", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static IntegrationRegistry get(String name, Output<String> id, @Nullable IntegrationRegistryState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new IntegrationRegistry(name, id, state, options);
    }
}
