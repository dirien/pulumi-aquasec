// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumiverse.aquasec;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumiverse.aquasec.inputs.IntegrationRegistryOptionArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IntegrationRegistryArgs extends com.pulumi.resources.ResourceArgs {

    public static final IntegrationRegistryArgs Empty = new IntegrationRegistryArgs();

    /**
     * The username of the user who created or last modified the registry
     * 
     */
    @Import(name="author")
    private @Nullable Output<String> author;

    /**
     * @return The username of the user who created or last modified the registry
     * 
     */
    public Optional<Output<String>> author() {
        return Optional.ofNullable(this.author);
    }

    /**
     * Automatically clean up images and repositories which are no longer present in the registry from Aqua console
     * 
     */
    @Import(name="autoCleanup")
    private @Nullable Output<Boolean> autoCleanup;

    /**
     * @return Automatically clean up images and repositories which are no longer present in the registry from Aqua console
     * 
     */
    public Optional<Output<Boolean>> autoCleanup() {
        return Optional.ofNullable(this.autoCleanup);
    }

    /**
     * Whether to automatically pull images from the registry on creation and daily
     * 
     */
    @Import(name="autoPull")
    private @Nullable Output<Boolean> autoPull;

    /**
     * @return Whether to automatically pull images from the registry on creation and daily
     * 
     */
    public Optional<Output<Boolean>> autoPull() {
        return Optional.ofNullable(this.autoPull);
    }

    /**
     * The interval in days to start pulling new images from the registry, Defaults to 1
     * 
     */
    @Import(name="autoPullInterval")
    private @Nullable Output<Integer> autoPullInterval;

    /**
     * @return The interval in days to start pulling new images from the registry, Defaults to 1
     * 
     */
    public Optional<Output<Integer>> autoPullInterval() {
        return Optional.ofNullable(this.autoPullInterval);
    }

    /**
     * Maximum number of repositories to pull every day, defaults to 100
     * 
     */
    @Import(name="autoPullMax")
    private @Nullable Output<Integer> autoPullMax;

    /**
     * @return Maximum number of repositories to pull every day, defaults to 100
     * 
     */
    public Optional<Output<Integer>> autoPullMax() {
        return Optional.ofNullable(this.autoPullMax);
    }

    /**
     * Whether to automatically pull and rescan images from the registry on creation and daily
     * 
     */
    @Import(name="autoPullRescan")
    private @Nullable Output<Boolean> autoPullRescan;

    /**
     * @return Whether to automatically pull and rescan images from the registry on creation and daily
     * 
     */
    public Optional<Output<Boolean>> autoPullRescan() {
        return Optional.ofNullable(this.autoPullRescan);
    }

    /**
     * The time of day to start pulling new images from the registry, in the format HH:MM (24-hour clock), defaults to 03:00
     * 
     */
    @Import(name="autoPullTime")
    private @Nullable Output<String> autoPullTime;

    /**
     * @return The time of day to start pulling new images from the registry, in the format HH:MM (24-hour clock), defaults to 03:00
     * 
     */
    public Optional<Output<String>> autoPullTime() {
        return Optional.ofNullable(this.autoPullTime);
    }

    /**
     * Additional condition for pulling and rescanning images, Defaults to &#39;none&#39;
     * 
     */
    @Import(name="imageCreationDateCondition")
    private @Nullable Output<String> imageCreationDateCondition;

    /**
     * @return Additional condition for pulling and rescanning images, Defaults to &#39;none&#39;
     * 
     */
    public Optional<Output<String>> imageCreationDateCondition() {
        return Optional.ofNullable(this.imageCreationDateCondition);
    }

    /**
     * The last time the registry was modified in UNIX time
     * 
     */
    @Import(name="lastUpdated")
    private @Nullable Output<String> lastUpdated;

    /**
     * @return The last time the registry was modified in UNIX time
     * 
     */
    public Optional<Output<String>> lastUpdated() {
        return Optional.ofNullable(this.lastUpdated);
    }

    /**
     * The name of the registry; string, required - this will be treated as the registry&#39;s ID, so choose a simple alphanumerical name without special signs and spaces
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the registry; string, required - this will be treated as the registry&#39;s ID, so choose a simple alphanumerical name without special signs and spaces
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="options")
    private @Nullable Output<List<IntegrationRegistryOptionArgs>> options;

    public Optional<Output<List<IntegrationRegistryOptionArgs>>> options() {
        return Optional.ofNullable(this.options);
    }

    /**
     * The password for registry authentication
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return The password for registry authentication
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * List of possible prefixes to image names pulled from the registry
     * 
     */
    @Import(name="prefixes")
    private @Nullable Output<List<String>> prefixes;

    /**
     * @return List of possible prefixes to image names pulled from the registry
     * 
     */
    public Optional<Output<List<String>>> prefixes() {
        return Optional.ofNullable(this.prefixes);
    }

    /**
     * When auto pull image enabled, sets maximum age of auto pulled images (for example for 5 Days the value should be: 5D), Requires `image_creation_date_condition = &#34;image_age&#34;`
     * 
     */
    @Import(name="pullImageAge")
    private @Nullable Output<String> pullImageAge;

    /**
     * @return When auto pull image enabled, sets maximum age of auto pulled images (for example for 5 Days the value should be: 5D), Requires `image_creation_date_condition = &#34;image_age&#34;`
     * 
     */
    public Optional<Output<String>> pullImageAge() {
        return Optional.ofNullable(this.pullImageAge);
    }

    /**
     * When auto pull image enabled, sets maximum age of auto pulled images tags from each repository (based on image creation date) Requires `image_creation_date_condition = &#34;image_count&#34;`
     * 
     */
    @Import(name="pullImageCount")
    private @Nullable Output<Integer> pullImageCount;

    /**
     * @return When auto pull image enabled, sets maximum age of auto pulled images tags from each repository (based on image creation date) Requires `image_creation_date_condition = &#34;image_count&#34;`
     * 
     */
    public Optional<Output<Integer>> pullImageCount() {
        return Optional.ofNullable(this.pullImageCount);
    }

    /**
     * List of scanner names
     * 
     */
    @Import(name="scannerNames")
    private @Nullable Output<List<String>> scannerNames;

    /**
     * @return List of scanner names
     * 
     */
    public Optional<Output<List<String>>> scannerNames() {
        return Optional.ofNullable(this.scannerNames);
    }

    /**
     * The Scanner type
     * 
     */
    @Import(name="scannerType")
    private @Nullable Output<String> scannerType;

    /**
     * @return The Scanner type
     * 
     */
    public Optional<Output<String>> scannerType() {
        return Optional.ofNullable(this.scannerType);
    }

    /**
     * Registry type (HUB / V1 / V2 / ENGINE / AWS / GCR).
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Registry type (HUB / V1 / V2 / ENGINE / AWS / GCR).
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     * The URL, address or region of the registry
     * 
     */
    @Import(name="url")
    private @Nullable Output<String> url;

    /**
     * @return The URL, address or region of the registry
     * 
     */
    public Optional<Output<String>> url() {
        return Optional.ofNullable(this.url);
    }

    /**
     * The username for registry authentication.
     * 
     */
    @Import(name="username")
    private @Nullable Output<String> username;

    /**
     * @return The username for registry authentication.
     * 
     */
    public Optional<Output<String>> username() {
        return Optional.ofNullable(this.username);
    }

    private IntegrationRegistryArgs() {}

    private IntegrationRegistryArgs(IntegrationRegistryArgs $) {
        this.author = $.author;
        this.autoCleanup = $.autoCleanup;
        this.autoPull = $.autoPull;
        this.autoPullInterval = $.autoPullInterval;
        this.autoPullMax = $.autoPullMax;
        this.autoPullRescan = $.autoPullRescan;
        this.autoPullTime = $.autoPullTime;
        this.imageCreationDateCondition = $.imageCreationDateCondition;
        this.lastUpdated = $.lastUpdated;
        this.name = $.name;
        this.options = $.options;
        this.password = $.password;
        this.prefixes = $.prefixes;
        this.pullImageAge = $.pullImageAge;
        this.pullImageCount = $.pullImageCount;
        this.scannerNames = $.scannerNames;
        this.scannerType = $.scannerType;
        this.type = $.type;
        this.url = $.url;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IntegrationRegistryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IntegrationRegistryArgs $;

        public Builder() {
            $ = new IntegrationRegistryArgs();
        }

        public Builder(IntegrationRegistryArgs defaults) {
            $ = new IntegrationRegistryArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param author The username of the user who created or last modified the registry
         * 
         * @return builder
         * 
         */
        public Builder author(@Nullable Output<String> author) {
            $.author = author;
            return this;
        }

        /**
         * @param author The username of the user who created or last modified the registry
         * 
         * @return builder
         * 
         */
        public Builder author(String author) {
            return author(Output.of(author));
        }

        /**
         * @param autoCleanup Automatically clean up images and repositories which are no longer present in the registry from Aqua console
         * 
         * @return builder
         * 
         */
        public Builder autoCleanup(@Nullable Output<Boolean> autoCleanup) {
            $.autoCleanup = autoCleanup;
            return this;
        }

        /**
         * @param autoCleanup Automatically clean up images and repositories which are no longer present in the registry from Aqua console
         * 
         * @return builder
         * 
         */
        public Builder autoCleanup(Boolean autoCleanup) {
            return autoCleanup(Output.of(autoCleanup));
        }

        /**
         * @param autoPull Whether to automatically pull images from the registry on creation and daily
         * 
         * @return builder
         * 
         */
        public Builder autoPull(@Nullable Output<Boolean> autoPull) {
            $.autoPull = autoPull;
            return this;
        }

        /**
         * @param autoPull Whether to automatically pull images from the registry on creation and daily
         * 
         * @return builder
         * 
         */
        public Builder autoPull(Boolean autoPull) {
            return autoPull(Output.of(autoPull));
        }

        /**
         * @param autoPullInterval The interval in days to start pulling new images from the registry, Defaults to 1
         * 
         * @return builder
         * 
         */
        public Builder autoPullInterval(@Nullable Output<Integer> autoPullInterval) {
            $.autoPullInterval = autoPullInterval;
            return this;
        }

        /**
         * @param autoPullInterval The interval in days to start pulling new images from the registry, Defaults to 1
         * 
         * @return builder
         * 
         */
        public Builder autoPullInterval(Integer autoPullInterval) {
            return autoPullInterval(Output.of(autoPullInterval));
        }

        /**
         * @param autoPullMax Maximum number of repositories to pull every day, defaults to 100
         * 
         * @return builder
         * 
         */
        public Builder autoPullMax(@Nullable Output<Integer> autoPullMax) {
            $.autoPullMax = autoPullMax;
            return this;
        }

        /**
         * @param autoPullMax Maximum number of repositories to pull every day, defaults to 100
         * 
         * @return builder
         * 
         */
        public Builder autoPullMax(Integer autoPullMax) {
            return autoPullMax(Output.of(autoPullMax));
        }

        /**
         * @param autoPullRescan Whether to automatically pull and rescan images from the registry on creation and daily
         * 
         * @return builder
         * 
         */
        public Builder autoPullRescan(@Nullable Output<Boolean> autoPullRescan) {
            $.autoPullRescan = autoPullRescan;
            return this;
        }

        /**
         * @param autoPullRescan Whether to automatically pull and rescan images from the registry on creation and daily
         * 
         * @return builder
         * 
         */
        public Builder autoPullRescan(Boolean autoPullRescan) {
            return autoPullRescan(Output.of(autoPullRescan));
        }

        /**
         * @param autoPullTime The time of day to start pulling new images from the registry, in the format HH:MM (24-hour clock), defaults to 03:00
         * 
         * @return builder
         * 
         */
        public Builder autoPullTime(@Nullable Output<String> autoPullTime) {
            $.autoPullTime = autoPullTime;
            return this;
        }

        /**
         * @param autoPullTime The time of day to start pulling new images from the registry, in the format HH:MM (24-hour clock), defaults to 03:00
         * 
         * @return builder
         * 
         */
        public Builder autoPullTime(String autoPullTime) {
            return autoPullTime(Output.of(autoPullTime));
        }

        /**
         * @param imageCreationDateCondition Additional condition for pulling and rescanning images, Defaults to &#39;none&#39;
         * 
         * @return builder
         * 
         */
        public Builder imageCreationDateCondition(@Nullable Output<String> imageCreationDateCondition) {
            $.imageCreationDateCondition = imageCreationDateCondition;
            return this;
        }

        /**
         * @param imageCreationDateCondition Additional condition for pulling and rescanning images, Defaults to &#39;none&#39;
         * 
         * @return builder
         * 
         */
        public Builder imageCreationDateCondition(String imageCreationDateCondition) {
            return imageCreationDateCondition(Output.of(imageCreationDateCondition));
        }

        /**
         * @param lastUpdated The last time the registry was modified in UNIX time
         * 
         * @return builder
         * 
         */
        public Builder lastUpdated(@Nullable Output<String> lastUpdated) {
            $.lastUpdated = lastUpdated;
            return this;
        }

        /**
         * @param lastUpdated The last time the registry was modified in UNIX time
         * 
         * @return builder
         * 
         */
        public Builder lastUpdated(String lastUpdated) {
            return lastUpdated(Output.of(lastUpdated));
        }

        /**
         * @param name The name of the registry; string, required - this will be treated as the registry&#39;s ID, so choose a simple alphanumerical name without special signs and spaces
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the registry; string, required - this will be treated as the registry&#39;s ID, so choose a simple alphanumerical name without special signs and spaces
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder options(@Nullable Output<List<IntegrationRegistryOptionArgs>> options) {
            $.options = options;
            return this;
        }

        public Builder options(List<IntegrationRegistryOptionArgs> options) {
            return options(Output.of(options));
        }

        public Builder options(IntegrationRegistryOptionArgs... options) {
            return options(List.of(options));
        }

        /**
         * @param password The password for registry authentication
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password The password for registry authentication
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param prefixes List of possible prefixes to image names pulled from the registry
         * 
         * @return builder
         * 
         */
        public Builder prefixes(@Nullable Output<List<String>> prefixes) {
            $.prefixes = prefixes;
            return this;
        }

        /**
         * @param prefixes List of possible prefixes to image names pulled from the registry
         * 
         * @return builder
         * 
         */
        public Builder prefixes(List<String> prefixes) {
            return prefixes(Output.of(prefixes));
        }

        /**
         * @param prefixes List of possible prefixes to image names pulled from the registry
         * 
         * @return builder
         * 
         */
        public Builder prefixes(String... prefixes) {
            return prefixes(List.of(prefixes));
        }

        /**
         * @param pullImageAge When auto pull image enabled, sets maximum age of auto pulled images (for example for 5 Days the value should be: 5D), Requires `image_creation_date_condition = &#34;image_age&#34;`
         * 
         * @return builder
         * 
         */
        public Builder pullImageAge(@Nullable Output<String> pullImageAge) {
            $.pullImageAge = pullImageAge;
            return this;
        }

        /**
         * @param pullImageAge When auto pull image enabled, sets maximum age of auto pulled images (for example for 5 Days the value should be: 5D), Requires `image_creation_date_condition = &#34;image_age&#34;`
         * 
         * @return builder
         * 
         */
        public Builder pullImageAge(String pullImageAge) {
            return pullImageAge(Output.of(pullImageAge));
        }

        /**
         * @param pullImageCount When auto pull image enabled, sets maximum age of auto pulled images tags from each repository (based on image creation date) Requires `image_creation_date_condition = &#34;image_count&#34;`
         * 
         * @return builder
         * 
         */
        public Builder pullImageCount(@Nullable Output<Integer> pullImageCount) {
            $.pullImageCount = pullImageCount;
            return this;
        }

        /**
         * @param pullImageCount When auto pull image enabled, sets maximum age of auto pulled images tags from each repository (based on image creation date) Requires `image_creation_date_condition = &#34;image_count&#34;`
         * 
         * @return builder
         * 
         */
        public Builder pullImageCount(Integer pullImageCount) {
            return pullImageCount(Output.of(pullImageCount));
        }

        /**
         * @param scannerNames List of scanner names
         * 
         * @return builder
         * 
         */
        public Builder scannerNames(@Nullable Output<List<String>> scannerNames) {
            $.scannerNames = scannerNames;
            return this;
        }

        /**
         * @param scannerNames List of scanner names
         * 
         * @return builder
         * 
         */
        public Builder scannerNames(List<String> scannerNames) {
            return scannerNames(Output.of(scannerNames));
        }

        /**
         * @param scannerNames List of scanner names
         * 
         * @return builder
         * 
         */
        public Builder scannerNames(String... scannerNames) {
            return scannerNames(List.of(scannerNames));
        }

        /**
         * @param scannerType The Scanner type
         * 
         * @return builder
         * 
         */
        public Builder scannerType(@Nullable Output<String> scannerType) {
            $.scannerType = scannerType;
            return this;
        }

        /**
         * @param scannerType The Scanner type
         * 
         * @return builder
         * 
         */
        public Builder scannerType(String scannerType) {
            return scannerType(Output.of(scannerType));
        }

        /**
         * @param type Registry type (HUB / V1 / V2 / ENGINE / AWS / GCR).
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Registry type (HUB / V1 / V2 / ENGINE / AWS / GCR).
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param url The URL, address or region of the registry
         * 
         * @return builder
         * 
         */
        public Builder url(@Nullable Output<String> url) {
            $.url = url;
            return this;
        }

        /**
         * @param url The URL, address or region of the registry
         * 
         * @return builder
         * 
         */
        public Builder url(String url) {
            return url(Output.of(url));
        }

        /**
         * @param username The username for registry authentication.
         * 
         * @return builder
         * 
         */
        public Builder username(@Nullable Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username The username for registry authentication.
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public IntegrationRegistryArgs build() {
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
