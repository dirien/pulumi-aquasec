// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumiverse.aquasec;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NotificationArgs extends com.pulumi.resources.ResourceArgs {

    public static final NotificationArgs Empty = new NotificationArgs();

    /**
     * Notification name
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Notification name
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Notification properties, please check the examples for setting it
     * 
     */
    @Import(name="properties", required=true)
    private Output<Map<String,String>> properties;

    /**
     * @return Notification properties, please check the examples for setting it
     * 
     */
    public Output<Map<String,String>> properties() {
        return this.properties;
    }

    /**
     * Notifications types, allowed values: slack\ jira\ email\ teams\ webhook\ splunk\ serviceNow
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Notifications types, allowed values: slack\ jira\ email\ teams\ webhook\ splunk\ serviceNow
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private NotificationArgs() {}

    private NotificationArgs(NotificationArgs $) {
        this.name = $.name;
        this.properties = $.properties;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NotificationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NotificationArgs $;

        public Builder() {
            $ = new NotificationArgs();
        }

        public Builder(NotificationArgs defaults) {
            $ = new NotificationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param name Notification name
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Notification name
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param properties Notification properties, please check the examples for setting it
         * 
         * @return builder
         * 
         */
        public Builder properties(Output<Map<String,String>> properties) {
            $.properties = properties;
            return this;
        }

        /**
         * @param properties Notification properties, please check the examples for setting it
         * 
         * @return builder
         * 
         */
        public Builder properties(Map<String,String> properties) {
            return properties(Output.of(properties));
        }

        /**
         * @param type Notifications types, allowed values: slack\ jira\ email\ teams\ webhook\ splunk\ serviceNow
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Notifications types, allowed values: slack\ jira\ email\ teams\ webhook\ splunk\ serviceNow
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public NotificationArgs build() {
            $.properties = Objects.requireNonNull($.properties, "expected parameter 'properties' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
