// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumiverse.aquasec;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NotificationSlackArgs extends com.pulumi.resources.ResourceArgs {

    public static final NotificationSlackArgs Empty = new NotificationSlackArgs();

    @Import(name="channel", required=true)
    private Output<String> channel;

    public Output<String> channel() {
        return this.channel;
    }

    @Import(name="enabled", required=true)
    private Output<Boolean> enabled;

    public Output<Boolean> enabled() {
        return this.enabled;
    }

    @Import(name="icon")
    private @Nullable Output<String> icon;

    public Optional<Output<String>> icon() {
        return Optional.ofNullable(this.icon);
    }

    @Import(name="mainText")
    private @Nullable Output<String> mainText;

    public Optional<Output<String>> mainText() {
        return Optional.ofNullable(this.mainText);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="serviceKey")
    private @Nullable Output<String> serviceKey;

    public Optional<Output<String>> serviceKey() {
        return Optional.ofNullable(this.serviceKey);
    }

    @Import(name="type", required=true)
    private Output<String> type;

    public Output<String> type() {
        return this.type;
    }

    @Import(name="userName", required=true)
    private Output<String> userName;

    public Output<String> userName() {
        return this.userName;
    }

    @Import(name="webhookUrl", required=true)
    private Output<String> webhookUrl;

    public Output<String> webhookUrl() {
        return this.webhookUrl;
    }

    private NotificationSlackArgs() {}

    private NotificationSlackArgs(NotificationSlackArgs $) {
        this.channel = $.channel;
        this.enabled = $.enabled;
        this.icon = $.icon;
        this.mainText = $.mainText;
        this.name = $.name;
        this.serviceKey = $.serviceKey;
        this.type = $.type;
        this.userName = $.userName;
        this.webhookUrl = $.webhookUrl;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NotificationSlackArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NotificationSlackArgs $;

        public Builder() {
            $ = new NotificationSlackArgs();
        }

        public Builder(NotificationSlackArgs defaults) {
            $ = new NotificationSlackArgs(Objects.requireNonNull(defaults));
        }

        public Builder channel(Output<String> channel) {
            $.channel = channel;
            return this;
        }

        public Builder channel(String channel) {
            return channel(Output.of(channel));
        }

        public Builder enabled(Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        public Builder icon(@Nullable Output<String> icon) {
            $.icon = icon;
            return this;
        }

        public Builder icon(String icon) {
            return icon(Output.of(icon));
        }

        public Builder mainText(@Nullable Output<String> mainText) {
            $.mainText = mainText;
            return this;
        }

        public Builder mainText(String mainText) {
            return mainText(Output.of(mainText));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder serviceKey(@Nullable Output<String> serviceKey) {
            $.serviceKey = serviceKey;
            return this;
        }

        public Builder serviceKey(String serviceKey) {
            return serviceKey(Output.of(serviceKey));
        }

        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        public Builder type(String type) {
            return type(Output.of(type));
        }

        public Builder userName(Output<String> userName) {
            $.userName = userName;
            return this;
        }

        public Builder userName(String userName) {
            return userName(Output.of(userName));
        }

        public Builder webhookUrl(Output<String> webhookUrl) {
            $.webhookUrl = webhookUrl;
            return this;
        }

        public Builder webhookUrl(String webhookUrl) {
            return webhookUrl(Output.of(webhookUrl));
        }

        public NotificationSlackArgs build() {
            $.channel = Objects.requireNonNull($.channel, "expected parameter 'channel' to be non-null");
            $.enabled = Objects.requireNonNull($.enabled, "expected parameter 'enabled' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            $.userName = Objects.requireNonNull($.userName, "expected parameter 'userName' to be non-null");
            $.webhookUrl = Objects.requireNonNull($.webhookUrl, "expected parameter 'webhookUrl' to be non-null");
            return $;
        }
    }

}
