// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumiverse.aquasec;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PermissionsSetsArgs extends com.pulumi.resources.ResourceArgs {

    public static final PermissionsSetsArgs Empty = new PermissionsSetsArgs();

    /**
     * List of allowed actions for the Permission Set (not relevant if &#39;is_super&#39; is true).
     * 
     */
    @Import(name="actions", required=true)
    private Output<List<String>> actions;

    /**
     * @return List of allowed actions for the Permission Set (not relevant if &#39;is_super&#39; is true).
     * 
     */
    public Output<List<String>> actions() {
        return this.actions;
    }

    /**
     * The name of the user who created the Permission Set.
     * 
     */
    @Import(name="author")
    private @Nullable Output<String> author;

    /**
     * @return The name of the user who created the Permission Set.
     * 
     */
    public Optional<Output<String>> author() {
        return Optional.ofNullable(this.author);
    }

    /**
     * Free text description for the Permission Set.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Free text description for the Permission Set.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Give the Permission Set full access, meaning all actions are allowed without restriction.
     * 
     */
    @Import(name="isSuper")
    private @Nullable Output<Boolean> isSuper;

    /**
     * @return Give the Permission Set full access, meaning all actions are allowed without restriction.
     * 
     */
    public Optional<Output<Boolean>> isSuper() {
        return Optional.ofNullable(this.isSuper);
    }

    /**
     * The name of the Permission Set, comprised of alphanumeric characters and &#39;-&#39;, &#39;_&#39;, &#39; &#39;, &#39;:&#39;, &#39;.&#39;, &#39;@&#39;, &#39;!&#39;, &#39;^&#39;.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the Permission Set, comprised of alphanumeric characters and &#39;-&#39;, &#39;_&#39;, &#39; &#39;, &#39;:&#39;, &#39;.&#39;, &#39;@&#39;, &#39;!&#39;, &#39;^&#39;.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Whether to allow UI access for users with this Permission Set.
     * 
     */
    @Import(name="uiAccess", required=true)
    private Output<Boolean> uiAccess;

    /**
     * @return Whether to allow UI access for users with this Permission Set.
     * 
     */
    public Output<Boolean> uiAccess() {
        return this.uiAccess;
    }

    private PermissionsSetsArgs() {}

    private PermissionsSetsArgs(PermissionsSetsArgs $) {
        this.actions = $.actions;
        this.author = $.author;
        this.description = $.description;
        this.isSuper = $.isSuper;
        this.name = $.name;
        this.uiAccess = $.uiAccess;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PermissionsSetsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PermissionsSetsArgs $;

        public Builder() {
            $ = new PermissionsSetsArgs();
        }

        public Builder(PermissionsSetsArgs defaults) {
            $ = new PermissionsSetsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param actions List of allowed actions for the Permission Set (not relevant if &#39;is_super&#39; is true).
         * 
         * @return builder
         * 
         */
        public Builder actions(Output<List<String>> actions) {
            $.actions = actions;
            return this;
        }

        /**
         * @param actions List of allowed actions for the Permission Set (not relevant if &#39;is_super&#39; is true).
         * 
         * @return builder
         * 
         */
        public Builder actions(List<String> actions) {
            return actions(Output.of(actions));
        }

        /**
         * @param actions List of allowed actions for the Permission Set (not relevant if &#39;is_super&#39; is true).
         * 
         * @return builder
         * 
         */
        public Builder actions(String... actions) {
            return actions(List.of(actions));
        }

        /**
         * @param author The name of the user who created the Permission Set.
         * 
         * @return builder
         * 
         */
        public Builder author(@Nullable Output<String> author) {
            $.author = author;
            return this;
        }

        /**
         * @param author The name of the user who created the Permission Set.
         * 
         * @return builder
         * 
         */
        public Builder author(String author) {
            return author(Output.of(author));
        }

        /**
         * @param description Free text description for the Permission Set.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Free text description for the Permission Set.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param isSuper Give the Permission Set full access, meaning all actions are allowed without restriction.
         * 
         * @return builder
         * 
         */
        public Builder isSuper(@Nullable Output<Boolean> isSuper) {
            $.isSuper = isSuper;
            return this;
        }

        /**
         * @param isSuper Give the Permission Set full access, meaning all actions are allowed without restriction.
         * 
         * @return builder
         * 
         */
        public Builder isSuper(Boolean isSuper) {
            return isSuper(Output.of(isSuper));
        }

        /**
         * @param name The name of the Permission Set, comprised of alphanumeric characters and &#39;-&#39;, &#39;_&#39;, &#39; &#39;, &#39;:&#39;, &#39;.&#39;, &#39;@&#39;, &#39;!&#39;, &#39;^&#39;.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the Permission Set, comprised of alphanumeric characters and &#39;-&#39;, &#39;_&#39;, &#39; &#39;, &#39;:&#39;, &#39;.&#39;, &#39;@&#39;, &#39;!&#39;, &#39;^&#39;.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param uiAccess Whether to allow UI access for users with this Permission Set.
         * 
         * @return builder
         * 
         */
        public Builder uiAccess(Output<Boolean> uiAccess) {
            $.uiAccess = uiAccess;
            return this;
        }

        /**
         * @param uiAccess Whether to allow UI access for users with this Permission Set.
         * 
         * @return builder
         * 
         */
        public Builder uiAccess(Boolean uiAccess) {
            return uiAccess(Output.of(uiAccess));
        }

        public PermissionsSetsArgs build() {
            $.actions = Objects.requireNonNull($.actions, "expected parameter 'actions' to be non-null");
            $.uiAccess = Objects.requireNonNull($.uiAccess, "expected parameter 'uiAccess' to be non-null");
            return $;
        }
    }

}
