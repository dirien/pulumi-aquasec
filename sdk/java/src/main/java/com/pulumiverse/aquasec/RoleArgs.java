// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumiverse.aquasec;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RoleArgs extends com.pulumi.resources.ResourceArgs {

    public static final RoleArgs Empty = new RoleArgs();

    /**
     * Free text description for the role.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Free text description for the role.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The name of the Permission Set that will affect the users assigned to this specific Role.
     * 
     */
    @Import(name="permission", required=true)
    private Output<String> permission;

    /**
     * @return The name of the Permission Set that will affect the users assigned to this specific Role.
     * 
     */
    public Output<String> permission() {
        return this.permission;
    }

    /**
     * The name of the role, comprised of alphanumeric characters and &#39;-&#39;, &#39;_&#39;, &#39; &#39;, &#39;:&#39;, &#39;.&#39;, &#39;@&#39;, &#39;!&#39;, &#39;^&#39;.
     * 
     */
    @Import(name="roleName", required=true)
    private Output<String> roleName;

    /**
     * @return The name of the role, comprised of alphanumeric characters and &#39;-&#39;, &#39;_&#39;, &#39; &#39;, &#39;:&#39;, &#39;.&#39;, &#39;@&#39;, &#39;!&#39;, &#39;^&#39;.
     * 
     */
    public Output<String> roleName() {
        return this.roleName;
    }

    /**
     * List of Application Scopes that will affect the users assigned to this specific Role.
     * 
     */
    @Import(name="scopes", required=true)
    private Output<List<String>> scopes;

    /**
     * @return List of Application Scopes that will affect the users assigned to this specific Role.
     * 
     */
    public Output<List<String>> scopes() {
        return this.scopes;
    }

    /**
     * The date of the last modification of the role.
     * 
     */
    @Import(name="updatedAt")
    private @Nullable Output<String> updatedAt;

    /**
     * @return The date of the last modification of the role.
     * 
     */
    public Optional<Output<String>> updatedAt() {
        return Optional.ofNullable(this.updatedAt);
    }

    private RoleArgs() {}

    private RoleArgs(RoleArgs $) {
        this.description = $.description;
        this.permission = $.permission;
        this.roleName = $.roleName;
        this.scopes = $.scopes;
        this.updatedAt = $.updatedAt;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RoleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RoleArgs $;

        public Builder() {
            $ = new RoleArgs();
        }

        public Builder(RoleArgs defaults) {
            $ = new RoleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Free text description for the role.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Free text description for the role.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param permission The name of the Permission Set that will affect the users assigned to this specific Role.
         * 
         * @return builder
         * 
         */
        public Builder permission(Output<String> permission) {
            $.permission = permission;
            return this;
        }

        /**
         * @param permission The name of the Permission Set that will affect the users assigned to this specific Role.
         * 
         * @return builder
         * 
         */
        public Builder permission(String permission) {
            return permission(Output.of(permission));
        }

        /**
         * @param roleName The name of the role, comprised of alphanumeric characters and &#39;-&#39;, &#39;_&#39;, &#39; &#39;, &#39;:&#39;, &#39;.&#39;, &#39;@&#39;, &#39;!&#39;, &#39;^&#39;.
         * 
         * @return builder
         * 
         */
        public Builder roleName(Output<String> roleName) {
            $.roleName = roleName;
            return this;
        }

        /**
         * @param roleName The name of the role, comprised of alphanumeric characters and &#39;-&#39;, &#39;_&#39;, &#39; &#39;, &#39;:&#39;, &#39;.&#39;, &#39;@&#39;, &#39;!&#39;, &#39;^&#39;.
         * 
         * @return builder
         * 
         */
        public Builder roleName(String roleName) {
            return roleName(Output.of(roleName));
        }

        /**
         * @param scopes List of Application Scopes that will affect the users assigned to this specific Role.
         * 
         * @return builder
         * 
         */
        public Builder scopes(Output<List<String>> scopes) {
            $.scopes = scopes;
            return this;
        }

        /**
         * @param scopes List of Application Scopes that will affect the users assigned to this specific Role.
         * 
         * @return builder
         * 
         */
        public Builder scopes(List<String> scopes) {
            return scopes(Output.of(scopes));
        }

        /**
         * @param scopes List of Application Scopes that will affect the users assigned to this specific Role.
         * 
         * @return builder
         * 
         */
        public Builder scopes(String... scopes) {
            return scopes(List.of(scopes));
        }

        /**
         * @param updatedAt The date of the last modification of the role.
         * 
         * @return builder
         * 
         */
        public Builder updatedAt(@Nullable Output<String> updatedAt) {
            $.updatedAt = updatedAt;
            return this;
        }

        /**
         * @param updatedAt The date of the last modification of the role.
         * 
         * @return builder
         * 
         */
        public Builder updatedAt(String updatedAt) {
            return updatedAt(Output.of(updatedAt));
        }

        public RoleArgs build() {
            $.permission = Objects.requireNonNull($.permission, "expected parameter 'permission' to be non-null");
            $.roleName = Objects.requireNonNull($.roleName, "expected parameter 'roleName' to be non-null");
            $.scopes = Objects.requireNonNull($.scopes, "expected parameter 'scopes' to be non-null");
            return $;
        }
    }

}
