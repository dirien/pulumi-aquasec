// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumiverse.aquasec;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UserArgs extends com.pulumi.resources.ResourceArgs {

    public static final UserArgs Empty = new UserArgs();

    /**
     * The user Email.
     * 
     */
    @Import(name="email")
    private @Nullable Output<String> email;

    /**
     * @return The user Email.
     * 
     */
    public Optional<Output<String>> email() {
        return Optional.ofNullable(this.email);
    }

    /**
     * If the user must change the password first login. Applicable only one time, Later for user password resets use aqua console.
     * 
     */
    @Import(name="firstTime")
    private @Nullable Output<Boolean> firstTime;

    /**
     * @return If the user must change the password first login. Applicable only one time, Later for user password resets use aqua console.
     * 
     */
    public Optional<Output<Boolean>> firstTime() {
        return Optional.ofNullable(this.firstTime);
    }

    /**
     * The user name.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The user name.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Login password for the user; string, required, at least 8 characters long.
     * 
     */
    @Import(name="password", required=true)
    private Output<String> password;

    /**
     * @return Login password for the user; string, required, at least 8 characters long.
     * 
     */
    public Output<String> password() {
        return this.password;
    }

    /**
     * Password confirmation.
     * 
     */
    @Import(name="passwordConfirm")
    private @Nullable Output<String> passwordConfirm;

    /**
     * @return Password confirmation.
     * 
     */
    public Optional<Output<String>> passwordConfirm() {
        return Optional.ofNullable(this.passwordConfirm);
    }

    /**
     * The roles that will be assigned to the user.
     * 
     */
    @Import(name="roles", required=true)
    private Output<List<String>> roles;

    /**
     * @return The roles that will be assigned to the user.
     * 
     */
    public Output<List<String>> roles() {
        return this.roles;
    }

    /**
     * The user ID.
     * 
     */
    @Import(name="userId", required=true)
    private Output<String> userId;

    /**
     * @return The user ID.
     * 
     */
    public Output<String> userId() {
        return this.userId;
    }

    private UserArgs() {}

    private UserArgs(UserArgs $) {
        this.email = $.email;
        this.firstTime = $.firstTime;
        this.name = $.name;
        this.password = $.password;
        this.passwordConfirm = $.passwordConfirm;
        this.roles = $.roles;
        this.userId = $.userId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UserArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UserArgs $;

        public Builder() {
            $ = new UserArgs();
        }

        public Builder(UserArgs defaults) {
            $ = new UserArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param email The user Email.
         * 
         * @return builder
         * 
         */
        public Builder email(@Nullable Output<String> email) {
            $.email = email;
            return this;
        }

        /**
         * @param email The user Email.
         * 
         * @return builder
         * 
         */
        public Builder email(String email) {
            return email(Output.of(email));
        }

        /**
         * @param firstTime If the user must change the password first login. Applicable only one time, Later for user password resets use aqua console.
         * 
         * @return builder
         * 
         */
        public Builder firstTime(@Nullable Output<Boolean> firstTime) {
            $.firstTime = firstTime;
            return this;
        }

        /**
         * @param firstTime If the user must change the password first login. Applicable only one time, Later for user password resets use aqua console.
         * 
         * @return builder
         * 
         */
        public Builder firstTime(Boolean firstTime) {
            return firstTime(Output.of(firstTime));
        }

        /**
         * @param name The user name.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The user name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param password Login password for the user; string, required, at least 8 characters long.
         * 
         * @return builder
         * 
         */
        public Builder password(Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password Login password for the user; string, required, at least 8 characters long.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param passwordConfirm Password confirmation.
         * 
         * @return builder
         * 
         */
        public Builder passwordConfirm(@Nullable Output<String> passwordConfirm) {
            $.passwordConfirm = passwordConfirm;
            return this;
        }

        /**
         * @param passwordConfirm Password confirmation.
         * 
         * @return builder
         * 
         */
        public Builder passwordConfirm(String passwordConfirm) {
            return passwordConfirm(Output.of(passwordConfirm));
        }

        /**
         * @param roles The roles that will be assigned to the user.
         * 
         * @return builder
         * 
         */
        public Builder roles(Output<List<String>> roles) {
            $.roles = roles;
            return this;
        }

        /**
         * @param roles The roles that will be assigned to the user.
         * 
         * @return builder
         * 
         */
        public Builder roles(List<String> roles) {
            return roles(Output.of(roles));
        }

        /**
         * @param roles The roles that will be assigned to the user.
         * 
         * @return builder
         * 
         */
        public Builder roles(String... roles) {
            return roles(List.of(roles));
        }

        /**
         * @param userId The user ID.
         * 
         * @return builder
         * 
         */
        public Builder userId(Output<String> userId) {
            $.userId = userId;
            return this;
        }

        /**
         * @param userId The user ID.
         * 
         * @return builder
         * 
         */
        public Builder userId(String userId) {
            return userId(Output.of(userId));
        }

        public UserArgs build() {
            $.password = Objects.requireNonNull($.password, "expected parameter 'password' to be non-null");
            $.roles = Objects.requireNonNull($.roles, "expected parameter 'roles' to be non-null");
            $.userId = Objects.requireNonNull($.userId, "expected parameter 'userId' to be non-null");
            return $;
        }
    }

}
