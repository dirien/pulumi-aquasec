// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumiverse.aquasec.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AcknowledgeIssueArgs extends com.pulumi.resources.ResourceArgs {

    public static final AcknowledgeIssueArgs Empty = new AcknowledgeIssueArgs();

    /**
     * The user who acknowledged the issue.
     * 
     */
    @Import(name="author")
    private @Nullable Output<String> author;

    /**
     * @return The user who acknowledged the issue.
     * 
     */
    public Optional<Output<String>> author() {
        return Optional.ofNullable(this.author);
    }

    /**
     * The date and time of the acknowledgment.
     * 
     */
    @Import(name="date")
    private @Nullable Output<String> date;

    /**
     * @return The date and time of the acknowledgment.
     * 
     */
    public Optional<Output<String>> date() {
        return Optional.ofNullable(this.date);
    }

    @Import(name="dockerId")
    private @Nullable Output<String> dockerId;

    public Optional<Output<String>> dockerId() {
        return Optional.ofNullable(this.dockerId);
    }

    /**
     * The current dat and time when the expiration was set
     * 
     */
    @Import(name="expirationConfiguredAt")
    private @Nullable Output<String> expirationConfiguredAt;

    /**
     * @return The current dat and time when the expiration was set
     * 
     */
    public Optional<Output<String>> expirationConfiguredAt() {
        return Optional.ofNullable(this.expirationConfiguredAt);
    }

    /**
     * The user who set the expiration of the issue.
     * 
     */
    @Import(name="expirationConfiguredBy")
    private @Nullable Output<String> expirationConfiguredBy;

    /**
     * @return The user who set the expiration of the issue.
     * 
     */
    public Optional<Output<String>> expirationConfiguredBy() {
        return Optional.ofNullable(this.expirationConfiguredBy);
    }

    /**
     * Number of days until expiration of the acknowledgement. The value must be integer from 1 to 999, inclusive.
     * 
     */
    @Import(name="expirationDays")
    private @Nullable Output<Integer> expirationDays;

    /**
     * @return Number of days until expiration of the acknowledgement. The value must be integer from 1 to 999, inclusive.
     * 
     */
    public Optional<Output<Integer>> expirationDays() {
        return Optional.ofNullable(this.expirationDays);
    }

    /**
     * The version of the package that having a fix for the issue.
     * 
     */
    @Import(name="fixVersion")
    private @Nullable Output<String> fixVersion;

    /**
     * @return The version of the package that having a fix for the issue.
     * 
     */
    public Optional<Output<String>> fixVersion() {
        return Optional.ofNullable(this.fixVersion);
    }

    /**
     * Only acknowledge the issue in the context of the specified image (also requires &#39;registry_name&#39;)
     * 
     */
    @Import(name="imageName")
    private @Nullable Output<String> imageName;

    /**
     * @return Only acknowledge the issue in the context of the specified image (also requires &#39;registry_name&#39;)
     * 
     */
    public Optional<Output<String>> imageName() {
        return Optional.ofNullable(this.imageName);
    }

    /**
     * The name of the security issue (the CVE or security advisory for vulnerabilities, name of malware or type of sensitive data)
     * 
     */
    @Import(name="issueName", required=true)
    private Output<String> issueName;

    /**
     * @return The name of the security issue (the CVE or security advisory for vulnerabilities, name of malware or type of sensitive data)
     * 
     */
    public Output<String> issueName() {
        return this.issueName;
    }

    /**
     * The type of the security issue (either &#39;vulnerability&#39;, &#39;sensitive_data&#39; or &#39;malware&#39;)
     * 
     */
    @Import(name="issueType", required=true)
    private Output<String> issueType;

    /**
     * @return The type of the security issue (either &#39;vulnerability&#39;, &#39;sensitive_data&#39; or &#39;malware&#39;)
     * 
     */
    public Output<String> issueType() {
        return this.issueType;
    }

    /**
     * When the resource_type is &#39;package&#39;, the operating system is required (e.g., &#39;ubuntu&#39;, &#39;alpine&#39;).
     * 
     */
    @Import(name="os")
    private @Nullable Output<String> os;

    /**
     * @return When the resource_type is &#39;package&#39;, the operating system is required (e.g., &#39;ubuntu&#39;, &#39;alpine&#39;).
     * 
     */
    public Optional<Output<String>> os() {
        return Optional.ofNullable(this.os);
    }

    /**
     * When the resource_type is &#39;package&#39;, the operating system version is required.
     * 
     */
    @Import(name="osVersion")
    private @Nullable Output<String> osVersion;

    /**
     * @return When the resource_type is &#39;package&#39;, the operating system version is required.
     * 
     */
    public Optional<Output<String>> osVersion() {
        return Optional.ofNullable(this.osVersion);
    }

    /**
     * The permissions of the user who acknowledged the issue.
     * 
     */
    @Import(name="permission")
    private @Nullable Output<String> permission;

    /**
     * @return The permissions of the user who acknowledged the issue.
     * 
     */
    public Optional<Output<String>> permission() {
        return Optional.ofNullable(this.permission);
    }

    /**
     * Only acknowledge the issue in the context of the specified repository (also requires &#39;registry_name&#39;).
     * 
     */
    @Import(name="registryName")
    private @Nullable Output<String> registryName;

    /**
     * @return Only acknowledge the issue in the context of the specified repository (also requires &#39;registry_name&#39;).
     * 
     */
    public Optional<Output<String>> registryName() {
        return Optional.ofNullable(this.registryName);
    }

    /**
     * The CPE of the resource as listed in the issue by the Aqua API. This is required for resources of type &#39;executable&#39;. For packages and files, the next parameters can be specified instead.
     * 
     */
    @Import(name="resourceCpe")
    private @Nullable Output<String> resourceCpe;

    /**
     * @return The CPE of the resource as listed in the issue by the Aqua API. This is required for resources of type &#39;executable&#39;. For packages and files, the next parameters can be specified instead.
     * 
     */
    public Optional<Output<String>> resourceCpe() {
        return Optional.ofNullable(this.resourceCpe);
    }

    /**
     * The format of the resource.
     * 
     */
    @Import(name="resourceFormat")
    private @Nullable Output<String> resourceFormat;

    /**
     * @return The format of the resource.
     * 
     */
    public Optional<Output<String>> resourceFormat() {
        return Optional.ofNullable(this.resourceFormat);
    }

    /**
     * When the resource_type is &#39;file&#39;, the hash of the file is required
     * 
     */
    @Import(name="resourceHash")
    private @Nullable Output<String> resourceHash;

    /**
     * @return When the resource_type is &#39;file&#39;, the hash of the file is required
     * 
     */
    public Optional<Output<String>> resourceHash() {
        return Optional.ofNullable(this.resourceHash);
    }

    /**
     * When the resource_type is &#39;package&#39;, the name of the package is required.
     * 
     */
    @Import(name="resourceName")
    private @Nullable Output<String> resourceName;

    /**
     * @return When the resource_type is &#39;package&#39;, the name of the package is required.
     * 
     */
    public Optional<Output<String>> resourceName() {
        return Optional.ofNullable(this.resourceName);
    }

    /**
     * The path of the resource. This is required for resources of type &#39;file&#39; and &#39;executable&#39;.
     * 
     */
    @Import(name="resourcePath")
    private @Nullable Output<String> resourcePath;

    /**
     * @return The path of the resource. This is required for resources of type &#39;file&#39; and &#39;executable&#39;.
     * 
     */
    public Optional<Output<String>> resourcePath() {
        return Optional.ofNullable(this.resourcePath);
    }

    /**
     * The type of the resource where the issue was detected (either &#39;package&#39;, &#39;file&#39; or &#39;executable&#39;)
     * 
     */
    @Import(name="resourceType", required=true)
    private Output<String> resourceType;

    /**
     * @return The type of the resource where the issue was detected (either &#39;package&#39;, &#39;file&#39; or &#39;executable&#39;)
     * 
     */
    public Output<String> resourceType() {
        return this.resourceType;
    }

    /**
     * When the resource_type is &#39;package&#39;, the version of the package is required
     * 
     */
    @Import(name="resourceVersion")
    private @Nullable Output<String> resourceVersion;

    /**
     * @return When the resource_type is &#39;package&#39;, the version of the package is required
     * 
     */
    public Optional<Output<String>> resourceVersion() {
        return Optional.ofNullable(this.resourceVersion);
    }

    private AcknowledgeIssueArgs() {}

    private AcknowledgeIssueArgs(AcknowledgeIssueArgs $) {
        this.author = $.author;
        this.date = $.date;
        this.dockerId = $.dockerId;
        this.expirationConfiguredAt = $.expirationConfiguredAt;
        this.expirationConfiguredBy = $.expirationConfiguredBy;
        this.expirationDays = $.expirationDays;
        this.fixVersion = $.fixVersion;
        this.imageName = $.imageName;
        this.issueName = $.issueName;
        this.issueType = $.issueType;
        this.os = $.os;
        this.osVersion = $.osVersion;
        this.permission = $.permission;
        this.registryName = $.registryName;
        this.resourceCpe = $.resourceCpe;
        this.resourceFormat = $.resourceFormat;
        this.resourceHash = $.resourceHash;
        this.resourceName = $.resourceName;
        this.resourcePath = $.resourcePath;
        this.resourceType = $.resourceType;
        this.resourceVersion = $.resourceVersion;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AcknowledgeIssueArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AcknowledgeIssueArgs $;

        public Builder() {
            $ = new AcknowledgeIssueArgs();
        }

        public Builder(AcknowledgeIssueArgs defaults) {
            $ = new AcknowledgeIssueArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param author The user who acknowledged the issue.
         * 
         * @return builder
         * 
         */
        public Builder author(@Nullable Output<String> author) {
            $.author = author;
            return this;
        }

        /**
         * @param author The user who acknowledged the issue.
         * 
         * @return builder
         * 
         */
        public Builder author(String author) {
            return author(Output.of(author));
        }

        /**
         * @param date The date and time of the acknowledgment.
         * 
         * @return builder
         * 
         */
        public Builder date(@Nullable Output<String> date) {
            $.date = date;
            return this;
        }

        /**
         * @param date The date and time of the acknowledgment.
         * 
         * @return builder
         * 
         */
        public Builder date(String date) {
            return date(Output.of(date));
        }

        public Builder dockerId(@Nullable Output<String> dockerId) {
            $.dockerId = dockerId;
            return this;
        }

        public Builder dockerId(String dockerId) {
            return dockerId(Output.of(dockerId));
        }

        /**
         * @param expirationConfiguredAt The current dat and time when the expiration was set
         * 
         * @return builder
         * 
         */
        public Builder expirationConfiguredAt(@Nullable Output<String> expirationConfiguredAt) {
            $.expirationConfiguredAt = expirationConfiguredAt;
            return this;
        }

        /**
         * @param expirationConfiguredAt The current dat and time when the expiration was set
         * 
         * @return builder
         * 
         */
        public Builder expirationConfiguredAt(String expirationConfiguredAt) {
            return expirationConfiguredAt(Output.of(expirationConfiguredAt));
        }

        /**
         * @param expirationConfiguredBy The user who set the expiration of the issue.
         * 
         * @return builder
         * 
         */
        public Builder expirationConfiguredBy(@Nullable Output<String> expirationConfiguredBy) {
            $.expirationConfiguredBy = expirationConfiguredBy;
            return this;
        }

        /**
         * @param expirationConfiguredBy The user who set the expiration of the issue.
         * 
         * @return builder
         * 
         */
        public Builder expirationConfiguredBy(String expirationConfiguredBy) {
            return expirationConfiguredBy(Output.of(expirationConfiguredBy));
        }

        /**
         * @param expirationDays Number of days until expiration of the acknowledgement. The value must be integer from 1 to 999, inclusive.
         * 
         * @return builder
         * 
         */
        public Builder expirationDays(@Nullable Output<Integer> expirationDays) {
            $.expirationDays = expirationDays;
            return this;
        }

        /**
         * @param expirationDays Number of days until expiration of the acknowledgement. The value must be integer from 1 to 999, inclusive.
         * 
         * @return builder
         * 
         */
        public Builder expirationDays(Integer expirationDays) {
            return expirationDays(Output.of(expirationDays));
        }

        /**
         * @param fixVersion The version of the package that having a fix for the issue.
         * 
         * @return builder
         * 
         */
        public Builder fixVersion(@Nullable Output<String> fixVersion) {
            $.fixVersion = fixVersion;
            return this;
        }

        /**
         * @param fixVersion The version of the package that having a fix for the issue.
         * 
         * @return builder
         * 
         */
        public Builder fixVersion(String fixVersion) {
            return fixVersion(Output.of(fixVersion));
        }

        /**
         * @param imageName Only acknowledge the issue in the context of the specified image (also requires &#39;registry_name&#39;)
         * 
         * @return builder
         * 
         */
        public Builder imageName(@Nullable Output<String> imageName) {
            $.imageName = imageName;
            return this;
        }

        /**
         * @param imageName Only acknowledge the issue in the context of the specified image (also requires &#39;registry_name&#39;)
         * 
         * @return builder
         * 
         */
        public Builder imageName(String imageName) {
            return imageName(Output.of(imageName));
        }

        /**
         * @param issueName The name of the security issue (the CVE or security advisory for vulnerabilities, name of malware or type of sensitive data)
         * 
         * @return builder
         * 
         */
        public Builder issueName(Output<String> issueName) {
            $.issueName = issueName;
            return this;
        }

        /**
         * @param issueName The name of the security issue (the CVE or security advisory for vulnerabilities, name of malware or type of sensitive data)
         * 
         * @return builder
         * 
         */
        public Builder issueName(String issueName) {
            return issueName(Output.of(issueName));
        }

        /**
         * @param issueType The type of the security issue (either &#39;vulnerability&#39;, &#39;sensitive_data&#39; or &#39;malware&#39;)
         * 
         * @return builder
         * 
         */
        public Builder issueType(Output<String> issueType) {
            $.issueType = issueType;
            return this;
        }

        /**
         * @param issueType The type of the security issue (either &#39;vulnerability&#39;, &#39;sensitive_data&#39; or &#39;malware&#39;)
         * 
         * @return builder
         * 
         */
        public Builder issueType(String issueType) {
            return issueType(Output.of(issueType));
        }

        /**
         * @param os When the resource_type is &#39;package&#39;, the operating system is required (e.g., &#39;ubuntu&#39;, &#39;alpine&#39;).
         * 
         * @return builder
         * 
         */
        public Builder os(@Nullable Output<String> os) {
            $.os = os;
            return this;
        }

        /**
         * @param os When the resource_type is &#39;package&#39;, the operating system is required (e.g., &#39;ubuntu&#39;, &#39;alpine&#39;).
         * 
         * @return builder
         * 
         */
        public Builder os(String os) {
            return os(Output.of(os));
        }

        /**
         * @param osVersion When the resource_type is &#39;package&#39;, the operating system version is required.
         * 
         * @return builder
         * 
         */
        public Builder osVersion(@Nullable Output<String> osVersion) {
            $.osVersion = osVersion;
            return this;
        }

        /**
         * @param osVersion When the resource_type is &#39;package&#39;, the operating system version is required.
         * 
         * @return builder
         * 
         */
        public Builder osVersion(String osVersion) {
            return osVersion(Output.of(osVersion));
        }

        /**
         * @param permission The permissions of the user who acknowledged the issue.
         * 
         * @return builder
         * 
         */
        public Builder permission(@Nullable Output<String> permission) {
            $.permission = permission;
            return this;
        }

        /**
         * @param permission The permissions of the user who acknowledged the issue.
         * 
         * @return builder
         * 
         */
        public Builder permission(String permission) {
            return permission(Output.of(permission));
        }

        /**
         * @param registryName Only acknowledge the issue in the context of the specified repository (also requires &#39;registry_name&#39;).
         * 
         * @return builder
         * 
         */
        public Builder registryName(@Nullable Output<String> registryName) {
            $.registryName = registryName;
            return this;
        }

        /**
         * @param registryName Only acknowledge the issue in the context of the specified repository (also requires &#39;registry_name&#39;).
         * 
         * @return builder
         * 
         */
        public Builder registryName(String registryName) {
            return registryName(Output.of(registryName));
        }

        /**
         * @param resourceCpe The CPE of the resource as listed in the issue by the Aqua API. This is required for resources of type &#39;executable&#39;. For packages and files, the next parameters can be specified instead.
         * 
         * @return builder
         * 
         */
        public Builder resourceCpe(@Nullable Output<String> resourceCpe) {
            $.resourceCpe = resourceCpe;
            return this;
        }

        /**
         * @param resourceCpe The CPE of the resource as listed in the issue by the Aqua API. This is required for resources of type &#39;executable&#39;. For packages and files, the next parameters can be specified instead.
         * 
         * @return builder
         * 
         */
        public Builder resourceCpe(String resourceCpe) {
            return resourceCpe(Output.of(resourceCpe));
        }

        /**
         * @param resourceFormat The format of the resource.
         * 
         * @return builder
         * 
         */
        public Builder resourceFormat(@Nullable Output<String> resourceFormat) {
            $.resourceFormat = resourceFormat;
            return this;
        }

        /**
         * @param resourceFormat The format of the resource.
         * 
         * @return builder
         * 
         */
        public Builder resourceFormat(String resourceFormat) {
            return resourceFormat(Output.of(resourceFormat));
        }

        /**
         * @param resourceHash When the resource_type is &#39;file&#39;, the hash of the file is required
         * 
         * @return builder
         * 
         */
        public Builder resourceHash(@Nullable Output<String> resourceHash) {
            $.resourceHash = resourceHash;
            return this;
        }

        /**
         * @param resourceHash When the resource_type is &#39;file&#39;, the hash of the file is required
         * 
         * @return builder
         * 
         */
        public Builder resourceHash(String resourceHash) {
            return resourceHash(Output.of(resourceHash));
        }

        /**
         * @param resourceName When the resource_type is &#39;package&#39;, the name of the package is required.
         * 
         * @return builder
         * 
         */
        public Builder resourceName(@Nullable Output<String> resourceName) {
            $.resourceName = resourceName;
            return this;
        }

        /**
         * @param resourceName When the resource_type is &#39;package&#39;, the name of the package is required.
         * 
         * @return builder
         * 
         */
        public Builder resourceName(String resourceName) {
            return resourceName(Output.of(resourceName));
        }

        /**
         * @param resourcePath The path of the resource. This is required for resources of type &#39;file&#39; and &#39;executable&#39;.
         * 
         * @return builder
         * 
         */
        public Builder resourcePath(@Nullable Output<String> resourcePath) {
            $.resourcePath = resourcePath;
            return this;
        }

        /**
         * @param resourcePath The path of the resource. This is required for resources of type &#39;file&#39; and &#39;executable&#39;.
         * 
         * @return builder
         * 
         */
        public Builder resourcePath(String resourcePath) {
            return resourcePath(Output.of(resourcePath));
        }

        /**
         * @param resourceType The type of the resource where the issue was detected (either &#39;package&#39;, &#39;file&#39; or &#39;executable&#39;)
         * 
         * @return builder
         * 
         */
        public Builder resourceType(Output<String> resourceType) {
            $.resourceType = resourceType;
            return this;
        }

        /**
         * @param resourceType The type of the resource where the issue was detected (either &#39;package&#39;, &#39;file&#39; or &#39;executable&#39;)
         * 
         * @return builder
         * 
         */
        public Builder resourceType(String resourceType) {
            return resourceType(Output.of(resourceType));
        }

        /**
         * @param resourceVersion When the resource_type is &#39;package&#39;, the version of the package is required
         * 
         * @return builder
         * 
         */
        public Builder resourceVersion(@Nullable Output<String> resourceVersion) {
            $.resourceVersion = resourceVersion;
            return this;
        }

        /**
         * @param resourceVersion When the resource_type is &#39;package&#39;, the version of the package is required
         * 
         * @return builder
         * 
         */
        public Builder resourceVersion(String resourceVersion) {
            return resourceVersion(Output.of(resourceVersion));
        }

        public AcknowledgeIssueArgs build() {
            $.issueName = Objects.requireNonNull($.issueName, "expected parameter 'issueName' to be non-null");
            $.issueType = Objects.requireNonNull($.issueType, "expected parameter 'issueType' to be non-null");
            $.resourceType = Objects.requireNonNull($.resourceType, "expected parameter 'resourceType' to be non-null");
            return $;
        }
    }

}
