// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumiverse.aquasec.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumiverse.aquasec.inputs.ApplicationScopeCategoryArtifactArgs;
import com.pulumiverse.aquasec.inputs.ApplicationScopeCategoryEntityScopeArgs;
import com.pulumiverse.aquasec.inputs.ApplicationScopeCategoryInfrastructureArgs;
import com.pulumiverse.aquasec.inputs.ApplicationScopeCategoryWorkloadArgs;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ApplicationScopeCategoryArgs extends com.pulumi.resources.ResourceArgs {

    public static final ApplicationScopeCategoryArgs Empty = new ApplicationScopeCategoryArgs();

    /**
     * An artifact is an application. It can be an image (for a container, not a CF application); a serverless function; or a Tanzu Application Service (TAS) droplet.
     * 
     */
    @Import(name="artifacts")
    private @Nullable Output<List<ApplicationScopeCategoryArtifactArgs>> artifacts;

    /**
     * @return An artifact is an application. It can be an image (for a container, not a CF application); a serverless function; or a Tanzu Application Service (TAS) droplet.
     * 
     */
    public Optional<Output<List<ApplicationScopeCategoryArtifactArgs>>> artifacts() {
        return Optional.ofNullable(this.artifacts);
    }

    @Import(name="entityScopes")
    private @Nullable Output<List<ApplicationScopeCategoryEntityScopeArgs>> entityScopes;

    public Optional<Output<List<ApplicationScopeCategoryEntityScopeArgs>>> entityScopes() {
        return Optional.ofNullable(this.entityScopes);
    }

    /**
     * An infrastructure resource is an element of a computing environment on which a workload is orchestrated and run. It can be a host (VM) or a Kubernetes cluster.
     * 
     */
    @Import(name="infrastructures")
    private @Nullable Output<List<ApplicationScopeCategoryInfrastructureArgs>> infrastructures;

    /**
     * @return An infrastructure resource is an element of a computing environment on which a workload is orchestrated and run. It can be a host (VM) or a Kubernetes cluster.
     * 
     */
    public Optional<Output<List<ApplicationScopeCategoryInfrastructureArgs>>> infrastructures() {
        return Optional.ofNullable(this.infrastructures);
    }

    /**
     * A workload is a running container. It can run in a Kubernetes cluster, on a VM (no orchestrator), or under Tanzu Application Service (TAS).
     * 
     */
    @Import(name="workloads")
    private @Nullable Output<List<ApplicationScopeCategoryWorkloadArgs>> workloads;

    /**
     * @return A workload is a running container. It can run in a Kubernetes cluster, on a VM (no orchestrator), or under Tanzu Application Service (TAS).
     * 
     */
    public Optional<Output<List<ApplicationScopeCategoryWorkloadArgs>>> workloads() {
        return Optional.ofNullable(this.workloads);
    }

    private ApplicationScopeCategoryArgs() {}

    private ApplicationScopeCategoryArgs(ApplicationScopeCategoryArgs $) {
        this.artifacts = $.artifacts;
        this.entityScopes = $.entityScopes;
        this.infrastructures = $.infrastructures;
        this.workloads = $.workloads;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApplicationScopeCategoryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApplicationScopeCategoryArgs $;

        public Builder() {
            $ = new ApplicationScopeCategoryArgs();
        }

        public Builder(ApplicationScopeCategoryArgs defaults) {
            $ = new ApplicationScopeCategoryArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param artifacts An artifact is an application. It can be an image (for a container, not a CF application); a serverless function; or a Tanzu Application Service (TAS) droplet.
         * 
         * @return builder
         * 
         */
        public Builder artifacts(@Nullable Output<List<ApplicationScopeCategoryArtifactArgs>> artifacts) {
            $.artifacts = artifacts;
            return this;
        }

        /**
         * @param artifacts An artifact is an application. It can be an image (for a container, not a CF application); a serverless function; or a Tanzu Application Service (TAS) droplet.
         * 
         * @return builder
         * 
         */
        public Builder artifacts(List<ApplicationScopeCategoryArtifactArgs> artifacts) {
            return artifacts(Output.of(artifacts));
        }

        /**
         * @param artifacts An artifact is an application. It can be an image (for a container, not a CF application); a serverless function; or a Tanzu Application Service (TAS) droplet.
         * 
         * @return builder
         * 
         */
        public Builder artifacts(ApplicationScopeCategoryArtifactArgs... artifacts) {
            return artifacts(List.of(artifacts));
        }

        public Builder entityScopes(@Nullable Output<List<ApplicationScopeCategoryEntityScopeArgs>> entityScopes) {
            $.entityScopes = entityScopes;
            return this;
        }

        public Builder entityScopes(List<ApplicationScopeCategoryEntityScopeArgs> entityScopes) {
            return entityScopes(Output.of(entityScopes));
        }

        public Builder entityScopes(ApplicationScopeCategoryEntityScopeArgs... entityScopes) {
            return entityScopes(List.of(entityScopes));
        }

        /**
         * @param infrastructures An infrastructure resource is an element of a computing environment on which a workload is orchestrated and run. It can be a host (VM) or a Kubernetes cluster.
         * 
         * @return builder
         * 
         */
        public Builder infrastructures(@Nullable Output<List<ApplicationScopeCategoryInfrastructureArgs>> infrastructures) {
            $.infrastructures = infrastructures;
            return this;
        }

        /**
         * @param infrastructures An infrastructure resource is an element of a computing environment on which a workload is orchestrated and run. It can be a host (VM) or a Kubernetes cluster.
         * 
         * @return builder
         * 
         */
        public Builder infrastructures(List<ApplicationScopeCategoryInfrastructureArgs> infrastructures) {
            return infrastructures(Output.of(infrastructures));
        }

        /**
         * @param infrastructures An infrastructure resource is an element of a computing environment on which a workload is orchestrated and run. It can be a host (VM) or a Kubernetes cluster.
         * 
         * @return builder
         * 
         */
        public Builder infrastructures(ApplicationScopeCategoryInfrastructureArgs... infrastructures) {
            return infrastructures(List.of(infrastructures));
        }

        /**
         * @param workloads A workload is a running container. It can run in a Kubernetes cluster, on a VM (no orchestrator), or under Tanzu Application Service (TAS).
         * 
         * @return builder
         * 
         */
        public Builder workloads(@Nullable Output<List<ApplicationScopeCategoryWorkloadArgs>> workloads) {
            $.workloads = workloads;
            return this;
        }

        /**
         * @param workloads A workload is a running container. It can run in a Kubernetes cluster, on a VM (no orchestrator), or under Tanzu Application Service (TAS).
         * 
         * @return builder
         * 
         */
        public Builder workloads(List<ApplicationScopeCategoryWorkloadArgs> workloads) {
            return workloads(Output.of(workloads));
        }

        /**
         * @param workloads A workload is a running container. It can run in a Kubernetes cluster, on a VM (no orchestrator), or under Tanzu Application Service (TAS).
         * 
         * @return builder
         * 
         */
        public Builder workloads(ApplicationScopeCategoryWorkloadArgs... workloads) {
            return workloads(List.of(workloads));
        }

        public ApplicationScopeCategoryArgs build() {
            return $;
        }
    }

}
