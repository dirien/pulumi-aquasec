// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumiverse.aquasec.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class GetContainerRuntimePolicyMalwareScanOption extends com.pulumi.resources.InvokeArgs {

    public static final GetContainerRuntimePolicyMalwareScanOption Empty = new GetContainerRuntimePolicyMalwareScanOption();

    /**
     * Set Action, Defaults to &#39;Alert&#39; when empty
     * 
     */
    @Import(name="action", required=true)
    private String action;

    /**
     * @return Set Action, Defaults to &#39;Alert&#39; when empty
     * 
     */
    public String action() {
        return this.action;
    }

    /**
     * Defines if enabled or not
     * 
     */
    @Import(name="enabled", required=true)
    private Boolean enabled;

    /**
     * @return Defines if enabled or not
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }

    /**
     * List of registry paths to be excluded from being protected.
     * 
     */
    @Import(name="excludeDirectories", required=true)
    private List<String> excludeDirectories;

    /**
     * @return List of registry paths to be excluded from being protected.
     * 
     */
    public List<String> excludeDirectories() {
        return this.excludeDirectories;
    }

    /**
     * List of registry processes to be excluded from being protected.
     * 
     */
    @Import(name="excludeProcesses", required=true)
    private List<String> excludeProcesses;

    /**
     * @return List of registry processes to be excluded from being protected.
     * 
     */
    public List<String> excludeProcesses() {
        return this.excludeProcesses;
    }

    private GetContainerRuntimePolicyMalwareScanOption() {}

    private GetContainerRuntimePolicyMalwareScanOption(GetContainerRuntimePolicyMalwareScanOption $) {
        this.action = $.action;
        this.enabled = $.enabled;
        this.excludeDirectories = $.excludeDirectories;
        this.excludeProcesses = $.excludeProcesses;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetContainerRuntimePolicyMalwareScanOption defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetContainerRuntimePolicyMalwareScanOption $;

        public Builder() {
            $ = new GetContainerRuntimePolicyMalwareScanOption();
        }

        public Builder(GetContainerRuntimePolicyMalwareScanOption defaults) {
            $ = new GetContainerRuntimePolicyMalwareScanOption(Objects.requireNonNull(defaults));
        }

        /**
         * @param action Set Action, Defaults to &#39;Alert&#39; when empty
         * 
         * @return builder
         * 
         */
        public Builder action(String action) {
            $.action = action;
            return this;
        }

        /**
         * @param enabled Defines if enabled or not
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param excludeDirectories List of registry paths to be excluded from being protected.
         * 
         * @return builder
         * 
         */
        public Builder excludeDirectories(List<String> excludeDirectories) {
            $.excludeDirectories = excludeDirectories;
            return this;
        }

        /**
         * @param excludeDirectories List of registry paths to be excluded from being protected.
         * 
         * @return builder
         * 
         */
        public Builder excludeDirectories(String... excludeDirectories) {
            return excludeDirectories(List.of(excludeDirectories));
        }

        /**
         * @param excludeProcesses List of registry processes to be excluded from being protected.
         * 
         * @return builder
         * 
         */
        public Builder excludeProcesses(List<String> excludeProcesses) {
            $.excludeProcesses = excludeProcesses;
            return this;
        }

        /**
         * @param excludeProcesses List of registry processes to be excluded from being protected.
         * 
         * @return builder
         * 
         */
        public Builder excludeProcesses(String... excludeProcesses) {
            return excludeProcesses(List.of(excludeProcesses));
        }

        public GetContainerRuntimePolicyMalwareScanOption build() {
            $.action = Objects.requireNonNull($.action, "expected parameter 'action' to be non-null");
            $.enabled = Objects.requireNonNull($.enabled, "expected parameter 'enabled' to be non-null");
            $.excludeDirectories = Objects.requireNonNull($.excludeDirectories, "expected parameter 'excludeDirectories' to be non-null");
            $.excludeProcesses = Objects.requireNonNull($.excludeProcesses, "expected parameter 'excludeProcesses' to be non-null");
            return $;
        }
    }

}
