// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumiverse.aquasec.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class GetImagePlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetImagePlainArgs Empty = new GetImagePlainArgs();

    /**
     * The name of the registry where the image is stored.
     * 
     */
    @Import(name="registry", required=true)
    private String registry;

    /**
     * @return The name of the registry where the image is stored.
     * 
     */
    public String registry() {
        return this.registry;
    }

    /**
     * The name of the image&#39;s repository.
     * 
     */
    @Import(name="repository", required=true)
    private String repository;

    /**
     * @return The name of the image&#39;s repository.
     * 
     */
    public String repository() {
        return this.repository;
    }

    /**
     * The tag of the image.
     * 
     */
    @Import(name="tag", required=true)
    private String tag;

    /**
     * @return The tag of the image.
     * 
     */
    public String tag() {
        return this.tag;
    }

    private GetImagePlainArgs() {}

    private GetImagePlainArgs(GetImagePlainArgs $) {
        this.registry = $.registry;
        this.repository = $.repository;
        this.tag = $.tag;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetImagePlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetImagePlainArgs $;

        public Builder() {
            $ = new GetImagePlainArgs();
        }

        public Builder(GetImagePlainArgs defaults) {
            $ = new GetImagePlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param registry The name of the registry where the image is stored.
         * 
         * @return builder
         * 
         */
        public Builder registry(String registry) {
            $.registry = registry;
            return this;
        }

        /**
         * @param repository The name of the image&#39;s repository.
         * 
         * @return builder
         * 
         */
        public Builder repository(String repository) {
            $.repository = repository;
            return this;
        }

        /**
         * @param tag The tag of the image.
         * 
         * @return builder
         * 
         */
        public Builder tag(String tag) {
            $.tag = tag;
            return this;
        }

        public GetImagePlainArgs build() {
            $.registry = Objects.requireNonNull($.registry, "expected parameter 'registry' to be non-null");
            $.repository = Objects.requireNonNull($.repository, "expected parameter 'repository' to be non-null");
            $.tag = Objects.requireNonNull($.tag, "expected parameter 'tag' to be non-null");
            return $;
        }
    }

}
