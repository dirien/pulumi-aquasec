// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumiverse.aquasec.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetIntegrationRegistryArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetIntegrationRegistryArgs Empty = new GetIntegrationRegistryArgs();

    /**
     * Additional condition for pulling and rescanning images, Defaults to &#39;none&#39;
     * 
     */
    @Import(name="imageCreationDateCondition")
    private @Nullable Output<String> imageCreationDateCondition;

    /**
     * @return Additional condition for pulling and rescanning images, Defaults to &#39;none&#39;
     * 
     */
    public Optional<Output<String>> imageCreationDateCondition() {
        return Optional.ofNullable(this.imageCreationDateCondition);
    }

    /**
     * The name of the registry; string, required - this will be treated as the registry&#39;s ID, so choose a simple alphanumerical name without special signs and spaces
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the registry; string, required - this will be treated as the registry&#39;s ID, so choose a simple alphanumerical name without special signs and spaces
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * When auto pull image enabled, sets maximum age of auto pulled images
     * 
     */
    @Import(name="pullImageAge")
    private @Nullable Output<String> pullImageAge;

    /**
     * @return When auto pull image enabled, sets maximum age of auto pulled images
     * 
     */
    public Optional<Output<String>> pullImageAge() {
        return Optional.ofNullable(this.pullImageAge);
    }

    /**
     * When auto pull image enabled, sets maximum age of auto pulled images tags from each repository.
     * 
     */
    @Import(name="pullImageCount")
    private @Nullable Output<Integer> pullImageCount;

    /**
     * @return When auto pull image enabled, sets maximum age of auto pulled images tags from each repository.
     * 
     */
    public Optional<Output<Integer>> pullImageCount() {
        return Optional.ofNullable(this.pullImageCount);
    }

    /**
     * List of scanner names
     * 
     */
    @Import(name="scannerNames")
    private @Nullable Output<List<String>> scannerNames;

    /**
     * @return List of scanner names
     * 
     */
    public Optional<Output<List<String>>> scannerNames() {
        return Optional.ofNullable(this.scannerNames);
    }

    /**
     * Scanner type
     * 
     */
    @Import(name="scannerType")
    private @Nullable Output<String> scannerType;

    /**
     * @return Scanner type
     * 
     */
    public Optional<Output<String>> scannerType() {
        return Optional.ofNullable(this.scannerType);
    }

    private GetIntegrationRegistryArgs() {}

    private GetIntegrationRegistryArgs(GetIntegrationRegistryArgs $) {
        this.imageCreationDateCondition = $.imageCreationDateCondition;
        this.name = $.name;
        this.pullImageAge = $.pullImageAge;
        this.pullImageCount = $.pullImageCount;
        this.scannerNames = $.scannerNames;
        this.scannerType = $.scannerType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetIntegrationRegistryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetIntegrationRegistryArgs $;

        public Builder() {
            $ = new GetIntegrationRegistryArgs();
        }

        public Builder(GetIntegrationRegistryArgs defaults) {
            $ = new GetIntegrationRegistryArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param imageCreationDateCondition Additional condition for pulling and rescanning images, Defaults to &#39;none&#39;
         * 
         * @return builder
         * 
         */
        public Builder imageCreationDateCondition(@Nullable Output<String> imageCreationDateCondition) {
            $.imageCreationDateCondition = imageCreationDateCondition;
            return this;
        }

        /**
         * @param imageCreationDateCondition Additional condition for pulling and rescanning images, Defaults to &#39;none&#39;
         * 
         * @return builder
         * 
         */
        public Builder imageCreationDateCondition(String imageCreationDateCondition) {
            return imageCreationDateCondition(Output.of(imageCreationDateCondition));
        }

        /**
         * @param name The name of the registry; string, required - this will be treated as the registry&#39;s ID, so choose a simple alphanumerical name without special signs and spaces
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the registry; string, required - this will be treated as the registry&#39;s ID, so choose a simple alphanumerical name without special signs and spaces
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param pullImageAge When auto pull image enabled, sets maximum age of auto pulled images
         * 
         * @return builder
         * 
         */
        public Builder pullImageAge(@Nullable Output<String> pullImageAge) {
            $.pullImageAge = pullImageAge;
            return this;
        }

        /**
         * @param pullImageAge When auto pull image enabled, sets maximum age of auto pulled images
         * 
         * @return builder
         * 
         */
        public Builder pullImageAge(String pullImageAge) {
            return pullImageAge(Output.of(pullImageAge));
        }

        /**
         * @param pullImageCount When auto pull image enabled, sets maximum age of auto pulled images tags from each repository.
         * 
         * @return builder
         * 
         */
        public Builder pullImageCount(@Nullable Output<Integer> pullImageCount) {
            $.pullImageCount = pullImageCount;
            return this;
        }

        /**
         * @param pullImageCount When auto pull image enabled, sets maximum age of auto pulled images tags from each repository.
         * 
         * @return builder
         * 
         */
        public Builder pullImageCount(Integer pullImageCount) {
            return pullImageCount(Output.of(pullImageCount));
        }

        /**
         * @param scannerNames List of scanner names
         * 
         * @return builder
         * 
         */
        public Builder scannerNames(@Nullable Output<List<String>> scannerNames) {
            $.scannerNames = scannerNames;
            return this;
        }

        /**
         * @param scannerNames List of scanner names
         * 
         * @return builder
         * 
         */
        public Builder scannerNames(List<String> scannerNames) {
            return scannerNames(Output.of(scannerNames));
        }

        /**
         * @param scannerNames List of scanner names
         * 
         * @return builder
         * 
         */
        public Builder scannerNames(String... scannerNames) {
            return scannerNames(List.of(scannerNames));
        }

        /**
         * @param scannerType Scanner type
         * 
         * @return builder
         * 
         */
        public Builder scannerType(@Nullable Output<String> scannerType) {
            $.scannerType = scannerType;
            return this;
        }

        /**
         * @param scannerType Scanner type
         * 
         * @return builder
         * 
         */
        public Builder scannerType(String scannerType) {
            return scannerType(Output.of(scannerType));
        }

        public GetIntegrationRegistryArgs build() {
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            return $;
        }
    }

}
