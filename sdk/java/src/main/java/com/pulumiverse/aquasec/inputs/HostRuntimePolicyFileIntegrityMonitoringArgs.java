// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumiverse.aquasec.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class HostRuntimePolicyFileIntegrityMonitoringArgs extends com.pulumi.resources.ResourceArgs {

    public static final HostRuntimePolicyFileIntegrityMonitoringArgs Empty = new HostRuntimePolicyFileIntegrityMonitoringArgs();

    /**
     * List of paths to be excluded from being monitored.
     * 
     */
    @Import(name="excludedPaths")
    private @Nullable Output<List<String>> excludedPaths;

    /**
     * @return List of paths to be excluded from being monitored.
     * 
     */
    public Optional<Output<List<String>>> excludedPaths() {
        return Optional.ofNullable(this.excludedPaths);
    }

    /**
     * List of processes to be excluded from being monitored.
     * 
     */
    @Import(name="excludedProcesses")
    private @Nullable Output<List<String>> excludedProcesses;

    /**
     * @return List of processes to be excluded from being monitored.
     * 
     */
    public Optional<Output<List<String>>> excludedProcesses() {
        return Optional.ofNullable(this.excludedProcesses);
    }

    /**
     * List of users to be excluded from being monitored.
     * 
     */
    @Import(name="excludedUsers")
    private @Nullable Output<List<String>> excludedUsers;

    /**
     * @return List of users to be excluded from being monitored.
     * 
     */
    public Optional<Output<List<String>>> excludedUsers() {
        return Optional.ofNullable(this.excludedUsers);
    }

    /**
     * If true, add attributes operations will be monitored.
     * 
     */
    @Import(name="monitorAttributes")
    private @Nullable Output<Boolean> monitorAttributes;

    /**
     * @return If true, add attributes operations will be monitored.
     * 
     */
    public Optional<Output<Boolean>> monitorAttributes() {
        return Optional.ofNullable(this.monitorAttributes);
    }

    /**
     * If true, create operations will be monitored.
     * 
     */
    @Import(name="monitorCreate")
    private @Nullable Output<Boolean> monitorCreate;

    /**
     * @return If true, create operations will be monitored.
     * 
     */
    public Optional<Output<Boolean>> monitorCreate() {
        return Optional.ofNullable(this.monitorCreate);
    }

    /**
     * If true, deletion operations will be monitored.
     * 
     */
    @Import(name="monitorDelete")
    private @Nullable Output<Boolean> monitorDelete;

    /**
     * @return If true, deletion operations will be monitored.
     * 
     */
    public Optional<Output<Boolean>> monitorDelete() {
        return Optional.ofNullable(this.monitorDelete);
    }

    /**
     * If true, modification operations will be monitored.
     * 
     */
    @Import(name="monitorModify")
    private @Nullable Output<Boolean> monitorModify;

    /**
     * @return If true, modification operations will be monitored.
     * 
     */
    public Optional<Output<Boolean>> monitorModify() {
        return Optional.ofNullable(this.monitorModify);
    }

    /**
     * If true, read operations will be monitored.
     * 
     */
    @Import(name="monitorRead")
    private @Nullable Output<Boolean> monitorRead;

    /**
     * @return If true, read operations will be monitored.
     * 
     */
    public Optional<Output<Boolean>> monitorRead() {
        return Optional.ofNullable(this.monitorRead);
    }

    /**
     * List of paths to be monitored.
     * 
     */
    @Import(name="monitoredPaths")
    private @Nullable Output<List<String>> monitoredPaths;

    /**
     * @return List of paths to be monitored.
     * 
     */
    public Optional<Output<List<String>>> monitoredPaths() {
        return Optional.ofNullable(this.monitoredPaths);
    }

    /**
     * List of processes to be monitored.
     * 
     */
    @Import(name="monitoredProcesses")
    private @Nullable Output<List<String>> monitoredProcesses;

    /**
     * @return List of processes to be monitored.
     * 
     */
    public Optional<Output<List<String>>> monitoredProcesses() {
        return Optional.ofNullable(this.monitoredProcesses);
    }

    /**
     * List of users to be monitored.
     * 
     */
    @Import(name="monitoredUsers")
    private @Nullable Output<List<String>> monitoredUsers;

    /**
     * @return List of users to be monitored.
     * 
     */
    public Optional<Output<List<String>>> monitoredUsers() {
        return Optional.ofNullable(this.monitoredUsers);
    }

    private HostRuntimePolicyFileIntegrityMonitoringArgs() {}

    private HostRuntimePolicyFileIntegrityMonitoringArgs(HostRuntimePolicyFileIntegrityMonitoringArgs $) {
        this.excludedPaths = $.excludedPaths;
        this.excludedProcesses = $.excludedProcesses;
        this.excludedUsers = $.excludedUsers;
        this.monitorAttributes = $.monitorAttributes;
        this.monitorCreate = $.monitorCreate;
        this.monitorDelete = $.monitorDelete;
        this.monitorModify = $.monitorModify;
        this.monitorRead = $.monitorRead;
        this.monitoredPaths = $.monitoredPaths;
        this.monitoredProcesses = $.monitoredProcesses;
        this.monitoredUsers = $.monitoredUsers;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HostRuntimePolicyFileIntegrityMonitoringArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HostRuntimePolicyFileIntegrityMonitoringArgs $;

        public Builder() {
            $ = new HostRuntimePolicyFileIntegrityMonitoringArgs();
        }

        public Builder(HostRuntimePolicyFileIntegrityMonitoringArgs defaults) {
            $ = new HostRuntimePolicyFileIntegrityMonitoringArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param excludedPaths List of paths to be excluded from being monitored.
         * 
         * @return builder
         * 
         */
        public Builder excludedPaths(@Nullable Output<List<String>> excludedPaths) {
            $.excludedPaths = excludedPaths;
            return this;
        }

        /**
         * @param excludedPaths List of paths to be excluded from being monitored.
         * 
         * @return builder
         * 
         */
        public Builder excludedPaths(List<String> excludedPaths) {
            return excludedPaths(Output.of(excludedPaths));
        }

        /**
         * @param excludedPaths List of paths to be excluded from being monitored.
         * 
         * @return builder
         * 
         */
        public Builder excludedPaths(String... excludedPaths) {
            return excludedPaths(List.of(excludedPaths));
        }

        /**
         * @param excludedProcesses List of processes to be excluded from being monitored.
         * 
         * @return builder
         * 
         */
        public Builder excludedProcesses(@Nullable Output<List<String>> excludedProcesses) {
            $.excludedProcesses = excludedProcesses;
            return this;
        }

        /**
         * @param excludedProcesses List of processes to be excluded from being monitored.
         * 
         * @return builder
         * 
         */
        public Builder excludedProcesses(List<String> excludedProcesses) {
            return excludedProcesses(Output.of(excludedProcesses));
        }

        /**
         * @param excludedProcesses List of processes to be excluded from being monitored.
         * 
         * @return builder
         * 
         */
        public Builder excludedProcesses(String... excludedProcesses) {
            return excludedProcesses(List.of(excludedProcesses));
        }

        /**
         * @param excludedUsers List of users to be excluded from being monitored.
         * 
         * @return builder
         * 
         */
        public Builder excludedUsers(@Nullable Output<List<String>> excludedUsers) {
            $.excludedUsers = excludedUsers;
            return this;
        }

        /**
         * @param excludedUsers List of users to be excluded from being monitored.
         * 
         * @return builder
         * 
         */
        public Builder excludedUsers(List<String> excludedUsers) {
            return excludedUsers(Output.of(excludedUsers));
        }

        /**
         * @param excludedUsers List of users to be excluded from being monitored.
         * 
         * @return builder
         * 
         */
        public Builder excludedUsers(String... excludedUsers) {
            return excludedUsers(List.of(excludedUsers));
        }

        /**
         * @param monitorAttributes If true, add attributes operations will be monitored.
         * 
         * @return builder
         * 
         */
        public Builder monitorAttributes(@Nullable Output<Boolean> monitorAttributes) {
            $.monitorAttributes = monitorAttributes;
            return this;
        }

        /**
         * @param monitorAttributes If true, add attributes operations will be monitored.
         * 
         * @return builder
         * 
         */
        public Builder monitorAttributes(Boolean monitorAttributes) {
            return monitorAttributes(Output.of(monitorAttributes));
        }

        /**
         * @param monitorCreate If true, create operations will be monitored.
         * 
         * @return builder
         * 
         */
        public Builder monitorCreate(@Nullable Output<Boolean> monitorCreate) {
            $.monitorCreate = monitorCreate;
            return this;
        }

        /**
         * @param monitorCreate If true, create operations will be monitored.
         * 
         * @return builder
         * 
         */
        public Builder monitorCreate(Boolean monitorCreate) {
            return monitorCreate(Output.of(monitorCreate));
        }

        /**
         * @param monitorDelete If true, deletion operations will be monitored.
         * 
         * @return builder
         * 
         */
        public Builder monitorDelete(@Nullable Output<Boolean> monitorDelete) {
            $.monitorDelete = monitorDelete;
            return this;
        }

        /**
         * @param monitorDelete If true, deletion operations will be monitored.
         * 
         * @return builder
         * 
         */
        public Builder monitorDelete(Boolean monitorDelete) {
            return monitorDelete(Output.of(monitorDelete));
        }

        /**
         * @param monitorModify If true, modification operations will be monitored.
         * 
         * @return builder
         * 
         */
        public Builder monitorModify(@Nullable Output<Boolean> monitorModify) {
            $.monitorModify = monitorModify;
            return this;
        }

        /**
         * @param monitorModify If true, modification operations will be monitored.
         * 
         * @return builder
         * 
         */
        public Builder monitorModify(Boolean monitorModify) {
            return monitorModify(Output.of(monitorModify));
        }

        /**
         * @param monitorRead If true, read operations will be monitored.
         * 
         * @return builder
         * 
         */
        public Builder monitorRead(@Nullable Output<Boolean> monitorRead) {
            $.monitorRead = monitorRead;
            return this;
        }

        /**
         * @param monitorRead If true, read operations will be monitored.
         * 
         * @return builder
         * 
         */
        public Builder monitorRead(Boolean monitorRead) {
            return monitorRead(Output.of(monitorRead));
        }

        /**
         * @param monitoredPaths List of paths to be monitored.
         * 
         * @return builder
         * 
         */
        public Builder monitoredPaths(@Nullable Output<List<String>> monitoredPaths) {
            $.monitoredPaths = monitoredPaths;
            return this;
        }

        /**
         * @param monitoredPaths List of paths to be monitored.
         * 
         * @return builder
         * 
         */
        public Builder monitoredPaths(List<String> monitoredPaths) {
            return monitoredPaths(Output.of(monitoredPaths));
        }

        /**
         * @param monitoredPaths List of paths to be monitored.
         * 
         * @return builder
         * 
         */
        public Builder monitoredPaths(String... monitoredPaths) {
            return monitoredPaths(List.of(monitoredPaths));
        }

        /**
         * @param monitoredProcesses List of processes to be monitored.
         * 
         * @return builder
         * 
         */
        public Builder monitoredProcesses(@Nullable Output<List<String>> monitoredProcesses) {
            $.monitoredProcesses = monitoredProcesses;
            return this;
        }

        /**
         * @param monitoredProcesses List of processes to be monitored.
         * 
         * @return builder
         * 
         */
        public Builder monitoredProcesses(List<String> monitoredProcesses) {
            return monitoredProcesses(Output.of(monitoredProcesses));
        }

        /**
         * @param monitoredProcesses List of processes to be monitored.
         * 
         * @return builder
         * 
         */
        public Builder monitoredProcesses(String... monitoredProcesses) {
            return monitoredProcesses(List.of(monitoredProcesses));
        }

        /**
         * @param monitoredUsers List of users to be monitored.
         * 
         * @return builder
         * 
         */
        public Builder monitoredUsers(@Nullable Output<List<String>> monitoredUsers) {
            $.monitoredUsers = monitoredUsers;
            return this;
        }

        /**
         * @param monitoredUsers List of users to be monitored.
         * 
         * @return builder
         * 
         */
        public Builder monitoredUsers(List<String> monitoredUsers) {
            return monitoredUsers(Output.of(monitoredUsers));
        }

        /**
         * @param monitoredUsers List of users to be monitored.
         * 
         * @return builder
         * 
         */
        public Builder monitoredUsers(String... monitoredUsers) {
            return monitoredUsers(List.of(monitoredUsers));
        }

        public HostRuntimePolicyFileIntegrityMonitoringArgs build() {
            return $;
        }
    }

}
