// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumiverse.aquasec.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ImageAssuranceChecksPerformedArgs extends com.pulumi.resources.ResourceArgs {

    public static final ImageAssuranceChecksPerformedArgs Empty = new ImageAssuranceChecksPerformedArgs();

    @Import(name="assuranceType")
    private @Nullable Output<String> assuranceType;

    public Optional<Output<String>> assuranceType() {
        return Optional.ofNullable(this.assuranceType);
    }

    @Import(name="blocking")
    private @Nullable Output<Boolean> blocking;

    public Optional<Output<Boolean>> blocking() {
        return Optional.ofNullable(this.blocking);
    }

    @Import(name="control")
    private @Nullable Output<String> control;

    public Optional<Output<String>> control() {
        return Optional.ofNullable(this.control);
    }

    /**
     * If DTA was skipped.
     * 
     */
    @Import(name="dtaSkipped")
    private @Nullable Output<Boolean> dtaSkipped;

    /**
     * @return If DTA was skipped.
     * 
     */
    public Optional<Output<Boolean>> dtaSkipped() {
        return Optional.ofNullable(this.dtaSkipped);
    }

    /**
     * The reason why DTA was skipped.
     * 
     */
    @Import(name="dtaSkippedReason")
    private @Nullable Output<String> dtaSkippedReason;

    /**
     * @return The reason why DTA was skipped.
     * 
     */
    public Optional<Output<String>> dtaSkippedReason() {
        return Optional.ofNullable(this.dtaSkippedReason);
    }

    @Import(name="failed")
    private @Nullable Output<Boolean> failed;

    public Optional<Output<Boolean>> failed() {
        return Optional.ofNullable(this.failed);
    }

    @Import(name="policyName")
    private @Nullable Output<String> policyName;

    public Optional<Output<String>> policyName() {
        return Optional.ofNullable(this.policyName);
    }

    private ImageAssuranceChecksPerformedArgs() {}

    private ImageAssuranceChecksPerformedArgs(ImageAssuranceChecksPerformedArgs $) {
        this.assuranceType = $.assuranceType;
        this.blocking = $.blocking;
        this.control = $.control;
        this.dtaSkipped = $.dtaSkipped;
        this.dtaSkippedReason = $.dtaSkippedReason;
        this.failed = $.failed;
        this.policyName = $.policyName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ImageAssuranceChecksPerformedArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ImageAssuranceChecksPerformedArgs $;

        public Builder() {
            $ = new ImageAssuranceChecksPerformedArgs();
        }

        public Builder(ImageAssuranceChecksPerformedArgs defaults) {
            $ = new ImageAssuranceChecksPerformedArgs(Objects.requireNonNull(defaults));
        }

        public Builder assuranceType(@Nullable Output<String> assuranceType) {
            $.assuranceType = assuranceType;
            return this;
        }

        public Builder assuranceType(String assuranceType) {
            return assuranceType(Output.of(assuranceType));
        }

        public Builder blocking(@Nullable Output<Boolean> blocking) {
            $.blocking = blocking;
            return this;
        }

        public Builder blocking(Boolean blocking) {
            return blocking(Output.of(blocking));
        }

        public Builder control(@Nullable Output<String> control) {
            $.control = control;
            return this;
        }

        public Builder control(String control) {
            return control(Output.of(control));
        }

        /**
         * @param dtaSkipped If DTA was skipped.
         * 
         * @return builder
         * 
         */
        public Builder dtaSkipped(@Nullable Output<Boolean> dtaSkipped) {
            $.dtaSkipped = dtaSkipped;
            return this;
        }

        /**
         * @param dtaSkipped If DTA was skipped.
         * 
         * @return builder
         * 
         */
        public Builder dtaSkipped(Boolean dtaSkipped) {
            return dtaSkipped(Output.of(dtaSkipped));
        }

        /**
         * @param dtaSkippedReason The reason why DTA was skipped.
         * 
         * @return builder
         * 
         */
        public Builder dtaSkippedReason(@Nullable Output<String> dtaSkippedReason) {
            $.dtaSkippedReason = dtaSkippedReason;
            return this;
        }

        /**
         * @param dtaSkippedReason The reason why DTA was skipped.
         * 
         * @return builder
         * 
         */
        public Builder dtaSkippedReason(String dtaSkippedReason) {
            return dtaSkippedReason(Output.of(dtaSkippedReason));
        }

        public Builder failed(@Nullable Output<Boolean> failed) {
            $.failed = failed;
            return this;
        }

        public Builder failed(Boolean failed) {
            return failed(Output.of(failed));
        }

        public Builder policyName(@Nullable Output<String> policyName) {
            $.policyName = policyName;
            return this;
        }

        public Builder policyName(String policyName) {
            return policyName(Output.of(policyName));
        }

        public ImageAssuranceChecksPerformedArgs build() {
            return $;
        }
    }

}
