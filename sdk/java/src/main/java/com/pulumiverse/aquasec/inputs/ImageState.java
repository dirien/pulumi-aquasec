// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumiverse.aquasec.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumiverse.aquasec.inputs.ImageAssuranceChecksPerformedArgs;
import com.pulumiverse.aquasec.inputs.ImageHistoryArgs;
import com.pulumiverse.aquasec.inputs.ImageVulnerabilityArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ImageState extends com.pulumi.resources.ResourceArgs {

    public static final ImageState Empty = new ImageState();

    /**
     * If this field is set to true, the image will be whitelisted.
     * 
     */
    @Import(name="allowImage")
    private @Nullable Output<Boolean> allowImage;

    /**
     * @return If this field is set to true, the image will be whitelisted.
     * 
     */
    public Optional<Output<Boolean>> allowImage() {
        return Optional.ofNullable(this.allowImage);
    }

    /**
     * The image architecture.
     * 
     */
    @Import(name="architecture")
    private @Nullable Output<String> architecture;

    /**
     * @return The image architecture.
     * 
     */
    public Optional<Output<String>> architecture() {
        return Optional.ofNullable(this.architecture);
    }

    /**
     * The list of image assurance checks performed on the image.
     * 
     */
    @Import(name="assuranceChecksPerformeds")
    private @Nullable Output<List<ImageAssuranceChecksPerformedArgs>> assuranceChecksPerformeds;

    /**
     * @return The list of image assurance checks performed on the image.
     * 
     */
    public Optional<Output<List<ImageAssuranceChecksPerformedArgs>>> assuranceChecksPerformeds() {
        return Optional.ofNullable(this.assuranceChecksPerformeds);
    }

    /**
     * The name of the user who registered the image.
     * 
     */
    @Import(name="author")
    private @Nullable Output<String> author;

    /**
     * @return The name of the user who registered the image.
     * 
     */
    public Optional<Output<String>> author() {
        return Optional.ofNullable(this.author);
    }

    /**
     * Whether the image is blacklisted.
     * 
     */
    @Import(name="blacklisted")
    private @Nullable Output<Boolean> blacklisted;

    /**
     * @return Whether the image is blacklisted.
     * 
     */
    public Optional<Output<Boolean>> blacklisted() {
        return Optional.ofNullable(this.blacklisted);
    }

    /**
     * If this field is set to true, the image will be blacklisted.
     * 
     */
    @Import(name="blockImage")
    private @Nullable Output<Boolean> blockImage;

    /**
     * @return If this field is set to true, the image will be blacklisted.
     * 
     */
    public Optional<Output<Boolean>> blockImage() {
        return Optional.ofNullable(this.blockImage);
    }

    /**
     * The image creation comment.
     * 
     */
    @Import(name="comment")
    private @Nullable Output<String> comment;

    /**
     * @return The image creation comment.
     * 
     */
    public Optional<Output<String>> comment() {
        return Optional.ofNullable(this.comment);
    }

    /**
     * The date and time when the image was registered.
     * 
     */
    @Import(name="created")
    private @Nullable Output<String> created;

    /**
     * @return The date and time when the image was registered.
     * 
     */
    public Optional<Output<String>> created() {
        return Optional.ofNullable(this.created);
    }

    /**
     * Number of critical severity vulnerabilities detected in the image.
     * 
     */
    @Import(name="criticalVulnerabilities")
    private @Nullable Output<Integer> criticalVulnerabilities;

    /**
     * @return Number of critical severity vulnerabilities detected in the image.
     * 
     */
    public Optional<Output<Integer>> criticalVulnerabilities() {
        return Optional.ofNullable(this.criticalVulnerabilities);
    }

    /**
     * The default user of the image.
     * 
     */
    @Import(name="defaultUser")
    private @Nullable Output<String> defaultUser;

    /**
     * @return The default user of the image.
     * 
     */
    public Optional<Output<String>> defaultUser() {
        return Optional.ofNullable(this.defaultUser);
    }

    /**
     * The content digest of the image.
     * 
     */
    @Import(name="digest")
    private @Nullable Output<String> digest;

    /**
     * @return The content digest of the image.
     * 
     */
    public Optional<Output<String>> digest() {
        return Optional.ofNullable(this.digest);
    }

    /**
     * Whether the image is disallowed (non-compliant).
     * 
     */
    @Import(name="disallowed")
    private @Nullable Output<Boolean> disallowed;

    /**
     * @return Whether the image is disallowed (non-compliant).
     * 
     */
    public Optional<Output<Boolean>> disallowed() {
        return Optional.ofNullable(this.disallowed);
    }

    /**
     * Whether the image was disallowed because of Image Assurance Policies.
     * 
     */
    @Import(name="disallowedByAssuranceChecks")
    private @Nullable Output<Boolean> disallowedByAssuranceChecks;

    /**
     * @return Whether the image was disallowed because of Image Assurance Policies.
     * 
     */
    public Optional<Output<Boolean>> disallowedByAssuranceChecks() {
        return Optional.ofNullable(this.disallowedByAssuranceChecks);
    }

    /**
     * The Docker image ID.
     * 
     */
    @Import(name="dockerId")
    private @Nullable Output<String> dockerId;

    /**
     * @return The Docker image ID.
     * 
     */
    public Optional<Output<String>> dockerId() {
        return Optional.ofNullable(this.dockerId);
    }

    /**
     * Docker labels of the image.
     * 
     */
    @Import(name="dockerLabels")
    private @Nullable Output<List<String>> dockerLabels;

    /**
     * @return Docker labels of the image.
     * 
     */
    public Optional<Output<List<String>>> dockerLabels() {
        return Optional.ofNullable(this.dockerLabels);
    }

    /**
     * The Docker version used when building the image.
     * 
     */
    @Import(name="dockerVersion")
    private @Nullable Output<String> dockerVersion;

    /**
     * @return The Docker version used when building the image.
     * 
     */
    public Optional<Output<String>> dockerVersion() {
        return Optional.ofNullable(this.dockerVersion);
    }

    /**
     * DTA severity score.
     * 
     */
    @Import(name="dtaSeverityScore")
    private @Nullable Output<String> dtaSeverityScore;

    /**
     * @return DTA severity score.
     * 
     */
    public Optional<Output<String>> dtaSeverityScore() {
        return Optional.ofNullable(this.dtaSeverityScore);
    }

    /**
     * If DTA was skipped.
     * 
     */
    @Import(name="dtaSkipped")
    private @Nullable Output<Boolean> dtaSkipped;

    /**
     * @return If DTA was skipped.
     * 
     */
    public Optional<Output<Boolean>> dtaSkipped() {
        return Optional.ofNullable(this.dtaSkipped);
    }

    /**
     * The reason why DTA was skipped.
     * 
     */
    @Import(name="dtaSkippedReason")
    private @Nullable Output<String> dtaSkippedReason;

    /**
     * @return The reason why DTA was skipped.
     * 
     */
    public Optional<Output<String>> dtaSkippedReason() {
        return Optional.ofNullable(this.dtaSkippedReason);
    }

    /**
     * Environment variables in the image.
     * 
     */
    @Import(name="environmentVariables")
    private @Nullable Output<List<String>> environmentVariables;

    /**
     * @return Environment variables in the image.
     * 
     */
    public Optional<Output<List<String>>> environmentVariables() {
        return Optional.ofNullable(this.environmentVariables);
    }

    /**
     * Number of high severity vulnerabilities detected in the image.
     * 
     */
    @Import(name="highVulnerabilities")
    private @Nullable Output<Integer> highVulnerabilities;

    /**
     * @return Number of high severity vulnerabilities detected in the image.
     * 
     */
    public Optional<Output<Integer>> highVulnerabilities() {
        return Optional.ofNullable(this.highVulnerabilities);
    }

    /**
     * The Docker history of the image.
     * 
     */
    @Import(name="histories")
    private @Nullable Output<List<ImageHistoryArgs>> histories;

    /**
     * @return The Docker history of the image.
     * 
     */
    public Optional<Output<List<ImageHistoryArgs>>> histories() {
        return Optional.ofNullable(this.histories);
    }

    /**
     * The size of the image in bytes.
     * 
     */
    @Import(name="imageSize")
    private @Nullable Output<Integer> imageSize;

    /**
     * @return The size of the image in bytes.
     * 
     */
    public Optional<Output<Integer>> imageSize() {
        return Optional.ofNullable(this.imageSize);
    }

    /**
     * The type of the image.
     * 
     */
    @Import(name="imageType")
    private @Nullable Output<String> imageType;

    /**
     * @return The type of the image.
     * 
     */
    public Optional<Output<String>> imageType() {
        return Optional.ofNullable(this.imageType);
    }

    /**
     * Aqua labels of the image.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<List<String>> labels;

    /**
     * @return Aqua labels of the image.
     * 
     */
    public Optional<Output<List<String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * Number of low severity vulnerabilities detected in the image.
     * 
     */
    @Import(name="lowVulnerabilities")
    private @Nullable Output<Integer> lowVulnerabilities;

    /**
     * @return Number of low severity vulnerabilities detected in the image.
     * 
     */
    public Optional<Output<Integer>> lowVulnerabilities() {
        return Optional.ofNullable(this.lowVulnerabilities);
    }

    /**
     * Number of malware found on the image.
     * 
     */
    @Import(name="malware")
    private @Nullable Output<Integer> malware;

    /**
     * @return Number of malware found on the image.
     * 
     */
    public Optional<Output<Integer>> malware() {
        return Optional.ofNullable(this.malware);
    }

    /**
     * Number of medium severity vulnerabilities detected in the image.
     * 
     */
    @Import(name="mediumVulnerabilities")
    private @Nullable Output<Integer> mediumVulnerabilities;

    /**
     * @return Number of medium severity vulnerabilities detected in the image.
     * 
     */
    public Optional<Output<Integer>> mediumVulnerabilities() {
        return Optional.ofNullable(this.mediumVulnerabilities);
    }

    /**
     * The name of the image.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the image.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Number of negligible severity vulnerabilities detected in the image.
     * 
     */
    @Import(name="negligibleVulnerabilities")
    private @Nullable Output<Integer> negligibleVulnerabilities;

    /**
     * @return Number of negligible severity vulnerabilities detected in the image.
     * 
     */
    public Optional<Output<Integer>> negligibleVulnerabilities() {
        return Optional.ofNullable(this.negligibleVulnerabilities);
    }

    /**
     * Whether a new version of the image is available in the registry but is not scanned and registered yet.
     * 
     */
    @Import(name="newerImageExists")
    private @Nullable Output<Boolean> newerImageExists;

    /**
     * @return Whether a new version of the image is available in the registry but is not scanned and registered yet.
     * 
     */
    public Optional<Output<Boolean>> newerImageExists() {
        return Optional.ofNullable(this.newerImageExists);
    }

    /**
     * The operating system detected in the image
     * 
     */
    @Import(name="os")
    private @Nullable Output<String> os;

    /**
     * @return The operating system detected in the image
     * 
     */
    public Optional<Output<String>> os() {
        return Optional.ofNullable(this.os);
    }

    /**
     * The version of the OS detected in the image.
     * 
     */
    @Import(name="osVersion")
    private @Nullable Output<String> osVersion;

    /**
     * @return The version of the OS detected in the image.
     * 
     */
    public Optional<Output<String>> osVersion() {
        return Optional.ofNullable(this.osVersion);
    }

    /**
     * The ID of the parent image.
     * 
     */
    @Import(name="parent")
    private @Nullable Output<String> parent;

    /**
     * @return The ID of the parent image.
     * 
     */
    public Optional<Output<String>> parent() {
        return Optional.ofNullable(this.parent);
    }

    /**
     * Whether the image could only be partially scanned.
     * 
     */
    @Import(name="partialResults")
    private @Nullable Output<Boolean> partialResults;

    /**
     * @return Whether the image could only be partially scanned.
     * 
     */
    public Optional<Output<Boolean>> partialResults() {
        return Optional.ofNullable(this.partialResults);
    }

    /**
     * Whether the image is non-compliant, but is pending this status due to running containers.
     * 
     */
    @Import(name="pendingDisallowed")
    private @Nullable Output<Boolean> pendingDisallowed;

    /**
     * @return Whether the image is non-compliant, but is pending this status due to running containers.
     * 
     */
    public Optional<Output<Boolean>> pendingDisallowed() {
        return Optional.ofNullable(this.pendingDisallowed);
    }

    /**
     * Permission of the image.
     * 
     */
    @Import(name="permission")
    private @Nullable Output<String> permission;

    /**
     * @return Permission of the image.
     * 
     */
    public Optional<Output<String>> permission() {
        return Optional.ofNullable(this.permission);
    }

    /**
     * The name of the user who last modified the image permissions.
     * 
     */
    @Import(name="permissionAuthor")
    private @Nullable Output<String> permissionAuthor;

    /**
     * @return The name of the user who last modified the image permissions.
     * 
     */
    public Optional<Output<String>> permissionAuthor() {
        return Optional.ofNullable(this.permissionAuthor);
    }

    /**
     * The comment provided when the image permissions were last modified
     * 
     */
    @Import(name="permissionComment")
    private @Nullable Output<String> permissionComment;

    /**
     * @return The comment provided when the image permissions were last modified
     * 
     */
    public Optional<Output<String>> permissionComment() {
        return Optional.ofNullable(this.permissionComment);
    }

    /**
     * A comment on why the image was whitelisted or blacklisted
     * 
     */
    @Import(name="permissionModificationComment")
    private @Nullable Output<String> permissionModificationComment;

    /**
     * @return A comment on why the image was whitelisted or blacklisted
     * 
     */
    public Optional<Output<String>> permissionModificationComment() {
        return Optional.ofNullable(this.permissionModificationComment);
    }

    /**
     * The name of the registry where the image is stored.
     * 
     */
    @Import(name="registry")
    private @Nullable Output<String> registry;

    /**
     * @return The name of the registry where the image is stored.
     * 
     */
    public Optional<Output<String>> registry() {
        return Optional.ofNullable(this.registry);
    }

    /**
     * Type of the registry.
     * 
     */
    @Import(name="registryType")
    private @Nullable Output<String> registryType;

    /**
     * @return Type of the registry.
     * 
     */
    public Optional<Output<String>> registryType() {
        return Optional.ofNullable(this.registryType);
    }

    /**
     * The repository digests.
     * 
     */
    @Import(name="repoDigests")
    private @Nullable Output<List<String>> repoDigests;

    /**
     * @return The repository digests.
     * 
     */
    public Optional<Output<List<String>>> repoDigests() {
        return Optional.ofNullable(this.repoDigests);
    }

    /**
     * The name of the image&#39;s repository.
     * 
     */
    @Import(name="repository")
    private @Nullable Output<String> repository;

    /**
     * @return The name of the image&#39;s repository.
     * 
     */
    public Optional<Output<String>> repository() {
        return Optional.ofNullable(this.repository);
    }

    /**
     * The date and time when the image was last scanned.
     * 
     */
    @Import(name="scanDate")
    private @Nullable Output<String> scanDate;

    /**
     * @return The date and time when the image was last scanned.
     * 
     */
    public Optional<Output<String>> scanDate() {
        return Optional.ofNullable(this.scanDate);
    }

    /**
     * If the image scan failed, the failure message.
     * 
     */
    @Import(name="scanError")
    private @Nullable Output<String> scanError;

    /**
     * @return If the image scan failed, the failure message.
     * 
     */
    public Optional<Output<String>> scanError() {
        return Optional.ofNullable(this.scanError);
    }

    /**
     * The scan status of the image (either &#39;pending&#39;, &#39;in*progress&#39;, &#39;finished&#39;, &#39;failed&#39; or &#39;not*started&#39;).
     * 
     */
    @Import(name="scanStatus")
    private @Nullable Output<String> scanStatus;

    /**
     * @return The scan status of the image (either &#39;pending&#39;, &#39;in*progress&#39;, &#39;finished&#39;, &#39;failed&#39; or &#39;not*started&#39;).
     * 
     */
    public Optional<Output<String>> scanStatus() {
        return Optional.ofNullable(this.scanStatus);
    }

    /**
     * Number of sensitive data detected in the image.
     * 
     */
    @Import(name="sensitiveData")
    private @Nullable Output<Integer> sensitiveData;

    /**
     * @return Number of sensitive data detected in the image.
     * 
     */
    public Optional<Output<Integer>> sensitiveData() {
        return Optional.ofNullable(this.sensitiveData);
    }

    /**
     * The tag of the image.
     * 
     */
    @Import(name="tag")
    private @Nullable Output<String> tag;

    /**
     * @return The tag of the image.
     * 
     */
    public Optional<Output<String>> tag() {
        return Optional.ofNullable(this.tag);
    }

    /**
     * The total number of vulnerabilities detected in the image.
     * 
     */
    @Import(name="totalVulnerabilities")
    private @Nullable Output<Integer> totalVulnerabilities;

    /**
     * @return The total number of vulnerabilities detected in the image.
     * 
     */
    public Optional<Output<Integer>> totalVulnerabilities() {
        return Optional.ofNullable(this.totalVulnerabilities);
    }

    /**
     * The virtual size of the image.
     * 
     */
    @Import(name="virtualSize")
    private @Nullable Output<Integer> virtualSize;

    /**
     * @return The virtual size of the image.
     * 
     */
    public Optional<Output<Integer>> virtualSize() {
        return Optional.ofNullable(this.virtualSize);
    }

    /**
     * A list of all the vulnerabilities found in the image
     * 
     */
    @Import(name="vulnerabilities")
    private @Nullable Output<List<ImageVulnerabilityArgs>> vulnerabilities;

    /**
     * @return A list of all the vulnerabilities found in the image
     * 
     */
    public Optional<Output<List<ImageVulnerabilityArgs>>> vulnerabilities() {
        return Optional.ofNullable(this.vulnerabilities);
    }

    /**
     * Whether the image is whitelisted.
     * 
     */
    @Import(name="whitelisted")
    private @Nullable Output<Boolean> whitelisted;

    /**
     * @return Whether the image is whitelisted.
     * 
     */
    public Optional<Output<Boolean>> whitelisted() {
        return Optional.ofNullable(this.whitelisted);
    }

    private ImageState() {}

    private ImageState(ImageState $) {
        this.allowImage = $.allowImage;
        this.architecture = $.architecture;
        this.assuranceChecksPerformeds = $.assuranceChecksPerformeds;
        this.author = $.author;
        this.blacklisted = $.blacklisted;
        this.blockImage = $.blockImage;
        this.comment = $.comment;
        this.created = $.created;
        this.criticalVulnerabilities = $.criticalVulnerabilities;
        this.defaultUser = $.defaultUser;
        this.digest = $.digest;
        this.disallowed = $.disallowed;
        this.disallowedByAssuranceChecks = $.disallowedByAssuranceChecks;
        this.dockerId = $.dockerId;
        this.dockerLabels = $.dockerLabels;
        this.dockerVersion = $.dockerVersion;
        this.dtaSeverityScore = $.dtaSeverityScore;
        this.dtaSkipped = $.dtaSkipped;
        this.dtaSkippedReason = $.dtaSkippedReason;
        this.environmentVariables = $.environmentVariables;
        this.highVulnerabilities = $.highVulnerabilities;
        this.histories = $.histories;
        this.imageSize = $.imageSize;
        this.imageType = $.imageType;
        this.labels = $.labels;
        this.lowVulnerabilities = $.lowVulnerabilities;
        this.malware = $.malware;
        this.mediumVulnerabilities = $.mediumVulnerabilities;
        this.name = $.name;
        this.negligibleVulnerabilities = $.negligibleVulnerabilities;
        this.newerImageExists = $.newerImageExists;
        this.os = $.os;
        this.osVersion = $.osVersion;
        this.parent = $.parent;
        this.partialResults = $.partialResults;
        this.pendingDisallowed = $.pendingDisallowed;
        this.permission = $.permission;
        this.permissionAuthor = $.permissionAuthor;
        this.permissionComment = $.permissionComment;
        this.permissionModificationComment = $.permissionModificationComment;
        this.registry = $.registry;
        this.registryType = $.registryType;
        this.repoDigests = $.repoDigests;
        this.repository = $.repository;
        this.scanDate = $.scanDate;
        this.scanError = $.scanError;
        this.scanStatus = $.scanStatus;
        this.sensitiveData = $.sensitiveData;
        this.tag = $.tag;
        this.totalVulnerabilities = $.totalVulnerabilities;
        this.virtualSize = $.virtualSize;
        this.vulnerabilities = $.vulnerabilities;
        this.whitelisted = $.whitelisted;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ImageState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ImageState $;

        public Builder() {
            $ = new ImageState();
        }

        public Builder(ImageState defaults) {
            $ = new ImageState(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowImage If this field is set to true, the image will be whitelisted.
         * 
         * @return builder
         * 
         */
        public Builder allowImage(@Nullable Output<Boolean> allowImage) {
            $.allowImage = allowImage;
            return this;
        }

        /**
         * @param allowImage If this field is set to true, the image will be whitelisted.
         * 
         * @return builder
         * 
         */
        public Builder allowImage(Boolean allowImage) {
            return allowImage(Output.of(allowImage));
        }

        /**
         * @param architecture The image architecture.
         * 
         * @return builder
         * 
         */
        public Builder architecture(@Nullable Output<String> architecture) {
            $.architecture = architecture;
            return this;
        }

        /**
         * @param architecture The image architecture.
         * 
         * @return builder
         * 
         */
        public Builder architecture(String architecture) {
            return architecture(Output.of(architecture));
        }

        /**
         * @param assuranceChecksPerformeds The list of image assurance checks performed on the image.
         * 
         * @return builder
         * 
         */
        public Builder assuranceChecksPerformeds(@Nullable Output<List<ImageAssuranceChecksPerformedArgs>> assuranceChecksPerformeds) {
            $.assuranceChecksPerformeds = assuranceChecksPerformeds;
            return this;
        }

        /**
         * @param assuranceChecksPerformeds The list of image assurance checks performed on the image.
         * 
         * @return builder
         * 
         */
        public Builder assuranceChecksPerformeds(List<ImageAssuranceChecksPerformedArgs> assuranceChecksPerformeds) {
            return assuranceChecksPerformeds(Output.of(assuranceChecksPerformeds));
        }

        /**
         * @param assuranceChecksPerformeds The list of image assurance checks performed on the image.
         * 
         * @return builder
         * 
         */
        public Builder assuranceChecksPerformeds(ImageAssuranceChecksPerformedArgs... assuranceChecksPerformeds) {
            return assuranceChecksPerformeds(List.of(assuranceChecksPerformeds));
        }

        /**
         * @param author The name of the user who registered the image.
         * 
         * @return builder
         * 
         */
        public Builder author(@Nullable Output<String> author) {
            $.author = author;
            return this;
        }

        /**
         * @param author The name of the user who registered the image.
         * 
         * @return builder
         * 
         */
        public Builder author(String author) {
            return author(Output.of(author));
        }

        /**
         * @param blacklisted Whether the image is blacklisted.
         * 
         * @return builder
         * 
         */
        public Builder blacklisted(@Nullable Output<Boolean> blacklisted) {
            $.blacklisted = blacklisted;
            return this;
        }

        /**
         * @param blacklisted Whether the image is blacklisted.
         * 
         * @return builder
         * 
         */
        public Builder blacklisted(Boolean blacklisted) {
            return blacklisted(Output.of(blacklisted));
        }

        /**
         * @param blockImage If this field is set to true, the image will be blacklisted.
         * 
         * @return builder
         * 
         */
        public Builder blockImage(@Nullable Output<Boolean> blockImage) {
            $.blockImage = blockImage;
            return this;
        }

        /**
         * @param blockImage If this field is set to true, the image will be blacklisted.
         * 
         * @return builder
         * 
         */
        public Builder blockImage(Boolean blockImage) {
            return blockImage(Output.of(blockImage));
        }

        /**
         * @param comment The image creation comment.
         * 
         * @return builder
         * 
         */
        public Builder comment(@Nullable Output<String> comment) {
            $.comment = comment;
            return this;
        }

        /**
         * @param comment The image creation comment.
         * 
         * @return builder
         * 
         */
        public Builder comment(String comment) {
            return comment(Output.of(comment));
        }

        /**
         * @param created The date and time when the image was registered.
         * 
         * @return builder
         * 
         */
        public Builder created(@Nullable Output<String> created) {
            $.created = created;
            return this;
        }

        /**
         * @param created The date and time when the image was registered.
         * 
         * @return builder
         * 
         */
        public Builder created(String created) {
            return created(Output.of(created));
        }

        /**
         * @param criticalVulnerabilities Number of critical severity vulnerabilities detected in the image.
         * 
         * @return builder
         * 
         */
        public Builder criticalVulnerabilities(@Nullable Output<Integer> criticalVulnerabilities) {
            $.criticalVulnerabilities = criticalVulnerabilities;
            return this;
        }

        /**
         * @param criticalVulnerabilities Number of critical severity vulnerabilities detected in the image.
         * 
         * @return builder
         * 
         */
        public Builder criticalVulnerabilities(Integer criticalVulnerabilities) {
            return criticalVulnerabilities(Output.of(criticalVulnerabilities));
        }

        /**
         * @param defaultUser The default user of the image.
         * 
         * @return builder
         * 
         */
        public Builder defaultUser(@Nullable Output<String> defaultUser) {
            $.defaultUser = defaultUser;
            return this;
        }

        /**
         * @param defaultUser The default user of the image.
         * 
         * @return builder
         * 
         */
        public Builder defaultUser(String defaultUser) {
            return defaultUser(Output.of(defaultUser));
        }

        /**
         * @param digest The content digest of the image.
         * 
         * @return builder
         * 
         */
        public Builder digest(@Nullable Output<String> digest) {
            $.digest = digest;
            return this;
        }

        /**
         * @param digest The content digest of the image.
         * 
         * @return builder
         * 
         */
        public Builder digest(String digest) {
            return digest(Output.of(digest));
        }

        /**
         * @param disallowed Whether the image is disallowed (non-compliant).
         * 
         * @return builder
         * 
         */
        public Builder disallowed(@Nullable Output<Boolean> disallowed) {
            $.disallowed = disallowed;
            return this;
        }

        /**
         * @param disallowed Whether the image is disallowed (non-compliant).
         * 
         * @return builder
         * 
         */
        public Builder disallowed(Boolean disallowed) {
            return disallowed(Output.of(disallowed));
        }

        /**
         * @param disallowedByAssuranceChecks Whether the image was disallowed because of Image Assurance Policies.
         * 
         * @return builder
         * 
         */
        public Builder disallowedByAssuranceChecks(@Nullable Output<Boolean> disallowedByAssuranceChecks) {
            $.disallowedByAssuranceChecks = disallowedByAssuranceChecks;
            return this;
        }

        /**
         * @param disallowedByAssuranceChecks Whether the image was disallowed because of Image Assurance Policies.
         * 
         * @return builder
         * 
         */
        public Builder disallowedByAssuranceChecks(Boolean disallowedByAssuranceChecks) {
            return disallowedByAssuranceChecks(Output.of(disallowedByAssuranceChecks));
        }

        /**
         * @param dockerId The Docker image ID.
         * 
         * @return builder
         * 
         */
        public Builder dockerId(@Nullable Output<String> dockerId) {
            $.dockerId = dockerId;
            return this;
        }

        /**
         * @param dockerId The Docker image ID.
         * 
         * @return builder
         * 
         */
        public Builder dockerId(String dockerId) {
            return dockerId(Output.of(dockerId));
        }

        /**
         * @param dockerLabels Docker labels of the image.
         * 
         * @return builder
         * 
         */
        public Builder dockerLabels(@Nullable Output<List<String>> dockerLabels) {
            $.dockerLabels = dockerLabels;
            return this;
        }

        /**
         * @param dockerLabels Docker labels of the image.
         * 
         * @return builder
         * 
         */
        public Builder dockerLabels(List<String> dockerLabels) {
            return dockerLabels(Output.of(dockerLabels));
        }

        /**
         * @param dockerLabels Docker labels of the image.
         * 
         * @return builder
         * 
         */
        public Builder dockerLabels(String... dockerLabels) {
            return dockerLabels(List.of(dockerLabels));
        }

        /**
         * @param dockerVersion The Docker version used when building the image.
         * 
         * @return builder
         * 
         */
        public Builder dockerVersion(@Nullable Output<String> dockerVersion) {
            $.dockerVersion = dockerVersion;
            return this;
        }

        /**
         * @param dockerVersion The Docker version used when building the image.
         * 
         * @return builder
         * 
         */
        public Builder dockerVersion(String dockerVersion) {
            return dockerVersion(Output.of(dockerVersion));
        }

        /**
         * @param dtaSeverityScore DTA severity score.
         * 
         * @return builder
         * 
         */
        public Builder dtaSeverityScore(@Nullable Output<String> dtaSeverityScore) {
            $.dtaSeverityScore = dtaSeverityScore;
            return this;
        }

        /**
         * @param dtaSeverityScore DTA severity score.
         * 
         * @return builder
         * 
         */
        public Builder dtaSeverityScore(String dtaSeverityScore) {
            return dtaSeverityScore(Output.of(dtaSeverityScore));
        }

        /**
         * @param dtaSkipped If DTA was skipped.
         * 
         * @return builder
         * 
         */
        public Builder dtaSkipped(@Nullable Output<Boolean> dtaSkipped) {
            $.dtaSkipped = dtaSkipped;
            return this;
        }

        /**
         * @param dtaSkipped If DTA was skipped.
         * 
         * @return builder
         * 
         */
        public Builder dtaSkipped(Boolean dtaSkipped) {
            return dtaSkipped(Output.of(dtaSkipped));
        }

        /**
         * @param dtaSkippedReason The reason why DTA was skipped.
         * 
         * @return builder
         * 
         */
        public Builder dtaSkippedReason(@Nullable Output<String> dtaSkippedReason) {
            $.dtaSkippedReason = dtaSkippedReason;
            return this;
        }

        /**
         * @param dtaSkippedReason The reason why DTA was skipped.
         * 
         * @return builder
         * 
         */
        public Builder dtaSkippedReason(String dtaSkippedReason) {
            return dtaSkippedReason(Output.of(dtaSkippedReason));
        }

        /**
         * @param environmentVariables Environment variables in the image.
         * 
         * @return builder
         * 
         */
        public Builder environmentVariables(@Nullable Output<List<String>> environmentVariables) {
            $.environmentVariables = environmentVariables;
            return this;
        }

        /**
         * @param environmentVariables Environment variables in the image.
         * 
         * @return builder
         * 
         */
        public Builder environmentVariables(List<String> environmentVariables) {
            return environmentVariables(Output.of(environmentVariables));
        }

        /**
         * @param environmentVariables Environment variables in the image.
         * 
         * @return builder
         * 
         */
        public Builder environmentVariables(String... environmentVariables) {
            return environmentVariables(List.of(environmentVariables));
        }

        /**
         * @param highVulnerabilities Number of high severity vulnerabilities detected in the image.
         * 
         * @return builder
         * 
         */
        public Builder highVulnerabilities(@Nullable Output<Integer> highVulnerabilities) {
            $.highVulnerabilities = highVulnerabilities;
            return this;
        }

        /**
         * @param highVulnerabilities Number of high severity vulnerabilities detected in the image.
         * 
         * @return builder
         * 
         */
        public Builder highVulnerabilities(Integer highVulnerabilities) {
            return highVulnerabilities(Output.of(highVulnerabilities));
        }

        /**
         * @param histories The Docker history of the image.
         * 
         * @return builder
         * 
         */
        public Builder histories(@Nullable Output<List<ImageHistoryArgs>> histories) {
            $.histories = histories;
            return this;
        }

        /**
         * @param histories The Docker history of the image.
         * 
         * @return builder
         * 
         */
        public Builder histories(List<ImageHistoryArgs> histories) {
            return histories(Output.of(histories));
        }

        /**
         * @param histories The Docker history of the image.
         * 
         * @return builder
         * 
         */
        public Builder histories(ImageHistoryArgs... histories) {
            return histories(List.of(histories));
        }

        /**
         * @param imageSize The size of the image in bytes.
         * 
         * @return builder
         * 
         */
        public Builder imageSize(@Nullable Output<Integer> imageSize) {
            $.imageSize = imageSize;
            return this;
        }

        /**
         * @param imageSize The size of the image in bytes.
         * 
         * @return builder
         * 
         */
        public Builder imageSize(Integer imageSize) {
            return imageSize(Output.of(imageSize));
        }

        /**
         * @param imageType The type of the image.
         * 
         * @return builder
         * 
         */
        public Builder imageType(@Nullable Output<String> imageType) {
            $.imageType = imageType;
            return this;
        }

        /**
         * @param imageType The type of the image.
         * 
         * @return builder
         * 
         */
        public Builder imageType(String imageType) {
            return imageType(Output.of(imageType));
        }

        /**
         * @param labels Aqua labels of the image.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<List<String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Aqua labels of the image.
         * 
         * @return builder
         * 
         */
        public Builder labels(List<String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param labels Aqua labels of the image.
         * 
         * @return builder
         * 
         */
        public Builder labels(String... labels) {
            return labels(List.of(labels));
        }

        /**
         * @param lowVulnerabilities Number of low severity vulnerabilities detected in the image.
         * 
         * @return builder
         * 
         */
        public Builder lowVulnerabilities(@Nullable Output<Integer> lowVulnerabilities) {
            $.lowVulnerabilities = lowVulnerabilities;
            return this;
        }

        /**
         * @param lowVulnerabilities Number of low severity vulnerabilities detected in the image.
         * 
         * @return builder
         * 
         */
        public Builder lowVulnerabilities(Integer lowVulnerabilities) {
            return lowVulnerabilities(Output.of(lowVulnerabilities));
        }

        /**
         * @param malware Number of malware found on the image.
         * 
         * @return builder
         * 
         */
        public Builder malware(@Nullable Output<Integer> malware) {
            $.malware = malware;
            return this;
        }

        /**
         * @param malware Number of malware found on the image.
         * 
         * @return builder
         * 
         */
        public Builder malware(Integer malware) {
            return malware(Output.of(malware));
        }

        /**
         * @param mediumVulnerabilities Number of medium severity vulnerabilities detected in the image.
         * 
         * @return builder
         * 
         */
        public Builder mediumVulnerabilities(@Nullable Output<Integer> mediumVulnerabilities) {
            $.mediumVulnerabilities = mediumVulnerabilities;
            return this;
        }

        /**
         * @param mediumVulnerabilities Number of medium severity vulnerabilities detected in the image.
         * 
         * @return builder
         * 
         */
        public Builder mediumVulnerabilities(Integer mediumVulnerabilities) {
            return mediumVulnerabilities(Output.of(mediumVulnerabilities));
        }

        /**
         * @param name The name of the image.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the image.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param negligibleVulnerabilities Number of negligible severity vulnerabilities detected in the image.
         * 
         * @return builder
         * 
         */
        public Builder negligibleVulnerabilities(@Nullable Output<Integer> negligibleVulnerabilities) {
            $.negligibleVulnerabilities = negligibleVulnerabilities;
            return this;
        }

        /**
         * @param negligibleVulnerabilities Number of negligible severity vulnerabilities detected in the image.
         * 
         * @return builder
         * 
         */
        public Builder negligibleVulnerabilities(Integer negligibleVulnerabilities) {
            return negligibleVulnerabilities(Output.of(negligibleVulnerabilities));
        }

        /**
         * @param newerImageExists Whether a new version of the image is available in the registry but is not scanned and registered yet.
         * 
         * @return builder
         * 
         */
        public Builder newerImageExists(@Nullable Output<Boolean> newerImageExists) {
            $.newerImageExists = newerImageExists;
            return this;
        }

        /**
         * @param newerImageExists Whether a new version of the image is available in the registry but is not scanned and registered yet.
         * 
         * @return builder
         * 
         */
        public Builder newerImageExists(Boolean newerImageExists) {
            return newerImageExists(Output.of(newerImageExists));
        }

        /**
         * @param os The operating system detected in the image
         * 
         * @return builder
         * 
         */
        public Builder os(@Nullable Output<String> os) {
            $.os = os;
            return this;
        }

        /**
         * @param os The operating system detected in the image
         * 
         * @return builder
         * 
         */
        public Builder os(String os) {
            return os(Output.of(os));
        }

        /**
         * @param osVersion The version of the OS detected in the image.
         * 
         * @return builder
         * 
         */
        public Builder osVersion(@Nullable Output<String> osVersion) {
            $.osVersion = osVersion;
            return this;
        }

        /**
         * @param osVersion The version of the OS detected in the image.
         * 
         * @return builder
         * 
         */
        public Builder osVersion(String osVersion) {
            return osVersion(Output.of(osVersion));
        }

        /**
         * @param parent The ID of the parent image.
         * 
         * @return builder
         * 
         */
        public Builder parent(@Nullable Output<String> parent) {
            $.parent = parent;
            return this;
        }

        /**
         * @param parent The ID of the parent image.
         * 
         * @return builder
         * 
         */
        public Builder parent(String parent) {
            return parent(Output.of(parent));
        }

        /**
         * @param partialResults Whether the image could only be partially scanned.
         * 
         * @return builder
         * 
         */
        public Builder partialResults(@Nullable Output<Boolean> partialResults) {
            $.partialResults = partialResults;
            return this;
        }

        /**
         * @param partialResults Whether the image could only be partially scanned.
         * 
         * @return builder
         * 
         */
        public Builder partialResults(Boolean partialResults) {
            return partialResults(Output.of(partialResults));
        }

        /**
         * @param pendingDisallowed Whether the image is non-compliant, but is pending this status due to running containers.
         * 
         * @return builder
         * 
         */
        public Builder pendingDisallowed(@Nullable Output<Boolean> pendingDisallowed) {
            $.pendingDisallowed = pendingDisallowed;
            return this;
        }

        /**
         * @param pendingDisallowed Whether the image is non-compliant, but is pending this status due to running containers.
         * 
         * @return builder
         * 
         */
        public Builder pendingDisallowed(Boolean pendingDisallowed) {
            return pendingDisallowed(Output.of(pendingDisallowed));
        }

        /**
         * @param permission Permission of the image.
         * 
         * @return builder
         * 
         */
        public Builder permission(@Nullable Output<String> permission) {
            $.permission = permission;
            return this;
        }

        /**
         * @param permission Permission of the image.
         * 
         * @return builder
         * 
         */
        public Builder permission(String permission) {
            return permission(Output.of(permission));
        }

        /**
         * @param permissionAuthor The name of the user who last modified the image permissions.
         * 
         * @return builder
         * 
         */
        public Builder permissionAuthor(@Nullable Output<String> permissionAuthor) {
            $.permissionAuthor = permissionAuthor;
            return this;
        }

        /**
         * @param permissionAuthor The name of the user who last modified the image permissions.
         * 
         * @return builder
         * 
         */
        public Builder permissionAuthor(String permissionAuthor) {
            return permissionAuthor(Output.of(permissionAuthor));
        }

        /**
         * @param permissionComment The comment provided when the image permissions were last modified
         * 
         * @return builder
         * 
         */
        public Builder permissionComment(@Nullable Output<String> permissionComment) {
            $.permissionComment = permissionComment;
            return this;
        }

        /**
         * @param permissionComment The comment provided when the image permissions were last modified
         * 
         * @return builder
         * 
         */
        public Builder permissionComment(String permissionComment) {
            return permissionComment(Output.of(permissionComment));
        }

        /**
         * @param permissionModificationComment A comment on why the image was whitelisted or blacklisted
         * 
         * @return builder
         * 
         */
        public Builder permissionModificationComment(@Nullable Output<String> permissionModificationComment) {
            $.permissionModificationComment = permissionModificationComment;
            return this;
        }

        /**
         * @param permissionModificationComment A comment on why the image was whitelisted or blacklisted
         * 
         * @return builder
         * 
         */
        public Builder permissionModificationComment(String permissionModificationComment) {
            return permissionModificationComment(Output.of(permissionModificationComment));
        }

        /**
         * @param registry The name of the registry where the image is stored.
         * 
         * @return builder
         * 
         */
        public Builder registry(@Nullable Output<String> registry) {
            $.registry = registry;
            return this;
        }

        /**
         * @param registry The name of the registry where the image is stored.
         * 
         * @return builder
         * 
         */
        public Builder registry(String registry) {
            return registry(Output.of(registry));
        }

        /**
         * @param registryType Type of the registry.
         * 
         * @return builder
         * 
         */
        public Builder registryType(@Nullable Output<String> registryType) {
            $.registryType = registryType;
            return this;
        }

        /**
         * @param registryType Type of the registry.
         * 
         * @return builder
         * 
         */
        public Builder registryType(String registryType) {
            return registryType(Output.of(registryType));
        }

        /**
         * @param repoDigests The repository digests.
         * 
         * @return builder
         * 
         */
        public Builder repoDigests(@Nullable Output<List<String>> repoDigests) {
            $.repoDigests = repoDigests;
            return this;
        }

        /**
         * @param repoDigests The repository digests.
         * 
         * @return builder
         * 
         */
        public Builder repoDigests(List<String> repoDigests) {
            return repoDigests(Output.of(repoDigests));
        }

        /**
         * @param repoDigests The repository digests.
         * 
         * @return builder
         * 
         */
        public Builder repoDigests(String... repoDigests) {
            return repoDigests(List.of(repoDigests));
        }

        /**
         * @param repository The name of the image&#39;s repository.
         * 
         * @return builder
         * 
         */
        public Builder repository(@Nullable Output<String> repository) {
            $.repository = repository;
            return this;
        }

        /**
         * @param repository The name of the image&#39;s repository.
         * 
         * @return builder
         * 
         */
        public Builder repository(String repository) {
            return repository(Output.of(repository));
        }

        /**
         * @param scanDate The date and time when the image was last scanned.
         * 
         * @return builder
         * 
         */
        public Builder scanDate(@Nullable Output<String> scanDate) {
            $.scanDate = scanDate;
            return this;
        }

        /**
         * @param scanDate The date and time when the image was last scanned.
         * 
         * @return builder
         * 
         */
        public Builder scanDate(String scanDate) {
            return scanDate(Output.of(scanDate));
        }

        /**
         * @param scanError If the image scan failed, the failure message.
         * 
         * @return builder
         * 
         */
        public Builder scanError(@Nullable Output<String> scanError) {
            $.scanError = scanError;
            return this;
        }

        /**
         * @param scanError If the image scan failed, the failure message.
         * 
         * @return builder
         * 
         */
        public Builder scanError(String scanError) {
            return scanError(Output.of(scanError));
        }

        /**
         * @param scanStatus The scan status of the image (either &#39;pending&#39;, &#39;in*progress&#39;, &#39;finished&#39;, &#39;failed&#39; or &#39;not*started&#39;).
         * 
         * @return builder
         * 
         */
        public Builder scanStatus(@Nullable Output<String> scanStatus) {
            $.scanStatus = scanStatus;
            return this;
        }

        /**
         * @param scanStatus The scan status of the image (either &#39;pending&#39;, &#39;in*progress&#39;, &#39;finished&#39;, &#39;failed&#39; or &#39;not*started&#39;).
         * 
         * @return builder
         * 
         */
        public Builder scanStatus(String scanStatus) {
            return scanStatus(Output.of(scanStatus));
        }

        /**
         * @param sensitiveData Number of sensitive data detected in the image.
         * 
         * @return builder
         * 
         */
        public Builder sensitiveData(@Nullable Output<Integer> sensitiveData) {
            $.sensitiveData = sensitiveData;
            return this;
        }

        /**
         * @param sensitiveData Number of sensitive data detected in the image.
         * 
         * @return builder
         * 
         */
        public Builder sensitiveData(Integer sensitiveData) {
            return sensitiveData(Output.of(sensitiveData));
        }

        /**
         * @param tag The tag of the image.
         * 
         * @return builder
         * 
         */
        public Builder tag(@Nullable Output<String> tag) {
            $.tag = tag;
            return this;
        }

        /**
         * @param tag The tag of the image.
         * 
         * @return builder
         * 
         */
        public Builder tag(String tag) {
            return tag(Output.of(tag));
        }

        /**
         * @param totalVulnerabilities The total number of vulnerabilities detected in the image.
         * 
         * @return builder
         * 
         */
        public Builder totalVulnerabilities(@Nullable Output<Integer> totalVulnerabilities) {
            $.totalVulnerabilities = totalVulnerabilities;
            return this;
        }

        /**
         * @param totalVulnerabilities The total number of vulnerabilities detected in the image.
         * 
         * @return builder
         * 
         */
        public Builder totalVulnerabilities(Integer totalVulnerabilities) {
            return totalVulnerabilities(Output.of(totalVulnerabilities));
        }

        /**
         * @param virtualSize The virtual size of the image.
         * 
         * @return builder
         * 
         */
        public Builder virtualSize(@Nullable Output<Integer> virtualSize) {
            $.virtualSize = virtualSize;
            return this;
        }

        /**
         * @param virtualSize The virtual size of the image.
         * 
         * @return builder
         * 
         */
        public Builder virtualSize(Integer virtualSize) {
            return virtualSize(Output.of(virtualSize));
        }

        /**
         * @param vulnerabilities A list of all the vulnerabilities found in the image
         * 
         * @return builder
         * 
         */
        public Builder vulnerabilities(@Nullable Output<List<ImageVulnerabilityArgs>> vulnerabilities) {
            $.vulnerabilities = vulnerabilities;
            return this;
        }

        /**
         * @param vulnerabilities A list of all the vulnerabilities found in the image
         * 
         * @return builder
         * 
         */
        public Builder vulnerabilities(List<ImageVulnerabilityArgs> vulnerabilities) {
            return vulnerabilities(Output.of(vulnerabilities));
        }

        /**
         * @param vulnerabilities A list of all the vulnerabilities found in the image
         * 
         * @return builder
         * 
         */
        public Builder vulnerabilities(ImageVulnerabilityArgs... vulnerabilities) {
            return vulnerabilities(List.of(vulnerabilities));
        }

        /**
         * @param whitelisted Whether the image is whitelisted.
         * 
         * @return builder
         * 
         */
        public Builder whitelisted(@Nullable Output<Boolean> whitelisted) {
            $.whitelisted = whitelisted;
            return this;
        }

        /**
         * @param whitelisted Whether the image is whitelisted.
         * 
         * @return builder
         * 
         */
        public Builder whitelisted(Boolean whitelisted) {
            return whitelisted(Output.of(whitelisted));
        }

        public ImageState build() {
            return $;
        }
    }

}
