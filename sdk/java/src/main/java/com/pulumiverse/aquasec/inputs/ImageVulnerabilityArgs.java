// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumiverse.aquasec.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ImageVulnerabilityArgs extends com.pulumi.resources.ResourceArgs {

    public static final ImageVulnerabilityArgs Empty = new ImageVulnerabilityArgs();

    @Import(name="ackAuthor")
    private @Nullable Output<String> ackAuthor;

    public Optional<Output<String>> ackAuthor() {
        return Optional.ofNullable(this.ackAuthor);
    }

    @Import(name="ackComment")
    private @Nullable Output<String> ackComment;

    public Optional<Output<String>> ackComment() {
        return Optional.ofNullable(this.ackComment);
    }

    @Import(name="ackExpirationConfiguredAt")
    private @Nullable Output<String> ackExpirationConfiguredAt;

    public Optional<Output<String>> ackExpirationConfiguredAt() {
        return Optional.ofNullable(this.ackExpirationConfiguredAt);
    }

    @Import(name="ackExpirationConfiguredBy")
    private @Nullable Output<String> ackExpirationConfiguredBy;

    public Optional<Output<String>> ackExpirationConfiguredBy() {
        return Optional.ofNullable(this.ackExpirationConfiguredBy);
    }

    @Import(name="ackExpirationDays")
    private @Nullable Output<Integer> ackExpirationDays;

    public Optional<Output<Integer>> ackExpirationDays() {
        return Optional.ofNullable(this.ackExpirationDays);
    }

    @Import(name="ackScope")
    private @Nullable Output<String> ackScope;

    public Optional<Output<String>> ackScope() {
        return Optional.ofNullable(this.ackScope);
    }

    @Import(name="acknowledgeDate")
    private @Nullable Output<String> acknowledgeDate;

    public Optional<Output<String>> acknowledgeDate() {
        return Optional.ofNullable(this.acknowledgeDate);
    }

    @Import(name="ancestorPkg")
    private @Nullable Output<String> ancestorPkg;

    public Optional<Output<String>> ancestorPkg() {
        return Optional.ofNullable(this.ancestorPkg);
    }

    @Import(name="aquaScore")
    private @Nullable Output<Double> aquaScore;

    public Optional<Output<Double>> aquaScore() {
        return Optional.ofNullable(this.aquaScore);
    }

    @Import(name="aquaScoreClassification")
    private @Nullable Output<String> aquaScoreClassification;

    public Optional<Output<String>> aquaScoreClassification() {
        return Optional.ofNullable(this.aquaScoreClassification);
    }

    @Import(name="aquaScoringSystem")
    private @Nullable Output<String> aquaScoringSystem;

    public Optional<Output<String>> aquaScoringSystem() {
        return Optional.ofNullable(this.aquaScoringSystem);
    }

    @Import(name="aquaSeverity")
    private @Nullable Output<String> aquaSeverity;

    public Optional<Output<String>> aquaSeverity() {
        return Optional.ofNullable(this.aquaSeverity);
    }

    @Import(name="aquaSeverityClassification")
    private @Nullable Output<String> aquaSeverityClassification;

    public Optional<Output<String>> aquaSeverityClassification() {
        return Optional.ofNullable(this.aquaSeverityClassification);
    }

    @Import(name="aquaVectors")
    private @Nullable Output<String> aquaVectors;

    public Optional<Output<String>> aquaVectors() {
        return Optional.ofNullable(this.aquaVectors);
    }

    @Import(name="auditEventsCount")
    private @Nullable Output<Integer> auditEventsCount;

    public Optional<Output<Integer>> auditEventsCount() {
        return Optional.ofNullable(this.auditEventsCount);
    }

    @Import(name="blockEventsCount")
    private @Nullable Output<Integer> blockEventsCount;

    public Optional<Output<Integer>> blockEventsCount() {
        return Optional.ofNullable(this.blockEventsCount);
    }

    @Import(name="classification")
    private @Nullable Output<String> classification;

    public Optional<Output<String>> classification() {
        return Optional.ofNullable(this.classification);
    }

    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The content digest of the image.
     * 
     */
    @Import(name="digest")
    private @Nullable Output<String> digest;

    /**
     * @return The content digest of the image.
     * 
     */
    public Optional<Output<String>> digest() {
        return Optional.ofNullable(this.digest);
    }

    @Import(name="exploitReference")
    private @Nullable Output<String> exploitReference;

    public Optional<Output<String>> exploitReference() {
        return Optional.ofNullable(this.exploitReference);
    }

    @Import(name="exploitType")
    private @Nullable Output<String> exploitType;

    public Optional<Output<String>> exploitType() {
        return Optional.ofNullable(this.exploitType);
    }

    @Import(name="firstFoundDate")
    private @Nullable Output<String> firstFoundDate;

    public Optional<Output<String>> firstFoundDate() {
        return Optional.ofNullable(this.firstFoundDate);
    }

    @Import(name="fixVersion")
    private @Nullable Output<String> fixVersion;

    public Optional<Output<String>> fixVersion() {
        return Optional.ofNullable(this.fixVersion);
    }

    @Import(name="imageName")
    private @Nullable Output<String> imageName;

    public Optional<Output<String>> imageName() {
        return Optional.ofNullable(this.imageName);
    }

    @Import(name="lastFoundDate")
    private @Nullable Output<String> lastFoundDate;

    public Optional<Output<String>> lastFoundDate() {
        return Optional.ofNullable(this.lastFoundDate);
    }

    @Import(name="modificationDate")
    private @Nullable Output<String> modificationDate;

    public Optional<Output<String>> modificationDate() {
        return Optional.ofNullable(this.modificationDate);
    }

    /**
     * The name of the image.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the image.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="nvdCvss2Score")
    private @Nullable Output<Double> nvdCvss2Score;

    public Optional<Output<Double>> nvdCvss2Score() {
        return Optional.ofNullable(this.nvdCvss2Score);
    }

    @Import(name="nvdCvss2Vectors")
    private @Nullable Output<String> nvdCvss2Vectors;

    public Optional<Output<String>> nvdCvss2Vectors() {
        return Optional.ofNullable(this.nvdCvss2Vectors);
    }

    @Import(name="nvdCvss3Score")
    private @Nullable Output<Double> nvdCvss3Score;

    public Optional<Output<Double>> nvdCvss3Score() {
        return Optional.ofNullable(this.nvdCvss3Score);
    }

    @Import(name="nvdCvss3Severity")
    private @Nullable Output<String> nvdCvss3Severity;

    public Optional<Output<String>> nvdCvss3Severity() {
        return Optional.ofNullable(this.nvdCvss3Severity);
    }

    @Import(name="nvdCvss3Vectors")
    private @Nullable Output<String> nvdCvss3Vectors;

    public Optional<Output<String>> nvdCvss3Vectors() {
        return Optional.ofNullable(this.nvdCvss3Vectors);
    }

    @Import(name="nvdSeverity")
    private @Nullable Output<String> nvdSeverity;

    public Optional<Output<String>> nvdSeverity() {
        return Optional.ofNullable(this.nvdSeverity);
    }

    @Import(name="nvdUrl")
    private @Nullable Output<String> nvdUrl;

    public Optional<Output<String>> nvdUrl() {
        return Optional.ofNullable(this.nvdUrl);
    }

    /**
     * The operating system detected in the image
     * 
     */
    @Import(name="os")
    private @Nullable Output<String> os;

    /**
     * @return The operating system detected in the image
     * 
     */
    public Optional<Output<String>> os() {
        return Optional.ofNullable(this.os);
    }

    /**
     * The version of the OS detected in the image.
     * 
     */
    @Import(name="osVersion")
    private @Nullable Output<String> osVersion;

    /**
     * @return The version of the OS detected in the image.
     * 
     */
    public Optional<Output<String>> osVersion() {
        return Optional.ofNullable(this.osVersion);
    }

    /**
     * Permission of the image.
     * 
     */
    @Import(name="permission")
    private @Nullable Output<String> permission;

    /**
     * @return Permission of the image.
     * 
     */
    public Optional<Output<String>> permission() {
        return Optional.ofNullable(this.permission);
    }

    @Import(name="publishDate")
    private @Nullable Output<String> publishDate;

    public Optional<Output<String>> publishDate() {
        return Optional.ofNullable(this.publishDate);
    }

    /**
     * The name of the registry where the image is stored.
     * 
     */
    @Import(name="registry")
    private @Nullable Output<String> registry;

    /**
     * @return The name of the registry where the image is stored.
     * 
     */
    public Optional<Output<String>> registry() {
        return Optional.ofNullable(this.registry);
    }

    /**
     * The name of the image&#39;s repository.
     * 
     */
    @Import(name="repository")
    private @Nullable Output<String> repository;

    /**
     * @return The name of the image&#39;s repository.
     * 
     */
    public Optional<Output<String>> repository() {
        return Optional.ofNullable(this.repository);
    }

    @Import(name="resourceArchitecture")
    private @Nullable Output<String> resourceArchitecture;

    public Optional<Output<String>> resourceArchitecture() {
        return Optional.ofNullable(this.resourceArchitecture);
    }

    @Import(name="resourceCpe")
    private @Nullable Output<String> resourceCpe;

    public Optional<Output<String>> resourceCpe() {
        return Optional.ofNullable(this.resourceCpe);
    }

    @Import(name="resourceFormat")
    private @Nullable Output<String> resourceFormat;

    public Optional<Output<String>> resourceFormat() {
        return Optional.ofNullable(this.resourceFormat);
    }

    @Import(name="resourceHash")
    private @Nullable Output<String> resourceHash;

    public Optional<Output<String>> resourceHash() {
        return Optional.ofNullable(this.resourceHash);
    }

    @Import(name="resourceLicenses")
    private @Nullable Output<List<String>> resourceLicenses;

    public Optional<Output<List<String>>> resourceLicenses() {
        return Optional.ofNullable(this.resourceLicenses);
    }

    @Import(name="resourceName")
    private @Nullable Output<String> resourceName;

    public Optional<Output<String>> resourceName() {
        return Optional.ofNullable(this.resourceName);
    }

    @Import(name="resourcePath")
    private @Nullable Output<String> resourcePath;

    public Optional<Output<String>> resourcePath() {
        return Optional.ofNullable(this.resourcePath);
    }

    @Import(name="resourceType")
    private @Nullable Output<String> resourceType;

    public Optional<Output<String>> resourceType() {
        return Optional.ofNullable(this.resourceType);
    }

    @Import(name="resourceVersion")
    private @Nullable Output<String> resourceVersion;

    public Optional<Output<String>> resourceVersion() {
        return Optional.ofNullable(this.resourceVersion);
    }

    @Import(name="severityClassification")
    private @Nullable Output<String> severityClassification;

    public Optional<Output<String>> severityClassification() {
        return Optional.ofNullable(this.severityClassification);
    }

    @Import(name="solution")
    private @Nullable Output<String> solution;

    public Optional<Output<String>> solution() {
        return Optional.ofNullable(this.solution);
    }

    @Import(name="temporalVector")
    private @Nullable Output<String> temporalVector;

    public Optional<Output<String>> temporalVector() {
        return Optional.ofNullable(this.temporalVector);
    }

    @Import(name="vPatchAppliedBy")
    private @Nullable Output<String> vPatchAppliedBy;

    public Optional<Output<String>> vPatchAppliedBy() {
        return Optional.ofNullable(this.vPatchAppliedBy);
    }

    @Import(name="vPatchAppliedOn")
    private @Nullable Output<String> vPatchAppliedOn;

    public Optional<Output<String>> vPatchAppliedOn() {
        return Optional.ofNullable(this.vPatchAppliedOn);
    }

    @Import(name="vPatchEnforcedBy")
    private @Nullable Output<String> vPatchEnforcedBy;

    public Optional<Output<String>> vPatchEnforcedBy() {
        return Optional.ofNullable(this.vPatchEnforcedBy);
    }

    @Import(name="vPatchEnforcedOn")
    private @Nullable Output<String> vPatchEnforcedOn;

    public Optional<Output<String>> vPatchEnforcedOn() {
        return Optional.ofNullable(this.vPatchEnforcedOn);
    }

    @Import(name="vPatchPolicyEnforce")
    private @Nullable Output<Boolean> vPatchPolicyEnforce;

    public Optional<Output<Boolean>> vPatchPolicyEnforce() {
        return Optional.ofNullable(this.vPatchPolicyEnforce);
    }

    @Import(name="vPatchPolicyName")
    private @Nullable Output<String> vPatchPolicyName;

    public Optional<Output<String>> vPatchPolicyName() {
        return Optional.ofNullable(this.vPatchPolicyName);
    }

    @Import(name="vPatchRevertedBy")
    private @Nullable Output<String> vPatchRevertedBy;

    public Optional<Output<String>> vPatchRevertedBy() {
        return Optional.ofNullable(this.vPatchRevertedBy);
    }

    @Import(name="vPatchRevertedOn")
    private @Nullable Output<String> vPatchRevertedOn;

    public Optional<Output<String>> vPatchRevertedOn() {
        return Optional.ofNullable(this.vPatchRevertedOn);
    }

    @Import(name="vPatchStatus")
    private @Nullable Output<String> vPatchStatus;

    public Optional<Output<String>> vPatchStatus() {
        return Optional.ofNullable(this.vPatchStatus);
    }

    @Import(name="vendorCvss2Score")
    private @Nullable Output<Double> vendorCvss2Score;

    public Optional<Output<Double>> vendorCvss2Score() {
        return Optional.ofNullable(this.vendorCvss2Score);
    }

    @Import(name="vendorCvss2Vectors")
    private @Nullable Output<String> vendorCvss2Vectors;

    public Optional<Output<String>> vendorCvss2Vectors() {
        return Optional.ofNullable(this.vendorCvss2Vectors);
    }

    @Import(name="vendorSeverity")
    private @Nullable Output<String> vendorSeverity;

    public Optional<Output<String>> vendorSeverity() {
        return Optional.ofNullable(this.vendorSeverity);
    }

    @Import(name="vendorStatement")
    private @Nullable Output<String> vendorStatement;

    public Optional<Output<String>> vendorStatement() {
        return Optional.ofNullable(this.vendorStatement);
    }

    @Import(name="vendorUrl")
    private @Nullable Output<String> vendorUrl;

    public Optional<Output<String>> vendorUrl() {
        return Optional.ofNullable(this.vendorUrl);
    }

    private ImageVulnerabilityArgs() {}

    private ImageVulnerabilityArgs(ImageVulnerabilityArgs $) {
        this.ackAuthor = $.ackAuthor;
        this.ackComment = $.ackComment;
        this.ackExpirationConfiguredAt = $.ackExpirationConfiguredAt;
        this.ackExpirationConfiguredBy = $.ackExpirationConfiguredBy;
        this.ackExpirationDays = $.ackExpirationDays;
        this.ackScope = $.ackScope;
        this.acknowledgeDate = $.acknowledgeDate;
        this.ancestorPkg = $.ancestorPkg;
        this.aquaScore = $.aquaScore;
        this.aquaScoreClassification = $.aquaScoreClassification;
        this.aquaScoringSystem = $.aquaScoringSystem;
        this.aquaSeverity = $.aquaSeverity;
        this.aquaSeverityClassification = $.aquaSeverityClassification;
        this.aquaVectors = $.aquaVectors;
        this.auditEventsCount = $.auditEventsCount;
        this.blockEventsCount = $.blockEventsCount;
        this.classification = $.classification;
        this.description = $.description;
        this.digest = $.digest;
        this.exploitReference = $.exploitReference;
        this.exploitType = $.exploitType;
        this.firstFoundDate = $.firstFoundDate;
        this.fixVersion = $.fixVersion;
        this.imageName = $.imageName;
        this.lastFoundDate = $.lastFoundDate;
        this.modificationDate = $.modificationDate;
        this.name = $.name;
        this.nvdCvss2Score = $.nvdCvss2Score;
        this.nvdCvss2Vectors = $.nvdCvss2Vectors;
        this.nvdCvss3Score = $.nvdCvss3Score;
        this.nvdCvss3Severity = $.nvdCvss3Severity;
        this.nvdCvss3Vectors = $.nvdCvss3Vectors;
        this.nvdSeverity = $.nvdSeverity;
        this.nvdUrl = $.nvdUrl;
        this.os = $.os;
        this.osVersion = $.osVersion;
        this.permission = $.permission;
        this.publishDate = $.publishDate;
        this.registry = $.registry;
        this.repository = $.repository;
        this.resourceArchitecture = $.resourceArchitecture;
        this.resourceCpe = $.resourceCpe;
        this.resourceFormat = $.resourceFormat;
        this.resourceHash = $.resourceHash;
        this.resourceLicenses = $.resourceLicenses;
        this.resourceName = $.resourceName;
        this.resourcePath = $.resourcePath;
        this.resourceType = $.resourceType;
        this.resourceVersion = $.resourceVersion;
        this.severityClassification = $.severityClassification;
        this.solution = $.solution;
        this.temporalVector = $.temporalVector;
        this.vPatchAppliedBy = $.vPatchAppliedBy;
        this.vPatchAppliedOn = $.vPatchAppliedOn;
        this.vPatchEnforcedBy = $.vPatchEnforcedBy;
        this.vPatchEnforcedOn = $.vPatchEnforcedOn;
        this.vPatchPolicyEnforce = $.vPatchPolicyEnforce;
        this.vPatchPolicyName = $.vPatchPolicyName;
        this.vPatchRevertedBy = $.vPatchRevertedBy;
        this.vPatchRevertedOn = $.vPatchRevertedOn;
        this.vPatchStatus = $.vPatchStatus;
        this.vendorCvss2Score = $.vendorCvss2Score;
        this.vendorCvss2Vectors = $.vendorCvss2Vectors;
        this.vendorSeverity = $.vendorSeverity;
        this.vendorStatement = $.vendorStatement;
        this.vendorUrl = $.vendorUrl;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ImageVulnerabilityArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ImageVulnerabilityArgs $;

        public Builder() {
            $ = new ImageVulnerabilityArgs();
        }

        public Builder(ImageVulnerabilityArgs defaults) {
            $ = new ImageVulnerabilityArgs(Objects.requireNonNull(defaults));
        }

        public Builder ackAuthor(@Nullable Output<String> ackAuthor) {
            $.ackAuthor = ackAuthor;
            return this;
        }

        public Builder ackAuthor(String ackAuthor) {
            return ackAuthor(Output.of(ackAuthor));
        }

        public Builder ackComment(@Nullable Output<String> ackComment) {
            $.ackComment = ackComment;
            return this;
        }

        public Builder ackComment(String ackComment) {
            return ackComment(Output.of(ackComment));
        }

        public Builder ackExpirationConfiguredAt(@Nullable Output<String> ackExpirationConfiguredAt) {
            $.ackExpirationConfiguredAt = ackExpirationConfiguredAt;
            return this;
        }

        public Builder ackExpirationConfiguredAt(String ackExpirationConfiguredAt) {
            return ackExpirationConfiguredAt(Output.of(ackExpirationConfiguredAt));
        }

        public Builder ackExpirationConfiguredBy(@Nullable Output<String> ackExpirationConfiguredBy) {
            $.ackExpirationConfiguredBy = ackExpirationConfiguredBy;
            return this;
        }

        public Builder ackExpirationConfiguredBy(String ackExpirationConfiguredBy) {
            return ackExpirationConfiguredBy(Output.of(ackExpirationConfiguredBy));
        }

        public Builder ackExpirationDays(@Nullable Output<Integer> ackExpirationDays) {
            $.ackExpirationDays = ackExpirationDays;
            return this;
        }

        public Builder ackExpirationDays(Integer ackExpirationDays) {
            return ackExpirationDays(Output.of(ackExpirationDays));
        }

        public Builder ackScope(@Nullable Output<String> ackScope) {
            $.ackScope = ackScope;
            return this;
        }

        public Builder ackScope(String ackScope) {
            return ackScope(Output.of(ackScope));
        }

        public Builder acknowledgeDate(@Nullable Output<String> acknowledgeDate) {
            $.acknowledgeDate = acknowledgeDate;
            return this;
        }

        public Builder acknowledgeDate(String acknowledgeDate) {
            return acknowledgeDate(Output.of(acknowledgeDate));
        }

        public Builder ancestorPkg(@Nullable Output<String> ancestorPkg) {
            $.ancestorPkg = ancestorPkg;
            return this;
        }

        public Builder ancestorPkg(String ancestorPkg) {
            return ancestorPkg(Output.of(ancestorPkg));
        }

        public Builder aquaScore(@Nullable Output<Double> aquaScore) {
            $.aquaScore = aquaScore;
            return this;
        }

        public Builder aquaScore(Double aquaScore) {
            return aquaScore(Output.of(aquaScore));
        }

        public Builder aquaScoreClassification(@Nullable Output<String> aquaScoreClassification) {
            $.aquaScoreClassification = aquaScoreClassification;
            return this;
        }

        public Builder aquaScoreClassification(String aquaScoreClassification) {
            return aquaScoreClassification(Output.of(aquaScoreClassification));
        }

        public Builder aquaScoringSystem(@Nullable Output<String> aquaScoringSystem) {
            $.aquaScoringSystem = aquaScoringSystem;
            return this;
        }

        public Builder aquaScoringSystem(String aquaScoringSystem) {
            return aquaScoringSystem(Output.of(aquaScoringSystem));
        }

        public Builder aquaSeverity(@Nullable Output<String> aquaSeverity) {
            $.aquaSeverity = aquaSeverity;
            return this;
        }

        public Builder aquaSeverity(String aquaSeverity) {
            return aquaSeverity(Output.of(aquaSeverity));
        }

        public Builder aquaSeverityClassification(@Nullable Output<String> aquaSeverityClassification) {
            $.aquaSeverityClassification = aquaSeverityClassification;
            return this;
        }

        public Builder aquaSeverityClassification(String aquaSeverityClassification) {
            return aquaSeverityClassification(Output.of(aquaSeverityClassification));
        }

        public Builder aquaVectors(@Nullable Output<String> aquaVectors) {
            $.aquaVectors = aquaVectors;
            return this;
        }

        public Builder aquaVectors(String aquaVectors) {
            return aquaVectors(Output.of(aquaVectors));
        }

        public Builder auditEventsCount(@Nullable Output<Integer> auditEventsCount) {
            $.auditEventsCount = auditEventsCount;
            return this;
        }

        public Builder auditEventsCount(Integer auditEventsCount) {
            return auditEventsCount(Output.of(auditEventsCount));
        }

        public Builder blockEventsCount(@Nullable Output<Integer> blockEventsCount) {
            $.blockEventsCount = blockEventsCount;
            return this;
        }

        public Builder blockEventsCount(Integer blockEventsCount) {
            return blockEventsCount(Output.of(blockEventsCount));
        }

        public Builder classification(@Nullable Output<String> classification) {
            $.classification = classification;
            return this;
        }

        public Builder classification(String classification) {
            return classification(Output.of(classification));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param digest The content digest of the image.
         * 
         * @return builder
         * 
         */
        public Builder digest(@Nullable Output<String> digest) {
            $.digest = digest;
            return this;
        }

        /**
         * @param digest The content digest of the image.
         * 
         * @return builder
         * 
         */
        public Builder digest(String digest) {
            return digest(Output.of(digest));
        }

        public Builder exploitReference(@Nullable Output<String> exploitReference) {
            $.exploitReference = exploitReference;
            return this;
        }

        public Builder exploitReference(String exploitReference) {
            return exploitReference(Output.of(exploitReference));
        }

        public Builder exploitType(@Nullable Output<String> exploitType) {
            $.exploitType = exploitType;
            return this;
        }

        public Builder exploitType(String exploitType) {
            return exploitType(Output.of(exploitType));
        }

        public Builder firstFoundDate(@Nullable Output<String> firstFoundDate) {
            $.firstFoundDate = firstFoundDate;
            return this;
        }

        public Builder firstFoundDate(String firstFoundDate) {
            return firstFoundDate(Output.of(firstFoundDate));
        }

        public Builder fixVersion(@Nullable Output<String> fixVersion) {
            $.fixVersion = fixVersion;
            return this;
        }

        public Builder fixVersion(String fixVersion) {
            return fixVersion(Output.of(fixVersion));
        }

        public Builder imageName(@Nullable Output<String> imageName) {
            $.imageName = imageName;
            return this;
        }

        public Builder imageName(String imageName) {
            return imageName(Output.of(imageName));
        }

        public Builder lastFoundDate(@Nullable Output<String> lastFoundDate) {
            $.lastFoundDate = lastFoundDate;
            return this;
        }

        public Builder lastFoundDate(String lastFoundDate) {
            return lastFoundDate(Output.of(lastFoundDate));
        }

        public Builder modificationDate(@Nullable Output<String> modificationDate) {
            $.modificationDate = modificationDate;
            return this;
        }

        public Builder modificationDate(String modificationDate) {
            return modificationDate(Output.of(modificationDate));
        }

        /**
         * @param name The name of the image.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the image.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder nvdCvss2Score(@Nullable Output<Double> nvdCvss2Score) {
            $.nvdCvss2Score = nvdCvss2Score;
            return this;
        }

        public Builder nvdCvss2Score(Double nvdCvss2Score) {
            return nvdCvss2Score(Output.of(nvdCvss2Score));
        }

        public Builder nvdCvss2Vectors(@Nullable Output<String> nvdCvss2Vectors) {
            $.nvdCvss2Vectors = nvdCvss2Vectors;
            return this;
        }

        public Builder nvdCvss2Vectors(String nvdCvss2Vectors) {
            return nvdCvss2Vectors(Output.of(nvdCvss2Vectors));
        }

        public Builder nvdCvss3Score(@Nullable Output<Double> nvdCvss3Score) {
            $.nvdCvss3Score = nvdCvss3Score;
            return this;
        }

        public Builder nvdCvss3Score(Double nvdCvss3Score) {
            return nvdCvss3Score(Output.of(nvdCvss3Score));
        }

        public Builder nvdCvss3Severity(@Nullable Output<String> nvdCvss3Severity) {
            $.nvdCvss3Severity = nvdCvss3Severity;
            return this;
        }

        public Builder nvdCvss3Severity(String nvdCvss3Severity) {
            return nvdCvss3Severity(Output.of(nvdCvss3Severity));
        }

        public Builder nvdCvss3Vectors(@Nullable Output<String> nvdCvss3Vectors) {
            $.nvdCvss3Vectors = nvdCvss3Vectors;
            return this;
        }

        public Builder nvdCvss3Vectors(String nvdCvss3Vectors) {
            return nvdCvss3Vectors(Output.of(nvdCvss3Vectors));
        }

        public Builder nvdSeverity(@Nullable Output<String> nvdSeverity) {
            $.nvdSeverity = nvdSeverity;
            return this;
        }

        public Builder nvdSeverity(String nvdSeverity) {
            return nvdSeverity(Output.of(nvdSeverity));
        }

        public Builder nvdUrl(@Nullable Output<String> nvdUrl) {
            $.nvdUrl = nvdUrl;
            return this;
        }

        public Builder nvdUrl(String nvdUrl) {
            return nvdUrl(Output.of(nvdUrl));
        }

        /**
         * @param os The operating system detected in the image
         * 
         * @return builder
         * 
         */
        public Builder os(@Nullable Output<String> os) {
            $.os = os;
            return this;
        }

        /**
         * @param os The operating system detected in the image
         * 
         * @return builder
         * 
         */
        public Builder os(String os) {
            return os(Output.of(os));
        }

        /**
         * @param osVersion The version of the OS detected in the image.
         * 
         * @return builder
         * 
         */
        public Builder osVersion(@Nullable Output<String> osVersion) {
            $.osVersion = osVersion;
            return this;
        }

        /**
         * @param osVersion The version of the OS detected in the image.
         * 
         * @return builder
         * 
         */
        public Builder osVersion(String osVersion) {
            return osVersion(Output.of(osVersion));
        }

        /**
         * @param permission Permission of the image.
         * 
         * @return builder
         * 
         */
        public Builder permission(@Nullable Output<String> permission) {
            $.permission = permission;
            return this;
        }

        /**
         * @param permission Permission of the image.
         * 
         * @return builder
         * 
         */
        public Builder permission(String permission) {
            return permission(Output.of(permission));
        }

        public Builder publishDate(@Nullable Output<String> publishDate) {
            $.publishDate = publishDate;
            return this;
        }

        public Builder publishDate(String publishDate) {
            return publishDate(Output.of(publishDate));
        }

        /**
         * @param registry The name of the registry where the image is stored.
         * 
         * @return builder
         * 
         */
        public Builder registry(@Nullable Output<String> registry) {
            $.registry = registry;
            return this;
        }

        /**
         * @param registry The name of the registry where the image is stored.
         * 
         * @return builder
         * 
         */
        public Builder registry(String registry) {
            return registry(Output.of(registry));
        }

        /**
         * @param repository The name of the image&#39;s repository.
         * 
         * @return builder
         * 
         */
        public Builder repository(@Nullable Output<String> repository) {
            $.repository = repository;
            return this;
        }

        /**
         * @param repository The name of the image&#39;s repository.
         * 
         * @return builder
         * 
         */
        public Builder repository(String repository) {
            return repository(Output.of(repository));
        }

        public Builder resourceArchitecture(@Nullable Output<String> resourceArchitecture) {
            $.resourceArchitecture = resourceArchitecture;
            return this;
        }

        public Builder resourceArchitecture(String resourceArchitecture) {
            return resourceArchitecture(Output.of(resourceArchitecture));
        }

        public Builder resourceCpe(@Nullable Output<String> resourceCpe) {
            $.resourceCpe = resourceCpe;
            return this;
        }

        public Builder resourceCpe(String resourceCpe) {
            return resourceCpe(Output.of(resourceCpe));
        }

        public Builder resourceFormat(@Nullable Output<String> resourceFormat) {
            $.resourceFormat = resourceFormat;
            return this;
        }

        public Builder resourceFormat(String resourceFormat) {
            return resourceFormat(Output.of(resourceFormat));
        }

        public Builder resourceHash(@Nullable Output<String> resourceHash) {
            $.resourceHash = resourceHash;
            return this;
        }

        public Builder resourceHash(String resourceHash) {
            return resourceHash(Output.of(resourceHash));
        }

        public Builder resourceLicenses(@Nullable Output<List<String>> resourceLicenses) {
            $.resourceLicenses = resourceLicenses;
            return this;
        }

        public Builder resourceLicenses(List<String> resourceLicenses) {
            return resourceLicenses(Output.of(resourceLicenses));
        }

        public Builder resourceLicenses(String... resourceLicenses) {
            return resourceLicenses(List.of(resourceLicenses));
        }

        public Builder resourceName(@Nullable Output<String> resourceName) {
            $.resourceName = resourceName;
            return this;
        }

        public Builder resourceName(String resourceName) {
            return resourceName(Output.of(resourceName));
        }

        public Builder resourcePath(@Nullable Output<String> resourcePath) {
            $.resourcePath = resourcePath;
            return this;
        }

        public Builder resourcePath(String resourcePath) {
            return resourcePath(Output.of(resourcePath));
        }

        public Builder resourceType(@Nullable Output<String> resourceType) {
            $.resourceType = resourceType;
            return this;
        }

        public Builder resourceType(String resourceType) {
            return resourceType(Output.of(resourceType));
        }

        public Builder resourceVersion(@Nullable Output<String> resourceVersion) {
            $.resourceVersion = resourceVersion;
            return this;
        }

        public Builder resourceVersion(String resourceVersion) {
            return resourceVersion(Output.of(resourceVersion));
        }

        public Builder severityClassification(@Nullable Output<String> severityClassification) {
            $.severityClassification = severityClassification;
            return this;
        }

        public Builder severityClassification(String severityClassification) {
            return severityClassification(Output.of(severityClassification));
        }

        public Builder solution(@Nullable Output<String> solution) {
            $.solution = solution;
            return this;
        }

        public Builder solution(String solution) {
            return solution(Output.of(solution));
        }

        public Builder temporalVector(@Nullable Output<String> temporalVector) {
            $.temporalVector = temporalVector;
            return this;
        }

        public Builder temporalVector(String temporalVector) {
            return temporalVector(Output.of(temporalVector));
        }

        public Builder vPatchAppliedBy(@Nullable Output<String> vPatchAppliedBy) {
            $.vPatchAppliedBy = vPatchAppliedBy;
            return this;
        }

        public Builder vPatchAppliedBy(String vPatchAppliedBy) {
            return vPatchAppliedBy(Output.of(vPatchAppliedBy));
        }

        public Builder vPatchAppliedOn(@Nullable Output<String> vPatchAppliedOn) {
            $.vPatchAppliedOn = vPatchAppliedOn;
            return this;
        }

        public Builder vPatchAppliedOn(String vPatchAppliedOn) {
            return vPatchAppliedOn(Output.of(vPatchAppliedOn));
        }

        public Builder vPatchEnforcedBy(@Nullable Output<String> vPatchEnforcedBy) {
            $.vPatchEnforcedBy = vPatchEnforcedBy;
            return this;
        }

        public Builder vPatchEnforcedBy(String vPatchEnforcedBy) {
            return vPatchEnforcedBy(Output.of(vPatchEnforcedBy));
        }

        public Builder vPatchEnforcedOn(@Nullable Output<String> vPatchEnforcedOn) {
            $.vPatchEnforcedOn = vPatchEnforcedOn;
            return this;
        }

        public Builder vPatchEnforcedOn(String vPatchEnforcedOn) {
            return vPatchEnforcedOn(Output.of(vPatchEnforcedOn));
        }

        public Builder vPatchPolicyEnforce(@Nullable Output<Boolean> vPatchPolicyEnforce) {
            $.vPatchPolicyEnforce = vPatchPolicyEnforce;
            return this;
        }

        public Builder vPatchPolicyEnforce(Boolean vPatchPolicyEnforce) {
            return vPatchPolicyEnforce(Output.of(vPatchPolicyEnforce));
        }

        public Builder vPatchPolicyName(@Nullable Output<String> vPatchPolicyName) {
            $.vPatchPolicyName = vPatchPolicyName;
            return this;
        }

        public Builder vPatchPolicyName(String vPatchPolicyName) {
            return vPatchPolicyName(Output.of(vPatchPolicyName));
        }

        public Builder vPatchRevertedBy(@Nullable Output<String> vPatchRevertedBy) {
            $.vPatchRevertedBy = vPatchRevertedBy;
            return this;
        }

        public Builder vPatchRevertedBy(String vPatchRevertedBy) {
            return vPatchRevertedBy(Output.of(vPatchRevertedBy));
        }

        public Builder vPatchRevertedOn(@Nullable Output<String> vPatchRevertedOn) {
            $.vPatchRevertedOn = vPatchRevertedOn;
            return this;
        }

        public Builder vPatchRevertedOn(String vPatchRevertedOn) {
            return vPatchRevertedOn(Output.of(vPatchRevertedOn));
        }

        public Builder vPatchStatus(@Nullable Output<String> vPatchStatus) {
            $.vPatchStatus = vPatchStatus;
            return this;
        }

        public Builder vPatchStatus(String vPatchStatus) {
            return vPatchStatus(Output.of(vPatchStatus));
        }

        public Builder vendorCvss2Score(@Nullable Output<Double> vendorCvss2Score) {
            $.vendorCvss2Score = vendorCvss2Score;
            return this;
        }

        public Builder vendorCvss2Score(Double vendorCvss2Score) {
            return vendorCvss2Score(Output.of(vendorCvss2Score));
        }

        public Builder vendorCvss2Vectors(@Nullable Output<String> vendorCvss2Vectors) {
            $.vendorCvss2Vectors = vendorCvss2Vectors;
            return this;
        }

        public Builder vendorCvss2Vectors(String vendorCvss2Vectors) {
            return vendorCvss2Vectors(Output.of(vendorCvss2Vectors));
        }

        public Builder vendorSeverity(@Nullable Output<String> vendorSeverity) {
            $.vendorSeverity = vendorSeverity;
            return this;
        }

        public Builder vendorSeverity(String vendorSeverity) {
            return vendorSeverity(Output.of(vendorSeverity));
        }

        public Builder vendorStatement(@Nullable Output<String> vendorStatement) {
            $.vendorStatement = vendorStatement;
            return this;
        }

        public Builder vendorStatement(String vendorStatement) {
            return vendorStatement(Output.of(vendorStatement));
        }

        public Builder vendorUrl(@Nullable Output<String> vendorUrl) {
            $.vendorUrl = vendorUrl;
            return this;
        }

        public Builder vendorUrl(String vendorUrl) {
            return vendorUrl(Output.of(vendorUrl));
        }

        public ImageVulnerabilityArgs build() {
            return $;
        }
    }

}
