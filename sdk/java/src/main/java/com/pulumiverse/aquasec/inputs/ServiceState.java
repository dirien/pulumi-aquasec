// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumiverse.aquasec.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumiverse.aquasec.inputs.ServiceScopeVariableArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceState extends com.pulumi.resources.ResourceArgs {

    public static final ServiceState Empty = new ServiceState();

    /**
     * Indicates the application scope of the service.
     * 
     */
    @Import(name="applicationScopes")
    private @Nullable Output<List<String>> applicationScopes;

    /**
     * @return Indicates the application scope of the service.
     * 
     */
    public Optional<Output<List<String>>> applicationScopes() {
        return Optional.ofNullable(this.applicationScopes);
    }

    /**
     * Username of the account that created the service.
     * 
     */
    @Import(name="author")
    private @Nullable Output<String> author;

    /**
     * @return Username of the account that created the service.
     * 
     */
    public Optional<Output<String>> author() {
        return Optional.ofNullable(this.author);
    }

    /**
     * The number of containers associated with the service.
     * 
     */
    @Import(name="containersCount")
    private @Nullable Output<Integer> containersCount;

    /**
     * @return The number of containers associated with the service.
     * 
     */
    public Optional<Output<Integer>> containersCount() {
        return Optional.ofNullable(this.containersCount);
    }

    /**
     * A textual description of the service record; maximum 500 characters.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A textual description of the service record; maximum 500 characters.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Enforcement status of the service.
     * 
     */
    @Import(name="enforce")
    private @Nullable Output<Boolean> enforce;

    /**
     * @return Enforcement status of the service.
     * 
     */
    public Optional<Output<Boolean>> enforce() {
        return Optional.ofNullable(this.enforce);
    }

    /**
     * Whether the service has been evaluated for security vulnerabilities.
     * 
     */
    @Import(name="evaluated")
    private @Nullable Output<Boolean> evaluated;

    /**
     * @return Whether the service has been evaluated for security vulnerabilities.
     * 
     */
    public Optional<Output<Boolean>> evaluated() {
        return Optional.ofNullable(this.evaluated);
    }

    /**
     * Indicates if registered or not.
     * 
     */
    @Import(name="isRegistered")
    private @Nullable Output<Boolean> isRegistered;

    /**
     * @return Indicates if registered or not.
     * 
     */
    public Optional<Output<Boolean>> isRegistered() {
        return Optional.ofNullable(this.isRegistered);
    }

    /**
     * Timestamp of the last update in Unix time format.
     * 
     */
    @Import(name="lastupdate")
    private @Nullable Output<Integer> lastupdate;

    /**
     * @return Timestamp of the last update in Unix time format.
     * 
     */
    public Optional<Output<Integer>> lastupdate() {
        return Optional.ofNullable(this.lastupdate);
    }

    /**
     * Indicates if monitoring is enabled or not
     * 
     */
    @Import(name="monitoring")
    private @Nullable Output<Boolean> monitoring;

    /**
     * @return Indicates if monitoring is enabled or not
     * 
     */
    public Optional<Output<Boolean>> monitoring() {
        return Optional.ofNullable(this.monitoring);
    }

    /**
     * The name of the service. It is recommended not to use whitespace characters in the name.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the service. It is recommended not to use whitespace characters in the name.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The number of container that are not evaluated.
     * 
     */
    @Import(name="notEvaluatedCount")
    private @Nullable Output<Integer> notEvaluatedCount;

    /**
     * @return The number of container that are not evaluated.
     * 
     */
    public Optional<Output<Integer>> notEvaluatedCount() {
        return Optional.ofNullable(this.notEvaluatedCount);
    }

    /**
     * The service&#39;s policies; an array of container firewall policy names.
     * 
     */
    @Import(name="policies")
    private @Nullable Output<List<String>> policies;

    /**
     * @return The service&#39;s policies; an array of container firewall policy names.
     * 
     */
    public Optional<Output<List<String>>> policies() {
        return Optional.ofNullable(this.policies);
    }

    /**
     * Rules priority, must be between 1-100.
     * 
     */
    @Import(name="priority")
    private @Nullable Output<Integer> priority;

    /**
     * @return Rules priority, must be between 1-100.
     * 
     */
    public Optional<Output<Integer>> priority() {
        return Optional.ofNullable(this.priority);
    }

    /**
     * Logical expression of how to compute the dependency of the scope variables.
     * 
     */
    @Import(name="scopeExpression")
    private @Nullable Output<String> scopeExpression;

    /**
     * @return Logical expression of how to compute the dependency of the scope variables.
     * 
     */
    public Optional<Output<String>> scopeExpression() {
        return Optional.ofNullable(this.scopeExpression);
    }

    /**
     * List of scope attributes.
     * 
     */
    @Import(name="scopeVariables")
    private @Nullable Output<List<ServiceScopeVariableArgs>> scopeVariables;

    /**
     * @return List of scope attributes.
     * 
     */
    public Optional<Output<List<ServiceScopeVariableArgs>>> scopeVariables() {
        return Optional.ofNullable(this.scopeVariables);
    }

    /**
     * Type of the workload. container or host.
     * 
     */
    @Import(name="target")
    private @Nullable Output<String> target;

    /**
     * @return Type of the workload. container or host.
     * 
     */
    public Optional<Output<String>> target() {
        return Optional.ofNullable(this.target);
    }

    /**
     * The number of containers allocated to the service that are not registered.
     * 
     */
    @Import(name="unregisteredCount")
    private @Nullable Output<Integer> unregisteredCount;

    /**
     * @return The number of containers allocated to the service that are not registered.
     * 
     */
    public Optional<Output<Integer>> unregisteredCount() {
        return Optional.ofNullable(this.unregisteredCount);
    }

    /**
     * Number of high severity vulnerabilities.
     * 
     */
    @Import(name="vulnerabilitiesHigh")
    private @Nullable Output<Integer> vulnerabilitiesHigh;

    /**
     * @return Number of high severity vulnerabilities.
     * 
     */
    public Optional<Output<Integer>> vulnerabilitiesHigh() {
        return Optional.ofNullable(this.vulnerabilitiesHigh);
    }

    /**
     * Number of low severity vulnerabilities.
     * 
     */
    @Import(name="vulnerabilitiesLow")
    private @Nullable Output<Integer> vulnerabilitiesLow;

    /**
     * @return Number of low severity vulnerabilities.
     * 
     */
    public Optional<Output<Integer>> vulnerabilitiesLow() {
        return Optional.ofNullable(this.vulnerabilitiesLow);
    }

    /**
     * Number of malware.
     * 
     */
    @Import(name="vulnerabilitiesMalware")
    private @Nullable Output<Integer> vulnerabilitiesMalware;

    /**
     * @return Number of malware.
     * 
     */
    public Optional<Output<Integer>> vulnerabilitiesMalware() {
        return Optional.ofNullable(this.vulnerabilitiesMalware);
    }

    /**
     * Number of medium severity vulnerabilities.
     * 
     */
    @Import(name="vulnerabilitiesMedium")
    private @Nullable Output<Integer> vulnerabilitiesMedium;

    /**
     * @return Number of medium severity vulnerabilities.
     * 
     */
    public Optional<Output<Integer>> vulnerabilitiesMedium() {
        return Optional.ofNullable(this.vulnerabilitiesMedium);
    }

    /**
     * Number of negligible vulnerabilities.
     * 
     */
    @Import(name="vulnerabilitiesNegligible")
    private @Nullable Output<Integer> vulnerabilitiesNegligible;

    /**
     * @return Number of negligible vulnerabilities.
     * 
     */
    public Optional<Output<Integer>> vulnerabilitiesNegligible() {
        return Optional.ofNullable(this.vulnerabilitiesNegligible);
    }

    /**
     * The CVSS average vulnerabilities score.
     * 
     */
    @Import(name="vulnerabilitiesScoreAverage")
    private @Nullable Output<Integer> vulnerabilitiesScoreAverage;

    /**
     * @return The CVSS average vulnerabilities score.
     * 
     */
    public Optional<Output<Integer>> vulnerabilitiesScoreAverage() {
        return Optional.ofNullable(this.vulnerabilitiesScoreAverage);
    }

    /**
     * Number of sensitive vulnerabilities.
     * 
     */
    @Import(name="vulnerabilitiesSensitive")
    private @Nullable Output<Integer> vulnerabilitiesSensitive;

    /**
     * @return Number of sensitive vulnerabilities.
     * 
     */
    public Optional<Output<Integer>> vulnerabilitiesSensitive() {
        return Optional.ofNullable(this.vulnerabilitiesSensitive);
    }

    /**
     * Total number of vulnerabilities.
     * 
     */
    @Import(name="vulnerabilitiesTotal")
    private @Nullable Output<Integer> vulnerabilitiesTotal;

    /**
     * @return Total number of vulnerabilities.
     * 
     */
    public Optional<Output<Integer>> vulnerabilitiesTotal() {
        return Optional.ofNullable(this.vulnerabilitiesTotal);
    }

    private ServiceState() {}

    private ServiceState(ServiceState $) {
        this.applicationScopes = $.applicationScopes;
        this.author = $.author;
        this.containersCount = $.containersCount;
        this.description = $.description;
        this.enforce = $.enforce;
        this.evaluated = $.evaluated;
        this.isRegistered = $.isRegistered;
        this.lastupdate = $.lastupdate;
        this.monitoring = $.monitoring;
        this.name = $.name;
        this.notEvaluatedCount = $.notEvaluatedCount;
        this.policies = $.policies;
        this.priority = $.priority;
        this.scopeExpression = $.scopeExpression;
        this.scopeVariables = $.scopeVariables;
        this.target = $.target;
        this.unregisteredCount = $.unregisteredCount;
        this.vulnerabilitiesHigh = $.vulnerabilitiesHigh;
        this.vulnerabilitiesLow = $.vulnerabilitiesLow;
        this.vulnerabilitiesMalware = $.vulnerabilitiesMalware;
        this.vulnerabilitiesMedium = $.vulnerabilitiesMedium;
        this.vulnerabilitiesNegligible = $.vulnerabilitiesNegligible;
        this.vulnerabilitiesScoreAverage = $.vulnerabilitiesScoreAverage;
        this.vulnerabilitiesSensitive = $.vulnerabilitiesSensitive;
        this.vulnerabilitiesTotal = $.vulnerabilitiesTotal;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceState $;

        public Builder() {
            $ = new ServiceState();
        }

        public Builder(ServiceState defaults) {
            $ = new ServiceState(Objects.requireNonNull(defaults));
        }

        /**
         * @param applicationScopes Indicates the application scope of the service.
         * 
         * @return builder
         * 
         */
        public Builder applicationScopes(@Nullable Output<List<String>> applicationScopes) {
            $.applicationScopes = applicationScopes;
            return this;
        }

        /**
         * @param applicationScopes Indicates the application scope of the service.
         * 
         * @return builder
         * 
         */
        public Builder applicationScopes(List<String> applicationScopes) {
            return applicationScopes(Output.of(applicationScopes));
        }

        /**
         * @param applicationScopes Indicates the application scope of the service.
         * 
         * @return builder
         * 
         */
        public Builder applicationScopes(String... applicationScopes) {
            return applicationScopes(List.of(applicationScopes));
        }

        /**
         * @param author Username of the account that created the service.
         * 
         * @return builder
         * 
         */
        public Builder author(@Nullable Output<String> author) {
            $.author = author;
            return this;
        }

        /**
         * @param author Username of the account that created the service.
         * 
         * @return builder
         * 
         */
        public Builder author(String author) {
            return author(Output.of(author));
        }

        /**
         * @param containersCount The number of containers associated with the service.
         * 
         * @return builder
         * 
         */
        public Builder containersCount(@Nullable Output<Integer> containersCount) {
            $.containersCount = containersCount;
            return this;
        }

        /**
         * @param containersCount The number of containers associated with the service.
         * 
         * @return builder
         * 
         */
        public Builder containersCount(Integer containersCount) {
            return containersCount(Output.of(containersCount));
        }

        /**
         * @param description A textual description of the service record; maximum 500 characters.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A textual description of the service record; maximum 500 characters.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param enforce Enforcement status of the service.
         * 
         * @return builder
         * 
         */
        public Builder enforce(@Nullable Output<Boolean> enforce) {
            $.enforce = enforce;
            return this;
        }

        /**
         * @param enforce Enforcement status of the service.
         * 
         * @return builder
         * 
         */
        public Builder enforce(Boolean enforce) {
            return enforce(Output.of(enforce));
        }

        /**
         * @param evaluated Whether the service has been evaluated for security vulnerabilities.
         * 
         * @return builder
         * 
         */
        public Builder evaluated(@Nullable Output<Boolean> evaluated) {
            $.evaluated = evaluated;
            return this;
        }

        /**
         * @param evaluated Whether the service has been evaluated for security vulnerabilities.
         * 
         * @return builder
         * 
         */
        public Builder evaluated(Boolean evaluated) {
            return evaluated(Output.of(evaluated));
        }

        /**
         * @param isRegistered Indicates if registered or not.
         * 
         * @return builder
         * 
         */
        public Builder isRegistered(@Nullable Output<Boolean> isRegistered) {
            $.isRegistered = isRegistered;
            return this;
        }

        /**
         * @param isRegistered Indicates if registered or not.
         * 
         * @return builder
         * 
         */
        public Builder isRegistered(Boolean isRegistered) {
            return isRegistered(Output.of(isRegistered));
        }

        /**
         * @param lastupdate Timestamp of the last update in Unix time format.
         * 
         * @return builder
         * 
         */
        public Builder lastupdate(@Nullable Output<Integer> lastupdate) {
            $.lastupdate = lastupdate;
            return this;
        }

        /**
         * @param lastupdate Timestamp of the last update in Unix time format.
         * 
         * @return builder
         * 
         */
        public Builder lastupdate(Integer lastupdate) {
            return lastupdate(Output.of(lastupdate));
        }

        /**
         * @param monitoring Indicates if monitoring is enabled or not
         * 
         * @return builder
         * 
         */
        public Builder monitoring(@Nullable Output<Boolean> monitoring) {
            $.monitoring = monitoring;
            return this;
        }

        /**
         * @param monitoring Indicates if monitoring is enabled or not
         * 
         * @return builder
         * 
         */
        public Builder monitoring(Boolean monitoring) {
            return monitoring(Output.of(monitoring));
        }

        /**
         * @param name The name of the service. It is recommended not to use whitespace characters in the name.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the service. It is recommended not to use whitespace characters in the name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param notEvaluatedCount The number of container that are not evaluated.
         * 
         * @return builder
         * 
         */
        public Builder notEvaluatedCount(@Nullable Output<Integer> notEvaluatedCount) {
            $.notEvaluatedCount = notEvaluatedCount;
            return this;
        }

        /**
         * @param notEvaluatedCount The number of container that are not evaluated.
         * 
         * @return builder
         * 
         */
        public Builder notEvaluatedCount(Integer notEvaluatedCount) {
            return notEvaluatedCount(Output.of(notEvaluatedCount));
        }

        /**
         * @param policies The service&#39;s policies; an array of container firewall policy names.
         * 
         * @return builder
         * 
         */
        public Builder policies(@Nullable Output<List<String>> policies) {
            $.policies = policies;
            return this;
        }

        /**
         * @param policies The service&#39;s policies; an array of container firewall policy names.
         * 
         * @return builder
         * 
         */
        public Builder policies(List<String> policies) {
            return policies(Output.of(policies));
        }

        /**
         * @param policies The service&#39;s policies; an array of container firewall policy names.
         * 
         * @return builder
         * 
         */
        public Builder policies(String... policies) {
            return policies(List.of(policies));
        }

        /**
         * @param priority Rules priority, must be between 1-100.
         * 
         * @return builder
         * 
         */
        public Builder priority(@Nullable Output<Integer> priority) {
            $.priority = priority;
            return this;
        }

        /**
         * @param priority Rules priority, must be between 1-100.
         * 
         * @return builder
         * 
         */
        public Builder priority(Integer priority) {
            return priority(Output.of(priority));
        }

        /**
         * @param scopeExpression Logical expression of how to compute the dependency of the scope variables.
         * 
         * @return builder
         * 
         */
        public Builder scopeExpression(@Nullable Output<String> scopeExpression) {
            $.scopeExpression = scopeExpression;
            return this;
        }

        /**
         * @param scopeExpression Logical expression of how to compute the dependency of the scope variables.
         * 
         * @return builder
         * 
         */
        public Builder scopeExpression(String scopeExpression) {
            return scopeExpression(Output.of(scopeExpression));
        }

        /**
         * @param scopeVariables List of scope attributes.
         * 
         * @return builder
         * 
         */
        public Builder scopeVariables(@Nullable Output<List<ServiceScopeVariableArgs>> scopeVariables) {
            $.scopeVariables = scopeVariables;
            return this;
        }

        /**
         * @param scopeVariables List of scope attributes.
         * 
         * @return builder
         * 
         */
        public Builder scopeVariables(List<ServiceScopeVariableArgs> scopeVariables) {
            return scopeVariables(Output.of(scopeVariables));
        }

        /**
         * @param scopeVariables List of scope attributes.
         * 
         * @return builder
         * 
         */
        public Builder scopeVariables(ServiceScopeVariableArgs... scopeVariables) {
            return scopeVariables(List.of(scopeVariables));
        }

        /**
         * @param target Type of the workload. container or host.
         * 
         * @return builder
         * 
         */
        public Builder target(@Nullable Output<String> target) {
            $.target = target;
            return this;
        }

        /**
         * @param target Type of the workload. container or host.
         * 
         * @return builder
         * 
         */
        public Builder target(String target) {
            return target(Output.of(target));
        }

        /**
         * @param unregisteredCount The number of containers allocated to the service that are not registered.
         * 
         * @return builder
         * 
         */
        public Builder unregisteredCount(@Nullable Output<Integer> unregisteredCount) {
            $.unregisteredCount = unregisteredCount;
            return this;
        }

        /**
         * @param unregisteredCount The number of containers allocated to the service that are not registered.
         * 
         * @return builder
         * 
         */
        public Builder unregisteredCount(Integer unregisteredCount) {
            return unregisteredCount(Output.of(unregisteredCount));
        }

        /**
         * @param vulnerabilitiesHigh Number of high severity vulnerabilities.
         * 
         * @return builder
         * 
         */
        public Builder vulnerabilitiesHigh(@Nullable Output<Integer> vulnerabilitiesHigh) {
            $.vulnerabilitiesHigh = vulnerabilitiesHigh;
            return this;
        }

        /**
         * @param vulnerabilitiesHigh Number of high severity vulnerabilities.
         * 
         * @return builder
         * 
         */
        public Builder vulnerabilitiesHigh(Integer vulnerabilitiesHigh) {
            return vulnerabilitiesHigh(Output.of(vulnerabilitiesHigh));
        }

        /**
         * @param vulnerabilitiesLow Number of low severity vulnerabilities.
         * 
         * @return builder
         * 
         */
        public Builder vulnerabilitiesLow(@Nullable Output<Integer> vulnerabilitiesLow) {
            $.vulnerabilitiesLow = vulnerabilitiesLow;
            return this;
        }

        /**
         * @param vulnerabilitiesLow Number of low severity vulnerabilities.
         * 
         * @return builder
         * 
         */
        public Builder vulnerabilitiesLow(Integer vulnerabilitiesLow) {
            return vulnerabilitiesLow(Output.of(vulnerabilitiesLow));
        }

        /**
         * @param vulnerabilitiesMalware Number of malware.
         * 
         * @return builder
         * 
         */
        public Builder vulnerabilitiesMalware(@Nullable Output<Integer> vulnerabilitiesMalware) {
            $.vulnerabilitiesMalware = vulnerabilitiesMalware;
            return this;
        }

        /**
         * @param vulnerabilitiesMalware Number of malware.
         * 
         * @return builder
         * 
         */
        public Builder vulnerabilitiesMalware(Integer vulnerabilitiesMalware) {
            return vulnerabilitiesMalware(Output.of(vulnerabilitiesMalware));
        }

        /**
         * @param vulnerabilitiesMedium Number of medium severity vulnerabilities.
         * 
         * @return builder
         * 
         */
        public Builder vulnerabilitiesMedium(@Nullable Output<Integer> vulnerabilitiesMedium) {
            $.vulnerabilitiesMedium = vulnerabilitiesMedium;
            return this;
        }

        /**
         * @param vulnerabilitiesMedium Number of medium severity vulnerabilities.
         * 
         * @return builder
         * 
         */
        public Builder vulnerabilitiesMedium(Integer vulnerabilitiesMedium) {
            return vulnerabilitiesMedium(Output.of(vulnerabilitiesMedium));
        }

        /**
         * @param vulnerabilitiesNegligible Number of negligible vulnerabilities.
         * 
         * @return builder
         * 
         */
        public Builder vulnerabilitiesNegligible(@Nullable Output<Integer> vulnerabilitiesNegligible) {
            $.vulnerabilitiesNegligible = vulnerabilitiesNegligible;
            return this;
        }

        /**
         * @param vulnerabilitiesNegligible Number of negligible vulnerabilities.
         * 
         * @return builder
         * 
         */
        public Builder vulnerabilitiesNegligible(Integer vulnerabilitiesNegligible) {
            return vulnerabilitiesNegligible(Output.of(vulnerabilitiesNegligible));
        }

        /**
         * @param vulnerabilitiesScoreAverage The CVSS average vulnerabilities score.
         * 
         * @return builder
         * 
         */
        public Builder vulnerabilitiesScoreAverage(@Nullable Output<Integer> vulnerabilitiesScoreAverage) {
            $.vulnerabilitiesScoreAverage = vulnerabilitiesScoreAverage;
            return this;
        }

        /**
         * @param vulnerabilitiesScoreAverage The CVSS average vulnerabilities score.
         * 
         * @return builder
         * 
         */
        public Builder vulnerabilitiesScoreAverage(Integer vulnerabilitiesScoreAverage) {
            return vulnerabilitiesScoreAverage(Output.of(vulnerabilitiesScoreAverage));
        }

        /**
         * @param vulnerabilitiesSensitive Number of sensitive vulnerabilities.
         * 
         * @return builder
         * 
         */
        public Builder vulnerabilitiesSensitive(@Nullable Output<Integer> vulnerabilitiesSensitive) {
            $.vulnerabilitiesSensitive = vulnerabilitiesSensitive;
            return this;
        }

        /**
         * @param vulnerabilitiesSensitive Number of sensitive vulnerabilities.
         * 
         * @return builder
         * 
         */
        public Builder vulnerabilitiesSensitive(Integer vulnerabilitiesSensitive) {
            return vulnerabilitiesSensitive(Output.of(vulnerabilitiesSensitive));
        }

        /**
         * @param vulnerabilitiesTotal Total number of vulnerabilities.
         * 
         * @return builder
         * 
         */
        public Builder vulnerabilitiesTotal(@Nullable Output<Integer> vulnerabilitiesTotal) {
            $.vulnerabilitiesTotal = vulnerabilitiesTotal;
            return this;
        }

        /**
         * @param vulnerabilitiesTotal Total number of vulnerabilities.
         * 
         * @return builder
         * 
         */
        public Builder vulnerabilitiesTotal(Integer vulnerabilitiesTotal) {
            return vulnerabilitiesTotal(Output.of(vulnerabilitiesTotal));
        }

        public ServiceState build() {
            return $;
        }
    }

}
