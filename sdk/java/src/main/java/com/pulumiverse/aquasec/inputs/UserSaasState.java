// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumiverse.aquasec.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumiverse.aquasec.inputs.UserSaasGroupArgs;
import com.pulumiverse.aquasec.inputs.UserSaasLoginArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UserSaasState extends com.pulumi.resources.ResourceArgs {

    public static final UserSaasState Empty = new UserSaasState();

    @Import(name="accountAdmin")
    private @Nullable Output<Boolean> accountAdmin;

    public Optional<Output<Boolean>> accountAdmin() {
        return Optional.ofNullable(this.accountAdmin);
    }

    @Import(name="confirmed")
    private @Nullable Output<Boolean> confirmed;

    public Optional<Output<Boolean>> confirmed() {
        return Optional.ofNullable(this.confirmed);
    }

    @Import(name="created")
    private @Nullable Output<String> created;

    public Optional<Output<String>> created() {
        return Optional.ofNullable(this.created);
    }

    @Import(name="cspRoles")
    private @Nullable Output<List<String>> cspRoles;

    public Optional<Output<List<String>>> cspRoles() {
        return Optional.ofNullable(this.cspRoles);
    }

    @Import(name="email")
    private @Nullable Output<String> email;

    public Optional<Output<String>> email() {
        return Optional.ofNullable(this.email);
    }

    @Import(name="groups")
    private @Nullable Output<List<UserSaasGroupArgs>> groups;

    public Optional<Output<List<UserSaasGroupArgs>>> groups() {
        return Optional.ofNullable(this.groups);
    }

    @Import(name="logins")
    private @Nullable Output<List<UserSaasLoginArgs>> logins;

    public Optional<Output<List<UserSaasLoginArgs>>> logins() {
        return Optional.ofNullable(this.logins);
    }

    @Import(name="multiaccount")
    private @Nullable Output<Boolean> multiaccount;

    public Optional<Output<Boolean>> multiaccount() {
        return Optional.ofNullable(this.multiaccount);
    }

    @Import(name="passwordReset")
    private @Nullable Output<Boolean> passwordReset;

    public Optional<Output<Boolean>> passwordReset() {
        return Optional.ofNullable(this.passwordReset);
    }

    @Import(name="sendAnnouncements")
    private @Nullable Output<Boolean> sendAnnouncements;

    public Optional<Output<Boolean>> sendAnnouncements() {
        return Optional.ofNullable(this.sendAnnouncements);
    }

    @Import(name="sendNewPlugins")
    private @Nullable Output<Boolean> sendNewPlugins;

    public Optional<Output<Boolean>> sendNewPlugins() {
        return Optional.ofNullable(this.sendNewPlugins);
    }

    @Import(name="sendNewRisks")
    private @Nullable Output<Boolean> sendNewRisks;

    public Optional<Output<Boolean>> sendNewRisks() {
        return Optional.ofNullable(this.sendNewRisks);
    }

    @Import(name="sendScanResults")
    private @Nullable Output<Boolean> sendScanResults;

    public Optional<Output<Boolean>> sendScanResults() {
        return Optional.ofNullable(this.sendScanResults);
    }

    @Import(name="userId")
    private @Nullable Output<String> userId;

    public Optional<Output<String>> userId() {
        return Optional.ofNullable(this.userId);
    }

    private UserSaasState() {}

    private UserSaasState(UserSaasState $) {
        this.accountAdmin = $.accountAdmin;
        this.confirmed = $.confirmed;
        this.created = $.created;
        this.cspRoles = $.cspRoles;
        this.email = $.email;
        this.groups = $.groups;
        this.logins = $.logins;
        this.multiaccount = $.multiaccount;
        this.passwordReset = $.passwordReset;
        this.sendAnnouncements = $.sendAnnouncements;
        this.sendNewPlugins = $.sendNewPlugins;
        this.sendNewRisks = $.sendNewRisks;
        this.sendScanResults = $.sendScanResults;
        this.userId = $.userId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UserSaasState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UserSaasState $;

        public Builder() {
            $ = new UserSaasState();
        }

        public Builder(UserSaasState defaults) {
            $ = new UserSaasState(Objects.requireNonNull(defaults));
        }

        public Builder accountAdmin(@Nullable Output<Boolean> accountAdmin) {
            $.accountAdmin = accountAdmin;
            return this;
        }

        public Builder accountAdmin(Boolean accountAdmin) {
            return accountAdmin(Output.of(accountAdmin));
        }

        public Builder confirmed(@Nullable Output<Boolean> confirmed) {
            $.confirmed = confirmed;
            return this;
        }

        public Builder confirmed(Boolean confirmed) {
            return confirmed(Output.of(confirmed));
        }

        public Builder created(@Nullable Output<String> created) {
            $.created = created;
            return this;
        }

        public Builder created(String created) {
            return created(Output.of(created));
        }

        public Builder cspRoles(@Nullable Output<List<String>> cspRoles) {
            $.cspRoles = cspRoles;
            return this;
        }

        public Builder cspRoles(List<String> cspRoles) {
            return cspRoles(Output.of(cspRoles));
        }

        public Builder cspRoles(String... cspRoles) {
            return cspRoles(List.of(cspRoles));
        }

        public Builder email(@Nullable Output<String> email) {
            $.email = email;
            return this;
        }

        public Builder email(String email) {
            return email(Output.of(email));
        }

        public Builder groups(@Nullable Output<List<UserSaasGroupArgs>> groups) {
            $.groups = groups;
            return this;
        }

        public Builder groups(List<UserSaasGroupArgs> groups) {
            return groups(Output.of(groups));
        }

        public Builder groups(UserSaasGroupArgs... groups) {
            return groups(List.of(groups));
        }

        public Builder logins(@Nullable Output<List<UserSaasLoginArgs>> logins) {
            $.logins = logins;
            return this;
        }

        public Builder logins(List<UserSaasLoginArgs> logins) {
            return logins(Output.of(logins));
        }

        public Builder logins(UserSaasLoginArgs... logins) {
            return logins(List.of(logins));
        }

        public Builder multiaccount(@Nullable Output<Boolean> multiaccount) {
            $.multiaccount = multiaccount;
            return this;
        }

        public Builder multiaccount(Boolean multiaccount) {
            return multiaccount(Output.of(multiaccount));
        }

        public Builder passwordReset(@Nullable Output<Boolean> passwordReset) {
            $.passwordReset = passwordReset;
            return this;
        }

        public Builder passwordReset(Boolean passwordReset) {
            return passwordReset(Output.of(passwordReset));
        }

        public Builder sendAnnouncements(@Nullable Output<Boolean> sendAnnouncements) {
            $.sendAnnouncements = sendAnnouncements;
            return this;
        }

        public Builder sendAnnouncements(Boolean sendAnnouncements) {
            return sendAnnouncements(Output.of(sendAnnouncements));
        }

        public Builder sendNewPlugins(@Nullable Output<Boolean> sendNewPlugins) {
            $.sendNewPlugins = sendNewPlugins;
            return this;
        }

        public Builder sendNewPlugins(Boolean sendNewPlugins) {
            return sendNewPlugins(Output.of(sendNewPlugins));
        }

        public Builder sendNewRisks(@Nullable Output<Boolean> sendNewRisks) {
            $.sendNewRisks = sendNewRisks;
            return this;
        }

        public Builder sendNewRisks(Boolean sendNewRisks) {
            return sendNewRisks(Output.of(sendNewRisks));
        }

        public Builder sendScanResults(@Nullable Output<Boolean> sendScanResults) {
            $.sendScanResults = sendScanResults;
            return this;
        }

        public Builder sendScanResults(Boolean sendScanResults) {
            return sendScanResults(Output.of(sendScanResults));
        }

        public Builder userId(@Nullable Output<String> userId) {
            $.userId = userId;
            return this;
        }

        public Builder userId(String userId) {
            return userId(Output.of(userId));
        }

        public UserSaasState build() {
            return $;
        }
    }

}
