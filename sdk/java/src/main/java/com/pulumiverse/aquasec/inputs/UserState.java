// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumiverse.aquasec.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UserState extends com.pulumi.resources.ResourceArgs {

    public static final UserState Empty = new UserState();

    /**
     * The user Email.
     * 
     */
    @Import(name="email")
    private @Nullable Output<String> email;

    /**
     * @return The user Email.
     * 
     */
    public Optional<Output<String>> email() {
        return Optional.ofNullable(this.email);
    }

    /**
     * If the user must change the password first login. Applicable only one time, Later for user password resets use aqua console.
     * 
     */
    @Import(name="firstTime")
    private @Nullable Output<Boolean> firstTime;

    /**
     * @return If the user must change the password first login. Applicable only one time, Later for user password resets use aqua console.
     * 
     */
    public Optional<Output<Boolean>> firstTime() {
        return Optional.ofNullable(this.firstTime);
    }

    /**
     * Give the Permission Set full access, meaning all actions are allowed without restriction.
     * 
     */
    @Import(name="isSuper")
    private @Nullable Output<Boolean> isSuper;

    /**
     * @return Give the Permission Set full access, meaning all actions are allowed without restriction.
     * 
     */
    public Optional<Output<Boolean>> isSuper() {
        return Optional.ofNullable(this.isSuper);
    }

    /**
     * The user name.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The user name.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Login password for the user; string, required, at least 8 characters long.
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return Login password for the user; string, required, at least 8 characters long.
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * Password confirmation.
     * 
     */
    @Import(name="passwordConfirm")
    private @Nullable Output<String> passwordConfirm;

    /**
     * @return Password confirmation.
     * 
     */
    public Optional<Output<String>> passwordConfirm() {
        return Optional.ofNullable(this.passwordConfirm);
    }

    /**
     * User&#39;s Aqua plan (Developer / Team / Advanced).
     * 
     */
    @Import(name="plan")
    private @Nullable Output<String> plan;

    /**
     * @return User&#39;s Aqua plan (Developer / Team / Advanced).
     * 
     */
    public Optional<Output<String>> plan() {
        return Optional.ofNullable(this.plan);
    }

    /**
     * The first role that assigned to the user for backward compatibility.
     * 
     */
    @Import(name="role")
    private @Nullable Output<String> role;

    /**
     * @return The first role that assigned to the user for backward compatibility.
     * 
     */
    public Optional<Output<String>> role() {
        return Optional.ofNullable(this.role);
    }

    /**
     * The roles that will be assigned to the user.
     * 
     */
    @Import(name="roles")
    private @Nullable Output<List<String>> roles;

    /**
     * @return The roles that will be assigned to the user.
     * 
     */
    public Optional<Output<List<String>>> roles() {
        return Optional.ofNullable(this.roles);
    }

    /**
     * The user type (Aqua, LDAP, SAML, OAuth2, OpenID, Tenant Manager).
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The user type (Aqua, LDAP, SAML, OAuth2, OpenID, Tenant Manager).
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * Whether to allow UI access for users with this Permission Set.
     * 
     */
    @Import(name="uiAccess")
    private @Nullable Output<Boolean> uiAccess;

    /**
     * @return Whether to allow UI access for users with this Permission Set.
     * 
     */
    public Optional<Output<Boolean>> uiAccess() {
        return Optional.ofNullable(this.uiAccess);
    }

    /**
     * The user ID.
     * 
     */
    @Import(name="userId")
    private @Nullable Output<String> userId;

    /**
     * @return The user ID.
     * 
     */
    public Optional<Output<String>> userId() {
        return Optional.ofNullable(this.userId);
    }

    private UserState() {}

    private UserState(UserState $) {
        this.email = $.email;
        this.firstTime = $.firstTime;
        this.isSuper = $.isSuper;
        this.name = $.name;
        this.password = $.password;
        this.passwordConfirm = $.passwordConfirm;
        this.plan = $.plan;
        this.role = $.role;
        this.roles = $.roles;
        this.type = $.type;
        this.uiAccess = $.uiAccess;
        this.userId = $.userId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UserState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UserState $;

        public Builder() {
            $ = new UserState();
        }

        public Builder(UserState defaults) {
            $ = new UserState(Objects.requireNonNull(defaults));
        }

        /**
         * @param email The user Email.
         * 
         * @return builder
         * 
         */
        public Builder email(@Nullable Output<String> email) {
            $.email = email;
            return this;
        }

        /**
         * @param email The user Email.
         * 
         * @return builder
         * 
         */
        public Builder email(String email) {
            return email(Output.of(email));
        }

        /**
         * @param firstTime If the user must change the password first login. Applicable only one time, Later for user password resets use aqua console.
         * 
         * @return builder
         * 
         */
        public Builder firstTime(@Nullable Output<Boolean> firstTime) {
            $.firstTime = firstTime;
            return this;
        }

        /**
         * @param firstTime If the user must change the password first login. Applicable only one time, Later for user password resets use aqua console.
         * 
         * @return builder
         * 
         */
        public Builder firstTime(Boolean firstTime) {
            return firstTime(Output.of(firstTime));
        }

        /**
         * @param isSuper Give the Permission Set full access, meaning all actions are allowed without restriction.
         * 
         * @return builder
         * 
         */
        public Builder isSuper(@Nullable Output<Boolean> isSuper) {
            $.isSuper = isSuper;
            return this;
        }

        /**
         * @param isSuper Give the Permission Set full access, meaning all actions are allowed without restriction.
         * 
         * @return builder
         * 
         */
        public Builder isSuper(Boolean isSuper) {
            return isSuper(Output.of(isSuper));
        }

        /**
         * @param name The user name.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The user name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param password Login password for the user; string, required, at least 8 characters long.
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password Login password for the user; string, required, at least 8 characters long.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param passwordConfirm Password confirmation.
         * 
         * @return builder
         * 
         */
        public Builder passwordConfirm(@Nullable Output<String> passwordConfirm) {
            $.passwordConfirm = passwordConfirm;
            return this;
        }

        /**
         * @param passwordConfirm Password confirmation.
         * 
         * @return builder
         * 
         */
        public Builder passwordConfirm(String passwordConfirm) {
            return passwordConfirm(Output.of(passwordConfirm));
        }

        /**
         * @param plan User&#39;s Aqua plan (Developer / Team / Advanced).
         * 
         * @return builder
         * 
         */
        public Builder plan(@Nullable Output<String> plan) {
            $.plan = plan;
            return this;
        }

        /**
         * @param plan User&#39;s Aqua plan (Developer / Team / Advanced).
         * 
         * @return builder
         * 
         */
        public Builder plan(String plan) {
            return plan(Output.of(plan));
        }

        /**
         * @param role The first role that assigned to the user for backward compatibility.
         * 
         * @return builder
         * 
         */
        public Builder role(@Nullable Output<String> role) {
            $.role = role;
            return this;
        }

        /**
         * @param role The first role that assigned to the user for backward compatibility.
         * 
         * @return builder
         * 
         */
        public Builder role(String role) {
            return role(Output.of(role));
        }

        /**
         * @param roles The roles that will be assigned to the user.
         * 
         * @return builder
         * 
         */
        public Builder roles(@Nullable Output<List<String>> roles) {
            $.roles = roles;
            return this;
        }

        /**
         * @param roles The roles that will be assigned to the user.
         * 
         * @return builder
         * 
         */
        public Builder roles(List<String> roles) {
            return roles(Output.of(roles));
        }

        /**
         * @param roles The roles that will be assigned to the user.
         * 
         * @return builder
         * 
         */
        public Builder roles(String... roles) {
            return roles(List.of(roles));
        }

        /**
         * @param type The user type (Aqua, LDAP, SAML, OAuth2, OpenID, Tenant Manager).
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The user type (Aqua, LDAP, SAML, OAuth2, OpenID, Tenant Manager).
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param uiAccess Whether to allow UI access for users with this Permission Set.
         * 
         * @return builder
         * 
         */
        public Builder uiAccess(@Nullable Output<Boolean> uiAccess) {
            $.uiAccess = uiAccess;
            return this;
        }

        /**
         * @param uiAccess Whether to allow UI access for users with this Permission Set.
         * 
         * @return builder
         * 
         */
        public Builder uiAccess(Boolean uiAccess) {
            return uiAccess(Output.of(uiAccess));
        }

        /**
         * @param userId The user ID.
         * 
         * @return builder
         * 
         */
        public Builder userId(@Nullable Output<String> userId) {
            $.userId = userId;
            return this;
        }

        /**
         * @param userId The user ID.
         * 
         * @return builder
         * 
         */
        public Builder userId(String userId) {
            return userId(Output.of(userId));
        }

        public UserState build() {
            return $;
        }
    }

}
