// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumiverse.aquasec.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class AcknowledgeIssue {
    /**
     * @return The user who acknowledged the issue.
     * 
     */
    private @Nullable String author;
    /**
     * @return The date and time of the acknowledgment.
     * 
     */
    private @Nullable String date;
    private @Nullable String dockerId;
    /**
     * @return The current dat and time when the expiration was set
     * 
     */
    private @Nullable String expirationConfiguredAt;
    /**
     * @return The user who set the expiration of the issue.
     * 
     */
    private @Nullable String expirationConfiguredBy;
    /**
     * @return Number of days until expiration of the acknowledgement. The value must be integer from 1 to 999, inclusive.
     * 
     */
    private @Nullable Integer expirationDays;
    /**
     * @return The version of the package that having a fix for the issue.
     * 
     */
    private @Nullable String fixVersion;
    /**
     * @return Only acknowledge the issue in the context of the specified image (also requires &#39;registry_name&#39;)
     * 
     */
    private @Nullable String imageName;
    /**
     * @return The name of the security issue (the CVE or security advisory for vulnerabilities, name of malware or type of sensitive data)
     * 
     */
    private String issueName;
    /**
     * @return The type of the security issue (either &#39;vulnerability&#39;, &#39;sensitive_data&#39; or &#39;malware&#39;)
     * 
     */
    private String issueType;
    /**
     * @return When the resource_type is &#39;package&#39;, the operating system is required (e.g., &#39;ubuntu&#39;, &#39;alpine&#39;).
     * 
     */
    private @Nullable String os;
    /**
     * @return When the resource_type is &#39;package&#39;, the operating system version is required.
     * 
     */
    private @Nullable String osVersion;
    /**
     * @return The permissions of the user who acknowledged the issue.
     * 
     */
    private @Nullable String permission;
    /**
     * @return Only acknowledge the issue in the context of the specified repository (also requires &#39;registry_name&#39;).
     * 
     */
    private @Nullable String registryName;
    /**
     * @return The CPE of the resource as listed in the issue by the Aqua API. This is required for resources of type &#39;executable&#39;. For packages and files, the next parameters can be specified instead.
     * 
     */
    private @Nullable String resourceCpe;
    /**
     * @return The format of the resource.
     * 
     */
    private @Nullable String resourceFormat;
    /**
     * @return When the resource_type is &#39;file&#39;, the hash of the file is required
     * 
     */
    private @Nullable String resourceHash;
    /**
     * @return When the resource_type is &#39;package&#39;, the name of the package is required.
     * 
     */
    private @Nullable String resourceName;
    /**
     * @return The path of the resource. This is required for resources of type &#39;file&#39; and &#39;executable&#39;.
     * 
     */
    private @Nullable String resourcePath;
    /**
     * @return The type of the resource where the issue was detected (either &#39;package&#39;, &#39;file&#39; or &#39;executable&#39;)
     * 
     */
    private String resourceType;
    /**
     * @return When the resource_type is &#39;package&#39;, the version of the package is required
     * 
     */
    private @Nullable String resourceVersion;

    private AcknowledgeIssue() {}
    /**
     * @return The user who acknowledged the issue.
     * 
     */
    public Optional<String> author() {
        return Optional.ofNullable(this.author);
    }
    /**
     * @return The date and time of the acknowledgment.
     * 
     */
    public Optional<String> date() {
        return Optional.ofNullable(this.date);
    }
    public Optional<String> dockerId() {
        return Optional.ofNullable(this.dockerId);
    }
    /**
     * @return The current dat and time when the expiration was set
     * 
     */
    public Optional<String> expirationConfiguredAt() {
        return Optional.ofNullable(this.expirationConfiguredAt);
    }
    /**
     * @return The user who set the expiration of the issue.
     * 
     */
    public Optional<String> expirationConfiguredBy() {
        return Optional.ofNullable(this.expirationConfiguredBy);
    }
    /**
     * @return Number of days until expiration of the acknowledgement. The value must be integer from 1 to 999, inclusive.
     * 
     */
    public Optional<Integer> expirationDays() {
        return Optional.ofNullable(this.expirationDays);
    }
    /**
     * @return The version of the package that having a fix for the issue.
     * 
     */
    public Optional<String> fixVersion() {
        return Optional.ofNullable(this.fixVersion);
    }
    /**
     * @return Only acknowledge the issue in the context of the specified image (also requires &#39;registry_name&#39;)
     * 
     */
    public Optional<String> imageName() {
        return Optional.ofNullable(this.imageName);
    }
    /**
     * @return The name of the security issue (the CVE or security advisory for vulnerabilities, name of malware or type of sensitive data)
     * 
     */
    public String issueName() {
        return this.issueName;
    }
    /**
     * @return The type of the security issue (either &#39;vulnerability&#39;, &#39;sensitive_data&#39; or &#39;malware&#39;)
     * 
     */
    public String issueType() {
        return this.issueType;
    }
    /**
     * @return When the resource_type is &#39;package&#39;, the operating system is required (e.g., &#39;ubuntu&#39;, &#39;alpine&#39;).
     * 
     */
    public Optional<String> os() {
        return Optional.ofNullable(this.os);
    }
    /**
     * @return When the resource_type is &#39;package&#39;, the operating system version is required.
     * 
     */
    public Optional<String> osVersion() {
        return Optional.ofNullable(this.osVersion);
    }
    /**
     * @return The permissions of the user who acknowledged the issue.
     * 
     */
    public Optional<String> permission() {
        return Optional.ofNullable(this.permission);
    }
    /**
     * @return Only acknowledge the issue in the context of the specified repository (also requires &#39;registry_name&#39;).
     * 
     */
    public Optional<String> registryName() {
        return Optional.ofNullable(this.registryName);
    }
    /**
     * @return The CPE of the resource as listed in the issue by the Aqua API. This is required for resources of type &#39;executable&#39;. For packages and files, the next parameters can be specified instead.
     * 
     */
    public Optional<String> resourceCpe() {
        return Optional.ofNullable(this.resourceCpe);
    }
    /**
     * @return The format of the resource.
     * 
     */
    public Optional<String> resourceFormat() {
        return Optional.ofNullable(this.resourceFormat);
    }
    /**
     * @return When the resource_type is &#39;file&#39;, the hash of the file is required
     * 
     */
    public Optional<String> resourceHash() {
        return Optional.ofNullable(this.resourceHash);
    }
    /**
     * @return When the resource_type is &#39;package&#39;, the name of the package is required.
     * 
     */
    public Optional<String> resourceName() {
        return Optional.ofNullable(this.resourceName);
    }
    /**
     * @return The path of the resource. This is required for resources of type &#39;file&#39; and &#39;executable&#39;.
     * 
     */
    public Optional<String> resourcePath() {
        return Optional.ofNullable(this.resourcePath);
    }
    /**
     * @return The type of the resource where the issue was detected (either &#39;package&#39;, &#39;file&#39; or &#39;executable&#39;)
     * 
     */
    public String resourceType() {
        return this.resourceType;
    }
    /**
     * @return When the resource_type is &#39;package&#39;, the version of the package is required
     * 
     */
    public Optional<String> resourceVersion() {
        return Optional.ofNullable(this.resourceVersion);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AcknowledgeIssue defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String author;
        private @Nullable String date;
        private @Nullable String dockerId;
        private @Nullable String expirationConfiguredAt;
        private @Nullable String expirationConfiguredBy;
        private @Nullable Integer expirationDays;
        private @Nullable String fixVersion;
        private @Nullable String imageName;
        private String issueName;
        private String issueType;
        private @Nullable String os;
        private @Nullable String osVersion;
        private @Nullable String permission;
        private @Nullable String registryName;
        private @Nullable String resourceCpe;
        private @Nullable String resourceFormat;
        private @Nullable String resourceHash;
        private @Nullable String resourceName;
        private @Nullable String resourcePath;
        private String resourceType;
        private @Nullable String resourceVersion;
        public Builder() {}
        public Builder(AcknowledgeIssue defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.author = defaults.author;
    	      this.date = defaults.date;
    	      this.dockerId = defaults.dockerId;
    	      this.expirationConfiguredAt = defaults.expirationConfiguredAt;
    	      this.expirationConfiguredBy = defaults.expirationConfiguredBy;
    	      this.expirationDays = defaults.expirationDays;
    	      this.fixVersion = defaults.fixVersion;
    	      this.imageName = defaults.imageName;
    	      this.issueName = defaults.issueName;
    	      this.issueType = defaults.issueType;
    	      this.os = defaults.os;
    	      this.osVersion = defaults.osVersion;
    	      this.permission = defaults.permission;
    	      this.registryName = defaults.registryName;
    	      this.resourceCpe = defaults.resourceCpe;
    	      this.resourceFormat = defaults.resourceFormat;
    	      this.resourceHash = defaults.resourceHash;
    	      this.resourceName = defaults.resourceName;
    	      this.resourcePath = defaults.resourcePath;
    	      this.resourceType = defaults.resourceType;
    	      this.resourceVersion = defaults.resourceVersion;
        }

        @CustomType.Setter
        public Builder author(@Nullable String author) {
            this.author = author;
            return this;
        }
        @CustomType.Setter
        public Builder date(@Nullable String date) {
            this.date = date;
            return this;
        }
        @CustomType.Setter
        public Builder dockerId(@Nullable String dockerId) {
            this.dockerId = dockerId;
            return this;
        }
        @CustomType.Setter
        public Builder expirationConfiguredAt(@Nullable String expirationConfiguredAt) {
            this.expirationConfiguredAt = expirationConfiguredAt;
            return this;
        }
        @CustomType.Setter
        public Builder expirationConfiguredBy(@Nullable String expirationConfiguredBy) {
            this.expirationConfiguredBy = expirationConfiguredBy;
            return this;
        }
        @CustomType.Setter
        public Builder expirationDays(@Nullable Integer expirationDays) {
            this.expirationDays = expirationDays;
            return this;
        }
        @CustomType.Setter
        public Builder fixVersion(@Nullable String fixVersion) {
            this.fixVersion = fixVersion;
            return this;
        }
        @CustomType.Setter
        public Builder imageName(@Nullable String imageName) {
            this.imageName = imageName;
            return this;
        }
        @CustomType.Setter
        public Builder issueName(String issueName) {
            this.issueName = Objects.requireNonNull(issueName);
            return this;
        }
        @CustomType.Setter
        public Builder issueType(String issueType) {
            this.issueType = Objects.requireNonNull(issueType);
            return this;
        }
        @CustomType.Setter
        public Builder os(@Nullable String os) {
            this.os = os;
            return this;
        }
        @CustomType.Setter
        public Builder osVersion(@Nullable String osVersion) {
            this.osVersion = osVersion;
            return this;
        }
        @CustomType.Setter
        public Builder permission(@Nullable String permission) {
            this.permission = permission;
            return this;
        }
        @CustomType.Setter
        public Builder registryName(@Nullable String registryName) {
            this.registryName = registryName;
            return this;
        }
        @CustomType.Setter
        public Builder resourceCpe(@Nullable String resourceCpe) {
            this.resourceCpe = resourceCpe;
            return this;
        }
        @CustomType.Setter
        public Builder resourceFormat(@Nullable String resourceFormat) {
            this.resourceFormat = resourceFormat;
            return this;
        }
        @CustomType.Setter
        public Builder resourceHash(@Nullable String resourceHash) {
            this.resourceHash = resourceHash;
            return this;
        }
        @CustomType.Setter
        public Builder resourceName(@Nullable String resourceName) {
            this.resourceName = resourceName;
            return this;
        }
        @CustomType.Setter
        public Builder resourcePath(@Nullable String resourcePath) {
            this.resourcePath = resourcePath;
            return this;
        }
        @CustomType.Setter
        public Builder resourceType(String resourceType) {
            this.resourceType = Objects.requireNonNull(resourceType);
            return this;
        }
        @CustomType.Setter
        public Builder resourceVersion(@Nullable String resourceVersion) {
            this.resourceVersion = resourceVersion;
            return this;
        }
        public AcknowledgeIssue build() {
            final var o = new AcknowledgeIssue();
            o.author = author;
            o.date = date;
            o.dockerId = dockerId;
            o.expirationConfiguredAt = expirationConfiguredAt;
            o.expirationConfiguredBy = expirationConfiguredBy;
            o.expirationDays = expirationDays;
            o.fixVersion = fixVersion;
            o.imageName = imageName;
            o.issueName = issueName;
            o.issueType = issueType;
            o.os = os;
            o.osVersion = osVersion;
            o.permission = permission;
            o.registryName = registryName;
            o.resourceCpe = resourceCpe;
            o.resourceFormat = resourceFormat;
            o.resourceHash = resourceHash;
            o.resourceName = resourceName;
            o.resourcePath = resourcePath;
            o.resourceType = resourceType;
            o.resourceVersion = resourceVersion;
            return o;
        }
    }
}
