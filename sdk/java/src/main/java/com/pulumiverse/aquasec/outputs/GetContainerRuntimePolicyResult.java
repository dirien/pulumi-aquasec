// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumiverse.aquasec.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumiverse.aquasec.outputs.GetContainerRuntimePolicyFileIntegrityMonitoring;
import com.pulumiverse.aquasec.outputs.GetContainerRuntimePolicyMalwareScanOptions;
import com.pulumiverse.aquasec.outputs.GetContainerRuntimePolicyScopeVariable;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetContainerRuntimePolicyResult {
    /**
     * @return List of executables that are allowed for the user.
     * 
     */
    private final List<String> allowedExecutables;
    /**
     * @return List of registries that allowed for running containers.
     * 
     */
    private final List<String> allowedRegistries;
    /**
     * @return Indicates the application scope of the service.
     * 
     */
    private final List<String> applicationScopes;
    /**
     * @return If true, all network activity will be audited.
     * 
     */
    private final Boolean auditAllNetworkActivity;
    /**
     * @return If true, all process activity will be audited.
     * 
     */
    private final Boolean auditAllProcessesActivity;
    /**
     * @return If true, full command arguments will be audited.
     * 
     */
    private final Boolean auditFullCommandArguments;
    /**
     * @return Username of the account that created the service.
     * 
     */
    private final String author;
    /**
     * @return If true, prevent containers from running with access to host network.
     * 
     */
    private final Boolean blockAccessHostNetwork;
    /**
     * @return If true, prevent containers from running with adding capabilities with `--cap-add` privilege.
     * 
     */
    private final Boolean blockAddingCapabilities;
    /**
     * @return If true, exec into a container is prevented.
     * 
     */
    private final Boolean blockContainerExec;
    /**
     * @return Detect and prevent communication to DNS/IP addresses known to be used for Cryptocurrency Mining
     * 
     */
    private final Boolean blockCryptocurrencyMining;
    /**
     * @return Detect and prevent running in-memory execution
     * 
     */
    private final Boolean blockFilelessExec;
    /**
     * @return If true, prevent containers from running with the capability to bind in port lower than 1024.
     * 
     */
    private final Boolean blockLowPortBinding;
    /**
     * @return If true, running non-compliant image in the container is prevented.
     * 
     */
    private final Boolean blockNonCompliantImages;
    /**
     * @return If true, running containers in non-compliant pods is prevented.
     * 
     */
    private final Boolean blockNonCompliantWorkloads;
    /**
     * @return If true, running non-kubernetes containers is prevented.
     * 
     */
    private final Boolean blockNonK8sContainers;
    /**
     * @return If true, prevent containers from running with privileged container capability.
     * 
     */
    private final Boolean blockPrivilegedContainers;
    /**
     * @return If true, reverse shell is prevented.
     * 
     */
    private final Boolean blockReverseShell;
    /**
     * @return If true, prevent containers from running with root user.
     * 
     */
    private final Boolean blockRootUser;
    /**
     * @return If true, running images in the container that are not registered in Aqua is prevented.
     * 
     */
    private final Boolean blockUnregisteredImages;
    /**
     * @return If true, prevent containers from running with the privilege to use the IPC namespace.
     * 
     */
    private final Boolean blockUseIpcNamespace;
    /**
     * @return If true, prevent containers from running with the privilege to use the PID namespace.
     * 
     */
    private final Boolean blockUsePidNamespace;
    /**
     * @return If true, prevent containers from running with the privilege to use the user namespace.
     * 
     */
    private final Boolean blockUseUserNamespace;
    /**
     * @return If true, prevent containers from running with the privilege to use the UTS namespace.
     * 
     */
    private final Boolean blockUseUtsNamespace;
    /**
     * @return If true, prevents containers from using specific Unix capabilities.
     * 
     */
    private final List<String> blockedCapabilities;
    /**
     * @return List of executables that are prevented from running in containers.
     * 
     */
    private final List<String> blockedExecutables;
    /**
     * @return List of files that are prevented from being read, modified and executed in the containers.
     * 
     */
    private final List<String> blockedFiles;
    /**
     * @return List of blocked inbound ports.
     * 
     */
    private final List<String> blockedInboundPorts;
    /**
     * @return List of blocked outbound ports.
     * 
     */
    private final List<String> blockedOutboundPorts;
    /**
     * @return Prevent containers from reading, writing, or executing all files in the list of packages.
     * 
     */
    private final List<String> blockedPackages;
    /**
     * @return List of volumes that are prevented from being mounted in the containers.
     * 
     */
    private final List<String> blockedVolumes;
    /**
     * @return List of processes that will be allowed.
     * 
     */
    private final List<String> containerExecAllowedProcesses;
    /**
     * @return The description of the container runtime policy
     * 
     */
    private final String description;
    /**
     * @return If true, executables that are not in the original image is prevented from running.
     * 
     */
    private final Boolean enableDriftPrevention;
    /**
     * @return If true, fork bombs are prevented in the containers.
     * 
     */
    private final Boolean enableForkGuard;
    /**
     * @return If true, detect and prevent communication from containers to IP addresses known to have a bad reputation.
     * 
     */
    private final Boolean enableIpReputationSecurity;
    /**
     * @return If true, detects port scanning behavior in the container.
     * 
     */
    private final Boolean enablePortScanDetection;
    /**
     * @return Indicates if the runtime policy is enabled or not.
     * 
     */
    private final Boolean enabled;
    /**
     * @return Indicates that policy should effect container execution (not just for audit).
     * 
     */
    private final Boolean enforce;
    /**
     * @return Indicates the number of days after which the runtime policy will be changed to enforce mode.
     * 
     */
    private final Integer enforceAfterDays;
    /**
     * @return List of files and directories to be excluded from the read-only list.
     * 
     */
    private final List<String> exceptionalReadonlyFilesAndDirectories;
    /**
     * @return Configuration for file integrity monitoring.
     * 
     */
    private final List<GetContainerRuntimePolicyFileIntegrityMonitoring> fileIntegrityMonitorings;
    /**
     * @return Process limit for the fork guard.
     * 
     */
    private final Integer forkGuardProcessLimit;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private final String id;
    /**
     * @return If true, prevents the container from obtaining new privileges at runtime. (only enabled in enforce mode)
     * 
     */
    private final Boolean limitNewPrivileges;
    /**
     * @return Configuration for Real-Time Malware Protection.
     * 
     */
    private final @Nullable GetContainerRuntimePolicyMalwareScanOptions malwareScanOptions;
    /**
     * @return If true, system time changes will be monitored.
     * 
     */
    private final Boolean monitorSystemTimeChanges;
    /**
     * @return Name of the container runtime policy
     * 
     */
    private final String name;
    /**
     * @return List of files and directories to be restricted as read-only
     * 
     */
    private final List<String> readonlyFilesAndDirectories;
    /**
     * @return List of IPs/ CIDRs that will be allowed
     * 
     */
    private final List<String> reverseShellAllowedIps;
    /**
     * @return List of processes that will be allowed
     * 
     */
    private final List<String> reverseShellAllowedProcesses;
    /**
     * @return Logical expression of how to compute the dependency of the scope variables.
     * 
     */
    private final String scopeExpression;
    /**
     * @return List of scope attributes.
     * 
     */
    private final List<GetContainerRuntimePolicyScopeVariable> scopeVariables;

    @CustomType.Constructor
    private GetContainerRuntimePolicyResult(
        @CustomType.Parameter("allowedExecutables") List<String> allowedExecutables,
        @CustomType.Parameter("allowedRegistries") List<String> allowedRegistries,
        @CustomType.Parameter("applicationScopes") List<String> applicationScopes,
        @CustomType.Parameter("auditAllNetworkActivity") Boolean auditAllNetworkActivity,
        @CustomType.Parameter("auditAllProcessesActivity") Boolean auditAllProcessesActivity,
        @CustomType.Parameter("auditFullCommandArguments") Boolean auditFullCommandArguments,
        @CustomType.Parameter("author") String author,
        @CustomType.Parameter("blockAccessHostNetwork") Boolean blockAccessHostNetwork,
        @CustomType.Parameter("blockAddingCapabilities") Boolean blockAddingCapabilities,
        @CustomType.Parameter("blockContainerExec") Boolean blockContainerExec,
        @CustomType.Parameter("blockCryptocurrencyMining") Boolean blockCryptocurrencyMining,
        @CustomType.Parameter("blockFilelessExec") Boolean blockFilelessExec,
        @CustomType.Parameter("blockLowPortBinding") Boolean blockLowPortBinding,
        @CustomType.Parameter("blockNonCompliantImages") Boolean blockNonCompliantImages,
        @CustomType.Parameter("blockNonCompliantWorkloads") Boolean blockNonCompliantWorkloads,
        @CustomType.Parameter("blockNonK8sContainers") Boolean blockNonK8sContainers,
        @CustomType.Parameter("blockPrivilegedContainers") Boolean blockPrivilegedContainers,
        @CustomType.Parameter("blockReverseShell") Boolean blockReverseShell,
        @CustomType.Parameter("blockRootUser") Boolean blockRootUser,
        @CustomType.Parameter("blockUnregisteredImages") Boolean blockUnregisteredImages,
        @CustomType.Parameter("blockUseIpcNamespace") Boolean blockUseIpcNamespace,
        @CustomType.Parameter("blockUsePidNamespace") Boolean blockUsePidNamespace,
        @CustomType.Parameter("blockUseUserNamespace") Boolean blockUseUserNamespace,
        @CustomType.Parameter("blockUseUtsNamespace") Boolean blockUseUtsNamespace,
        @CustomType.Parameter("blockedCapabilities") List<String> blockedCapabilities,
        @CustomType.Parameter("blockedExecutables") List<String> blockedExecutables,
        @CustomType.Parameter("blockedFiles") List<String> blockedFiles,
        @CustomType.Parameter("blockedInboundPorts") List<String> blockedInboundPorts,
        @CustomType.Parameter("blockedOutboundPorts") List<String> blockedOutboundPorts,
        @CustomType.Parameter("blockedPackages") List<String> blockedPackages,
        @CustomType.Parameter("blockedVolumes") List<String> blockedVolumes,
        @CustomType.Parameter("containerExecAllowedProcesses") List<String> containerExecAllowedProcesses,
        @CustomType.Parameter("description") String description,
        @CustomType.Parameter("enableDriftPrevention") Boolean enableDriftPrevention,
        @CustomType.Parameter("enableForkGuard") Boolean enableForkGuard,
        @CustomType.Parameter("enableIpReputationSecurity") Boolean enableIpReputationSecurity,
        @CustomType.Parameter("enablePortScanDetection") Boolean enablePortScanDetection,
        @CustomType.Parameter("enabled") Boolean enabled,
        @CustomType.Parameter("enforce") Boolean enforce,
        @CustomType.Parameter("enforceAfterDays") Integer enforceAfterDays,
        @CustomType.Parameter("exceptionalReadonlyFilesAndDirectories") List<String> exceptionalReadonlyFilesAndDirectories,
        @CustomType.Parameter("fileIntegrityMonitorings") List<GetContainerRuntimePolicyFileIntegrityMonitoring> fileIntegrityMonitorings,
        @CustomType.Parameter("forkGuardProcessLimit") Integer forkGuardProcessLimit,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("limitNewPrivileges") Boolean limitNewPrivileges,
        @CustomType.Parameter("malwareScanOptions") @Nullable GetContainerRuntimePolicyMalwareScanOptions malwareScanOptions,
        @CustomType.Parameter("monitorSystemTimeChanges") Boolean monitorSystemTimeChanges,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("readonlyFilesAndDirectories") List<String> readonlyFilesAndDirectories,
        @CustomType.Parameter("reverseShellAllowedIps") List<String> reverseShellAllowedIps,
        @CustomType.Parameter("reverseShellAllowedProcesses") List<String> reverseShellAllowedProcesses,
        @CustomType.Parameter("scopeExpression") String scopeExpression,
        @CustomType.Parameter("scopeVariables") List<GetContainerRuntimePolicyScopeVariable> scopeVariables) {
        this.allowedExecutables = allowedExecutables;
        this.allowedRegistries = allowedRegistries;
        this.applicationScopes = applicationScopes;
        this.auditAllNetworkActivity = auditAllNetworkActivity;
        this.auditAllProcessesActivity = auditAllProcessesActivity;
        this.auditFullCommandArguments = auditFullCommandArguments;
        this.author = author;
        this.blockAccessHostNetwork = blockAccessHostNetwork;
        this.blockAddingCapabilities = blockAddingCapabilities;
        this.blockContainerExec = blockContainerExec;
        this.blockCryptocurrencyMining = blockCryptocurrencyMining;
        this.blockFilelessExec = blockFilelessExec;
        this.blockLowPortBinding = blockLowPortBinding;
        this.blockNonCompliantImages = blockNonCompliantImages;
        this.blockNonCompliantWorkloads = blockNonCompliantWorkloads;
        this.blockNonK8sContainers = blockNonK8sContainers;
        this.blockPrivilegedContainers = blockPrivilegedContainers;
        this.blockReverseShell = blockReverseShell;
        this.blockRootUser = blockRootUser;
        this.blockUnregisteredImages = blockUnregisteredImages;
        this.blockUseIpcNamespace = blockUseIpcNamespace;
        this.blockUsePidNamespace = blockUsePidNamespace;
        this.blockUseUserNamespace = blockUseUserNamespace;
        this.blockUseUtsNamespace = blockUseUtsNamespace;
        this.blockedCapabilities = blockedCapabilities;
        this.blockedExecutables = blockedExecutables;
        this.blockedFiles = blockedFiles;
        this.blockedInboundPorts = blockedInboundPorts;
        this.blockedOutboundPorts = blockedOutboundPorts;
        this.blockedPackages = blockedPackages;
        this.blockedVolumes = blockedVolumes;
        this.containerExecAllowedProcesses = containerExecAllowedProcesses;
        this.description = description;
        this.enableDriftPrevention = enableDriftPrevention;
        this.enableForkGuard = enableForkGuard;
        this.enableIpReputationSecurity = enableIpReputationSecurity;
        this.enablePortScanDetection = enablePortScanDetection;
        this.enabled = enabled;
        this.enforce = enforce;
        this.enforceAfterDays = enforceAfterDays;
        this.exceptionalReadonlyFilesAndDirectories = exceptionalReadonlyFilesAndDirectories;
        this.fileIntegrityMonitorings = fileIntegrityMonitorings;
        this.forkGuardProcessLimit = forkGuardProcessLimit;
        this.id = id;
        this.limitNewPrivileges = limitNewPrivileges;
        this.malwareScanOptions = malwareScanOptions;
        this.monitorSystemTimeChanges = monitorSystemTimeChanges;
        this.name = name;
        this.readonlyFilesAndDirectories = readonlyFilesAndDirectories;
        this.reverseShellAllowedIps = reverseShellAllowedIps;
        this.reverseShellAllowedProcesses = reverseShellAllowedProcesses;
        this.scopeExpression = scopeExpression;
        this.scopeVariables = scopeVariables;
    }

    /**
     * @return List of executables that are allowed for the user.
     * 
     */
    public List<String> allowedExecutables() {
        return this.allowedExecutables;
    }
    /**
     * @return List of registries that allowed for running containers.
     * 
     */
    public List<String> allowedRegistries() {
        return this.allowedRegistries;
    }
    /**
     * @return Indicates the application scope of the service.
     * 
     */
    public List<String> applicationScopes() {
        return this.applicationScopes;
    }
    /**
     * @return If true, all network activity will be audited.
     * 
     */
    public Boolean auditAllNetworkActivity() {
        return this.auditAllNetworkActivity;
    }
    /**
     * @return If true, all process activity will be audited.
     * 
     */
    public Boolean auditAllProcessesActivity() {
        return this.auditAllProcessesActivity;
    }
    /**
     * @return If true, full command arguments will be audited.
     * 
     */
    public Boolean auditFullCommandArguments() {
        return this.auditFullCommandArguments;
    }
    /**
     * @return Username of the account that created the service.
     * 
     */
    public String author() {
        return this.author;
    }
    /**
     * @return If true, prevent containers from running with access to host network.
     * 
     */
    public Boolean blockAccessHostNetwork() {
        return this.blockAccessHostNetwork;
    }
    /**
     * @return If true, prevent containers from running with adding capabilities with `--cap-add` privilege.
     * 
     */
    public Boolean blockAddingCapabilities() {
        return this.blockAddingCapabilities;
    }
    /**
     * @return If true, exec into a container is prevented.
     * 
     */
    public Boolean blockContainerExec() {
        return this.blockContainerExec;
    }
    /**
     * @return Detect and prevent communication to DNS/IP addresses known to be used for Cryptocurrency Mining
     * 
     */
    public Boolean blockCryptocurrencyMining() {
        return this.blockCryptocurrencyMining;
    }
    /**
     * @return Detect and prevent running in-memory execution
     * 
     */
    public Boolean blockFilelessExec() {
        return this.blockFilelessExec;
    }
    /**
     * @return If true, prevent containers from running with the capability to bind in port lower than 1024.
     * 
     */
    public Boolean blockLowPortBinding() {
        return this.blockLowPortBinding;
    }
    /**
     * @return If true, running non-compliant image in the container is prevented.
     * 
     */
    public Boolean blockNonCompliantImages() {
        return this.blockNonCompliantImages;
    }
    /**
     * @return If true, running containers in non-compliant pods is prevented.
     * 
     */
    public Boolean blockNonCompliantWorkloads() {
        return this.blockNonCompliantWorkloads;
    }
    /**
     * @return If true, running non-kubernetes containers is prevented.
     * 
     */
    public Boolean blockNonK8sContainers() {
        return this.blockNonK8sContainers;
    }
    /**
     * @return If true, prevent containers from running with privileged container capability.
     * 
     */
    public Boolean blockPrivilegedContainers() {
        return this.blockPrivilegedContainers;
    }
    /**
     * @return If true, reverse shell is prevented.
     * 
     */
    public Boolean blockReverseShell() {
        return this.blockReverseShell;
    }
    /**
     * @return If true, prevent containers from running with root user.
     * 
     */
    public Boolean blockRootUser() {
        return this.blockRootUser;
    }
    /**
     * @return If true, running images in the container that are not registered in Aqua is prevented.
     * 
     */
    public Boolean blockUnregisteredImages() {
        return this.blockUnregisteredImages;
    }
    /**
     * @return If true, prevent containers from running with the privilege to use the IPC namespace.
     * 
     */
    public Boolean blockUseIpcNamespace() {
        return this.blockUseIpcNamespace;
    }
    /**
     * @return If true, prevent containers from running with the privilege to use the PID namespace.
     * 
     */
    public Boolean blockUsePidNamespace() {
        return this.blockUsePidNamespace;
    }
    /**
     * @return If true, prevent containers from running with the privilege to use the user namespace.
     * 
     */
    public Boolean blockUseUserNamespace() {
        return this.blockUseUserNamespace;
    }
    /**
     * @return If true, prevent containers from running with the privilege to use the UTS namespace.
     * 
     */
    public Boolean blockUseUtsNamespace() {
        return this.blockUseUtsNamespace;
    }
    /**
     * @return If true, prevents containers from using specific Unix capabilities.
     * 
     */
    public List<String> blockedCapabilities() {
        return this.blockedCapabilities;
    }
    /**
     * @return List of executables that are prevented from running in containers.
     * 
     */
    public List<String> blockedExecutables() {
        return this.blockedExecutables;
    }
    /**
     * @return List of files that are prevented from being read, modified and executed in the containers.
     * 
     */
    public List<String> blockedFiles() {
        return this.blockedFiles;
    }
    /**
     * @return List of blocked inbound ports.
     * 
     */
    public List<String> blockedInboundPorts() {
        return this.blockedInboundPorts;
    }
    /**
     * @return List of blocked outbound ports.
     * 
     */
    public List<String> blockedOutboundPorts() {
        return this.blockedOutboundPorts;
    }
    /**
     * @return Prevent containers from reading, writing, or executing all files in the list of packages.
     * 
     */
    public List<String> blockedPackages() {
        return this.blockedPackages;
    }
    /**
     * @return List of volumes that are prevented from being mounted in the containers.
     * 
     */
    public List<String> blockedVolumes() {
        return this.blockedVolumes;
    }
    /**
     * @return List of processes that will be allowed.
     * 
     */
    public List<String> containerExecAllowedProcesses() {
        return this.containerExecAllowedProcesses;
    }
    /**
     * @return The description of the container runtime policy
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return If true, executables that are not in the original image is prevented from running.
     * 
     */
    public Boolean enableDriftPrevention() {
        return this.enableDriftPrevention;
    }
    /**
     * @return If true, fork bombs are prevented in the containers.
     * 
     */
    public Boolean enableForkGuard() {
        return this.enableForkGuard;
    }
    /**
     * @return If true, detect and prevent communication from containers to IP addresses known to have a bad reputation.
     * 
     */
    public Boolean enableIpReputationSecurity() {
        return this.enableIpReputationSecurity;
    }
    /**
     * @return If true, detects port scanning behavior in the container.
     * 
     */
    public Boolean enablePortScanDetection() {
        return this.enablePortScanDetection;
    }
    /**
     * @return Indicates if the runtime policy is enabled or not.
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }
    /**
     * @return Indicates that policy should effect container execution (not just for audit).
     * 
     */
    public Boolean enforce() {
        return this.enforce;
    }
    /**
     * @return Indicates the number of days after which the runtime policy will be changed to enforce mode.
     * 
     */
    public Integer enforceAfterDays() {
        return this.enforceAfterDays;
    }
    /**
     * @return List of files and directories to be excluded from the read-only list.
     * 
     */
    public List<String> exceptionalReadonlyFilesAndDirectories() {
        return this.exceptionalReadonlyFilesAndDirectories;
    }
    /**
     * @return Configuration for file integrity monitoring.
     * 
     */
    public List<GetContainerRuntimePolicyFileIntegrityMonitoring> fileIntegrityMonitorings() {
        return this.fileIntegrityMonitorings;
    }
    /**
     * @return Process limit for the fork guard.
     * 
     */
    public Integer forkGuardProcessLimit() {
        return this.forkGuardProcessLimit;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return If true, prevents the container from obtaining new privileges at runtime. (only enabled in enforce mode)
     * 
     */
    public Boolean limitNewPrivileges() {
        return this.limitNewPrivileges;
    }
    /**
     * @return Configuration for Real-Time Malware Protection.
     * 
     */
    public Optional<GetContainerRuntimePolicyMalwareScanOptions> malwareScanOptions() {
        return Optional.ofNullable(this.malwareScanOptions);
    }
    /**
     * @return If true, system time changes will be monitored.
     * 
     */
    public Boolean monitorSystemTimeChanges() {
        return this.monitorSystemTimeChanges;
    }
    /**
     * @return Name of the container runtime policy
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return List of files and directories to be restricted as read-only
     * 
     */
    public List<String> readonlyFilesAndDirectories() {
        return this.readonlyFilesAndDirectories;
    }
    /**
     * @return List of IPs/ CIDRs that will be allowed
     * 
     */
    public List<String> reverseShellAllowedIps() {
        return this.reverseShellAllowedIps;
    }
    /**
     * @return List of processes that will be allowed
     * 
     */
    public List<String> reverseShellAllowedProcesses() {
        return this.reverseShellAllowedProcesses;
    }
    /**
     * @return Logical expression of how to compute the dependency of the scope variables.
     * 
     */
    public String scopeExpression() {
        return this.scopeExpression;
    }
    /**
     * @return List of scope attributes.
     * 
     */
    public List<GetContainerRuntimePolicyScopeVariable> scopeVariables() {
        return this.scopeVariables;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetContainerRuntimePolicyResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<String> allowedExecutables;
        private List<String> allowedRegistries;
        private List<String> applicationScopes;
        private Boolean auditAllNetworkActivity;
        private Boolean auditAllProcessesActivity;
        private Boolean auditFullCommandArguments;
        private String author;
        private Boolean blockAccessHostNetwork;
        private Boolean blockAddingCapabilities;
        private Boolean blockContainerExec;
        private Boolean blockCryptocurrencyMining;
        private Boolean blockFilelessExec;
        private Boolean blockLowPortBinding;
        private Boolean blockNonCompliantImages;
        private Boolean blockNonCompliantWorkloads;
        private Boolean blockNonK8sContainers;
        private Boolean blockPrivilegedContainers;
        private Boolean blockReverseShell;
        private Boolean blockRootUser;
        private Boolean blockUnregisteredImages;
        private Boolean blockUseIpcNamespace;
        private Boolean blockUsePidNamespace;
        private Boolean blockUseUserNamespace;
        private Boolean blockUseUtsNamespace;
        private List<String> blockedCapabilities;
        private List<String> blockedExecutables;
        private List<String> blockedFiles;
        private List<String> blockedInboundPorts;
        private List<String> blockedOutboundPorts;
        private List<String> blockedPackages;
        private List<String> blockedVolumes;
        private List<String> containerExecAllowedProcesses;
        private String description;
        private Boolean enableDriftPrevention;
        private Boolean enableForkGuard;
        private Boolean enableIpReputationSecurity;
        private Boolean enablePortScanDetection;
        private Boolean enabled;
        private Boolean enforce;
        private Integer enforceAfterDays;
        private List<String> exceptionalReadonlyFilesAndDirectories;
        private List<GetContainerRuntimePolicyFileIntegrityMonitoring> fileIntegrityMonitorings;
        private Integer forkGuardProcessLimit;
        private String id;
        private Boolean limitNewPrivileges;
        private @Nullable GetContainerRuntimePolicyMalwareScanOptions malwareScanOptions;
        private Boolean monitorSystemTimeChanges;
        private String name;
        private List<String> readonlyFilesAndDirectories;
        private List<String> reverseShellAllowedIps;
        private List<String> reverseShellAllowedProcesses;
        private String scopeExpression;
        private List<GetContainerRuntimePolicyScopeVariable> scopeVariables;

        public Builder() {
    	      // Empty
        }

        public Builder(GetContainerRuntimePolicyResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowedExecutables = defaults.allowedExecutables;
    	      this.allowedRegistries = defaults.allowedRegistries;
    	      this.applicationScopes = defaults.applicationScopes;
    	      this.auditAllNetworkActivity = defaults.auditAllNetworkActivity;
    	      this.auditAllProcessesActivity = defaults.auditAllProcessesActivity;
    	      this.auditFullCommandArguments = defaults.auditFullCommandArguments;
    	      this.author = defaults.author;
    	      this.blockAccessHostNetwork = defaults.blockAccessHostNetwork;
    	      this.blockAddingCapabilities = defaults.blockAddingCapabilities;
    	      this.blockContainerExec = defaults.blockContainerExec;
    	      this.blockCryptocurrencyMining = defaults.blockCryptocurrencyMining;
    	      this.blockFilelessExec = defaults.blockFilelessExec;
    	      this.blockLowPortBinding = defaults.blockLowPortBinding;
    	      this.blockNonCompliantImages = defaults.blockNonCompliantImages;
    	      this.blockNonCompliantWorkloads = defaults.blockNonCompliantWorkloads;
    	      this.blockNonK8sContainers = defaults.blockNonK8sContainers;
    	      this.blockPrivilegedContainers = defaults.blockPrivilegedContainers;
    	      this.blockReverseShell = defaults.blockReverseShell;
    	      this.blockRootUser = defaults.blockRootUser;
    	      this.blockUnregisteredImages = defaults.blockUnregisteredImages;
    	      this.blockUseIpcNamespace = defaults.blockUseIpcNamespace;
    	      this.blockUsePidNamespace = defaults.blockUsePidNamespace;
    	      this.blockUseUserNamespace = defaults.blockUseUserNamespace;
    	      this.blockUseUtsNamespace = defaults.blockUseUtsNamespace;
    	      this.blockedCapabilities = defaults.blockedCapabilities;
    	      this.blockedExecutables = defaults.blockedExecutables;
    	      this.blockedFiles = defaults.blockedFiles;
    	      this.blockedInboundPorts = defaults.blockedInboundPorts;
    	      this.blockedOutboundPorts = defaults.blockedOutboundPorts;
    	      this.blockedPackages = defaults.blockedPackages;
    	      this.blockedVolumes = defaults.blockedVolumes;
    	      this.containerExecAllowedProcesses = defaults.containerExecAllowedProcesses;
    	      this.description = defaults.description;
    	      this.enableDriftPrevention = defaults.enableDriftPrevention;
    	      this.enableForkGuard = defaults.enableForkGuard;
    	      this.enableIpReputationSecurity = defaults.enableIpReputationSecurity;
    	      this.enablePortScanDetection = defaults.enablePortScanDetection;
    	      this.enabled = defaults.enabled;
    	      this.enforce = defaults.enforce;
    	      this.enforceAfterDays = defaults.enforceAfterDays;
    	      this.exceptionalReadonlyFilesAndDirectories = defaults.exceptionalReadonlyFilesAndDirectories;
    	      this.fileIntegrityMonitorings = defaults.fileIntegrityMonitorings;
    	      this.forkGuardProcessLimit = defaults.forkGuardProcessLimit;
    	      this.id = defaults.id;
    	      this.limitNewPrivileges = defaults.limitNewPrivileges;
    	      this.malwareScanOptions = defaults.malwareScanOptions;
    	      this.monitorSystemTimeChanges = defaults.monitorSystemTimeChanges;
    	      this.name = defaults.name;
    	      this.readonlyFilesAndDirectories = defaults.readonlyFilesAndDirectories;
    	      this.reverseShellAllowedIps = defaults.reverseShellAllowedIps;
    	      this.reverseShellAllowedProcesses = defaults.reverseShellAllowedProcesses;
    	      this.scopeExpression = defaults.scopeExpression;
    	      this.scopeVariables = defaults.scopeVariables;
        }

        public Builder allowedExecutables(List<String> allowedExecutables) {
            this.allowedExecutables = Objects.requireNonNull(allowedExecutables);
            return this;
        }
        public Builder allowedExecutables(String... allowedExecutables) {
            return allowedExecutables(List.of(allowedExecutables));
        }
        public Builder allowedRegistries(List<String> allowedRegistries) {
            this.allowedRegistries = Objects.requireNonNull(allowedRegistries);
            return this;
        }
        public Builder allowedRegistries(String... allowedRegistries) {
            return allowedRegistries(List.of(allowedRegistries));
        }
        public Builder applicationScopes(List<String> applicationScopes) {
            this.applicationScopes = Objects.requireNonNull(applicationScopes);
            return this;
        }
        public Builder applicationScopes(String... applicationScopes) {
            return applicationScopes(List.of(applicationScopes));
        }
        public Builder auditAllNetworkActivity(Boolean auditAllNetworkActivity) {
            this.auditAllNetworkActivity = Objects.requireNonNull(auditAllNetworkActivity);
            return this;
        }
        public Builder auditAllProcessesActivity(Boolean auditAllProcessesActivity) {
            this.auditAllProcessesActivity = Objects.requireNonNull(auditAllProcessesActivity);
            return this;
        }
        public Builder auditFullCommandArguments(Boolean auditFullCommandArguments) {
            this.auditFullCommandArguments = Objects.requireNonNull(auditFullCommandArguments);
            return this;
        }
        public Builder author(String author) {
            this.author = Objects.requireNonNull(author);
            return this;
        }
        public Builder blockAccessHostNetwork(Boolean blockAccessHostNetwork) {
            this.blockAccessHostNetwork = Objects.requireNonNull(blockAccessHostNetwork);
            return this;
        }
        public Builder blockAddingCapabilities(Boolean blockAddingCapabilities) {
            this.blockAddingCapabilities = Objects.requireNonNull(blockAddingCapabilities);
            return this;
        }
        public Builder blockContainerExec(Boolean blockContainerExec) {
            this.blockContainerExec = Objects.requireNonNull(blockContainerExec);
            return this;
        }
        public Builder blockCryptocurrencyMining(Boolean blockCryptocurrencyMining) {
            this.blockCryptocurrencyMining = Objects.requireNonNull(blockCryptocurrencyMining);
            return this;
        }
        public Builder blockFilelessExec(Boolean blockFilelessExec) {
            this.blockFilelessExec = Objects.requireNonNull(blockFilelessExec);
            return this;
        }
        public Builder blockLowPortBinding(Boolean blockLowPortBinding) {
            this.blockLowPortBinding = Objects.requireNonNull(blockLowPortBinding);
            return this;
        }
        public Builder blockNonCompliantImages(Boolean blockNonCompliantImages) {
            this.blockNonCompliantImages = Objects.requireNonNull(blockNonCompliantImages);
            return this;
        }
        public Builder blockNonCompliantWorkloads(Boolean blockNonCompliantWorkloads) {
            this.blockNonCompliantWorkloads = Objects.requireNonNull(blockNonCompliantWorkloads);
            return this;
        }
        public Builder blockNonK8sContainers(Boolean blockNonK8sContainers) {
            this.blockNonK8sContainers = Objects.requireNonNull(blockNonK8sContainers);
            return this;
        }
        public Builder blockPrivilegedContainers(Boolean blockPrivilegedContainers) {
            this.blockPrivilegedContainers = Objects.requireNonNull(blockPrivilegedContainers);
            return this;
        }
        public Builder blockReverseShell(Boolean blockReverseShell) {
            this.blockReverseShell = Objects.requireNonNull(blockReverseShell);
            return this;
        }
        public Builder blockRootUser(Boolean blockRootUser) {
            this.blockRootUser = Objects.requireNonNull(blockRootUser);
            return this;
        }
        public Builder blockUnregisteredImages(Boolean blockUnregisteredImages) {
            this.blockUnregisteredImages = Objects.requireNonNull(blockUnregisteredImages);
            return this;
        }
        public Builder blockUseIpcNamespace(Boolean blockUseIpcNamespace) {
            this.blockUseIpcNamespace = Objects.requireNonNull(blockUseIpcNamespace);
            return this;
        }
        public Builder blockUsePidNamespace(Boolean blockUsePidNamespace) {
            this.blockUsePidNamespace = Objects.requireNonNull(blockUsePidNamespace);
            return this;
        }
        public Builder blockUseUserNamespace(Boolean blockUseUserNamespace) {
            this.blockUseUserNamespace = Objects.requireNonNull(blockUseUserNamespace);
            return this;
        }
        public Builder blockUseUtsNamespace(Boolean blockUseUtsNamespace) {
            this.blockUseUtsNamespace = Objects.requireNonNull(blockUseUtsNamespace);
            return this;
        }
        public Builder blockedCapabilities(List<String> blockedCapabilities) {
            this.blockedCapabilities = Objects.requireNonNull(blockedCapabilities);
            return this;
        }
        public Builder blockedCapabilities(String... blockedCapabilities) {
            return blockedCapabilities(List.of(blockedCapabilities));
        }
        public Builder blockedExecutables(List<String> blockedExecutables) {
            this.blockedExecutables = Objects.requireNonNull(blockedExecutables);
            return this;
        }
        public Builder blockedExecutables(String... blockedExecutables) {
            return blockedExecutables(List.of(blockedExecutables));
        }
        public Builder blockedFiles(List<String> blockedFiles) {
            this.blockedFiles = Objects.requireNonNull(blockedFiles);
            return this;
        }
        public Builder blockedFiles(String... blockedFiles) {
            return blockedFiles(List.of(blockedFiles));
        }
        public Builder blockedInboundPorts(List<String> blockedInboundPorts) {
            this.blockedInboundPorts = Objects.requireNonNull(blockedInboundPorts);
            return this;
        }
        public Builder blockedInboundPorts(String... blockedInboundPorts) {
            return blockedInboundPorts(List.of(blockedInboundPorts));
        }
        public Builder blockedOutboundPorts(List<String> blockedOutboundPorts) {
            this.blockedOutboundPorts = Objects.requireNonNull(blockedOutboundPorts);
            return this;
        }
        public Builder blockedOutboundPorts(String... blockedOutboundPorts) {
            return blockedOutboundPorts(List.of(blockedOutboundPorts));
        }
        public Builder blockedPackages(List<String> blockedPackages) {
            this.blockedPackages = Objects.requireNonNull(blockedPackages);
            return this;
        }
        public Builder blockedPackages(String... blockedPackages) {
            return blockedPackages(List.of(blockedPackages));
        }
        public Builder blockedVolumes(List<String> blockedVolumes) {
            this.blockedVolumes = Objects.requireNonNull(blockedVolumes);
            return this;
        }
        public Builder blockedVolumes(String... blockedVolumes) {
            return blockedVolumes(List.of(blockedVolumes));
        }
        public Builder containerExecAllowedProcesses(List<String> containerExecAllowedProcesses) {
            this.containerExecAllowedProcesses = Objects.requireNonNull(containerExecAllowedProcesses);
            return this;
        }
        public Builder containerExecAllowedProcesses(String... containerExecAllowedProcesses) {
            return containerExecAllowedProcesses(List.of(containerExecAllowedProcesses));
        }
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        public Builder enableDriftPrevention(Boolean enableDriftPrevention) {
            this.enableDriftPrevention = Objects.requireNonNull(enableDriftPrevention);
            return this;
        }
        public Builder enableForkGuard(Boolean enableForkGuard) {
            this.enableForkGuard = Objects.requireNonNull(enableForkGuard);
            return this;
        }
        public Builder enableIpReputationSecurity(Boolean enableIpReputationSecurity) {
            this.enableIpReputationSecurity = Objects.requireNonNull(enableIpReputationSecurity);
            return this;
        }
        public Builder enablePortScanDetection(Boolean enablePortScanDetection) {
            this.enablePortScanDetection = Objects.requireNonNull(enablePortScanDetection);
            return this;
        }
        public Builder enabled(Boolean enabled) {
            this.enabled = Objects.requireNonNull(enabled);
            return this;
        }
        public Builder enforce(Boolean enforce) {
            this.enforce = Objects.requireNonNull(enforce);
            return this;
        }
        public Builder enforceAfterDays(Integer enforceAfterDays) {
            this.enforceAfterDays = Objects.requireNonNull(enforceAfterDays);
            return this;
        }
        public Builder exceptionalReadonlyFilesAndDirectories(List<String> exceptionalReadonlyFilesAndDirectories) {
            this.exceptionalReadonlyFilesAndDirectories = Objects.requireNonNull(exceptionalReadonlyFilesAndDirectories);
            return this;
        }
        public Builder exceptionalReadonlyFilesAndDirectories(String... exceptionalReadonlyFilesAndDirectories) {
            return exceptionalReadonlyFilesAndDirectories(List.of(exceptionalReadonlyFilesAndDirectories));
        }
        public Builder fileIntegrityMonitorings(List<GetContainerRuntimePolicyFileIntegrityMonitoring> fileIntegrityMonitorings) {
            this.fileIntegrityMonitorings = Objects.requireNonNull(fileIntegrityMonitorings);
            return this;
        }
        public Builder fileIntegrityMonitorings(GetContainerRuntimePolicyFileIntegrityMonitoring... fileIntegrityMonitorings) {
            return fileIntegrityMonitorings(List.of(fileIntegrityMonitorings));
        }
        public Builder forkGuardProcessLimit(Integer forkGuardProcessLimit) {
            this.forkGuardProcessLimit = Objects.requireNonNull(forkGuardProcessLimit);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder limitNewPrivileges(Boolean limitNewPrivileges) {
            this.limitNewPrivileges = Objects.requireNonNull(limitNewPrivileges);
            return this;
        }
        public Builder malwareScanOptions(@Nullable GetContainerRuntimePolicyMalwareScanOptions malwareScanOptions) {
            this.malwareScanOptions = malwareScanOptions;
            return this;
        }
        public Builder monitorSystemTimeChanges(Boolean monitorSystemTimeChanges) {
            this.monitorSystemTimeChanges = Objects.requireNonNull(monitorSystemTimeChanges);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder readonlyFilesAndDirectories(List<String> readonlyFilesAndDirectories) {
            this.readonlyFilesAndDirectories = Objects.requireNonNull(readonlyFilesAndDirectories);
            return this;
        }
        public Builder readonlyFilesAndDirectories(String... readonlyFilesAndDirectories) {
            return readonlyFilesAndDirectories(List.of(readonlyFilesAndDirectories));
        }
        public Builder reverseShellAllowedIps(List<String> reverseShellAllowedIps) {
            this.reverseShellAllowedIps = Objects.requireNonNull(reverseShellAllowedIps);
            return this;
        }
        public Builder reverseShellAllowedIps(String... reverseShellAllowedIps) {
            return reverseShellAllowedIps(List.of(reverseShellAllowedIps));
        }
        public Builder reverseShellAllowedProcesses(List<String> reverseShellAllowedProcesses) {
            this.reverseShellAllowedProcesses = Objects.requireNonNull(reverseShellAllowedProcesses);
            return this;
        }
        public Builder reverseShellAllowedProcesses(String... reverseShellAllowedProcesses) {
            return reverseShellAllowedProcesses(List.of(reverseShellAllowedProcesses));
        }
        public Builder scopeExpression(String scopeExpression) {
            this.scopeExpression = Objects.requireNonNull(scopeExpression);
            return this;
        }
        public Builder scopeVariables(List<GetContainerRuntimePolicyScopeVariable> scopeVariables) {
            this.scopeVariables = Objects.requireNonNull(scopeVariables);
            return this;
        }
        public Builder scopeVariables(GetContainerRuntimePolicyScopeVariable... scopeVariables) {
            return scopeVariables(List.of(scopeVariables));
        }        public GetContainerRuntimePolicyResult build() {
            return new GetContainerRuntimePolicyResult(allowedExecutables, allowedRegistries, applicationScopes, auditAllNetworkActivity, auditAllProcessesActivity, auditFullCommandArguments, author, blockAccessHostNetwork, blockAddingCapabilities, blockContainerExec, blockCryptocurrencyMining, blockFilelessExec, blockLowPortBinding, blockNonCompliantImages, blockNonCompliantWorkloads, blockNonK8sContainers, blockPrivilegedContainers, blockReverseShell, blockRootUser, blockUnregisteredImages, blockUseIpcNamespace, blockUsePidNamespace, blockUseUserNamespace, blockUseUtsNamespace, blockedCapabilities, blockedExecutables, blockedFiles, blockedInboundPorts, blockedOutboundPorts, blockedPackages, blockedVolumes, containerExecAllowedProcesses, description, enableDriftPrevention, enableForkGuard, enableIpReputationSecurity, enablePortScanDetection, enabled, enforce, enforceAfterDays, exceptionalReadonlyFilesAndDirectories, fileIntegrityMonitorings, forkGuardProcessLimit, id, limitNewPrivileges, malwareScanOptions, monitorSystemTimeChanges, name, readonlyFilesAndDirectories, reverseShellAllowedIps, reverseShellAllowedProcesses, scopeExpression, scopeVariables);
        }
    }
}
