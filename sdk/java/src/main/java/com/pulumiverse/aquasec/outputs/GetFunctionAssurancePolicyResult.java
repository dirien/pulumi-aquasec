// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumiverse.aquasec.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumiverse.aquasec.outputs.GetFunctionAssurancePolicyAutoScanTime;
import com.pulumiverse.aquasec.outputs.GetFunctionAssurancePolicyCustomCheck;
import com.pulumiverse.aquasec.outputs.GetFunctionAssurancePolicyForbiddenLabel;
import com.pulumiverse.aquasec.outputs.GetFunctionAssurancePolicyPackagesBlackList;
import com.pulumiverse.aquasec.outputs.GetFunctionAssurancePolicyPackagesWhiteList;
import com.pulumiverse.aquasec.outputs.GetFunctionAssurancePolicyRequiredLabel;
import com.pulumiverse.aquasec.outputs.GetFunctionAssurancePolicyScope;
import com.pulumiverse.aquasec.outputs.GetFunctionAssurancePolicyTrustedBaseImage;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetFunctionAssurancePolicyResult {
    /**
     * @return List of explicitly allowed images.
     * 
     */
    private List<String> allowedImages;
    private List<String> applicationScopes;
    /**
     * @return Indicates if auditing for failures.
     * 
     */
    private Boolean auditOnFailure;
    /**
     * @return Name of user account that created the policy.
     * 
     */
    private String author;
    private Boolean autoScanConfigured;
    private Boolean autoScanEnabled;
    private List<GetFunctionAssurancePolicyAutoScanTime> autoScanTimes;
    /**
     * @return List of function&#39;s forbidden permissions.
     * 
     */
    private List<String> blacklistPermissions;
    /**
     * @return Indicates if blacklist permissions is relevant.
     * 
     */
    private Boolean blacklistPermissionsEnabled;
    /**
     * @return List of blacklisted licenses.
     * 
     */
    private List<String> blacklistedLicenses;
    /**
     * @return Lndicates if license blacklist is relevant.
     * 
     */
    private Boolean blacklistedLicensesEnabled;
    /**
     * @return Indicates if failed images are blocked.
     * 
     */
    private Boolean blockFailed;
    private Boolean controlExcludeNoFix;
    /**
     * @return List of Custom user scripts for checks.
     * 
     */
    private List<GetFunctionAssurancePolicyCustomCheck> customChecks;
    /**
     * @return Indicates if scanning should include custom checks.
     * 
     */
    private Boolean customChecksEnabled;
    private Boolean customSeverityEnabled;
    /**
     * @return Indicates if cves blacklist is relevant.
     * 
     */
    private Boolean cvesBlackListEnabled;
    /**
     * @return List of cves blacklisted items.
     * 
     */
    private List<String> cvesBlackLists;
    /**
     * @return Indicates if cves whitelist is relevant.
     * 
     */
    private Boolean cvesWhiteListEnabled;
    /**
     * @return List of cves whitelisted licenses
     * 
     */
    private List<String> cvesWhiteLists;
    /**
     * @return Identifier of the cvss severity.
     * 
     */
    private String cvssSeverity;
    /**
     * @return Indicates if the cvss severity is scanned.
     * 
     */
    private Boolean cvssSeverityEnabled;
    /**
     * @return Indicates that policy should ignore cvss cases that do not have a known fix.
     * 
     */
    private Boolean cvssSeverityExcludeNoFix;
    private String description;
    /**
     * @return Indicates if malware should block the image.
     * 
     */
    private Boolean disallowMalware;
    private Boolean dockerCisEnabled;
    /**
     * @return Name of the container image.
     * 
     */
    private String domain;
    private String domainName;
    private Boolean dtaEnabled;
    private String dtaSeverity;
    private Boolean enabled;
    private Boolean enforce;
    private Integer enforceAfterDays;
    private Boolean enforceExcessivePermissions;
    private List<String> exceptionalMonitoredMalwarePaths;
    /**
     * @return Indicates if cicd failures will fail the image.
     * 
     */
    private Boolean failCicd;
    private List<GetFunctionAssurancePolicyForbiddenLabel> forbiddenLabels;
    private Boolean forbiddenLabelsEnabled;
    private Boolean forceMicroenforcer;
    private Boolean functionIntegrityEnabled;
    /**
     * @return The ID of this resource.
     * 
     */
    private String id;
    private Boolean ignoreRecentlyPublishedVln;
    private Integer ignoreRecentlyPublishedVlnPeriod;
    /**
     * @return Indicates if risk resources are ignored.
     * 
     */
    private Boolean ignoreRiskResourcesEnabled;
    /**
     * @return List of ignored risk resources.
     * 
     */
    private List<String> ignoredRiskResources;
    /**
     * @return List of images.
     * 
     */
    private List<String> images;
    private Boolean kubeCisEnabled;
    /**
     * @return List of labels.
     * 
     */
    private List<String> labels;
    private String malwareAction;
    /**
     * @return Value of allowed maximum score.
     * 
     */
    private Double maximumScore;
    /**
     * @return Indicates if exceeding the maximum score is scanned.
     * 
     */
    private Boolean maximumScoreEnabled;
    /**
     * @return Indicates that policy should ignore cases that do not have a known fix.
     * 
     */
    private Boolean maximumScoreExcludeNoFix;
    private List<String> monitoredMalwarePaths;
    private String name;
    /**
     * @return Indicates if raise a warning for images that should only be run as root.
     * 
     */
    private Boolean onlyNoneRootUsers;
    /**
     * @return Indicates if packages blacklist is relevant.
     * 
     */
    private Boolean packagesBlackListEnabled;
    /**
     * @return List of backlisted images.
     * 
     */
    private List<GetFunctionAssurancePolicyPackagesBlackList> packagesBlackLists;
    /**
     * @return Indicates if packages whitelist is relevant.
     * 
     */
    private Boolean packagesWhiteListEnabled;
    /**
     * @return List of whitelisted images.
     * 
     */
    private List<GetFunctionAssurancePolicyPackagesWhiteList> packagesWhiteLists;
    private Boolean partialResultsImageFail;
    private Boolean readOnly;
    /**
     * @return List of registries.
     * 
     */
    private List<String> registries;
    private String registry;
    private List<GetFunctionAssurancePolicyRequiredLabel> requiredLabels;
    private Boolean requiredLabelsEnabled;
    private Boolean scanNfsMounts;
    /**
     * @return Indicates if scan should include sensitive data in the image.
     * 
     */
    private Boolean scanSensitiveData;
    /**
     * @return Indicates if scanning should include scap.
     * 
     */
    private Boolean scapEnabled;
    /**
     * @return List of SCAP user scripts for checks.
     * 
     */
    private List<String> scapFiles;
    private List<GetFunctionAssurancePolicyScope> scopes;
    /**
     * @return List of trusted images.
     * 
     */
    private List<GetFunctionAssurancePolicyTrustedBaseImage> trustedBaseImages;
    /**
     * @return Indicates if list of trusted base images is relevant.
     * 
     */
    private Boolean trustedBaseImagesEnabled;
    /**
     * @return List of whitelisted licenses.
     * 
     */
    private List<String> whitelistedLicenses;
    /**
     * @return Indicates if license blacklist is relevant.
     * 
     */
    private Boolean whitelistedLicensesEnabled;

    private GetFunctionAssurancePolicyResult() {}
    /**
     * @return List of explicitly allowed images.
     * 
     */
    public List<String> allowedImages() {
        return this.allowedImages;
    }
    public List<String> applicationScopes() {
        return this.applicationScopes;
    }
    /**
     * @return Indicates if auditing for failures.
     * 
     */
    public Boolean auditOnFailure() {
        return this.auditOnFailure;
    }
    /**
     * @return Name of user account that created the policy.
     * 
     */
    public String author() {
        return this.author;
    }
    public Boolean autoScanConfigured() {
        return this.autoScanConfigured;
    }
    public Boolean autoScanEnabled() {
        return this.autoScanEnabled;
    }
    public List<GetFunctionAssurancePolicyAutoScanTime> autoScanTimes() {
        return this.autoScanTimes;
    }
    /**
     * @return List of function&#39;s forbidden permissions.
     * 
     */
    public List<String> blacklistPermissions() {
        return this.blacklistPermissions;
    }
    /**
     * @return Indicates if blacklist permissions is relevant.
     * 
     */
    public Boolean blacklistPermissionsEnabled() {
        return this.blacklistPermissionsEnabled;
    }
    /**
     * @return List of blacklisted licenses.
     * 
     */
    public List<String> blacklistedLicenses() {
        return this.blacklistedLicenses;
    }
    /**
     * @return Lndicates if license blacklist is relevant.
     * 
     */
    public Boolean blacklistedLicensesEnabled() {
        return this.blacklistedLicensesEnabled;
    }
    /**
     * @return Indicates if failed images are blocked.
     * 
     */
    public Boolean blockFailed() {
        return this.blockFailed;
    }
    public Boolean controlExcludeNoFix() {
        return this.controlExcludeNoFix;
    }
    /**
     * @return List of Custom user scripts for checks.
     * 
     */
    public List<GetFunctionAssurancePolicyCustomCheck> customChecks() {
        return this.customChecks;
    }
    /**
     * @return Indicates if scanning should include custom checks.
     * 
     */
    public Boolean customChecksEnabled() {
        return this.customChecksEnabled;
    }
    public Boolean customSeverityEnabled() {
        return this.customSeverityEnabled;
    }
    /**
     * @return Indicates if cves blacklist is relevant.
     * 
     */
    public Boolean cvesBlackListEnabled() {
        return this.cvesBlackListEnabled;
    }
    /**
     * @return List of cves blacklisted items.
     * 
     */
    public List<String> cvesBlackLists() {
        return this.cvesBlackLists;
    }
    /**
     * @return Indicates if cves whitelist is relevant.
     * 
     */
    public Boolean cvesWhiteListEnabled() {
        return this.cvesWhiteListEnabled;
    }
    /**
     * @return List of cves whitelisted licenses
     * 
     */
    public List<String> cvesWhiteLists() {
        return this.cvesWhiteLists;
    }
    /**
     * @return Identifier of the cvss severity.
     * 
     */
    public String cvssSeverity() {
        return this.cvssSeverity;
    }
    /**
     * @return Indicates if the cvss severity is scanned.
     * 
     */
    public Boolean cvssSeverityEnabled() {
        return this.cvssSeverityEnabled;
    }
    /**
     * @return Indicates that policy should ignore cvss cases that do not have a known fix.
     * 
     */
    public Boolean cvssSeverityExcludeNoFix() {
        return this.cvssSeverityExcludeNoFix;
    }
    public String description() {
        return this.description;
    }
    /**
     * @return Indicates if malware should block the image.
     * 
     */
    public Boolean disallowMalware() {
        return this.disallowMalware;
    }
    public Boolean dockerCisEnabled() {
        return this.dockerCisEnabled;
    }
    /**
     * @return Name of the container image.
     * 
     */
    public String domain() {
        return this.domain;
    }
    public String domainName() {
        return this.domainName;
    }
    public Boolean dtaEnabled() {
        return this.dtaEnabled;
    }
    public String dtaSeverity() {
        return this.dtaSeverity;
    }
    public Boolean enabled() {
        return this.enabled;
    }
    public Boolean enforce() {
        return this.enforce;
    }
    public Integer enforceAfterDays() {
        return this.enforceAfterDays;
    }
    public Boolean enforceExcessivePermissions() {
        return this.enforceExcessivePermissions;
    }
    public List<String> exceptionalMonitoredMalwarePaths() {
        return this.exceptionalMonitoredMalwarePaths;
    }
    /**
     * @return Indicates if cicd failures will fail the image.
     * 
     */
    public Boolean failCicd() {
        return this.failCicd;
    }
    public List<GetFunctionAssurancePolicyForbiddenLabel> forbiddenLabels() {
        return this.forbiddenLabels;
    }
    public Boolean forbiddenLabelsEnabled() {
        return this.forbiddenLabelsEnabled;
    }
    public Boolean forceMicroenforcer() {
        return this.forceMicroenforcer;
    }
    public Boolean functionIntegrityEnabled() {
        return this.functionIntegrityEnabled;
    }
    /**
     * @return The ID of this resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Boolean ignoreRecentlyPublishedVln() {
        return this.ignoreRecentlyPublishedVln;
    }
    public Integer ignoreRecentlyPublishedVlnPeriod() {
        return this.ignoreRecentlyPublishedVlnPeriod;
    }
    /**
     * @return Indicates if risk resources are ignored.
     * 
     */
    public Boolean ignoreRiskResourcesEnabled() {
        return this.ignoreRiskResourcesEnabled;
    }
    /**
     * @return List of ignored risk resources.
     * 
     */
    public List<String> ignoredRiskResources() {
        return this.ignoredRiskResources;
    }
    /**
     * @return List of images.
     * 
     */
    public List<String> images() {
        return this.images;
    }
    public Boolean kubeCisEnabled() {
        return this.kubeCisEnabled;
    }
    /**
     * @return List of labels.
     * 
     */
    public List<String> labels() {
        return this.labels;
    }
    public String malwareAction() {
        return this.malwareAction;
    }
    /**
     * @return Value of allowed maximum score.
     * 
     */
    public Double maximumScore() {
        return this.maximumScore;
    }
    /**
     * @return Indicates if exceeding the maximum score is scanned.
     * 
     */
    public Boolean maximumScoreEnabled() {
        return this.maximumScoreEnabled;
    }
    /**
     * @return Indicates that policy should ignore cases that do not have a known fix.
     * 
     */
    public Boolean maximumScoreExcludeNoFix() {
        return this.maximumScoreExcludeNoFix;
    }
    public List<String> monitoredMalwarePaths() {
        return this.monitoredMalwarePaths;
    }
    public String name() {
        return this.name;
    }
    /**
     * @return Indicates if raise a warning for images that should only be run as root.
     * 
     */
    public Boolean onlyNoneRootUsers() {
        return this.onlyNoneRootUsers;
    }
    /**
     * @return Indicates if packages blacklist is relevant.
     * 
     */
    public Boolean packagesBlackListEnabled() {
        return this.packagesBlackListEnabled;
    }
    /**
     * @return List of backlisted images.
     * 
     */
    public List<GetFunctionAssurancePolicyPackagesBlackList> packagesBlackLists() {
        return this.packagesBlackLists;
    }
    /**
     * @return Indicates if packages whitelist is relevant.
     * 
     */
    public Boolean packagesWhiteListEnabled() {
        return this.packagesWhiteListEnabled;
    }
    /**
     * @return List of whitelisted images.
     * 
     */
    public List<GetFunctionAssurancePolicyPackagesWhiteList> packagesWhiteLists() {
        return this.packagesWhiteLists;
    }
    public Boolean partialResultsImageFail() {
        return this.partialResultsImageFail;
    }
    public Boolean readOnly() {
        return this.readOnly;
    }
    /**
     * @return List of registries.
     * 
     */
    public List<String> registries() {
        return this.registries;
    }
    public String registry() {
        return this.registry;
    }
    public List<GetFunctionAssurancePolicyRequiredLabel> requiredLabels() {
        return this.requiredLabels;
    }
    public Boolean requiredLabelsEnabled() {
        return this.requiredLabelsEnabled;
    }
    public Boolean scanNfsMounts() {
        return this.scanNfsMounts;
    }
    /**
     * @return Indicates if scan should include sensitive data in the image.
     * 
     */
    public Boolean scanSensitiveData() {
        return this.scanSensitiveData;
    }
    /**
     * @return Indicates if scanning should include scap.
     * 
     */
    public Boolean scapEnabled() {
        return this.scapEnabled;
    }
    /**
     * @return List of SCAP user scripts for checks.
     * 
     */
    public List<String> scapFiles() {
        return this.scapFiles;
    }
    public List<GetFunctionAssurancePolicyScope> scopes() {
        return this.scopes;
    }
    /**
     * @return List of trusted images.
     * 
     */
    public List<GetFunctionAssurancePolicyTrustedBaseImage> trustedBaseImages() {
        return this.trustedBaseImages;
    }
    /**
     * @return Indicates if list of trusted base images is relevant.
     * 
     */
    public Boolean trustedBaseImagesEnabled() {
        return this.trustedBaseImagesEnabled;
    }
    /**
     * @return List of whitelisted licenses.
     * 
     */
    public List<String> whitelistedLicenses() {
        return this.whitelistedLicenses;
    }
    /**
     * @return Indicates if license blacklist is relevant.
     * 
     */
    public Boolean whitelistedLicensesEnabled() {
        return this.whitelistedLicensesEnabled;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetFunctionAssurancePolicyResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> allowedImages;
        private List<String> applicationScopes;
        private Boolean auditOnFailure;
        private String author;
        private Boolean autoScanConfigured;
        private Boolean autoScanEnabled;
        private List<GetFunctionAssurancePolicyAutoScanTime> autoScanTimes;
        private List<String> blacklistPermissions;
        private Boolean blacklistPermissionsEnabled;
        private List<String> blacklistedLicenses;
        private Boolean blacklistedLicensesEnabled;
        private Boolean blockFailed;
        private Boolean controlExcludeNoFix;
        private List<GetFunctionAssurancePolicyCustomCheck> customChecks;
        private Boolean customChecksEnabled;
        private Boolean customSeverityEnabled;
        private Boolean cvesBlackListEnabled;
        private List<String> cvesBlackLists;
        private Boolean cvesWhiteListEnabled;
        private List<String> cvesWhiteLists;
        private String cvssSeverity;
        private Boolean cvssSeverityEnabled;
        private Boolean cvssSeverityExcludeNoFix;
        private String description;
        private Boolean disallowMalware;
        private Boolean dockerCisEnabled;
        private String domain;
        private String domainName;
        private Boolean dtaEnabled;
        private String dtaSeverity;
        private Boolean enabled;
        private Boolean enforce;
        private Integer enforceAfterDays;
        private Boolean enforceExcessivePermissions;
        private List<String> exceptionalMonitoredMalwarePaths;
        private Boolean failCicd;
        private List<GetFunctionAssurancePolicyForbiddenLabel> forbiddenLabels;
        private Boolean forbiddenLabelsEnabled;
        private Boolean forceMicroenforcer;
        private Boolean functionIntegrityEnabled;
        private String id;
        private Boolean ignoreRecentlyPublishedVln;
        private Integer ignoreRecentlyPublishedVlnPeriod;
        private Boolean ignoreRiskResourcesEnabled;
        private List<String> ignoredRiskResources;
        private List<String> images;
        private Boolean kubeCisEnabled;
        private List<String> labels;
        private String malwareAction;
        private Double maximumScore;
        private Boolean maximumScoreEnabled;
        private Boolean maximumScoreExcludeNoFix;
        private List<String> monitoredMalwarePaths;
        private String name;
        private Boolean onlyNoneRootUsers;
        private Boolean packagesBlackListEnabled;
        private List<GetFunctionAssurancePolicyPackagesBlackList> packagesBlackLists;
        private Boolean packagesWhiteListEnabled;
        private List<GetFunctionAssurancePolicyPackagesWhiteList> packagesWhiteLists;
        private Boolean partialResultsImageFail;
        private Boolean readOnly;
        private List<String> registries;
        private String registry;
        private List<GetFunctionAssurancePolicyRequiredLabel> requiredLabels;
        private Boolean requiredLabelsEnabled;
        private Boolean scanNfsMounts;
        private Boolean scanSensitiveData;
        private Boolean scapEnabled;
        private List<String> scapFiles;
        private List<GetFunctionAssurancePolicyScope> scopes;
        private List<GetFunctionAssurancePolicyTrustedBaseImage> trustedBaseImages;
        private Boolean trustedBaseImagesEnabled;
        private List<String> whitelistedLicenses;
        private Boolean whitelistedLicensesEnabled;
        public Builder() {}
        public Builder(GetFunctionAssurancePolicyResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowedImages = defaults.allowedImages;
    	      this.applicationScopes = defaults.applicationScopes;
    	      this.auditOnFailure = defaults.auditOnFailure;
    	      this.author = defaults.author;
    	      this.autoScanConfigured = defaults.autoScanConfigured;
    	      this.autoScanEnabled = defaults.autoScanEnabled;
    	      this.autoScanTimes = defaults.autoScanTimes;
    	      this.blacklistPermissions = defaults.blacklistPermissions;
    	      this.blacklistPermissionsEnabled = defaults.blacklistPermissionsEnabled;
    	      this.blacklistedLicenses = defaults.blacklistedLicenses;
    	      this.blacklistedLicensesEnabled = defaults.blacklistedLicensesEnabled;
    	      this.blockFailed = defaults.blockFailed;
    	      this.controlExcludeNoFix = defaults.controlExcludeNoFix;
    	      this.customChecks = defaults.customChecks;
    	      this.customChecksEnabled = defaults.customChecksEnabled;
    	      this.customSeverityEnabled = defaults.customSeverityEnabled;
    	      this.cvesBlackListEnabled = defaults.cvesBlackListEnabled;
    	      this.cvesBlackLists = defaults.cvesBlackLists;
    	      this.cvesWhiteListEnabled = defaults.cvesWhiteListEnabled;
    	      this.cvesWhiteLists = defaults.cvesWhiteLists;
    	      this.cvssSeverity = defaults.cvssSeverity;
    	      this.cvssSeverityEnabled = defaults.cvssSeverityEnabled;
    	      this.cvssSeverityExcludeNoFix = defaults.cvssSeverityExcludeNoFix;
    	      this.description = defaults.description;
    	      this.disallowMalware = defaults.disallowMalware;
    	      this.dockerCisEnabled = defaults.dockerCisEnabled;
    	      this.domain = defaults.domain;
    	      this.domainName = defaults.domainName;
    	      this.dtaEnabled = defaults.dtaEnabled;
    	      this.dtaSeverity = defaults.dtaSeverity;
    	      this.enabled = defaults.enabled;
    	      this.enforce = defaults.enforce;
    	      this.enforceAfterDays = defaults.enforceAfterDays;
    	      this.enforceExcessivePermissions = defaults.enforceExcessivePermissions;
    	      this.exceptionalMonitoredMalwarePaths = defaults.exceptionalMonitoredMalwarePaths;
    	      this.failCicd = defaults.failCicd;
    	      this.forbiddenLabels = defaults.forbiddenLabels;
    	      this.forbiddenLabelsEnabled = defaults.forbiddenLabelsEnabled;
    	      this.forceMicroenforcer = defaults.forceMicroenforcer;
    	      this.functionIntegrityEnabled = defaults.functionIntegrityEnabled;
    	      this.id = defaults.id;
    	      this.ignoreRecentlyPublishedVln = defaults.ignoreRecentlyPublishedVln;
    	      this.ignoreRecentlyPublishedVlnPeriod = defaults.ignoreRecentlyPublishedVlnPeriod;
    	      this.ignoreRiskResourcesEnabled = defaults.ignoreRiskResourcesEnabled;
    	      this.ignoredRiskResources = defaults.ignoredRiskResources;
    	      this.images = defaults.images;
    	      this.kubeCisEnabled = defaults.kubeCisEnabled;
    	      this.labels = defaults.labels;
    	      this.malwareAction = defaults.malwareAction;
    	      this.maximumScore = defaults.maximumScore;
    	      this.maximumScoreEnabled = defaults.maximumScoreEnabled;
    	      this.maximumScoreExcludeNoFix = defaults.maximumScoreExcludeNoFix;
    	      this.monitoredMalwarePaths = defaults.monitoredMalwarePaths;
    	      this.name = defaults.name;
    	      this.onlyNoneRootUsers = defaults.onlyNoneRootUsers;
    	      this.packagesBlackListEnabled = defaults.packagesBlackListEnabled;
    	      this.packagesBlackLists = defaults.packagesBlackLists;
    	      this.packagesWhiteListEnabled = defaults.packagesWhiteListEnabled;
    	      this.packagesWhiteLists = defaults.packagesWhiteLists;
    	      this.partialResultsImageFail = defaults.partialResultsImageFail;
    	      this.readOnly = defaults.readOnly;
    	      this.registries = defaults.registries;
    	      this.registry = defaults.registry;
    	      this.requiredLabels = defaults.requiredLabels;
    	      this.requiredLabelsEnabled = defaults.requiredLabelsEnabled;
    	      this.scanNfsMounts = defaults.scanNfsMounts;
    	      this.scanSensitiveData = defaults.scanSensitiveData;
    	      this.scapEnabled = defaults.scapEnabled;
    	      this.scapFiles = defaults.scapFiles;
    	      this.scopes = defaults.scopes;
    	      this.trustedBaseImages = defaults.trustedBaseImages;
    	      this.trustedBaseImagesEnabled = defaults.trustedBaseImagesEnabled;
    	      this.whitelistedLicenses = defaults.whitelistedLicenses;
    	      this.whitelistedLicensesEnabled = defaults.whitelistedLicensesEnabled;
        }

        @CustomType.Setter
        public Builder allowedImages(List<String> allowedImages) {
            this.allowedImages = Objects.requireNonNull(allowedImages);
            return this;
        }
        public Builder allowedImages(String... allowedImages) {
            return allowedImages(List.of(allowedImages));
        }
        @CustomType.Setter
        public Builder applicationScopes(List<String> applicationScopes) {
            this.applicationScopes = Objects.requireNonNull(applicationScopes);
            return this;
        }
        public Builder applicationScopes(String... applicationScopes) {
            return applicationScopes(List.of(applicationScopes));
        }
        @CustomType.Setter
        public Builder auditOnFailure(Boolean auditOnFailure) {
            this.auditOnFailure = Objects.requireNonNull(auditOnFailure);
            return this;
        }
        @CustomType.Setter
        public Builder author(String author) {
            this.author = Objects.requireNonNull(author);
            return this;
        }
        @CustomType.Setter
        public Builder autoScanConfigured(Boolean autoScanConfigured) {
            this.autoScanConfigured = Objects.requireNonNull(autoScanConfigured);
            return this;
        }
        @CustomType.Setter
        public Builder autoScanEnabled(Boolean autoScanEnabled) {
            this.autoScanEnabled = Objects.requireNonNull(autoScanEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder autoScanTimes(List<GetFunctionAssurancePolicyAutoScanTime> autoScanTimes) {
            this.autoScanTimes = Objects.requireNonNull(autoScanTimes);
            return this;
        }
        public Builder autoScanTimes(GetFunctionAssurancePolicyAutoScanTime... autoScanTimes) {
            return autoScanTimes(List.of(autoScanTimes));
        }
        @CustomType.Setter
        public Builder blacklistPermissions(List<String> blacklistPermissions) {
            this.blacklistPermissions = Objects.requireNonNull(blacklistPermissions);
            return this;
        }
        public Builder blacklistPermissions(String... blacklistPermissions) {
            return blacklistPermissions(List.of(blacklistPermissions));
        }
        @CustomType.Setter
        public Builder blacklistPermissionsEnabled(Boolean blacklistPermissionsEnabled) {
            this.blacklistPermissionsEnabled = Objects.requireNonNull(blacklistPermissionsEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder blacklistedLicenses(List<String> blacklistedLicenses) {
            this.blacklistedLicenses = Objects.requireNonNull(blacklistedLicenses);
            return this;
        }
        public Builder blacklistedLicenses(String... blacklistedLicenses) {
            return blacklistedLicenses(List.of(blacklistedLicenses));
        }
        @CustomType.Setter
        public Builder blacklistedLicensesEnabled(Boolean blacklistedLicensesEnabled) {
            this.blacklistedLicensesEnabled = Objects.requireNonNull(blacklistedLicensesEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder blockFailed(Boolean blockFailed) {
            this.blockFailed = Objects.requireNonNull(blockFailed);
            return this;
        }
        @CustomType.Setter
        public Builder controlExcludeNoFix(Boolean controlExcludeNoFix) {
            this.controlExcludeNoFix = Objects.requireNonNull(controlExcludeNoFix);
            return this;
        }
        @CustomType.Setter
        public Builder customChecks(List<GetFunctionAssurancePolicyCustomCheck> customChecks) {
            this.customChecks = Objects.requireNonNull(customChecks);
            return this;
        }
        public Builder customChecks(GetFunctionAssurancePolicyCustomCheck... customChecks) {
            return customChecks(List.of(customChecks));
        }
        @CustomType.Setter
        public Builder customChecksEnabled(Boolean customChecksEnabled) {
            this.customChecksEnabled = Objects.requireNonNull(customChecksEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder customSeverityEnabled(Boolean customSeverityEnabled) {
            this.customSeverityEnabled = Objects.requireNonNull(customSeverityEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder cvesBlackListEnabled(Boolean cvesBlackListEnabled) {
            this.cvesBlackListEnabled = Objects.requireNonNull(cvesBlackListEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder cvesBlackLists(List<String> cvesBlackLists) {
            this.cvesBlackLists = Objects.requireNonNull(cvesBlackLists);
            return this;
        }
        public Builder cvesBlackLists(String... cvesBlackLists) {
            return cvesBlackLists(List.of(cvesBlackLists));
        }
        @CustomType.Setter
        public Builder cvesWhiteListEnabled(Boolean cvesWhiteListEnabled) {
            this.cvesWhiteListEnabled = Objects.requireNonNull(cvesWhiteListEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder cvesWhiteLists(List<String> cvesWhiteLists) {
            this.cvesWhiteLists = Objects.requireNonNull(cvesWhiteLists);
            return this;
        }
        public Builder cvesWhiteLists(String... cvesWhiteLists) {
            return cvesWhiteLists(List.of(cvesWhiteLists));
        }
        @CustomType.Setter
        public Builder cvssSeverity(String cvssSeverity) {
            this.cvssSeverity = Objects.requireNonNull(cvssSeverity);
            return this;
        }
        @CustomType.Setter
        public Builder cvssSeverityEnabled(Boolean cvssSeverityEnabled) {
            this.cvssSeverityEnabled = Objects.requireNonNull(cvssSeverityEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder cvssSeverityExcludeNoFix(Boolean cvssSeverityExcludeNoFix) {
            this.cvssSeverityExcludeNoFix = Objects.requireNonNull(cvssSeverityExcludeNoFix);
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder disallowMalware(Boolean disallowMalware) {
            this.disallowMalware = Objects.requireNonNull(disallowMalware);
            return this;
        }
        @CustomType.Setter
        public Builder dockerCisEnabled(Boolean dockerCisEnabled) {
            this.dockerCisEnabled = Objects.requireNonNull(dockerCisEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder domain(String domain) {
            this.domain = Objects.requireNonNull(domain);
            return this;
        }
        @CustomType.Setter
        public Builder domainName(String domainName) {
            this.domainName = Objects.requireNonNull(domainName);
            return this;
        }
        @CustomType.Setter
        public Builder dtaEnabled(Boolean dtaEnabled) {
            this.dtaEnabled = Objects.requireNonNull(dtaEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder dtaSeverity(String dtaSeverity) {
            this.dtaSeverity = Objects.requireNonNull(dtaSeverity);
            return this;
        }
        @CustomType.Setter
        public Builder enabled(Boolean enabled) {
            this.enabled = Objects.requireNonNull(enabled);
            return this;
        }
        @CustomType.Setter
        public Builder enforce(Boolean enforce) {
            this.enforce = Objects.requireNonNull(enforce);
            return this;
        }
        @CustomType.Setter
        public Builder enforceAfterDays(Integer enforceAfterDays) {
            this.enforceAfterDays = Objects.requireNonNull(enforceAfterDays);
            return this;
        }
        @CustomType.Setter
        public Builder enforceExcessivePermissions(Boolean enforceExcessivePermissions) {
            this.enforceExcessivePermissions = Objects.requireNonNull(enforceExcessivePermissions);
            return this;
        }
        @CustomType.Setter
        public Builder exceptionalMonitoredMalwarePaths(List<String> exceptionalMonitoredMalwarePaths) {
            this.exceptionalMonitoredMalwarePaths = Objects.requireNonNull(exceptionalMonitoredMalwarePaths);
            return this;
        }
        public Builder exceptionalMonitoredMalwarePaths(String... exceptionalMonitoredMalwarePaths) {
            return exceptionalMonitoredMalwarePaths(List.of(exceptionalMonitoredMalwarePaths));
        }
        @CustomType.Setter
        public Builder failCicd(Boolean failCicd) {
            this.failCicd = Objects.requireNonNull(failCicd);
            return this;
        }
        @CustomType.Setter
        public Builder forbiddenLabels(List<GetFunctionAssurancePolicyForbiddenLabel> forbiddenLabels) {
            this.forbiddenLabels = Objects.requireNonNull(forbiddenLabels);
            return this;
        }
        public Builder forbiddenLabels(GetFunctionAssurancePolicyForbiddenLabel... forbiddenLabels) {
            return forbiddenLabels(List.of(forbiddenLabels));
        }
        @CustomType.Setter
        public Builder forbiddenLabelsEnabled(Boolean forbiddenLabelsEnabled) {
            this.forbiddenLabelsEnabled = Objects.requireNonNull(forbiddenLabelsEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder forceMicroenforcer(Boolean forceMicroenforcer) {
            this.forceMicroenforcer = Objects.requireNonNull(forceMicroenforcer);
            return this;
        }
        @CustomType.Setter
        public Builder functionIntegrityEnabled(Boolean functionIntegrityEnabled) {
            this.functionIntegrityEnabled = Objects.requireNonNull(functionIntegrityEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder ignoreRecentlyPublishedVln(Boolean ignoreRecentlyPublishedVln) {
            this.ignoreRecentlyPublishedVln = Objects.requireNonNull(ignoreRecentlyPublishedVln);
            return this;
        }
        @CustomType.Setter
        public Builder ignoreRecentlyPublishedVlnPeriod(Integer ignoreRecentlyPublishedVlnPeriod) {
            this.ignoreRecentlyPublishedVlnPeriod = Objects.requireNonNull(ignoreRecentlyPublishedVlnPeriod);
            return this;
        }
        @CustomType.Setter
        public Builder ignoreRiskResourcesEnabled(Boolean ignoreRiskResourcesEnabled) {
            this.ignoreRiskResourcesEnabled = Objects.requireNonNull(ignoreRiskResourcesEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder ignoredRiskResources(List<String> ignoredRiskResources) {
            this.ignoredRiskResources = Objects.requireNonNull(ignoredRiskResources);
            return this;
        }
        public Builder ignoredRiskResources(String... ignoredRiskResources) {
            return ignoredRiskResources(List.of(ignoredRiskResources));
        }
        @CustomType.Setter
        public Builder images(List<String> images) {
            this.images = Objects.requireNonNull(images);
            return this;
        }
        public Builder images(String... images) {
            return images(List.of(images));
        }
        @CustomType.Setter
        public Builder kubeCisEnabled(Boolean kubeCisEnabled) {
            this.kubeCisEnabled = Objects.requireNonNull(kubeCisEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder labels(List<String> labels) {
            this.labels = Objects.requireNonNull(labels);
            return this;
        }
        public Builder labels(String... labels) {
            return labels(List.of(labels));
        }
        @CustomType.Setter
        public Builder malwareAction(String malwareAction) {
            this.malwareAction = Objects.requireNonNull(malwareAction);
            return this;
        }
        @CustomType.Setter
        public Builder maximumScore(Double maximumScore) {
            this.maximumScore = Objects.requireNonNull(maximumScore);
            return this;
        }
        @CustomType.Setter
        public Builder maximumScoreEnabled(Boolean maximumScoreEnabled) {
            this.maximumScoreEnabled = Objects.requireNonNull(maximumScoreEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder maximumScoreExcludeNoFix(Boolean maximumScoreExcludeNoFix) {
            this.maximumScoreExcludeNoFix = Objects.requireNonNull(maximumScoreExcludeNoFix);
            return this;
        }
        @CustomType.Setter
        public Builder monitoredMalwarePaths(List<String> monitoredMalwarePaths) {
            this.monitoredMalwarePaths = Objects.requireNonNull(monitoredMalwarePaths);
            return this;
        }
        public Builder monitoredMalwarePaths(String... monitoredMalwarePaths) {
            return monitoredMalwarePaths(List.of(monitoredMalwarePaths));
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder onlyNoneRootUsers(Boolean onlyNoneRootUsers) {
            this.onlyNoneRootUsers = Objects.requireNonNull(onlyNoneRootUsers);
            return this;
        }
        @CustomType.Setter
        public Builder packagesBlackListEnabled(Boolean packagesBlackListEnabled) {
            this.packagesBlackListEnabled = Objects.requireNonNull(packagesBlackListEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder packagesBlackLists(List<GetFunctionAssurancePolicyPackagesBlackList> packagesBlackLists) {
            this.packagesBlackLists = Objects.requireNonNull(packagesBlackLists);
            return this;
        }
        public Builder packagesBlackLists(GetFunctionAssurancePolicyPackagesBlackList... packagesBlackLists) {
            return packagesBlackLists(List.of(packagesBlackLists));
        }
        @CustomType.Setter
        public Builder packagesWhiteListEnabled(Boolean packagesWhiteListEnabled) {
            this.packagesWhiteListEnabled = Objects.requireNonNull(packagesWhiteListEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder packagesWhiteLists(List<GetFunctionAssurancePolicyPackagesWhiteList> packagesWhiteLists) {
            this.packagesWhiteLists = Objects.requireNonNull(packagesWhiteLists);
            return this;
        }
        public Builder packagesWhiteLists(GetFunctionAssurancePolicyPackagesWhiteList... packagesWhiteLists) {
            return packagesWhiteLists(List.of(packagesWhiteLists));
        }
        @CustomType.Setter
        public Builder partialResultsImageFail(Boolean partialResultsImageFail) {
            this.partialResultsImageFail = Objects.requireNonNull(partialResultsImageFail);
            return this;
        }
        @CustomType.Setter
        public Builder readOnly(Boolean readOnly) {
            this.readOnly = Objects.requireNonNull(readOnly);
            return this;
        }
        @CustomType.Setter
        public Builder registries(List<String> registries) {
            this.registries = Objects.requireNonNull(registries);
            return this;
        }
        public Builder registries(String... registries) {
            return registries(List.of(registries));
        }
        @CustomType.Setter
        public Builder registry(String registry) {
            this.registry = Objects.requireNonNull(registry);
            return this;
        }
        @CustomType.Setter
        public Builder requiredLabels(List<GetFunctionAssurancePolicyRequiredLabel> requiredLabels) {
            this.requiredLabels = Objects.requireNonNull(requiredLabels);
            return this;
        }
        public Builder requiredLabels(GetFunctionAssurancePolicyRequiredLabel... requiredLabels) {
            return requiredLabels(List.of(requiredLabels));
        }
        @CustomType.Setter
        public Builder requiredLabelsEnabled(Boolean requiredLabelsEnabled) {
            this.requiredLabelsEnabled = Objects.requireNonNull(requiredLabelsEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder scanNfsMounts(Boolean scanNfsMounts) {
            this.scanNfsMounts = Objects.requireNonNull(scanNfsMounts);
            return this;
        }
        @CustomType.Setter
        public Builder scanSensitiveData(Boolean scanSensitiveData) {
            this.scanSensitiveData = Objects.requireNonNull(scanSensitiveData);
            return this;
        }
        @CustomType.Setter
        public Builder scapEnabled(Boolean scapEnabled) {
            this.scapEnabled = Objects.requireNonNull(scapEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder scapFiles(List<String> scapFiles) {
            this.scapFiles = Objects.requireNonNull(scapFiles);
            return this;
        }
        public Builder scapFiles(String... scapFiles) {
            return scapFiles(List.of(scapFiles));
        }
        @CustomType.Setter
        public Builder scopes(List<GetFunctionAssurancePolicyScope> scopes) {
            this.scopes = Objects.requireNonNull(scopes);
            return this;
        }
        public Builder scopes(GetFunctionAssurancePolicyScope... scopes) {
            return scopes(List.of(scopes));
        }
        @CustomType.Setter
        public Builder trustedBaseImages(List<GetFunctionAssurancePolicyTrustedBaseImage> trustedBaseImages) {
            this.trustedBaseImages = Objects.requireNonNull(trustedBaseImages);
            return this;
        }
        public Builder trustedBaseImages(GetFunctionAssurancePolicyTrustedBaseImage... trustedBaseImages) {
            return trustedBaseImages(List.of(trustedBaseImages));
        }
        @CustomType.Setter
        public Builder trustedBaseImagesEnabled(Boolean trustedBaseImagesEnabled) {
            this.trustedBaseImagesEnabled = Objects.requireNonNull(trustedBaseImagesEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder whitelistedLicenses(List<String> whitelistedLicenses) {
            this.whitelistedLicenses = Objects.requireNonNull(whitelistedLicenses);
            return this;
        }
        public Builder whitelistedLicenses(String... whitelistedLicenses) {
            return whitelistedLicenses(List.of(whitelistedLicenses));
        }
        @CustomType.Setter
        public Builder whitelistedLicensesEnabled(Boolean whitelistedLicensesEnabled) {
            this.whitelistedLicensesEnabled = Objects.requireNonNull(whitelistedLicensesEnabled);
            return this;
        }
        public GetFunctionAssurancePolicyResult build() {
            final var o = new GetFunctionAssurancePolicyResult();
            o.allowedImages = allowedImages;
            o.applicationScopes = applicationScopes;
            o.auditOnFailure = auditOnFailure;
            o.author = author;
            o.autoScanConfigured = autoScanConfigured;
            o.autoScanEnabled = autoScanEnabled;
            o.autoScanTimes = autoScanTimes;
            o.blacklistPermissions = blacklistPermissions;
            o.blacklistPermissionsEnabled = blacklistPermissionsEnabled;
            o.blacklistedLicenses = blacklistedLicenses;
            o.blacklistedLicensesEnabled = blacklistedLicensesEnabled;
            o.blockFailed = blockFailed;
            o.controlExcludeNoFix = controlExcludeNoFix;
            o.customChecks = customChecks;
            o.customChecksEnabled = customChecksEnabled;
            o.customSeverityEnabled = customSeverityEnabled;
            o.cvesBlackListEnabled = cvesBlackListEnabled;
            o.cvesBlackLists = cvesBlackLists;
            o.cvesWhiteListEnabled = cvesWhiteListEnabled;
            o.cvesWhiteLists = cvesWhiteLists;
            o.cvssSeverity = cvssSeverity;
            o.cvssSeverityEnabled = cvssSeverityEnabled;
            o.cvssSeverityExcludeNoFix = cvssSeverityExcludeNoFix;
            o.description = description;
            o.disallowMalware = disallowMalware;
            o.dockerCisEnabled = dockerCisEnabled;
            o.domain = domain;
            o.domainName = domainName;
            o.dtaEnabled = dtaEnabled;
            o.dtaSeverity = dtaSeverity;
            o.enabled = enabled;
            o.enforce = enforce;
            o.enforceAfterDays = enforceAfterDays;
            o.enforceExcessivePermissions = enforceExcessivePermissions;
            o.exceptionalMonitoredMalwarePaths = exceptionalMonitoredMalwarePaths;
            o.failCicd = failCicd;
            o.forbiddenLabels = forbiddenLabels;
            o.forbiddenLabelsEnabled = forbiddenLabelsEnabled;
            o.forceMicroenforcer = forceMicroenforcer;
            o.functionIntegrityEnabled = functionIntegrityEnabled;
            o.id = id;
            o.ignoreRecentlyPublishedVln = ignoreRecentlyPublishedVln;
            o.ignoreRecentlyPublishedVlnPeriod = ignoreRecentlyPublishedVlnPeriod;
            o.ignoreRiskResourcesEnabled = ignoreRiskResourcesEnabled;
            o.ignoredRiskResources = ignoredRiskResources;
            o.images = images;
            o.kubeCisEnabled = kubeCisEnabled;
            o.labels = labels;
            o.malwareAction = malwareAction;
            o.maximumScore = maximumScore;
            o.maximumScoreEnabled = maximumScoreEnabled;
            o.maximumScoreExcludeNoFix = maximumScoreExcludeNoFix;
            o.monitoredMalwarePaths = monitoredMalwarePaths;
            o.name = name;
            o.onlyNoneRootUsers = onlyNoneRootUsers;
            o.packagesBlackListEnabled = packagesBlackListEnabled;
            o.packagesBlackLists = packagesBlackLists;
            o.packagesWhiteListEnabled = packagesWhiteListEnabled;
            o.packagesWhiteLists = packagesWhiteLists;
            o.partialResultsImageFail = partialResultsImageFail;
            o.readOnly = readOnly;
            o.registries = registries;
            o.registry = registry;
            o.requiredLabels = requiredLabels;
            o.requiredLabelsEnabled = requiredLabelsEnabled;
            o.scanNfsMounts = scanNfsMounts;
            o.scanSensitiveData = scanSensitiveData;
            o.scapEnabled = scapEnabled;
            o.scapFiles = scapFiles;
            o.scopes = scopes;
            o.trustedBaseImages = trustedBaseImages;
            o.trustedBaseImagesEnabled = trustedBaseImagesEnabled;
            o.whitelistedLicenses = whitelistedLicenses;
            o.whitelistedLicensesEnabled = whitelistedLicensesEnabled;
            return o;
        }
    }
}
