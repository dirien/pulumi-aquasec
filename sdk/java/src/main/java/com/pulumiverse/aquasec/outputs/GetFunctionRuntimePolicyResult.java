// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumiverse.aquasec.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumiverse.aquasec.outputs.GetFunctionRuntimePolicyScopeVariable;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetFunctionRuntimePolicyResult {
    /**
     * @return Indicates the application scope of the service.
     * 
     */
    private List<String> applicationScopes;
    /**
     * @return Username of the account that created the service.
     * 
     */
    private String author;
    /**
     * @return If true, prevent creation of malicious executables in functions during their runtime post invocation.
     * 
     */
    private Boolean blockMaliciousExecutables;
    /**
     * @return List of processes that will be allowed
     * 
     */
    private List<String> blockMaliciousExecutablesAllowedProcesses;
    /**
     * @return If true, prevent running of executables in functions locate in /tmp folder during their runtime post invocation.
     * 
     */
    private Boolean blockRunningExecutablesInTmpFolder;
    /**
     * @return List of executables that are prevented from running in containers.
     * 
     */
    private List<String> blockedExecutables;
    /**
     * @return The description of the function runtime policy
     * 
     */
    private String description;
    /**
     * @return Indicates if the runtime policy is enabled or not.
     * 
     */
    private Boolean enabled;
    /**
     * @return Indicates that policy should effect container execution (not just for audit).
     * 
     */
    private Boolean enforce;
    /**
     * @return Honeypot User ID (Access Key)
     * 
     */
    private String honeypotAccessKey;
    /**
     * @return List of options to apply the honeypot on (Environment Vairable, Layer, File)
     * 
     */
    private List<String> honeypotApplyOns;
    /**
     * @return Honeypot User Password (Secret Key)
     * 
     */
    private String honeypotSecretKey;
    /**
     * @return Serverless application name
     * 
     */
    private String honeypotServerlessAppName;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Name of the function runtime policy
     * 
     */
    private String name;
    /**
     * @return Logical expression of how to compute the dependency of the scope variables.
     * 
     */
    private String scopeExpression;
    /**
     * @return List of scope attributes.
     * 
     */
    private List<GetFunctionRuntimePolicyScopeVariable> scopeVariables;

    private GetFunctionRuntimePolicyResult() {}
    /**
     * @return Indicates the application scope of the service.
     * 
     */
    public List<String> applicationScopes() {
        return this.applicationScopes;
    }
    /**
     * @return Username of the account that created the service.
     * 
     */
    public String author() {
        return this.author;
    }
    /**
     * @return If true, prevent creation of malicious executables in functions during their runtime post invocation.
     * 
     */
    public Boolean blockMaliciousExecutables() {
        return this.blockMaliciousExecutables;
    }
    /**
     * @return List of processes that will be allowed
     * 
     */
    public List<String> blockMaliciousExecutablesAllowedProcesses() {
        return this.blockMaliciousExecutablesAllowedProcesses;
    }
    /**
     * @return If true, prevent running of executables in functions locate in /tmp folder during their runtime post invocation.
     * 
     */
    public Boolean blockRunningExecutablesInTmpFolder() {
        return this.blockRunningExecutablesInTmpFolder;
    }
    /**
     * @return List of executables that are prevented from running in containers.
     * 
     */
    public List<String> blockedExecutables() {
        return this.blockedExecutables;
    }
    /**
     * @return The description of the function runtime policy
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Indicates if the runtime policy is enabled or not.
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }
    /**
     * @return Indicates that policy should effect container execution (not just for audit).
     * 
     */
    public Boolean enforce() {
        return this.enforce;
    }
    /**
     * @return Honeypot User ID (Access Key)
     * 
     */
    public String honeypotAccessKey() {
        return this.honeypotAccessKey;
    }
    /**
     * @return List of options to apply the honeypot on (Environment Vairable, Layer, File)
     * 
     */
    public List<String> honeypotApplyOns() {
        return this.honeypotApplyOns;
    }
    /**
     * @return Honeypot User Password (Secret Key)
     * 
     */
    public String honeypotSecretKey() {
        return this.honeypotSecretKey;
    }
    /**
     * @return Serverless application name
     * 
     */
    public String honeypotServerlessAppName() {
        return this.honeypotServerlessAppName;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Name of the function runtime policy
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Logical expression of how to compute the dependency of the scope variables.
     * 
     */
    public String scopeExpression() {
        return this.scopeExpression;
    }
    /**
     * @return List of scope attributes.
     * 
     */
    public List<GetFunctionRuntimePolicyScopeVariable> scopeVariables() {
        return this.scopeVariables;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetFunctionRuntimePolicyResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> applicationScopes;
        private String author;
        private Boolean blockMaliciousExecutables;
        private List<String> blockMaliciousExecutablesAllowedProcesses;
        private Boolean blockRunningExecutablesInTmpFolder;
        private List<String> blockedExecutables;
        private String description;
        private Boolean enabled;
        private Boolean enforce;
        private String honeypotAccessKey;
        private List<String> honeypotApplyOns;
        private String honeypotSecretKey;
        private String honeypotServerlessAppName;
        private String id;
        private String name;
        private String scopeExpression;
        private List<GetFunctionRuntimePolicyScopeVariable> scopeVariables;
        public Builder() {}
        public Builder(GetFunctionRuntimePolicyResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applicationScopes = defaults.applicationScopes;
    	      this.author = defaults.author;
    	      this.blockMaliciousExecutables = defaults.blockMaliciousExecutables;
    	      this.blockMaliciousExecutablesAllowedProcesses = defaults.blockMaliciousExecutablesAllowedProcesses;
    	      this.blockRunningExecutablesInTmpFolder = defaults.blockRunningExecutablesInTmpFolder;
    	      this.blockedExecutables = defaults.blockedExecutables;
    	      this.description = defaults.description;
    	      this.enabled = defaults.enabled;
    	      this.enforce = defaults.enforce;
    	      this.honeypotAccessKey = defaults.honeypotAccessKey;
    	      this.honeypotApplyOns = defaults.honeypotApplyOns;
    	      this.honeypotSecretKey = defaults.honeypotSecretKey;
    	      this.honeypotServerlessAppName = defaults.honeypotServerlessAppName;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.scopeExpression = defaults.scopeExpression;
    	      this.scopeVariables = defaults.scopeVariables;
        }

        @CustomType.Setter
        public Builder applicationScopes(List<String> applicationScopes) {
            this.applicationScopes = Objects.requireNonNull(applicationScopes);
            return this;
        }
        public Builder applicationScopes(String... applicationScopes) {
            return applicationScopes(List.of(applicationScopes));
        }
        @CustomType.Setter
        public Builder author(String author) {
            this.author = Objects.requireNonNull(author);
            return this;
        }
        @CustomType.Setter
        public Builder blockMaliciousExecutables(Boolean blockMaliciousExecutables) {
            this.blockMaliciousExecutables = Objects.requireNonNull(blockMaliciousExecutables);
            return this;
        }
        @CustomType.Setter
        public Builder blockMaliciousExecutablesAllowedProcesses(List<String> blockMaliciousExecutablesAllowedProcesses) {
            this.blockMaliciousExecutablesAllowedProcesses = Objects.requireNonNull(blockMaliciousExecutablesAllowedProcesses);
            return this;
        }
        public Builder blockMaliciousExecutablesAllowedProcesses(String... blockMaliciousExecutablesAllowedProcesses) {
            return blockMaliciousExecutablesAllowedProcesses(List.of(blockMaliciousExecutablesAllowedProcesses));
        }
        @CustomType.Setter
        public Builder blockRunningExecutablesInTmpFolder(Boolean blockRunningExecutablesInTmpFolder) {
            this.blockRunningExecutablesInTmpFolder = Objects.requireNonNull(blockRunningExecutablesInTmpFolder);
            return this;
        }
        @CustomType.Setter
        public Builder blockedExecutables(List<String> blockedExecutables) {
            this.blockedExecutables = Objects.requireNonNull(blockedExecutables);
            return this;
        }
        public Builder blockedExecutables(String... blockedExecutables) {
            return blockedExecutables(List.of(blockedExecutables));
        }
        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder enabled(Boolean enabled) {
            this.enabled = Objects.requireNonNull(enabled);
            return this;
        }
        @CustomType.Setter
        public Builder enforce(Boolean enforce) {
            this.enforce = Objects.requireNonNull(enforce);
            return this;
        }
        @CustomType.Setter
        public Builder honeypotAccessKey(String honeypotAccessKey) {
            this.honeypotAccessKey = Objects.requireNonNull(honeypotAccessKey);
            return this;
        }
        @CustomType.Setter
        public Builder honeypotApplyOns(List<String> honeypotApplyOns) {
            this.honeypotApplyOns = Objects.requireNonNull(honeypotApplyOns);
            return this;
        }
        public Builder honeypotApplyOns(String... honeypotApplyOns) {
            return honeypotApplyOns(List.of(honeypotApplyOns));
        }
        @CustomType.Setter
        public Builder honeypotSecretKey(String honeypotSecretKey) {
            this.honeypotSecretKey = Objects.requireNonNull(honeypotSecretKey);
            return this;
        }
        @CustomType.Setter
        public Builder honeypotServerlessAppName(String honeypotServerlessAppName) {
            this.honeypotServerlessAppName = Objects.requireNonNull(honeypotServerlessAppName);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder scopeExpression(String scopeExpression) {
            this.scopeExpression = Objects.requireNonNull(scopeExpression);
            return this;
        }
        @CustomType.Setter
        public Builder scopeVariables(List<GetFunctionRuntimePolicyScopeVariable> scopeVariables) {
            this.scopeVariables = Objects.requireNonNull(scopeVariables);
            return this;
        }
        public Builder scopeVariables(GetFunctionRuntimePolicyScopeVariable... scopeVariables) {
            return scopeVariables(List.of(scopeVariables));
        }
        public GetFunctionRuntimePolicyResult build() {
            final var o = new GetFunctionRuntimePolicyResult();
            o.applicationScopes = applicationScopes;
            o.author = author;
            o.blockMaliciousExecutables = blockMaliciousExecutables;
            o.blockMaliciousExecutablesAllowedProcesses = blockMaliciousExecutablesAllowedProcesses;
            o.blockRunningExecutablesInTmpFolder = blockRunningExecutablesInTmpFolder;
            o.blockedExecutables = blockedExecutables;
            o.description = description;
            o.enabled = enabled;
            o.enforce = enforce;
            o.honeypotAccessKey = honeypotAccessKey;
            o.honeypotApplyOns = honeypotApplyOns;
            o.honeypotSecretKey = honeypotSecretKey;
            o.honeypotServerlessAppName = honeypotServerlessAppName;
            o.id = id;
            o.name = name;
            o.scopeExpression = scopeExpression;
            o.scopeVariables = scopeVariables;
            return o;
        }
    }
}
