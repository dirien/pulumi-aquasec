// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumiverse.aquasec.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetHostRuntimePolicyMalwareScanOptions {
    /**
     * @return Set Action, Defaults to &#39;Alert&#39; when empty
     * 
     */
    private final @Nullable String action;
    /**
     * @return Defines if enabled or not
     * 
     */
    private final @Nullable Boolean enabled;
    /**
     * @return List of registry processes to be excluded from being protected.
     * 
     */
    private final @Nullable List<String> excludeProcesses;
    /**
     * @return List of directories to be protected.
     * 
     */
    private final @Nullable List<String> includeDirectories;

    @CustomType.Constructor
    private GetHostRuntimePolicyMalwareScanOptions(
        @CustomType.Parameter("action") @Nullable String action,
        @CustomType.Parameter("enabled") @Nullable Boolean enabled,
        @CustomType.Parameter("excludeProcesses") @Nullable List<String> excludeProcesses,
        @CustomType.Parameter("includeDirectories") @Nullable List<String> includeDirectories) {
        this.action = action;
        this.enabled = enabled;
        this.excludeProcesses = excludeProcesses;
        this.includeDirectories = includeDirectories;
    }

    /**
     * @return Set Action, Defaults to &#39;Alert&#39; when empty
     * 
     */
    public Optional<String> action() {
        return Optional.ofNullable(this.action);
    }
    /**
     * @return Defines if enabled or not
     * 
     */
    public Optional<Boolean> enabled() {
        return Optional.ofNullable(this.enabled);
    }
    /**
     * @return List of registry processes to be excluded from being protected.
     * 
     */
    public List<String> excludeProcesses() {
        return this.excludeProcesses == null ? List.of() : this.excludeProcesses;
    }
    /**
     * @return List of directories to be protected.
     * 
     */
    public List<String> includeDirectories() {
        return this.includeDirectories == null ? List.of() : this.includeDirectories;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetHostRuntimePolicyMalwareScanOptions defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String action;
        private @Nullable Boolean enabled;
        private @Nullable List<String> excludeProcesses;
        private @Nullable List<String> includeDirectories;

        public Builder() {
    	      // Empty
        }

        public Builder(GetHostRuntimePolicyMalwareScanOptions defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.action = defaults.action;
    	      this.enabled = defaults.enabled;
    	      this.excludeProcesses = defaults.excludeProcesses;
    	      this.includeDirectories = defaults.includeDirectories;
        }

        public Builder action(@Nullable String action) {
            this.action = action;
            return this;
        }
        public Builder enabled(@Nullable Boolean enabled) {
            this.enabled = enabled;
            return this;
        }
        public Builder excludeProcesses(@Nullable List<String> excludeProcesses) {
            this.excludeProcesses = excludeProcesses;
            return this;
        }
        public Builder excludeProcesses(String... excludeProcesses) {
            return excludeProcesses(List.of(excludeProcesses));
        }
        public Builder includeDirectories(@Nullable List<String> includeDirectories) {
            this.includeDirectories = includeDirectories;
            return this;
        }
        public Builder includeDirectories(String... includeDirectories) {
            return includeDirectories(List.of(includeDirectories));
        }        public GetHostRuntimePolicyMalwareScanOptions build() {
            return new GetHostRuntimePolicyMalwareScanOptions(action, enabled, excludeProcesses, includeDirectories);
        }
    }
}
