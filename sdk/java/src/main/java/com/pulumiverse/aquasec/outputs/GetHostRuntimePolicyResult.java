// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumiverse.aquasec.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumiverse.aquasec.outputs.GetHostRuntimePolicyFileIntegrityMonitoring;
import com.pulumiverse.aquasec.outputs.GetHostRuntimePolicyScopeVariable;
import com.pulumiverse.aquasec.outputs.GetHostRuntimePolicyWindowsRegistryMonitoring;
import com.pulumiverse.aquasec.outputs.GetHostRuntimePolicyWindowsRegistryProtection;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetHostRuntimePolicyResult {
    /**
     * @return Indicates the application scope of the service.
     * 
     */
    private final List<String> applicationScopes;
    /**
     * @return If true, all process activity will be audited.
     * 
     */
    private final Boolean auditAllOsUserActivity;
    /**
     * @return Detects brute force login attempts
     * 
     */
    private final Boolean auditBruteForceLogin;
    /**
     * @return If true, full command arguments will be audited.
     * 
     */
    private final Boolean auditFullCommandArguments;
    /**
     * @return If true, host failed logins will be audited.
     * 
     */
    private final Boolean auditHostFailedLoginEvents;
    /**
     * @return If true, host successful logins will be audited.
     * 
     */
    private final Boolean auditHostSuccessfulLoginEvents;
    /**
     * @return If true, account management will be audited.
     * 
     */
    private final Boolean auditUserAccountManagement;
    /**
     * @return Username of the account that created the service.
     * 
     */
    private final String author;
    /**
     * @return Detect and prevent communication to DNS/IP addresses known to be used for Cryptocurrency Mining
     * 
     */
    private final Boolean blockCryptocurrencyMining;
    /**
     * @return List of files that are prevented from being read, modified and executed in the containers.
     * 
     */
    private final List<String> blockedFiles;
    /**
     * @return The description of the host runtime policy
     * 
     */
    private final String description;
    /**
     * @return If true, detect and prevent communication from containers to IP addresses known to have a bad reputation.
     * 
     */
    private final Boolean enableIpReputationSecurity;
    /**
     * @return Indicates if the runtime policy is enabled or not.
     * 
     */
    private final Boolean enabled;
    /**
     * @return Indicates that policy should effect container execution (not just for audit).
     * 
     */
    private final Boolean enforce;
    /**
     * @return Indicates the number of days after which the runtime policy will be changed to enforce mode.
     * 
     */
    private final Integer enforceAfterDays;
    /**
     * @return Configuration for file integrity monitoring.
     * 
     */
    private final List<GetHostRuntimePolicyFileIntegrityMonitoring> fileIntegrityMonitorings;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private final String id;
    /**
     * @return If true, system log will be monitored.
     * 
     */
    private final Boolean monitorSystemLogIntegrity;
    /**
     * @return If true, system time changes will be monitored.
     * 
     */
    private final Boolean monitorSystemTimeChanges;
    /**
     * @return If true, windows service operations will be monitored.
     * 
     */
    private final Boolean monitorWindowsServices;
    /**
     * @return Name of the host runtime policy
     * 
     */
    private final String name;
    /**
     * @return List of OS (Linux or Windows) groups that are allowed to authenticate to the host, and block authentication requests from all others. Groups can be either Linux groups or Windows AD groups.
     * 
     */
    private final List<String> osGroupsAlloweds;
    /**
     * @return List of OS (Linux or Windows) groups that are not allowed to authenticate to the host, and block authentication requests from all others. Groups can be either Linux groups or Windows AD groups.
     * 
     */
    private final List<String> osGroupsBlockeds;
    /**
     * @return List of OS (Linux or Windows) users that are allowed to authenticate to the host, and block authentication requests from all others.
     * 
     */
    private final List<String> osUsersAlloweds;
    /**
     * @return List of OS (Linux or Windows) users that are not allowed to authenticate to the host, and block authentication requests from all others.
     * 
     */
    private final List<String> osUsersBlockeds;
    /**
     * @return List of packages that are not allowed read, write or execute all files that under the packages.
     * 
     */
    private final List<String> packageBlocks;
    /**
     * @return If true, port scanning behaviors will be audited.
     * 
     */
    private final Boolean portScanningDetection;
    /**
     * @return Logical expression of how to compute the dependency of the scope variables.
     * 
     */
    private final String scopeExpression;
    /**
     * @return List of scope attributes.
     * 
     */
    private final List<GetHostRuntimePolicyScopeVariable> scopeVariables;
    /**
     * @return Configuration for windows registry monitoring.
     * 
     */
    private final List<GetHostRuntimePolicyWindowsRegistryMonitoring> windowsRegistryMonitorings;
    /**
     * @return Configuration for windows registry protection.
     * 
     */
    private final List<GetHostRuntimePolicyWindowsRegistryProtection> windowsRegistryProtections;

    @CustomType.Constructor
    private GetHostRuntimePolicyResult(
        @CustomType.Parameter("applicationScopes") List<String> applicationScopes,
        @CustomType.Parameter("auditAllOsUserActivity") Boolean auditAllOsUserActivity,
        @CustomType.Parameter("auditBruteForceLogin") Boolean auditBruteForceLogin,
        @CustomType.Parameter("auditFullCommandArguments") Boolean auditFullCommandArguments,
        @CustomType.Parameter("auditHostFailedLoginEvents") Boolean auditHostFailedLoginEvents,
        @CustomType.Parameter("auditHostSuccessfulLoginEvents") Boolean auditHostSuccessfulLoginEvents,
        @CustomType.Parameter("auditUserAccountManagement") Boolean auditUserAccountManagement,
        @CustomType.Parameter("author") String author,
        @CustomType.Parameter("blockCryptocurrencyMining") Boolean blockCryptocurrencyMining,
        @CustomType.Parameter("blockedFiles") List<String> blockedFiles,
        @CustomType.Parameter("description") String description,
        @CustomType.Parameter("enableIpReputationSecurity") Boolean enableIpReputationSecurity,
        @CustomType.Parameter("enabled") Boolean enabled,
        @CustomType.Parameter("enforce") Boolean enforce,
        @CustomType.Parameter("enforceAfterDays") Integer enforceAfterDays,
        @CustomType.Parameter("fileIntegrityMonitorings") List<GetHostRuntimePolicyFileIntegrityMonitoring> fileIntegrityMonitorings,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("monitorSystemLogIntegrity") Boolean monitorSystemLogIntegrity,
        @CustomType.Parameter("monitorSystemTimeChanges") Boolean monitorSystemTimeChanges,
        @CustomType.Parameter("monitorWindowsServices") Boolean monitorWindowsServices,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("osGroupsAlloweds") List<String> osGroupsAlloweds,
        @CustomType.Parameter("osGroupsBlockeds") List<String> osGroupsBlockeds,
        @CustomType.Parameter("osUsersAlloweds") List<String> osUsersAlloweds,
        @CustomType.Parameter("osUsersBlockeds") List<String> osUsersBlockeds,
        @CustomType.Parameter("packageBlocks") List<String> packageBlocks,
        @CustomType.Parameter("portScanningDetection") Boolean portScanningDetection,
        @CustomType.Parameter("scopeExpression") String scopeExpression,
        @CustomType.Parameter("scopeVariables") List<GetHostRuntimePolicyScopeVariable> scopeVariables,
        @CustomType.Parameter("windowsRegistryMonitorings") List<GetHostRuntimePolicyWindowsRegistryMonitoring> windowsRegistryMonitorings,
        @CustomType.Parameter("windowsRegistryProtections") List<GetHostRuntimePolicyWindowsRegistryProtection> windowsRegistryProtections) {
        this.applicationScopes = applicationScopes;
        this.auditAllOsUserActivity = auditAllOsUserActivity;
        this.auditBruteForceLogin = auditBruteForceLogin;
        this.auditFullCommandArguments = auditFullCommandArguments;
        this.auditHostFailedLoginEvents = auditHostFailedLoginEvents;
        this.auditHostSuccessfulLoginEvents = auditHostSuccessfulLoginEvents;
        this.auditUserAccountManagement = auditUserAccountManagement;
        this.author = author;
        this.blockCryptocurrencyMining = blockCryptocurrencyMining;
        this.blockedFiles = blockedFiles;
        this.description = description;
        this.enableIpReputationSecurity = enableIpReputationSecurity;
        this.enabled = enabled;
        this.enforce = enforce;
        this.enforceAfterDays = enforceAfterDays;
        this.fileIntegrityMonitorings = fileIntegrityMonitorings;
        this.id = id;
        this.monitorSystemLogIntegrity = monitorSystemLogIntegrity;
        this.monitorSystemTimeChanges = monitorSystemTimeChanges;
        this.monitorWindowsServices = monitorWindowsServices;
        this.name = name;
        this.osGroupsAlloweds = osGroupsAlloweds;
        this.osGroupsBlockeds = osGroupsBlockeds;
        this.osUsersAlloweds = osUsersAlloweds;
        this.osUsersBlockeds = osUsersBlockeds;
        this.packageBlocks = packageBlocks;
        this.portScanningDetection = portScanningDetection;
        this.scopeExpression = scopeExpression;
        this.scopeVariables = scopeVariables;
        this.windowsRegistryMonitorings = windowsRegistryMonitorings;
        this.windowsRegistryProtections = windowsRegistryProtections;
    }

    /**
     * @return Indicates the application scope of the service.
     * 
     */
    public List<String> applicationScopes() {
        return this.applicationScopes;
    }
    /**
     * @return If true, all process activity will be audited.
     * 
     */
    public Boolean auditAllOsUserActivity() {
        return this.auditAllOsUserActivity;
    }
    /**
     * @return Detects brute force login attempts
     * 
     */
    public Boolean auditBruteForceLogin() {
        return this.auditBruteForceLogin;
    }
    /**
     * @return If true, full command arguments will be audited.
     * 
     */
    public Boolean auditFullCommandArguments() {
        return this.auditFullCommandArguments;
    }
    /**
     * @return If true, host failed logins will be audited.
     * 
     */
    public Boolean auditHostFailedLoginEvents() {
        return this.auditHostFailedLoginEvents;
    }
    /**
     * @return If true, host successful logins will be audited.
     * 
     */
    public Boolean auditHostSuccessfulLoginEvents() {
        return this.auditHostSuccessfulLoginEvents;
    }
    /**
     * @return If true, account management will be audited.
     * 
     */
    public Boolean auditUserAccountManagement() {
        return this.auditUserAccountManagement;
    }
    /**
     * @return Username of the account that created the service.
     * 
     */
    public String author() {
        return this.author;
    }
    /**
     * @return Detect and prevent communication to DNS/IP addresses known to be used for Cryptocurrency Mining
     * 
     */
    public Boolean blockCryptocurrencyMining() {
        return this.blockCryptocurrencyMining;
    }
    /**
     * @return List of files that are prevented from being read, modified and executed in the containers.
     * 
     */
    public List<String> blockedFiles() {
        return this.blockedFiles;
    }
    /**
     * @return The description of the host runtime policy
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return If true, detect and prevent communication from containers to IP addresses known to have a bad reputation.
     * 
     */
    public Boolean enableIpReputationSecurity() {
        return this.enableIpReputationSecurity;
    }
    /**
     * @return Indicates if the runtime policy is enabled or not.
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }
    /**
     * @return Indicates that policy should effect container execution (not just for audit).
     * 
     */
    public Boolean enforce() {
        return this.enforce;
    }
    /**
     * @return Indicates the number of days after which the runtime policy will be changed to enforce mode.
     * 
     */
    public Integer enforceAfterDays() {
        return this.enforceAfterDays;
    }
    /**
     * @return Configuration for file integrity monitoring.
     * 
     */
    public List<GetHostRuntimePolicyFileIntegrityMonitoring> fileIntegrityMonitorings() {
        return this.fileIntegrityMonitorings;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return If true, system log will be monitored.
     * 
     */
    public Boolean monitorSystemLogIntegrity() {
        return this.monitorSystemLogIntegrity;
    }
    /**
     * @return If true, system time changes will be monitored.
     * 
     */
    public Boolean monitorSystemTimeChanges() {
        return this.monitorSystemTimeChanges;
    }
    /**
     * @return If true, windows service operations will be monitored.
     * 
     */
    public Boolean monitorWindowsServices() {
        return this.monitorWindowsServices;
    }
    /**
     * @return Name of the host runtime policy
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return List of OS (Linux or Windows) groups that are allowed to authenticate to the host, and block authentication requests from all others. Groups can be either Linux groups or Windows AD groups.
     * 
     */
    public List<String> osGroupsAlloweds() {
        return this.osGroupsAlloweds;
    }
    /**
     * @return List of OS (Linux or Windows) groups that are not allowed to authenticate to the host, and block authentication requests from all others. Groups can be either Linux groups or Windows AD groups.
     * 
     */
    public List<String> osGroupsBlockeds() {
        return this.osGroupsBlockeds;
    }
    /**
     * @return List of OS (Linux or Windows) users that are allowed to authenticate to the host, and block authentication requests from all others.
     * 
     */
    public List<String> osUsersAlloweds() {
        return this.osUsersAlloweds;
    }
    /**
     * @return List of OS (Linux or Windows) users that are not allowed to authenticate to the host, and block authentication requests from all others.
     * 
     */
    public List<String> osUsersBlockeds() {
        return this.osUsersBlockeds;
    }
    /**
     * @return List of packages that are not allowed read, write or execute all files that under the packages.
     * 
     */
    public List<String> packageBlocks() {
        return this.packageBlocks;
    }
    /**
     * @return If true, port scanning behaviors will be audited.
     * 
     */
    public Boolean portScanningDetection() {
        return this.portScanningDetection;
    }
    /**
     * @return Logical expression of how to compute the dependency of the scope variables.
     * 
     */
    public String scopeExpression() {
        return this.scopeExpression;
    }
    /**
     * @return List of scope attributes.
     * 
     */
    public List<GetHostRuntimePolicyScopeVariable> scopeVariables() {
        return this.scopeVariables;
    }
    /**
     * @return Configuration for windows registry monitoring.
     * 
     */
    public List<GetHostRuntimePolicyWindowsRegistryMonitoring> windowsRegistryMonitorings() {
        return this.windowsRegistryMonitorings;
    }
    /**
     * @return Configuration for windows registry protection.
     * 
     */
    public List<GetHostRuntimePolicyWindowsRegistryProtection> windowsRegistryProtections() {
        return this.windowsRegistryProtections;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetHostRuntimePolicyResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<String> applicationScopes;
        private Boolean auditAllOsUserActivity;
        private Boolean auditBruteForceLogin;
        private Boolean auditFullCommandArguments;
        private Boolean auditHostFailedLoginEvents;
        private Boolean auditHostSuccessfulLoginEvents;
        private Boolean auditUserAccountManagement;
        private String author;
        private Boolean blockCryptocurrencyMining;
        private List<String> blockedFiles;
        private String description;
        private Boolean enableIpReputationSecurity;
        private Boolean enabled;
        private Boolean enforce;
        private Integer enforceAfterDays;
        private List<GetHostRuntimePolicyFileIntegrityMonitoring> fileIntegrityMonitorings;
        private String id;
        private Boolean monitorSystemLogIntegrity;
        private Boolean monitorSystemTimeChanges;
        private Boolean monitorWindowsServices;
        private String name;
        private List<String> osGroupsAlloweds;
        private List<String> osGroupsBlockeds;
        private List<String> osUsersAlloweds;
        private List<String> osUsersBlockeds;
        private List<String> packageBlocks;
        private Boolean portScanningDetection;
        private String scopeExpression;
        private List<GetHostRuntimePolicyScopeVariable> scopeVariables;
        private List<GetHostRuntimePolicyWindowsRegistryMonitoring> windowsRegistryMonitorings;
        private List<GetHostRuntimePolicyWindowsRegistryProtection> windowsRegistryProtections;

        public Builder() {
    	      // Empty
        }

        public Builder(GetHostRuntimePolicyResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applicationScopes = defaults.applicationScopes;
    	      this.auditAllOsUserActivity = defaults.auditAllOsUserActivity;
    	      this.auditBruteForceLogin = defaults.auditBruteForceLogin;
    	      this.auditFullCommandArguments = defaults.auditFullCommandArguments;
    	      this.auditHostFailedLoginEvents = defaults.auditHostFailedLoginEvents;
    	      this.auditHostSuccessfulLoginEvents = defaults.auditHostSuccessfulLoginEvents;
    	      this.auditUserAccountManagement = defaults.auditUserAccountManagement;
    	      this.author = defaults.author;
    	      this.blockCryptocurrencyMining = defaults.blockCryptocurrencyMining;
    	      this.blockedFiles = defaults.blockedFiles;
    	      this.description = defaults.description;
    	      this.enableIpReputationSecurity = defaults.enableIpReputationSecurity;
    	      this.enabled = defaults.enabled;
    	      this.enforce = defaults.enforce;
    	      this.enforceAfterDays = defaults.enforceAfterDays;
    	      this.fileIntegrityMonitorings = defaults.fileIntegrityMonitorings;
    	      this.id = defaults.id;
    	      this.monitorSystemLogIntegrity = defaults.monitorSystemLogIntegrity;
    	      this.monitorSystemTimeChanges = defaults.monitorSystemTimeChanges;
    	      this.monitorWindowsServices = defaults.monitorWindowsServices;
    	      this.name = defaults.name;
    	      this.osGroupsAlloweds = defaults.osGroupsAlloweds;
    	      this.osGroupsBlockeds = defaults.osGroupsBlockeds;
    	      this.osUsersAlloweds = defaults.osUsersAlloweds;
    	      this.osUsersBlockeds = defaults.osUsersBlockeds;
    	      this.packageBlocks = defaults.packageBlocks;
    	      this.portScanningDetection = defaults.portScanningDetection;
    	      this.scopeExpression = defaults.scopeExpression;
    	      this.scopeVariables = defaults.scopeVariables;
    	      this.windowsRegistryMonitorings = defaults.windowsRegistryMonitorings;
    	      this.windowsRegistryProtections = defaults.windowsRegistryProtections;
        }

        public Builder applicationScopes(List<String> applicationScopes) {
            this.applicationScopes = Objects.requireNonNull(applicationScopes);
            return this;
        }
        public Builder applicationScopes(String... applicationScopes) {
            return applicationScopes(List.of(applicationScopes));
        }
        public Builder auditAllOsUserActivity(Boolean auditAllOsUserActivity) {
            this.auditAllOsUserActivity = Objects.requireNonNull(auditAllOsUserActivity);
            return this;
        }
        public Builder auditBruteForceLogin(Boolean auditBruteForceLogin) {
            this.auditBruteForceLogin = Objects.requireNonNull(auditBruteForceLogin);
            return this;
        }
        public Builder auditFullCommandArguments(Boolean auditFullCommandArguments) {
            this.auditFullCommandArguments = Objects.requireNonNull(auditFullCommandArguments);
            return this;
        }
        public Builder auditHostFailedLoginEvents(Boolean auditHostFailedLoginEvents) {
            this.auditHostFailedLoginEvents = Objects.requireNonNull(auditHostFailedLoginEvents);
            return this;
        }
        public Builder auditHostSuccessfulLoginEvents(Boolean auditHostSuccessfulLoginEvents) {
            this.auditHostSuccessfulLoginEvents = Objects.requireNonNull(auditHostSuccessfulLoginEvents);
            return this;
        }
        public Builder auditUserAccountManagement(Boolean auditUserAccountManagement) {
            this.auditUserAccountManagement = Objects.requireNonNull(auditUserAccountManagement);
            return this;
        }
        public Builder author(String author) {
            this.author = Objects.requireNonNull(author);
            return this;
        }
        public Builder blockCryptocurrencyMining(Boolean blockCryptocurrencyMining) {
            this.blockCryptocurrencyMining = Objects.requireNonNull(blockCryptocurrencyMining);
            return this;
        }
        public Builder blockedFiles(List<String> blockedFiles) {
            this.blockedFiles = Objects.requireNonNull(blockedFiles);
            return this;
        }
        public Builder blockedFiles(String... blockedFiles) {
            return blockedFiles(List.of(blockedFiles));
        }
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        public Builder enableIpReputationSecurity(Boolean enableIpReputationSecurity) {
            this.enableIpReputationSecurity = Objects.requireNonNull(enableIpReputationSecurity);
            return this;
        }
        public Builder enabled(Boolean enabled) {
            this.enabled = Objects.requireNonNull(enabled);
            return this;
        }
        public Builder enforce(Boolean enforce) {
            this.enforce = Objects.requireNonNull(enforce);
            return this;
        }
        public Builder enforceAfterDays(Integer enforceAfterDays) {
            this.enforceAfterDays = Objects.requireNonNull(enforceAfterDays);
            return this;
        }
        public Builder fileIntegrityMonitorings(List<GetHostRuntimePolicyFileIntegrityMonitoring> fileIntegrityMonitorings) {
            this.fileIntegrityMonitorings = Objects.requireNonNull(fileIntegrityMonitorings);
            return this;
        }
        public Builder fileIntegrityMonitorings(GetHostRuntimePolicyFileIntegrityMonitoring... fileIntegrityMonitorings) {
            return fileIntegrityMonitorings(List.of(fileIntegrityMonitorings));
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder monitorSystemLogIntegrity(Boolean monitorSystemLogIntegrity) {
            this.monitorSystemLogIntegrity = Objects.requireNonNull(monitorSystemLogIntegrity);
            return this;
        }
        public Builder monitorSystemTimeChanges(Boolean monitorSystemTimeChanges) {
            this.monitorSystemTimeChanges = Objects.requireNonNull(monitorSystemTimeChanges);
            return this;
        }
        public Builder monitorWindowsServices(Boolean monitorWindowsServices) {
            this.monitorWindowsServices = Objects.requireNonNull(monitorWindowsServices);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder osGroupsAlloweds(List<String> osGroupsAlloweds) {
            this.osGroupsAlloweds = Objects.requireNonNull(osGroupsAlloweds);
            return this;
        }
        public Builder osGroupsAlloweds(String... osGroupsAlloweds) {
            return osGroupsAlloweds(List.of(osGroupsAlloweds));
        }
        public Builder osGroupsBlockeds(List<String> osGroupsBlockeds) {
            this.osGroupsBlockeds = Objects.requireNonNull(osGroupsBlockeds);
            return this;
        }
        public Builder osGroupsBlockeds(String... osGroupsBlockeds) {
            return osGroupsBlockeds(List.of(osGroupsBlockeds));
        }
        public Builder osUsersAlloweds(List<String> osUsersAlloweds) {
            this.osUsersAlloweds = Objects.requireNonNull(osUsersAlloweds);
            return this;
        }
        public Builder osUsersAlloweds(String... osUsersAlloweds) {
            return osUsersAlloweds(List.of(osUsersAlloweds));
        }
        public Builder osUsersBlockeds(List<String> osUsersBlockeds) {
            this.osUsersBlockeds = Objects.requireNonNull(osUsersBlockeds);
            return this;
        }
        public Builder osUsersBlockeds(String... osUsersBlockeds) {
            return osUsersBlockeds(List.of(osUsersBlockeds));
        }
        public Builder packageBlocks(List<String> packageBlocks) {
            this.packageBlocks = Objects.requireNonNull(packageBlocks);
            return this;
        }
        public Builder packageBlocks(String... packageBlocks) {
            return packageBlocks(List.of(packageBlocks));
        }
        public Builder portScanningDetection(Boolean portScanningDetection) {
            this.portScanningDetection = Objects.requireNonNull(portScanningDetection);
            return this;
        }
        public Builder scopeExpression(String scopeExpression) {
            this.scopeExpression = Objects.requireNonNull(scopeExpression);
            return this;
        }
        public Builder scopeVariables(List<GetHostRuntimePolicyScopeVariable> scopeVariables) {
            this.scopeVariables = Objects.requireNonNull(scopeVariables);
            return this;
        }
        public Builder scopeVariables(GetHostRuntimePolicyScopeVariable... scopeVariables) {
            return scopeVariables(List.of(scopeVariables));
        }
        public Builder windowsRegistryMonitorings(List<GetHostRuntimePolicyWindowsRegistryMonitoring> windowsRegistryMonitorings) {
            this.windowsRegistryMonitorings = Objects.requireNonNull(windowsRegistryMonitorings);
            return this;
        }
        public Builder windowsRegistryMonitorings(GetHostRuntimePolicyWindowsRegistryMonitoring... windowsRegistryMonitorings) {
            return windowsRegistryMonitorings(List.of(windowsRegistryMonitorings));
        }
        public Builder windowsRegistryProtections(List<GetHostRuntimePolicyWindowsRegistryProtection> windowsRegistryProtections) {
            this.windowsRegistryProtections = Objects.requireNonNull(windowsRegistryProtections);
            return this;
        }
        public Builder windowsRegistryProtections(GetHostRuntimePolicyWindowsRegistryProtection... windowsRegistryProtections) {
            return windowsRegistryProtections(List.of(windowsRegistryProtections));
        }        public GetHostRuntimePolicyResult build() {
            return new GetHostRuntimePolicyResult(applicationScopes, auditAllOsUserActivity, auditBruteForceLogin, auditFullCommandArguments, auditHostFailedLoginEvents, auditHostSuccessfulLoginEvents, auditUserAccountManagement, author, blockCryptocurrencyMining, blockedFiles, description, enableIpReputationSecurity, enabled, enforce, enforceAfterDays, fileIntegrityMonitorings, id, monitorSystemLogIntegrity, monitorSystemTimeChanges, monitorWindowsServices, name, osGroupsAlloweds, osGroupsBlockeds, osUsersAlloweds, osUsersBlockeds, packageBlocks, portScanningDetection, scopeExpression, scopeVariables, windowsRegistryMonitorings, windowsRegistryProtections);
        }
    }
}
