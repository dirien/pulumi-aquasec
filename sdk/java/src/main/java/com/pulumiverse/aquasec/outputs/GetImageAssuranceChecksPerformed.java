// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumiverse.aquasec.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetImageAssuranceChecksPerformed {
    private final String assuranceType;
    private final Boolean blocking;
    private final String control;
    /**
     * @return If DTA was skipped.
     * 
     */
    private final Boolean dtaSkipped;
    /**
     * @return The reason why DTA was skipped.
     * 
     */
    private final String dtaSkippedReason;
    private final Boolean failed;
    private final String policyName;

    @CustomType.Constructor
    private GetImageAssuranceChecksPerformed(
        @CustomType.Parameter("assuranceType") String assuranceType,
        @CustomType.Parameter("blocking") Boolean blocking,
        @CustomType.Parameter("control") String control,
        @CustomType.Parameter("dtaSkipped") Boolean dtaSkipped,
        @CustomType.Parameter("dtaSkippedReason") String dtaSkippedReason,
        @CustomType.Parameter("failed") Boolean failed,
        @CustomType.Parameter("policyName") String policyName) {
        this.assuranceType = assuranceType;
        this.blocking = blocking;
        this.control = control;
        this.dtaSkipped = dtaSkipped;
        this.dtaSkippedReason = dtaSkippedReason;
        this.failed = failed;
        this.policyName = policyName;
    }

    public String assuranceType() {
        return this.assuranceType;
    }
    public Boolean blocking() {
        return this.blocking;
    }
    public String control() {
        return this.control;
    }
    /**
     * @return If DTA was skipped.
     * 
     */
    public Boolean dtaSkipped() {
        return this.dtaSkipped;
    }
    /**
     * @return The reason why DTA was skipped.
     * 
     */
    public String dtaSkippedReason() {
        return this.dtaSkippedReason;
    }
    public Boolean failed() {
        return this.failed;
    }
    public String policyName() {
        return this.policyName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetImageAssuranceChecksPerformed defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String assuranceType;
        private Boolean blocking;
        private String control;
        private Boolean dtaSkipped;
        private String dtaSkippedReason;
        private Boolean failed;
        private String policyName;

        public Builder() {
    	      // Empty
        }

        public Builder(GetImageAssuranceChecksPerformed defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.assuranceType = defaults.assuranceType;
    	      this.blocking = defaults.blocking;
    	      this.control = defaults.control;
    	      this.dtaSkipped = defaults.dtaSkipped;
    	      this.dtaSkippedReason = defaults.dtaSkippedReason;
    	      this.failed = defaults.failed;
    	      this.policyName = defaults.policyName;
        }

        public Builder assuranceType(String assuranceType) {
            this.assuranceType = Objects.requireNonNull(assuranceType);
            return this;
        }
        public Builder blocking(Boolean blocking) {
            this.blocking = Objects.requireNonNull(blocking);
            return this;
        }
        public Builder control(String control) {
            this.control = Objects.requireNonNull(control);
            return this;
        }
        public Builder dtaSkipped(Boolean dtaSkipped) {
            this.dtaSkipped = Objects.requireNonNull(dtaSkipped);
            return this;
        }
        public Builder dtaSkippedReason(String dtaSkippedReason) {
            this.dtaSkippedReason = Objects.requireNonNull(dtaSkippedReason);
            return this;
        }
        public Builder failed(Boolean failed) {
            this.failed = Objects.requireNonNull(failed);
            return this;
        }
        public Builder policyName(String policyName) {
            this.policyName = Objects.requireNonNull(policyName);
            return this;
        }        public GetImageAssuranceChecksPerformed build() {
            return new GetImageAssuranceChecksPerformed(assuranceType, blocking, control, dtaSkipped, dtaSkippedReason, failed, policyName);
        }
    }
}
