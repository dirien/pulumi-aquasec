// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumiverse.aquasec.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumiverse.aquasec.outputs.GetImageAssuranceChecksPerformed;
import com.pulumiverse.aquasec.outputs.GetImageHistory;
import com.pulumiverse.aquasec.outputs.GetImageVulnerability;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetImageResult {
    /**
     * @return The image architecture.
     * 
     */
    private String architecture;
    /**
     * @return The list of image assurance checks performed on the image.
     * 
     */
    private List<GetImageAssuranceChecksPerformed> assuranceChecksPerformeds;
    /**
     * @return The name of the user who registered the image.
     * 
     */
    private String author;
    /**
     * @return Whether the image is blacklisted.
     * 
     */
    private Boolean blacklisted;
    /**
     * @return The image creation comment.
     * 
     */
    private String comment;
    /**
     * @return The date and time when the image was registered.
     * 
     */
    private String created;
    /**
     * @return Number of critical severity vulnerabilities detected in the image.
     * 
     */
    private Integer criticalVulnerabilities;
    /**
     * @return The default user of the image.
     * 
     */
    private String defaultUser;
    /**
     * @return The content digest of the image.
     * 
     */
    private String digest;
    /**
     * @return Whether the image is disallowed (non-compliant).
     * 
     */
    private Boolean disallowed;
    /**
     * @return Whether the image was disallowed because of Image Assurance Policies.
     * 
     */
    private Boolean disallowedByAssuranceChecks;
    /**
     * @return The Docker image ID.
     * 
     */
    private String dockerId;
    /**
     * @return Docker labels of the image.
     * 
     */
    private List<String> dockerLabels;
    /**
     * @return The Docker version used when building the image.
     * 
     */
    private String dockerVersion;
    /**
     * @return DTA severity score.
     * 
     */
    private String dtaSeverityScore;
    /**
     * @return If DTA was skipped.
     * 
     */
    private Boolean dtaSkipped;
    /**
     * @return The reason why DTA was skipped.
     * 
     */
    private String dtaSkippedReason;
    /**
     * @return Environment variables in the image.
     * 
     */
    private List<String> environmentVariables;
    /**
     * @return Number of high severity vulnerabilities detected in the image.
     * 
     */
    private Integer highVulnerabilities;
    /**
     * @return The Docker history of the image.
     * 
     */
    private List<GetImageHistory> histories;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The size of the image in bytes.
     * 
     */
    private Integer imageSize;
    /**
     * @return The type of the image.
     * 
     */
    private String imageType;
    /**
     * @return Aqua labels of the image.
     * 
     */
    private List<String> labels;
    /**
     * @return Number of low severity vulnerabilities detected in the image.
     * 
     */
    private Integer lowVulnerabilities;
    /**
     * @return Number of malware found on the image.
     * 
     */
    private Integer malware;
    /**
     * @return Number of medium severity vulnerabilities detected in the image.
     * 
     */
    private Integer mediumVulnerabilities;
    /**
     * @return The name of the image.
     * 
     */
    private String name;
    /**
     * @return Number of negligible severity vulnerabilities detected in the image.
     * 
     */
    private Integer negligibleVulnerabilities;
    /**
     * @return Whether a new version of the image is available in the registry but is not scanned and registered yet.
     * 
     */
    private Boolean newerImageExists;
    /**
     * @return The operating system detected in the image
     * 
     */
    private String os;
    /**
     * @return The version of the OS detected in the image.
     * 
     */
    private String osVersion;
    /**
     * @return The ID of the parent image.
     * 
     */
    private String parent;
    /**
     * @return Whether the image could only be partially scanned.
     * 
     */
    private Boolean partialResults;
    /**
     * @return Whether the image is non-compliant, but is pending this status due to running containers.
     * 
     */
    private Boolean pendingDisallowed;
    /**
     * @return Permission of the image.
     * 
     */
    private String permission;
    /**
     * @return The name of the user who last modified the image permissions.
     * 
     */
    private String permissionAuthor;
    /**
     * @return The comment provided when the image permissions were last modified
     * 
     */
    private String permissionComment;
    /**
     * @return The name of the registry where the image is stored.
     * 
     */
    private String registry;
    /**
     * @return Type of the registry.
     * 
     */
    private String registryType;
    /**
     * @return The repository digests.
     * 
     */
    private List<String> repoDigests;
    /**
     * @return The name of the image&#39;s repository.
     * 
     */
    private String repository;
    /**
     * @return The date and time when the image was last scanned.
     * 
     */
    private String scanDate;
    /**
     * @return If the image scan failed, the failure message.
     * 
     */
    private String scanError;
    /**
     * @return The scan status of the image (either &#39;pending&#39;, &#39;in*progress&#39;, &#39;finished&#39;, &#39;failed&#39; or &#39;not*started&#39;).
     * 
     */
    private String scanStatus;
    /**
     * @return Number of sensitive data detected in the image.
     * 
     */
    private Integer sensitiveData;
    /**
     * @return The tag of the image.
     * 
     */
    private String tag;
    /**
     * @return The total number of vulnerabilities detected in the image.
     * 
     */
    private Integer totalVulnerabilities;
    /**
     * @return The virtual size of the image.
     * 
     */
    private Integer virtualSize;
    /**
     * @return A list of all the vulnerabilities found in the image
     * 
     */
    private List<GetImageVulnerability> vulnerabilities;
    /**
     * @return Whether the image is whitelisted.
     * 
     */
    private Boolean whitelisted;

    private GetImageResult() {}
    /**
     * @return The image architecture.
     * 
     */
    public String architecture() {
        return this.architecture;
    }
    /**
     * @return The list of image assurance checks performed on the image.
     * 
     */
    public List<GetImageAssuranceChecksPerformed> assuranceChecksPerformeds() {
        return this.assuranceChecksPerformeds;
    }
    /**
     * @return The name of the user who registered the image.
     * 
     */
    public String author() {
        return this.author;
    }
    /**
     * @return Whether the image is blacklisted.
     * 
     */
    public Boolean blacklisted() {
        return this.blacklisted;
    }
    /**
     * @return The image creation comment.
     * 
     */
    public String comment() {
        return this.comment;
    }
    /**
     * @return The date and time when the image was registered.
     * 
     */
    public String created() {
        return this.created;
    }
    /**
     * @return Number of critical severity vulnerabilities detected in the image.
     * 
     */
    public Integer criticalVulnerabilities() {
        return this.criticalVulnerabilities;
    }
    /**
     * @return The default user of the image.
     * 
     */
    public String defaultUser() {
        return this.defaultUser;
    }
    /**
     * @return The content digest of the image.
     * 
     */
    public String digest() {
        return this.digest;
    }
    /**
     * @return Whether the image is disallowed (non-compliant).
     * 
     */
    public Boolean disallowed() {
        return this.disallowed;
    }
    /**
     * @return Whether the image was disallowed because of Image Assurance Policies.
     * 
     */
    public Boolean disallowedByAssuranceChecks() {
        return this.disallowedByAssuranceChecks;
    }
    /**
     * @return The Docker image ID.
     * 
     */
    public String dockerId() {
        return this.dockerId;
    }
    /**
     * @return Docker labels of the image.
     * 
     */
    public List<String> dockerLabels() {
        return this.dockerLabels;
    }
    /**
     * @return The Docker version used when building the image.
     * 
     */
    public String dockerVersion() {
        return this.dockerVersion;
    }
    /**
     * @return DTA severity score.
     * 
     */
    public String dtaSeverityScore() {
        return this.dtaSeverityScore;
    }
    /**
     * @return If DTA was skipped.
     * 
     */
    public Boolean dtaSkipped() {
        return this.dtaSkipped;
    }
    /**
     * @return The reason why DTA was skipped.
     * 
     */
    public String dtaSkippedReason() {
        return this.dtaSkippedReason;
    }
    /**
     * @return Environment variables in the image.
     * 
     */
    public List<String> environmentVariables() {
        return this.environmentVariables;
    }
    /**
     * @return Number of high severity vulnerabilities detected in the image.
     * 
     */
    public Integer highVulnerabilities() {
        return this.highVulnerabilities;
    }
    /**
     * @return The Docker history of the image.
     * 
     */
    public List<GetImageHistory> histories() {
        return this.histories;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The size of the image in bytes.
     * 
     */
    public Integer imageSize() {
        return this.imageSize;
    }
    /**
     * @return The type of the image.
     * 
     */
    public String imageType() {
        return this.imageType;
    }
    /**
     * @return Aqua labels of the image.
     * 
     */
    public List<String> labels() {
        return this.labels;
    }
    /**
     * @return Number of low severity vulnerabilities detected in the image.
     * 
     */
    public Integer lowVulnerabilities() {
        return this.lowVulnerabilities;
    }
    /**
     * @return Number of malware found on the image.
     * 
     */
    public Integer malware() {
        return this.malware;
    }
    /**
     * @return Number of medium severity vulnerabilities detected in the image.
     * 
     */
    public Integer mediumVulnerabilities() {
        return this.mediumVulnerabilities;
    }
    /**
     * @return The name of the image.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Number of negligible severity vulnerabilities detected in the image.
     * 
     */
    public Integer negligibleVulnerabilities() {
        return this.negligibleVulnerabilities;
    }
    /**
     * @return Whether a new version of the image is available in the registry but is not scanned and registered yet.
     * 
     */
    public Boolean newerImageExists() {
        return this.newerImageExists;
    }
    /**
     * @return The operating system detected in the image
     * 
     */
    public String os() {
        return this.os;
    }
    /**
     * @return The version of the OS detected in the image.
     * 
     */
    public String osVersion() {
        return this.osVersion;
    }
    /**
     * @return The ID of the parent image.
     * 
     */
    public String parent() {
        return this.parent;
    }
    /**
     * @return Whether the image could only be partially scanned.
     * 
     */
    public Boolean partialResults() {
        return this.partialResults;
    }
    /**
     * @return Whether the image is non-compliant, but is pending this status due to running containers.
     * 
     */
    public Boolean pendingDisallowed() {
        return this.pendingDisallowed;
    }
    /**
     * @return Permission of the image.
     * 
     */
    public String permission() {
        return this.permission;
    }
    /**
     * @return The name of the user who last modified the image permissions.
     * 
     */
    public String permissionAuthor() {
        return this.permissionAuthor;
    }
    /**
     * @return The comment provided when the image permissions were last modified
     * 
     */
    public String permissionComment() {
        return this.permissionComment;
    }
    /**
     * @return The name of the registry where the image is stored.
     * 
     */
    public String registry() {
        return this.registry;
    }
    /**
     * @return Type of the registry.
     * 
     */
    public String registryType() {
        return this.registryType;
    }
    /**
     * @return The repository digests.
     * 
     */
    public List<String> repoDigests() {
        return this.repoDigests;
    }
    /**
     * @return The name of the image&#39;s repository.
     * 
     */
    public String repository() {
        return this.repository;
    }
    /**
     * @return The date and time when the image was last scanned.
     * 
     */
    public String scanDate() {
        return this.scanDate;
    }
    /**
     * @return If the image scan failed, the failure message.
     * 
     */
    public String scanError() {
        return this.scanError;
    }
    /**
     * @return The scan status of the image (either &#39;pending&#39;, &#39;in*progress&#39;, &#39;finished&#39;, &#39;failed&#39; or &#39;not*started&#39;).
     * 
     */
    public String scanStatus() {
        return this.scanStatus;
    }
    /**
     * @return Number of sensitive data detected in the image.
     * 
     */
    public Integer sensitiveData() {
        return this.sensitiveData;
    }
    /**
     * @return The tag of the image.
     * 
     */
    public String tag() {
        return this.tag;
    }
    /**
     * @return The total number of vulnerabilities detected in the image.
     * 
     */
    public Integer totalVulnerabilities() {
        return this.totalVulnerabilities;
    }
    /**
     * @return The virtual size of the image.
     * 
     */
    public Integer virtualSize() {
        return this.virtualSize;
    }
    /**
     * @return A list of all the vulnerabilities found in the image
     * 
     */
    public List<GetImageVulnerability> vulnerabilities() {
        return this.vulnerabilities;
    }
    /**
     * @return Whether the image is whitelisted.
     * 
     */
    public Boolean whitelisted() {
        return this.whitelisted;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetImageResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String architecture;
        private List<GetImageAssuranceChecksPerformed> assuranceChecksPerformeds;
        private String author;
        private Boolean blacklisted;
        private String comment;
        private String created;
        private Integer criticalVulnerabilities;
        private String defaultUser;
        private String digest;
        private Boolean disallowed;
        private Boolean disallowedByAssuranceChecks;
        private String dockerId;
        private List<String> dockerLabels;
        private String dockerVersion;
        private String dtaSeverityScore;
        private Boolean dtaSkipped;
        private String dtaSkippedReason;
        private List<String> environmentVariables;
        private Integer highVulnerabilities;
        private List<GetImageHistory> histories;
        private String id;
        private Integer imageSize;
        private String imageType;
        private List<String> labels;
        private Integer lowVulnerabilities;
        private Integer malware;
        private Integer mediumVulnerabilities;
        private String name;
        private Integer negligibleVulnerabilities;
        private Boolean newerImageExists;
        private String os;
        private String osVersion;
        private String parent;
        private Boolean partialResults;
        private Boolean pendingDisallowed;
        private String permission;
        private String permissionAuthor;
        private String permissionComment;
        private String registry;
        private String registryType;
        private List<String> repoDigests;
        private String repository;
        private String scanDate;
        private String scanError;
        private String scanStatus;
        private Integer sensitiveData;
        private String tag;
        private Integer totalVulnerabilities;
        private Integer virtualSize;
        private List<GetImageVulnerability> vulnerabilities;
        private Boolean whitelisted;
        public Builder() {}
        public Builder(GetImageResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.architecture = defaults.architecture;
    	      this.assuranceChecksPerformeds = defaults.assuranceChecksPerformeds;
    	      this.author = defaults.author;
    	      this.blacklisted = defaults.blacklisted;
    	      this.comment = defaults.comment;
    	      this.created = defaults.created;
    	      this.criticalVulnerabilities = defaults.criticalVulnerabilities;
    	      this.defaultUser = defaults.defaultUser;
    	      this.digest = defaults.digest;
    	      this.disallowed = defaults.disallowed;
    	      this.disallowedByAssuranceChecks = defaults.disallowedByAssuranceChecks;
    	      this.dockerId = defaults.dockerId;
    	      this.dockerLabels = defaults.dockerLabels;
    	      this.dockerVersion = defaults.dockerVersion;
    	      this.dtaSeverityScore = defaults.dtaSeverityScore;
    	      this.dtaSkipped = defaults.dtaSkipped;
    	      this.dtaSkippedReason = defaults.dtaSkippedReason;
    	      this.environmentVariables = defaults.environmentVariables;
    	      this.highVulnerabilities = defaults.highVulnerabilities;
    	      this.histories = defaults.histories;
    	      this.id = defaults.id;
    	      this.imageSize = defaults.imageSize;
    	      this.imageType = defaults.imageType;
    	      this.labels = defaults.labels;
    	      this.lowVulnerabilities = defaults.lowVulnerabilities;
    	      this.malware = defaults.malware;
    	      this.mediumVulnerabilities = defaults.mediumVulnerabilities;
    	      this.name = defaults.name;
    	      this.negligibleVulnerabilities = defaults.negligibleVulnerabilities;
    	      this.newerImageExists = defaults.newerImageExists;
    	      this.os = defaults.os;
    	      this.osVersion = defaults.osVersion;
    	      this.parent = defaults.parent;
    	      this.partialResults = defaults.partialResults;
    	      this.pendingDisallowed = defaults.pendingDisallowed;
    	      this.permission = defaults.permission;
    	      this.permissionAuthor = defaults.permissionAuthor;
    	      this.permissionComment = defaults.permissionComment;
    	      this.registry = defaults.registry;
    	      this.registryType = defaults.registryType;
    	      this.repoDigests = defaults.repoDigests;
    	      this.repository = defaults.repository;
    	      this.scanDate = defaults.scanDate;
    	      this.scanError = defaults.scanError;
    	      this.scanStatus = defaults.scanStatus;
    	      this.sensitiveData = defaults.sensitiveData;
    	      this.tag = defaults.tag;
    	      this.totalVulnerabilities = defaults.totalVulnerabilities;
    	      this.virtualSize = defaults.virtualSize;
    	      this.vulnerabilities = defaults.vulnerabilities;
    	      this.whitelisted = defaults.whitelisted;
        }

        @CustomType.Setter
        public Builder architecture(String architecture) {
            this.architecture = Objects.requireNonNull(architecture);
            return this;
        }
        @CustomType.Setter
        public Builder assuranceChecksPerformeds(List<GetImageAssuranceChecksPerformed> assuranceChecksPerformeds) {
            this.assuranceChecksPerformeds = Objects.requireNonNull(assuranceChecksPerformeds);
            return this;
        }
        public Builder assuranceChecksPerformeds(GetImageAssuranceChecksPerformed... assuranceChecksPerformeds) {
            return assuranceChecksPerformeds(List.of(assuranceChecksPerformeds));
        }
        @CustomType.Setter
        public Builder author(String author) {
            this.author = Objects.requireNonNull(author);
            return this;
        }
        @CustomType.Setter
        public Builder blacklisted(Boolean blacklisted) {
            this.blacklisted = Objects.requireNonNull(blacklisted);
            return this;
        }
        @CustomType.Setter
        public Builder comment(String comment) {
            this.comment = Objects.requireNonNull(comment);
            return this;
        }
        @CustomType.Setter
        public Builder created(String created) {
            this.created = Objects.requireNonNull(created);
            return this;
        }
        @CustomType.Setter
        public Builder criticalVulnerabilities(Integer criticalVulnerabilities) {
            this.criticalVulnerabilities = Objects.requireNonNull(criticalVulnerabilities);
            return this;
        }
        @CustomType.Setter
        public Builder defaultUser(String defaultUser) {
            this.defaultUser = Objects.requireNonNull(defaultUser);
            return this;
        }
        @CustomType.Setter
        public Builder digest(String digest) {
            this.digest = Objects.requireNonNull(digest);
            return this;
        }
        @CustomType.Setter
        public Builder disallowed(Boolean disallowed) {
            this.disallowed = Objects.requireNonNull(disallowed);
            return this;
        }
        @CustomType.Setter
        public Builder disallowedByAssuranceChecks(Boolean disallowedByAssuranceChecks) {
            this.disallowedByAssuranceChecks = Objects.requireNonNull(disallowedByAssuranceChecks);
            return this;
        }
        @CustomType.Setter
        public Builder dockerId(String dockerId) {
            this.dockerId = Objects.requireNonNull(dockerId);
            return this;
        }
        @CustomType.Setter
        public Builder dockerLabels(List<String> dockerLabels) {
            this.dockerLabels = Objects.requireNonNull(dockerLabels);
            return this;
        }
        public Builder dockerLabels(String... dockerLabels) {
            return dockerLabels(List.of(dockerLabels));
        }
        @CustomType.Setter
        public Builder dockerVersion(String dockerVersion) {
            this.dockerVersion = Objects.requireNonNull(dockerVersion);
            return this;
        }
        @CustomType.Setter
        public Builder dtaSeverityScore(String dtaSeverityScore) {
            this.dtaSeverityScore = Objects.requireNonNull(dtaSeverityScore);
            return this;
        }
        @CustomType.Setter
        public Builder dtaSkipped(Boolean dtaSkipped) {
            this.dtaSkipped = Objects.requireNonNull(dtaSkipped);
            return this;
        }
        @CustomType.Setter
        public Builder dtaSkippedReason(String dtaSkippedReason) {
            this.dtaSkippedReason = Objects.requireNonNull(dtaSkippedReason);
            return this;
        }
        @CustomType.Setter
        public Builder environmentVariables(List<String> environmentVariables) {
            this.environmentVariables = Objects.requireNonNull(environmentVariables);
            return this;
        }
        public Builder environmentVariables(String... environmentVariables) {
            return environmentVariables(List.of(environmentVariables));
        }
        @CustomType.Setter
        public Builder highVulnerabilities(Integer highVulnerabilities) {
            this.highVulnerabilities = Objects.requireNonNull(highVulnerabilities);
            return this;
        }
        @CustomType.Setter
        public Builder histories(List<GetImageHistory> histories) {
            this.histories = Objects.requireNonNull(histories);
            return this;
        }
        public Builder histories(GetImageHistory... histories) {
            return histories(List.of(histories));
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder imageSize(Integer imageSize) {
            this.imageSize = Objects.requireNonNull(imageSize);
            return this;
        }
        @CustomType.Setter
        public Builder imageType(String imageType) {
            this.imageType = Objects.requireNonNull(imageType);
            return this;
        }
        @CustomType.Setter
        public Builder labels(List<String> labels) {
            this.labels = Objects.requireNonNull(labels);
            return this;
        }
        public Builder labels(String... labels) {
            return labels(List.of(labels));
        }
        @CustomType.Setter
        public Builder lowVulnerabilities(Integer lowVulnerabilities) {
            this.lowVulnerabilities = Objects.requireNonNull(lowVulnerabilities);
            return this;
        }
        @CustomType.Setter
        public Builder malware(Integer malware) {
            this.malware = Objects.requireNonNull(malware);
            return this;
        }
        @CustomType.Setter
        public Builder mediumVulnerabilities(Integer mediumVulnerabilities) {
            this.mediumVulnerabilities = Objects.requireNonNull(mediumVulnerabilities);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder negligibleVulnerabilities(Integer negligibleVulnerabilities) {
            this.negligibleVulnerabilities = Objects.requireNonNull(negligibleVulnerabilities);
            return this;
        }
        @CustomType.Setter
        public Builder newerImageExists(Boolean newerImageExists) {
            this.newerImageExists = Objects.requireNonNull(newerImageExists);
            return this;
        }
        @CustomType.Setter
        public Builder os(String os) {
            this.os = Objects.requireNonNull(os);
            return this;
        }
        @CustomType.Setter
        public Builder osVersion(String osVersion) {
            this.osVersion = Objects.requireNonNull(osVersion);
            return this;
        }
        @CustomType.Setter
        public Builder parent(String parent) {
            this.parent = Objects.requireNonNull(parent);
            return this;
        }
        @CustomType.Setter
        public Builder partialResults(Boolean partialResults) {
            this.partialResults = Objects.requireNonNull(partialResults);
            return this;
        }
        @CustomType.Setter
        public Builder pendingDisallowed(Boolean pendingDisallowed) {
            this.pendingDisallowed = Objects.requireNonNull(pendingDisallowed);
            return this;
        }
        @CustomType.Setter
        public Builder permission(String permission) {
            this.permission = Objects.requireNonNull(permission);
            return this;
        }
        @CustomType.Setter
        public Builder permissionAuthor(String permissionAuthor) {
            this.permissionAuthor = Objects.requireNonNull(permissionAuthor);
            return this;
        }
        @CustomType.Setter
        public Builder permissionComment(String permissionComment) {
            this.permissionComment = Objects.requireNonNull(permissionComment);
            return this;
        }
        @CustomType.Setter
        public Builder registry(String registry) {
            this.registry = Objects.requireNonNull(registry);
            return this;
        }
        @CustomType.Setter
        public Builder registryType(String registryType) {
            this.registryType = Objects.requireNonNull(registryType);
            return this;
        }
        @CustomType.Setter
        public Builder repoDigests(List<String> repoDigests) {
            this.repoDigests = Objects.requireNonNull(repoDigests);
            return this;
        }
        public Builder repoDigests(String... repoDigests) {
            return repoDigests(List.of(repoDigests));
        }
        @CustomType.Setter
        public Builder repository(String repository) {
            this.repository = Objects.requireNonNull(repository);
            return this;
        }
        @CustomType.Setter
        public Builder scanDate(String scanDate) {
            this.scanDate = Objects.requireNonNull(scanDate);
            return this;
        }
        @CustomType.Setter
        public Builder scanError(String scanError) {
            this.scanError = Objects.requireNonNull(scanError);
            return this;
        }
        @CustomType.Setter
        public Builder scanStatus(String scanStatus) {
            this.scanStatus = Objects.requireNonNull(scanStatus);
            return this;
        }
        @CustomType.Setter
        public Builder sensitiveData(Integer sensitiveData) {
            this.sensitiveData = Objects.requireNonNull(sensitiveData);
            return this;
        }
        @CustomType.Setter
        public Builder tag(String tag) {
            this.tag = Objects.requireNonNull(tag);
            return this;
        }
        @CustomType.Setter
        public Builder totalVulnerabilities(Integer totalVulnerabilities) {
            this.totalVulnerabilities = Objects.requireNonNull(totalVulnerabilities);
            return this;
        }
        @CustomType.Setter
        public Builder virtualSize(Integer virtualSize) {
            this.virtualSize = Objects.requireNonNull(virtualSize);
            return this;
        }
        @CustomType.Setter
        public Builder vulnerabilities(List<GetImageVulnerability> vulnerabilities) {
            this.vulnerabilities = Objects.requireNonNull(vulnerabilities);
            return this;
        }
        public Builder vulnerabilities(GetImageVulnerability... vulnerabilities) {
            return vulnerabilities(List.of(vulnerabilities));
        }
        @CustomType.Setter
        public Builder whitelisted(Boolean whitelisted) {
            this.whitelisted = Objects.requireNonNull(whitelisted);
            return this;
        }
        public GetImageResult build() {
            final var o = new GetImageResult();
            o.architecture = architecture;
            o.assuranceChecksPerformeds = assuranceChecksPerformeds;
            o.author = author;
            o.blacklisted = blacklisted;
            o.comment = comment;
            o.created = created;
            o.criticalVulnerabilities = criticalVulnerabilities;
            o.defaultUser = defaultUser;
            o.digest = digest;
            o.disallowed = disallowed;
            o.disallowedByAssuranceChecks = disallowedByAssuranceChecks;
            o.dockerId = dockerId;
            o.dockerLabels = dockerLabels;
            o.dockerVersion = dockerVersion;
            o.dtaSeverityScore = dtaSeverityScore;
            o.dtaSkipped = dtaSkipped;
            o.dtaSkippedReason = dtaSkippedReason;
            o.environmentVariables = environmentVariables;
            o.highVulnerabilities = highVulnerabilities;
            o.histories = histories;
            o.id = id;
            o.imageSize = imageSize;
            o.imageType = imageType;
            o.labels = labels;
            o.lowVulnerabilities = lowVulnerabilities;
            o.malware = malware;
            o.mediumVulnerabilities = mediumVulnerabilities;
            o.name = name;
            o.negligibleVulnerabilities = negligibleVulnerabilities;
            o.newerImageExists = newerImageExists;
            o.os = os;
            o.osVersion = osVersion;
            o.parent = parent;
            o.partialResults = partialResults;
            o.pendingDisallowed = pendingDisallowed;
            o.permission = permission;
            o.permissionAuthor = permissionAuthor;
            o.permissionComment = permissionComment;
            o.registry = registry;
            o.registryType = registryType;
            o.repoDigests = repoDigests;
            o.repository = repository;
            o.scanDate = scanDate;
            o.scanError = scanError;
            o.scanStatus = scanStatus;
            o.sensitiveData = sensitiveData;
            o.tag = tag;
            o.totalVulnerabilities = totalVulnerabilities;
            o.virtualSize = virtualSize;
            o.vulnerabilities = vulnerabilities;
            o.whitelisted = whitelisted;
            return o;
        }
    }
}
