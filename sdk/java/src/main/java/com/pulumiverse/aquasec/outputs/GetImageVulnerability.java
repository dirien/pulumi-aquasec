// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumiverse.aquasec.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetImageVulnerability {
    private String ackAuthor;
    private String ackComment;
    private String ackExpirationConfiguredAt;
    private String ackExpirationConfiguredBy;
    private Integer ackExpirationDays;
    private String ackScope;
    private String acknowledgeDate;
    private String ancestorPkg;
    private Double aquaScore;
    private String aquaScoreClassification;
    private String aquaScoringSystem;
    private String aquaSeverity;
    private String aquaSeverityClassification;
    private String aquaVectors;
    private Integer auditEventsCount;
    private Integer blockEventsCount;
    private String classification;
    private String description;
    /**
     * @return The content digest of the image.
     * 
     */
    private String digest;
    private String exploitReference;
    private String exploitType;
    private String firstFoundDate;
    private String fixVersion;
    private String imageName;
    private String lastFoundDate;
    private String modificationDate;
    /**
     * @return The name of the image.
     * 
     */
    private String name;
    private Double nvdCvss2Score;
    private String nvdCvss2Vectors;
    private Double nvdCvss3Score;
    private String nvdCvss3Severity;
    private String nvdCvss3Vectors;
    private String nvdSeverity;
    private String nvdUrl;
    /**
     * @return The operating system detected in the image
     * 
     */
    private String os;
    /**
     * @return The version of the OS detected in the image.
     * 
     */
    private String osVersion;
    /**
     * @return Permission of the image.
     * 
     */
    private String permission;
    private String publishDate;
    /**
     * @return The name of the registry where the image is stored.
     * 
     */
    private String registry;
    /**
     * @return The name of the image&#39;s repository.
     * 
     */
    private String repository;
    private String resourceArchitecture;
    private String resourceCpe;
    private String resourceFormat;
    private String resourceHash;
    private List<String> resourceLicenses;
    private String resourceName;
    private String resourcePath;
    private String resourceType;
    private String resourceVersion;
    private String severityClassification;
    private String solution;
    private String temporalVector;
    private String vPatchAppliedBy;
    private String vPatchAppliedOn;
    private String vPatchEnforcedBy;
    private String vPatchEnforcedOn;
    private Boolean vPatchPolicyEnforce;
    private String vPatchPolicyName;
    private String vPatchRevertedBy;
    private String vPatchRevertedOn;
    private String vPatchStatus;
    private Double vendorCvss2Score;
    private String vendorCvss2Vectors;
    private String vendorSeverity;
    private String vendorStatement;
    private String vendorUrl;

    private GetImageVulnerability() {}
    public String ackAuthor() {
        return this.ackAuthor;
    }
    public String ackComment() {
        return this.ackComment;
    }
    public String ackExpirationConfiguredAt() {
        return this.ackExpirationConfiguredAt;
    }
    public String ackExpirationConfiguredBy() {
        return this.ackExpirationConfiguredBy;
    }
    public Integer ackExpirationDays() {
        return this.ackExpirationDays;
    }
    public String ackScope() {
        return this.ackScope;
    }
    public String acknowledgeDate() {
        return this.acknowledgeDate;
    }
    public String ancestorPkg() {
        return this.ancestorPkg;
    }
    public Double aquaScore() {
        return this.aquaScore;
    }
    public String aquaScoreClassification() {
        return this.aquaScoreClassification;
    }
    public String aquaScoringSystem() {
        return this.aquaScoringSystem;
    }
    public String aquaSeverity() {
        return this.aquaSeverity;
    }
    public String aquaSeverityClassification() {
        return this.aquaSeverityClassification;
    }
    public String aquaVectors() {
        return this.aquaVectors;
    }
    public Integer auditEventsCount() {
        return this.auditEventsCount;
    }
    public Integer blockEventsCount() {
        return this.blockEventsCount;
    }
    public String classification() {
        return this.classification;
    }
    public String description() {
        return this.description;
    }
    /**
     * @return The content digest of the image.
     * 
     */
    public String digest() {
        return this.digest;
    }
    public String exploitReference() {
        return this.exploitReference;
    }
    public String exploitType() {
        return this.exploitType;
    }
    public String firstFoundDate() {
        return this.firstFoundDate;
    }
    public String fixVersion() {
        return this.fixVersion;
    }
    public String imageName() {
        return this.imageName;
    }
    public String lastFoundDate() {
        return this.lastFoundDate;
    }
    public String modificationDate() {
        return this.modificationDate;
    }
    /**
     * @return The name of the image.
     * 
     */
    public String name() {
        return this.name;
    }
    public Double nvdCvss2Score() {
        return this.nvdCvss2Score;
    }
    public String nvdCvss2Vectors() {
        return this.nvdCvss2Vectors;
    }
    public Double nvdCvss3Score() {
        return this.nvdCvss3Score;
    }
    public String nvdCvss3Severity() {
        return this.nvdCvss3Severity;
    }
    public String nvdCvss3Vectors() {
        return this.nvdCvss3Vectors;
    }
    public String nvdSeverity() {
        return this.nvdSeverity;
    }
    public String nvdUrl() {
        return this.nvdUrl;
    }
    /**
     * @return The operating system detected in the image
     * 
     */
    public String os() {
        return this.os;
    }
    /**
     * @return The version of the OS detected in the image.
     * 
     */
    public String osVersion() {
        return this.osVersion;
    }
    /**
     * @return Permission of the image.
     * 
     */
    public String permission() {
        return this.permission;
    }
    public String publishDate() {
        return this.publishDate;
    }
    /**
     * @return The name of the registry where the image is stored.
     * 
     */
    public String registry() {
        return this.registry;
    }
    /**
     * @return The name of the image&#39;s repository.
     * 
     */
    public String repository() {
        return this.repository;
    }
    public String resourceArchitecture() {
        return this.resourceArchitecture;
    }
    public String resourceCpe() {
        return this.resourceCpe;
    }
    public String resourceFormat() {
        return this.resourceFormat;
    }
    public String resourceHash() {
        return this.resourceHash;
    }
    public List<String> resourceLicenses() {
        return this.resourceLicenses;
    }
    public String resourceName() {
        return this.resourceName;
    }
    public String resourcePath() {
        return this.resourcePath;
    }
    public String resourceType() {
        return this.resourceType;
    }
    public String resourceVersion() {
        return this.resourceVersion;
    }
    public String severityClassification() {
        return this.severityClassification;
    }
    public String solution() {
        return this.solution;
    }
    public String temporalVector() {
        return this.temporalVector;
    }
    public String vPatchAppliedBy() {
        return this.vPatchAppliedBy;
    }
    public String vPatchAppliedOn() {
        return this.vPatchAppliedOn;
    }
    public String vPatchEnforcedBy() {
        return this.vPatchEnforcedBy;
    }
    public String vPatchEnforcedOn() {
        return this.vPatchEnforcedOn;
    }
    public Boolean vPatchPolicyEnforce() {
        return this.vPatchPolicyEnforce;
    }
    public String vPatchPolicyName() {
        return this.vPatchPolicyName;
    }
    public String vPatchRevertedBy() {
        return this.vPatchRevertedBy;
    }
    public String vPatchRevertedOn() {
        return this.vPatchRevertedOn;
    }
    public String vPatchStatus() {
        return this.vPatchStatus;
    }
    public Double vendorCvss2Score() {
        return this.vendorCvss2Score;
    }
    public String vendorCvss2Vectors() {
        return this.vendorCvss2Vectors;
    }
    public String vendorSeverity() {
        return this.vendorSeverity;
    }
    public String vendorStatement() {
        return this.vendorStatement;
    }
    public String vendorUrl() {
        return this.vendorUrl;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetImageVulnerability defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String ackAuthor;
        private String ackComment;
        private String ackExpirationConfiguredAt;
        private String ackExpirationConfiguredBy;
        private Integer ackExpirationDays;
        private String ackScope;
        private String acknowledgeDate;
        private String ancestorPkg;
        private Double aquaScore;
        private String aquaScoreClassification;
        private String aquaScoringSystem;
        private String aquaSeverity;
        private String aquaSeverityClassification;
        private String aquaVectors;
        private Integer auditEventsCount;
        private Integer blockEventsCount;
        private String classification;
        private String description;
        private String digest;
        private String exploitReference;
        private String exploitType;
        private String firstFoundDate;
        private String fixVersion;
        private String imageName;
        private String lastFoundDate;
        private String modificationDate;
        private String name;
        private Double nvdCvss2Score;
        private String nvdCvss2Vectors;
        private Double nvdCvss3Score;
        private String nvdCvss3Severity;
        private String nvdCvss3Vectors;
        private String nvdSeverity;
        private String nvdUrl;
        private String os;
        private String osVersion;
        private String permission;
        private String publishDate;
        private String registry;
        private String repository;
        private String resourceArchitecture;
        private String resourceCpe;
        private String resourceFormat;
        private String resourceHash;
        private List<String> resourceLicenses;
        private String resourceName;
        private String resourcePath;
        private String resourceType;
        private String resourceVersion;
        private String severityClassification;
        private String solution;
        private String temporalVector;
        private String vPatchAppliedBy;
        private String vPatchAppliedOn;
        private String vPatchEnforcedBy;
        private String vPatchEnforcedOn;
        private Boolean vPatchPolicyEnforce;
        private String vPatchPolicyName;
        private String vPatchRevertedBy;
        private String vPatchRevertedOn;
        private String vPatchStatus;
        private Double vendorCvss2Score;
        private String vendorCvss2Vectors;
        private String vendorSeverity;
        private String vendorStatement;
        private String vendorUrl;
        public Builder() {}
        public Builder(GetImageVulnerability defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ackAuthor = defaults.ackAuthor;
    	      this.ackComment = defaults.ackComment;
    	      this.ackExpirationConfiguredAt = defaults.ackExpirationConfiguredAt;
    	      this.ackExpirationConfiguredBy = defaults.ackExpirationConfiguredBy;
    	      this.ackExpirationDays = defaults.ackExpirationDays;
    	      this.ackScope = defaults.ackScope;
    	      this.acknowledgeDate = defaults.acknowledgeDate;
    	      this.ancestorPkg = defaults.ancestorPkg;
    	      this.aquaScore = defaults.aquaScore;
    	      this.aquaScoreClassification = defaults.aquaScoreClassification;
    	      this.aquaScoringSystem = defaults.aquaScoringSystem;
    	      this.aquaSeverity = defaults.aquaSeverity;
    	      this.aquaSeverityClassification = defaults.aquaSeverityClassification;
    	      this.aquaVectors = defaults.aquaVectors;
    	      this.auditEventsCount = defaults.auditEventsCount;
    	      this.blockEventsCount = defaults.blockEventsCount;
    	      this.classification = defaults.classification;
    	      this.description = defaults.description;
    	      this.digest = defaults.digest;
    	      this.exploitReference = defaults.exploitReference;
    	      this.exploitType = defaults.exploitType;
    	      this.firstFoundDate = defaults.firstFoundDate;
    	      this.fixVersion = defaults.fixVersion;
    	      this.imageName = defaults.imageName;
    	      this.lastFoundDate = defaults.lastFoundDate;
    	      this.modificationDate = defaults.modificationDate;
    	      this.name = defaults.name;
    	      this.nvdCvss2Score = defaults.nvdCvss2Score;
    	      this.nvdCvss2Vectors = defaults.nvdCvss2Vectors;
    	      this.nvdCvss3Score = defaults.nvdCvss3Score;
    	      this.nvdCvss3Severity = defaults.nvdCvss3Severity;
    	      this.nvdCvss3Vectors = defaults.nvdCvss3Vectors;
    	      this.nvdSeverity = defaults.nvdSeverity;
    	      this.nvdUrl = defaults.nvdUrl;
    	      this.os = defaults.os;
    	      this.osVersion = defaults.osVersion;
    	      this.permission = defaults.permission;
    	      this.publishDate = defaults.publishDate;
    	      this.registry = defaults.registry;
    	      this.repository = defaults.repository;
    	      this.resourceArchitecture = defaults.resourceArchitecture;
    	      this.resourceCpe = defaults.resourceCpe;
    	      this.resourceFormat = defaults.resourceFormat;
    	      this.resourceHash = defaults.resourceHash;
    	      this.resourceLicenses = defaults.resourceLicenses;
    	      this.resourceName = defaults.resourceName;
    	      this.resourcePath = defaults.resourcePath;
    	      this.resourceType = defaults.resourceType;
    	      this.resourceVersion = defaults.resourceVersion;
    	      this.severityClassification = defaults.severityClassification;
    	      this.solution = defaults.solution;
    	      this.temporalVector = defaults.temporalVector;
    	      this.vPatchAppliedBy = defaults.vPatchAppliedBy;
    	      this.vPatchAppliedOn = defaults.vPatchAppliedOn;
    	      this.vPatchEnforcedBy = defaults.vPatchEnforcedBy;
    	      this.vPatchEnforcedOn = defaults.vPatchEnforcedOn;
    	      this.vPatchPolicyEnforce = defaults.vPatchPolicyEnforce;
    	      this.vPatchPolicyName = defaults.vPatchPolicyName;
    	      this.vPatchRevertedBy = defaults.vPatchRevertedBy;
    	      this.vPatchRevertedOn = defaults.vPatchRevertedOn;
    	      this.vPatchStatus = defaults.vPatchStatus;
    	      this.vendorCvss2Score = defaults.vendorCvss2Score;
    	      this.vendorCvss2Vectors = defaults.vendorCvss2Vectors;
    	      this.vendorSeverity = defaults.vendorSeverity;
    	      this.vendorStatement = defaults.vendorStatement;
    	      this.vendorUrl = defaults.vendorUrl;
        }

        @CustomType.Setter
        public Builder ackAuthor(String ackAuthor) {
            this.ackAuthor = Objects.requireNonNull(ackAuthor);
            return this;
        }
        @CustomType.Setter
        public Builder ackComment(String ackComment) {
            this.ackComment = Objects.requireNonNull(ackComment);
            return this;
        }
        @CustomType.Setter
        public Builder ackExpirationConfiguredAt(String ackExpirationConfiguredAt) {
            this.ackExpirationConfiguredAt = Objects.requireNonNull(ackExpirationConfiguredAt);
            return this;
        }
        @CustomType.Setter
        public Builder ackExpirationConfiguredBy(String ackExpirationConfiguredBy) {
            this.ackExpirationConfiguredBy = Objects.requireNonNull(ackExpirationConfiguredBy);
            return this;
        }
        @CustomType.Setter
        public Builder ackExpirationDays(Integer ackExpirationDays) {
            this.ackExpirationDays = Objects.requireNonNull(ackExpirationDays);
            return this;
        }
        @CustomType.Setter
        public Builder ackScope(String ackScope) {
            this.ackScope = Objects.requireNonNull(ackScope);
            return this;
        }
        @CustomType.Setter
        public Builder acknowledgeDate(String acknowledgeDate) {
            this.acknowledgeDate = Objects.requireNonNull(acknowledgeDate);
            return this;
        }
        @CustomType.Setter
        public Builder ancestorPkg(String ancestorPkg) {
            this.ancestorPkg = Objects.requireNonNull(ancestorPkg);
            return this;
        }
        @CustomType.Setter
        public Builder aquaScore(Double aquaScore) {
            this.aquaScore = Objects.requireNonNull(aquaScore);
            return this;
        }
        @CustomType.Setter
        public Builder aquaScoreClassification(String aquaScoreClassification) {
            this.aquaScoreClassification = Objects.requireNonNull(aquaScoreClassification);
            return this;
        }
        @CustomType.Setter
        public Builder aquaScoringSystem(String aquaScoringSystem) {
            this.aquaScoringSystem = Objects.requireNonNull(aquaScoringSystem);
            return this;
        }
        @CustomType.Setter
        public Builder aquaSeverity(String aquaSeverity) {
            this.aquaSeverity = Objects.requireNonNull(aquaSeverity);
            return this;
        }
        @CustomType.Setter
        public Builder aquaSeverityClassification(String aquaSeverityClassification) {
            this.aquaSeverityClassification = Objects.requireNonNull(aquaSeverityClassification);
            return this;
        }
        @CustomType.Setter
        public Builder aquaVectors(String aquaVectors) {
            this.aquaVectors = Objects.requireNonNull(aquaVectors);
            return this;
        }
        @CustomType.Setter
        public Builder auditEventsCount(Integer auditEventsCount) {
            this.auditEventsCount = Objects.requireNonNull(auditEventsCount);
            return this;
        }
        @CustomType.Setter
        public Builder blockEventsCount(Integer blockEventsCount) {
            this.blockEventsCount = Objects.requireNonNull(blockEventsCount);
            return this;
        }
        @CustomType.Setter
        public Builder classification(String classification) {
            this.classification = Objects.requireNonNull(classification);
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder digest(String digest) {
            this.digest = Objects.requireNonNull(digest);
            return this;
        }
        @CustomType.Setter
        public Builder exploitReference(String exploitReference) {
            this.exploitReference = Objects.requireNonNull(exploitReference);
            return this;
        }
        @CustomType.Setter
        public Builder exploitType(String exploitType) {
            this.exploitType = Objects.requireNonNull(exploitType);
            return this;
        }
        @CustomType.Setter
        public Builder firstFoundDate(String firstFoundDate) {
            this.firstFoundDate = Objects.requireNonNull(firstFoundDate);
            return this;
        }
        @CustomType.Setter
        public Builder fixVersion(String fixVersion) {
            this.fixVersion = Objects.requireNonNull(fixVersion);
            return this;
        }
        @CustomType.Setter
        public Builder imageName(String imageName) {
            this.imageName = Objects.requireNonNull(imageName);
            return this;
        }
        @CustomType.Setter
        public Builder lastFoundDate(String lastFoundDate) {
            this.lastFoundDate = Objects.requireNonNull(lastFoundDate);
            return this;
        }
        @CustomType.Setter
        public Builder modificationDate(String modificationDate) {
            this.modificationDate = Objects.requireNonNull(modificationDate);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder nvdCvss2Score(Double nvdCvss2Score) {
            this.nvdCvss2Score = Objects.requireNonNull(nvdCvss2Score);
            return this;
        }
        @CustomType.Setter
        public Builder nvdCvss2Vectors(String nvdCvss2Vectors) {
            this.nvdCvss2Vectors = Objects.requireNonNull(nvdCvss2Vectors);
            return this;
        }
        @CustomType.Setter
        public Builder nvdCvss3Score(Double nvdCvss3Score) {
            this.nvdCvss3Score = Objects.requireNonNull(nvdCvss3Score);
            return this;
        }
        @CustomType.Setter
        public Builder nvdCvss3Severity(String nvdCvss3Severity) {
            this.nvdCvss3Severity = Objects.requireNonNull(nvdCvss3Severity);
            return this;
        }
        @CustomType.Setter
        public Builder nvdCvss3Vectors(String nvdCvss3Vectors) {
            this.nvdCvss3Vectors = Objects.requireNonNull(nvdCvss3Vectors);
            return this;
        }
        @CustomType.Setter
        public Builder nvdSeverity(String nvdSeverity) {
            this.nvdSeverity = Objects.requireNonNull(nvdSeverity);
            return this;
        }
        @CustomType.Setter
        public Builder nvdUrl(String nvdUrl) {
            this.nvdUrl = Objects.requireNonNull(nvdUrl);
            return this;
        }
        @CustomType.Setter
        public Builder os(String os) {
            this.os = Objects.requireNonNull(os);
            return this;
        }
        @CustomType.Setter
        public Builder osVersion(String osVersion) {
            this.osVersion = Objects.requireNonNull(osVersion);
            return this;
        }
        @CustomType.Setter
        public Builder permission(String permission) {
            this.permission = Objects.requireNonNull(permission);
            return this;
        }
        @CustomType.Setter
        public Builder publishDate(String publishDate) {
            this.publishDate = Objects.requireNonNull(publishDate);
            return this;
        }
        @CustomType.Setter
        public Builder registry(String registry) {
            this.registry = Objects.requireNonNull(registry);
            return this;
        }
        @CustomType.Setter
        public Builder repository(String repository) {
            this.repository = Objects.requireNonNull(repository);
            return this;
        }
        @CustomType.Setter
        public Builder resourceArchitecture(String resourceArchitecture) {
            this.resourceArchitecture = Objects.requireNonNull(resourceArchitecture);
            return this;
        }
        @CustomType.Setter
        public Builder resourceCpe(String resourceCpe) {
            this.resourceCpe = Objects.requireNonNull(resourceCpe);
            return this;
        }
        @CustomType.Setter
        public Builder resourceFormat(String resourceFormat) {
            this.resourceFormat = Objects.requireNonNull(resourceFormat);
            return this;
        }
        @CustomType.Setter
        public Builder resourceHash(String resourceHash) {
            this.resourceHash = Objects.requireNonNull(resourceHash);
            return this;
        }
        @CustomType.Setter
        public Builder resourceLicenses(List<String> resourceLicenses) {
            this.resourceLicenses = Objects.requireNonNull(resourceLicenses);
            return this;
        }
        public Builder resourceLicenses(String... resourceLicenses) {
            return resourceLicenses(List.of(resourceLicenses));
        }
        @CustomType.Setter
        public Builder resourceName(String resourceName) {
            this.resourceName = Objects.requireNonNull(resourceName);
            return this;
        }
        @CustomType.Setter
        public Builder resourcePath(String resourcePath) {
            this.resourcePath = Objects.requireNonNull(resourcePath);
            return this;
        }
        @CustomType.Setter
        public Builder resourceType(String resourceType) {
            this.resourceType = Objects.requireNonNull(resourceType);
            return this;
        }
        @CustomType.Setter
        public Builder resourceVersion(String resourceVersion) {
            this.resourceVersion = Objects.requireNonNull(resourceVersion);
            return this;
        }
        @CustomType.Setter
        public Builder severityClassification(String severityClassification) {
            this.severityClassification = Objects.requireNonNull(severityClassification);
            return this;
        }
        @CustomType.Setter
        public Builder solution(String solution) {
            this.solution = Objects.requireNonNull(solution);
            return this;
        }
        @CustomType.Setter
        public Builder temporalVector(String temporalVector) {
            this.temporalVector = Objects.requireNonNull(temporalVector);
            return this;
        }
        @CustomType.Setter
        public Builder vPatchAppliedBy(String vPatchAppliedBy) {
            this.vPatchAppliedBy = Objects.requireNonNull(vPatchAppliedBy);
            return this;
        }
        @CustomType.Setter
        public Builder vPatchAppliedOn(String vPatchAppliedOn) {
            this.vPatchAppliedOn = Objects.requireNonNull(vPatchAppliedOn);
            return this;
        }
        @CustomType.Setter
        public Builder vPatchEnforcedBy(String vPatchEnforcedBy) {
            this.vPatchEnforcedBy = Objects.requireNonNull(vPatchEnforcedBy);
            return this;
        }
        @CustomType.Setter
        public Builder vPatchEnforcedOn(String vPatchEnforcedOn) {
            this.vPatchEnforcedOn = Objects.requireNonNull(vPatchEnforcedOn);
            return this;
        }
        @CustomType.Setter
        public Builder vPatchPolicyEnforce(Boolean vPatchPolicyEnforce) {
            this.vPatchPolicyEnforce = Objects.requireNonNull(vPatchPolicyEnforce);
            return this;
        }
        @CustomType.Setter
        public Builder vPatchPolicyName(String vPatchPolicyName) {
            this.vPatchPolicyName = Objects.requireNonNull(vPatchPolicyName);
            return this;
        }
        @CustomType.Setter
        public Builder vPatchRevertedBy(String vPatchRevertedBy) {
            this.vPatchRevertedBy = Objects.requireNonNull(vPatchRevertedBy);
            return this;
        }
        @CustomType.Setter
        public Builder vPatchRevertedOn(String vPatchRevertedOn) {
            this.vPatchRevertedOn = Objects.requireNonNull(vPatchRevertedOn);
            return this;
        }
        @CustomType.Setter
        public Builder vPatchStatus(String vPatchStatus) {
            this.vPatchStatus = Objects.requireNonNull(vPatchStatus);
            return this;
        }
        @CustomType.Setter
        public Builder vendorCvss2Score(Double vendorCvss2Score) {
            this.vendorCvss2Score = Objects.requireNonNull(vendorCvss2Score);
            return this;
        }
        @CustomType.Setter
        public Builder vendorCvss2Vectors(String vendorCvss2Vectors) {
            this.vendorCvss2Vectors = Objects.requireNonNull(vendorCvss2Vectors);
            return this;
        }
        @CustomType.Setter
        public Builder vendorSeverity(String vendorSeverity) {
            this.vendorSeverity = Objects.requireNonNull(vendorSeverity);
            return this;
        }
        @CustomType.Setter
        public Builder vendorStatement(String vendorStatement) {
            this.vendorStatement = Objects.requireNonNull(vendorStatement);
            return this;
        }
        @CustomType.Setter
        public Builder vendorUrl(String vendorUrl) {
            this.vendorUrl = Objects.requireNonNull(vendorUrl);
            return this;
        }
        public GetImageVulnerability build() {
            final var o = new GetImageVulnerability();
            o.ackAuthor = ackAuthor;
            o.ackComment = ackComment;
            o.ackExpirationConfiguredAt = ackExpirationConfiguredAt;
            o.ackExpirationConfiguredBy = ackExpirationConfiguredBy;
            o.ackExpirationDays = ackExpirationDays;
            o.ackScope = ackScope;
            o.acknowledgeDate = acknowledgeDate;
            o.ancestorPkg = ancestorPkg;
            o.aquaScore = aquaScore;
            o.aquaScoreClassification = aquaScoreClassification;
            o.aquaScoringSystem = aquaScoringSystem;
            o.aquaSeverity = aquaSeverity;
            o.aquaSeverityClassification = aquaSeverityClassification;
            o.aquaVectors = aquaVectors;
            o.auditEventsCount = auditEventsCount;
            o.blockEventsCount = blockEventsCount;
            o.classification = classification;
            o.description = description;
            o.digest = digest;
            o.exploitReference = exploitReference;
            o.exploitType = exploitType;
            o.firstFoundDate = firstFoundDate;
            o.fixVersion = fixVersion;
            o.imageName = imageName;
            o.lastFoundDate = lastFoundDate;
            o.modificationDate = modificationDate;
            o.name = name;
            o.nvdCvss2Score = nvdCvss2Score;
            o.nvdCvss2Vectors = nvdCvss2Vectors;
            o.nvdCvss3Score = nvdCvss3Score;
            o.nvdCvss3Severity = nvdCvss3Severity;
            o.nvdCvss3Vectors = nvdCvss3Vectors;
            o.nvdSeverity = nvdSeverity;
            o.nvdUrl = nvdUrl;
            o.os = os;
            o.osVersion = osVersion;
            o.permission = permission;
            o.publishDate = publishDate;
            o.registry = registry;
            o.repository = repository;
            o.resourceArchitecture = resourceArchitecture;
            o.resourceCpe = resourceCpe;
            o.resourceFormat = resourceFormat;
            o.resourceHash = resourceHash;
            o.resourceLicenses = resourceLicenses;
            o.resourceName = resourceName;
            o.resourcePath = resourcePath;
            o.resourceType = resourceType;
            o.resourceVersion = resourceVersion;
            o.severityClassification = severityClassification;
            o.solution = solution;
            o.temporalVector = temporalVector;
            o.vPatchAppliedBy = vPatchAppliedBy;
            o.vPatchAppliedOn = vPatchAppliedOn;
            o.vPatchEnforcedBy = vPatchEnforcedBy;
            o.vPatchEnforcedOn = vPatchEnforcedOn;
            o.vPatchPolicyEnforce = vPatchPolicyEnforce;
            o.vPatchPolicyName = vPatchPolicyName;
            o.vPatchRevertedBy = vPatchRevertedBy;
            o.vPatchRevertedOn = vPatchRevertedOn;
            o.vPatchStatus = vPatchStatus;
            o.vendorCvss2Score = vendorCvss2Score;
            o.vendorCvss2Vectors = vendorCvss2Vectors;
            o.vendorSeverity = vendorSeverity;
            o.vendorStatement = vendorStatement;
            o.vendorUrl = vendorUrl;
            return o;
        }
    }
}
