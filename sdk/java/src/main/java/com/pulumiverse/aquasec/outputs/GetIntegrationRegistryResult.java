// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumiverse.aquasec.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetIntegrationRegistryResult {
    /**
     * @return Automatically clean up images and repositories which are no longer present in the registry from Aqua console
     * 
     */
    private Boolean autoCleanup;
    /**
     * @return Whether to automatically pull images from the registry on creation and daily
     * 
     */
    private Boolean autoPull;
    /**
     * @return The interval in days to start pulling new images from the registry, Defaults to 1
     * 
     */
    private Integer autoPullInterval;
    /**
     * @return Maximum number of repositories to pull every day, defaults to 100
     * 
     */
    private Integer autoPullMax;
    /**
     * @return Whether to automatically pull and rescan images from the registry on creation and daily
     * 
     */
    private Boolean autoPullRescan;
    /**
     * @return The time of day to start pulling new images from the registry, in the format HH:MM (24-hour clock), defaults to 03:00
     * 
     */
    private String autoPullTime;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Additional condition for pulling and rescanning images, Defaults to &#39;none&#39;
     * 
     */
    private String imageCreationDateCondition;
    /**
     * @return The name of the registry; string, required - this will be treated as the registry&#39;s ID, so choose a simple alphanumerical name without special signs and spaces
     * 
     */
    private String name;
    /**
     * @return The password for registry authentication
     * 
     */
    private String password;
    /**
     * @return List of possible prefixes to image names pulled from the registry
     * 
     */
    private List<String> prefixes;
    /**
     * @return When auto pull image enabled, sets maximum age of auto pulled images
     * 
     */
    private String pullImageAge;
    /**
     * @return When auto pull image enabled, sets maximum age of auto pulled images tags from each repository.
     * 
     */
    private Integer pullImageCount;
    /**
     * @return List of scanner names
     * 
     */
    private List<String> scannerNames;
    /**
     * @return Scanner type
     * 
     */
    private String scannerType;
    /**
     * @return Registry type (HUB / V1 / V2 / ENGINE / AWS / GCR).
     * 
     */
    private String type;
    /**
     * @return The URL, address or region of the registry
     * 
     */
    private String url;
    /**
     * @return The username for registry authentication.
     * 
     */
    private String username;

    private GetIntegrationRegistryResult() {}
    /**
     * @return Automatically clean up images and repositories which are no longer present in the registry from Aqua console
     * 
     */
    public Boolean autoCleanup() {
        return this.autoCleanup;
    }
    /**
     * @return Whether to automatically pull images from the registry on creation and daily
     * 
     */
    public Boolean autoPull() {
        return this.autoPull;
    }
    /**
     * @return The interval in days to start pulling new images from the registry, Defaults to 1
     * 
     */
    public Integer autoPullInterval() {
        return this.autoPullInterval;
    }
    /**
     * @return Maximum number of repositories to pull every day, defaults to 100
     * 
     */
    public Integer autoPullMax() {
        return this.autoPullMax;
    }
    /**
     * @return Whether to automatically pull and rescan images from the registry on creation and daily
     * 
     */
    public Boolean autoPullRescan() {
        return this.autoPullRescan;
    }
    /**
     * @return The time of day to start pulling new images from the registry, in the format HH:MM (24-hour clock), defaults to 03:00
     * 
     */
    public String autoPullTime() {
        return this.autoPullTime;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Additional condition for pulling and rescanning images, Defaults to &#39;none&#39;
     * 
     */
    public String imageCreationDateCondition() {
        return this.imageCreationDateCondition;
    }
    /**
     * @return The name of the registry; string, required - this will be treated as the registry&#39;s ID, so choose a simple alphanumerical name without special signs and spaces
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The password for registry authentication
     * 
     */
    public String password() {
        return this.password;
    }
    /**
     * @return List of possible prefixes to image names pulled from the registry
     * 
     */
    public List<String> prefixes() {
        return this.prefixes;
    }
    /**
     * @return When auto pull image enabled, sets maximum age of auto pulled images
     * 
     */
    public String pullImageAge() {
        return this.pullImageAge;
    }
    /**
     * @return When auto pull image enabled, sets maximum age of auto pulled images tags from each repository.
     * 
     */
    public Integer pullImageCount() {
        return this.pullImageCount;
    }
    /**
     * @return List of scanner names
     * 
     */
    public List<String> scannerNames() {
        return this.scannerNames;
    }
    /**
     * @return Scanner type
     * 
     */
    public String scannerType() {
        return this.scannerType;
    }
    /**
     * @return Registry type (HUB / V1 / V2 / ENGINE / AWS / GCR).
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return The URL, address or region of the registry
     * 
     */
    public String url() {
        return this.url;
    }
    /**
     * @return The username for registry authentication.
     * 
     */
    public String username() {
        return this.username;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetIntegrationRegistryResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean autoCleanup;
        private Boolean autoPull;
        private Integer autoPullInterval;
        private Integer autoPullMax;
        private Boolean autoPullRescan;
        private String autoPullTime;
        private String id;
        private String imageCreationDateCondition;
        private String name;
        private String password;
        private List<String> prefixes;
        private String pullImageAge;
        private Integer pullImageCount;
        private List<String> scannerNames;
        private String scannerType;
        private String type;
        private String url;
        private String username;
        public Builder() {}
        public Builder(GetIntegrationRegistryResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autoCleanup = defaults.autoCleanup;
    	      this.autoPull = defaults.autoPull;
    	      this.autoPullInterval = defaults.autoPullInterval;
    	      this.autoPullMax = defaults.autoPullMax;
    	      this.autoPullRescan = defaults.autoPullRescan;
    	      this.autoPullTime = defaults.autoPullTime;
    	      this.id = defaults.id;
    	      this.imageCreationDateCondition = defaults.imageCreationDateCondition;
    	      this.name = defaults.name;
    	      this.password = defaults.password;
    	      this.prefixes = defaults.prefixes;
    	      this.pullImageAge = defaults.pullImageAge;
    	      this.pullImageCount = defaults.pullImageCount;
    	      this.scannerNames = defaults.scannerNames;
    	      this.scannerType = defaults.scannerType;
    	      this.type = defaults.type;
    	      this.url = defaults.url;
    	      this.username = defaults.username;
        }

        @CustomType.Setter
        public Builder autoCleanup(Boolean autoCleanup) {
            this.autoCleanup = Objects.requireNonNull(autoCleanup);
            return this;
        }
        @CustomType.Setter
        public Builder autoPull(Boolean autoPull) {
            this.autoPull = Objects.requireNonNull(autoPull);
            return this;
        }
        @CustomType.Setter
        public Builder autoPullInterval(Integer autoPullInterval) {
            this.autoPullInterval = Objects.requireNonNull(autoPullInterval);
            return this;
        }
        @CustomType.Setter
        public Builder autoPullMax(Integer autoPullMax) {
            this.autoPullMax = Objects.requireNonNull(autoPullMax);
            return this;
        }
        @CustomType.Setter
        public Builder autoPullRescan(Boolean autoPullRescan) {
            this.autoPullRescan = Objects.requireNonNull(autoPullRescan);
            return this;
        }
        @CustomType.Setter
        public Builder autoPullTime(String autoPullTime) {
            this.autoPullTime = Objects.requireNonNull(autoPullTime);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder imageCreationDateCondition(String imageCreationDateCondition) {
            this.imageCreationDateCondition = Objects.requireNonNull(imageCreationDateCondition);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder password(String password) {
            this.password = Objects.requireNonNull(password);
            return this;
        }
        @CustomType.Setter
        public Builder prefixes(List<String> prefixes) {
            this.prefixes = Objects.requireNonNull(prefixes);
            return this;
        }
        public Builder prefixes(String... prefixes) {
            return prefixes(List.of(prefixes));
        }
        @CustomType.Setter
        public Builder pullImageAge(String pullImageAge) {
            this.pullImageAge = Objects.requireNonNull(pullImageAge);
            return this;
        }
        @CustomType.Setter
        public Builder pullImageCount(Integer pullImageCount) {
            this.pullImageCount = Objects.requireNonNull(pullImageCount);
            return this;
        }
        @CustomType.Setter
        public Builder scannerNames(List<String> scannerNames) {
            this.scannerNames = Objects.requireNonNull(scannerNames);
            return this;
        }
        public Builder scannerNames(String... scannerNames) {
            return scannerNames(List.of(scannerNames));
        }
        @CustomType.Setter
        public Builder scannerType(String scannerType) {
            this.scannerType = Objects.requireNonNull(scannerType);
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        @CustomType.Setter
        public Builder url(String url) {
            this.url = Objects.requireNonNull(url);
            return this;
        }
        @CustomType.Setter
        public Builder username(String username) {
            this.username = Objects.requireNonNull(username);
            return this;
        }
        public GetIntegrationRegistryResult build() {
            final var o = new GetIntegrationRegistryResult();
            o.autoCleanup = autoCleanup;
            o.autoPull = autoPull;
            o.autoPullInterval = autoPullInterval;
            o.autoPullMax = autoPullMax;
            o.autoPullRescan = autoPullRescan;
            o.autoPullTime = autoPullTime;
            o.id = id;
            o.imageCreationDateCondition = imageCreationDateCondition;
            o.name = name;
            o.password = password;
            o.prefixes = prefixes;
            o.pullImageAge = pullImageAge;
            o.pullImageCount = pullImageCount;
            o.scannerNames = scannerNames;
            o.scannerType = scannerType;
            o.type = type;
            o.url = url;
            o.username = username;
            return o;
        }
    }
}
