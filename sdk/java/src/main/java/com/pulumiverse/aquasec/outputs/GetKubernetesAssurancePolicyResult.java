// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumiverse.aquasec.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumiverse.aquasec.outputs.GetKubernetesAssurancePolicyAutoScanTime;
import com.pulumiverse.aquasec.outputs.GetKubernetesAssurancePolicyCustomCheck;
import com.pulumiverse.aquasec.outputs.GetKubernetesAssurancePolicyForbiddenLabel;
import com.pulumiverse.aquasec.outputs.GetKubernetesAssurancePolicyPackagesBlackList;
import com.pulumiverse.aquasec.outputs.GetKubernetesAssurancePolicyPackagesWhiteList;
import com.pulumiverse.aquasec.outputs.GetKubernetesAssurancePolicyRequiredLabel;
import com.pulumiverse.aquasec.outputs.GetKubernetesAssurancePolicyScope;
import com.pulumiverse.aquasec.outputs.GetKubernetesAssurancePolicyTrustedBaseImage;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetKubernetesAssurancePolicyResult {
    /**
     * @return List of explicitly allowed images.
     * 
     */
    private final List<String> allowedImages;
    private final List<String> applicationScopes;
    /**
     * @return What type of assurance policy is described.
     * 
     */
    private final String assuranceType;
    /**
     * @return Indicates if auditing for failures.
     * 
     */
    private final Boolean auditOnFailure;
    /**
     * @return Name of user account that created the policy.
     * 
     */
    private final String author;
    private final Boolean autoScanConfigured;
    private final Boolean autoScanEnabled;
    private final List<GetKubernetesAssurancePolicyAutoScanTime> autoScanTimes;
    /**
     * @return List of function&#39;s forbidden permissions.
     * 
     */
    private final List<String> blacklistPermissions;
    /**
     * @return Indicates if blacklist permissions is relevant.
     * 
     */
    private final Boolean blacklistPermissionsEnabled;
    /**
     * @return List of blacklisted licenses.
     * 
     */
    private final List<String> blacklistedLicenses;
    /**
     * @return Lndicates if license blacklist is relevant.
     * 
     */
    private final Boolean blacklistedLicensesEnabled;
    /**
     * @return Indicates if failed images are blocked.
     * 
     */
    private final Boolean blockFailed;
    private final Boolean controlExcludeNoFix;
    /**
     * @return List of Custom user scripts for checks.
     * 
     */
    private final List<GetKubernetesAssurancePolicyCustomCheck> customChecks;
    /**
     * @return Indicates if scanning should include custom checks.
     * 
     */
    private final Boolean customChecksEnabled;
    private final Boolean customSeverityEnabled;
    /**
     * @return Indicates if cves blacklist is relevant.
     * 
     */
    private final Boolean cvesBlackListEnabled;
    /**
     * @return List of cves blacklisted items.
     * 
     */
    private final List<String> cvesBlackLists;
    /**
     * @return Indicates if cves whitelist is relevant.
     * 
     */
    private final Boolean cvesWhiteListEnabled;
    /**
     * @return List of cves whitelisted licenses
     * 
     */
    private final List<String> cvesWhiteLists;
    /**
     * @return Identifier of the cvss severity.
     * 
     */
    private final String cvssSeverity;
    /**
     * @return Indicates if the cvss severity is scanned.
     * 
     */
    private final Boolean cvssSeverityEnabled;
    /**
     * @return Indicates that policy should ignore cvss cases that do not have a known fix.
     * 
     */
    private final Boolean cvssSeverityExcludeNoFix;
    private final String description;
    /**
     * @return Indicates if malware should block the image.
     * 
     */
    private final Boolean disallowMalware;
    private final Boolean dockerCisEnabled;
    /**
     * @return Name of the container image.
     * 
     */
    private final String domain;
    private final String domainName;
    private final Boolean dtaEnabled;
    private final String dtaSeverity;
    private final Boolean enabled;
    private final Boolean enforce;
    private final Integer enforceAfterDays;
    private final Boolean enforceExcessivePermissions;
    private final List<String> exceptionalMonitoredMalwarePaths;
    /**
     * @return Indicates if cicd failures will fail the image.
     * 
     */
    private final Boolean failCicd;
    private final List<GetKubernetesAssurancePolicyForbiddenLabel> forbiddenLabels;
    private final Boolean forbiddenLabelsEnabled;
    private final Boolean forceMicroenforcer;
    private final Boolean functionIntegrityEnabled;
    /**
     * @return The ID of this resource.
     * 
     */
    private final String id;
    private final Boolean ignoreRecentlyPublishedVln;
    private final Integer ignoreRecentlyPublishedVlnPeriod;
    /**
     * @return Indicates if risk resources are ignored.
     * 
     */
    private final Boolean ignoreRiskResourcesEnabled;
    /**
     * @return List of ignored risk resources.
     * 
     */
    private final List<String> ignoredRiskResources;
    /**
     * @return List of images.
     * 
     */
    private final List<String> images;
    private final Boolean kubeCisEnabled;
    /**
     * @return List of kubernetes control names
     * 
     */
    private final @Nullable List<String> kubernetesControlsNames;
    /**
     * @return List of labels.
     * 
     */
    private final List<String> labels;
    private final String malwareAction;
    /**
     * @return Value of allowed maximum score.
     * 
     */
    private final Double maximumScore;
    /**
     * @return Indicates if exceeding the maximum score is scanned.
     * 
     */
    private final Boolean maximumScoreEnabled;
    /**
     * @return Indicates that policy should ignore cases that do not have a known fix.
     * 
     */
    private final @Nullable Boolean maximumScoreExcludeNoFix;
    private final List<String> monitoredMalwarePaths;
    private final String name;
    /**
     * @return Indicates if raise a warning for images that should only be run as root.
     * 
     */
    private final Boolean onlyNoneRootUsers;
    /**
     * @return Indicates if packages blacklist is relevant.
     * 
     */
    private final Boolean packagesBlackListEnabled;
    /**
     * @return List of backlisted images.
     * 
     */
    private final List<GetKubernetesAssurancePolicyPackagesBlackList> packagesBlackLists;
    /**
     * @return Indicates if packages whitelist is relevant.
     * 
     */
    private final Boolean packagesWhiteListEnabled;
    /**
     * @return List of whitelisted images.
     * 
     */
    private final List<GetKubernetesAssurancePolicyPackagesWhiteList> packagesWhiteLists;
    private final Boolean partialResultsImageFail;
    private final Boolean readOnly;
    /**
     * @return List of registries.
     * 
     */
    private final List<String> registries;
    private final String registry;
    private final List<GetKubernetesAssurancePolicyRequiredLabel> requiredLabels;
    private final Boolean requiredLabelsEnabled;
    private final Boolean scanNfsMounts;
    /**
     * @return Indicates if scan should include sensitive data in the image.
     * 
     */
    private final Boolean scanSensitiveData;
    /**
     * @return Indicates if scanning should include scap.
     * 
     */
    private final Boolean scapEnabled;
    /**
     * @return List of SCAP user scripts for checks.
     * 
     */
    private final List<String> scapFiles;
    private final List<GetKubernetesAssurancePolicyScope> scopes;
    /**
     * @return List of trusted images.
     * 
     */
    private final List<GetKubernetesAssurancePolicyTrustedBaseImage> trustedBaseImages;
    /**
     * @return Indicates if list of trusted base images is relevant.
     * 
     */
    private final Boolean trustedBaseImagesEnabled;
    /**
     * @return List of whitelisted licenses.
     * 
     */
    private final List<String> whitelistedLicenses;
    /**
     * @return Indicates if license blacklist is relevant.
     * 
     */
    private final Boolean whitelistedLicensesEnabled;

    @CustomType.Constructor
    private GetKubernetesAssurancePolicyResult(
        @CustomType.Parameter("allowedImages") List<String> allowedImages,
        @CustomType.Parameter("applicationScopes") List<String> applicationScopes,
        @CustomType.Parameter("assuranceType") String assuranceType,
        @CustomType.Parameter("auditOnFailure") Boolean auditOnFailure,
        @CustomType.Parameter("author") String author,
        @CustomType.Parameter("autoScanConfigured") Boolean autoScanConfigured,
        @CustomType.Parameter("autoScanEnabled") Boolean autoScanEnabled,
        @CustomType.Parameter("autoScanTimes") List<GetKubernetesAssurancePolicyAutoScanTime> autoScanTimes,
        @CustomType.Parameter("blacklistPermissions") List<String> blacklistPermissions,
        @CustomType.Parameter("blacklistPermissionsEnabled") Boolean blacklistPermissionsEnabled,
        @CustomType.Parameter("blacklistedLicenses") List<String> blacklistedLicenses,
        @CustomType.Parameter("blacklistedLicensesEnabled") Boolean blacklistedLicensesEnabled,
        @CustomType.Parameter("blockFailed") Boolean blockFailed,
        @CustomType.Parameter("controlExcludeNoFix") Boolean controlExcludeNoFix,
        @CustomType.Parameter("customChecks") List<GetKubernetesAssurancePolicyCustomCheck> customChecks,
        @CustomType.Parameter("customChecksEnabled") Boolean customChecksEnabled,
        @CustomType.Parameter("customSeverityEnabled") Boolean customSeverityEnabled,
        @CustomType.Parameter("cvesBlackListEnabled") Boolean cvesBlackListEnabled,
        @CustomType.Parameter("cvesBlackLists") List<String> cvesBlackLists,
        @CustomType.Parameter("cvesWhiteListEnabled") Boolean cvesWhiteListEnabled,
        @CustomType.Parameter("cvesWhiteLists") List<String> cvesWhiteLists,
        @CustomType.Parameter("cvssSeverity") String cvssSeverity,
        @CustomType.Parameter("cvssSeverityEnabled") Boolean cvssSeverityEnabled,
        @CustomType.Parameter("cvssSeverityExcludeNoFix") Boolean cvssSeverityExcludeNoFix,
        @CustomType.Parameter("description") String description,
        @CustomType.Parameter("disallowMalware") Boolean disallowMalware,
        @CustomType.Parameter("dockerCisEnabled") Boolean dockerCisEnabled,
        @CustomType.Parameter("domain") String domain,
        @CustomType.Parameter("domainName") String domainName,
        @CustomType.Parameter("dtaEnabled") Boolean dtaEnabled,
        @CustomType.Parameter("dtaSeverity") String dtaSeverity,
        @CustomType.Parameter("enabled") Boolean enabled,
        @CustomType.Parameter("enforce") Boolean enforce,
        @CustomType.Parameter("enforceAfterDays") Integer enforceAfterDays,
        @CustomType.Parameter("enforceExcessivePermissions") Boolean enforceExcessivePermissions,
        @CustomType.Parameter("exceptionalMonitoredMalwarePaths") List<String> exceptionalMonitoredMalwarePaths,
        @CustomType.Parameter("failCicd") Boolean failCicd,
        @CustomType.Parameter("forbiddenLabels") List<GetKubernetesAssurancePolicyForbiddenLabel> forbiddenLabels,
        @CustomType.Parameter("forbiddenLabelsEnabled") Boolean forbiddenLabelsEnabled,
        @CustomType.Parameter("forceMicroenforcer") Boolean forceMicroenforcer,
        @CustomType.Parameter("functionIntegrityEnabled") Boolean functionIntegrityEnabled,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("ignoreRecentlyPublishedVln") Boolean ignoreRecentlyPublishedVln,
        @CustomType.Parameter("ignoreRecentlyPublishedVlnPeriod") Integer ignoreRecentlyPublishedVlnPeriod,
        @CustomType.Parameter("ignoreRiskResourcesEnabled") Boolean ignoreRiskResourcesEnabled,
        @CustomType.Parameter("ignoredRiskResources") List<String> ignoredRiskResources,
        @CustomType.Parameter("images") List<String> images,
        @CustomType.Parameter("kubeCisEnabled") Boolean kubeCisEnabled,
        @CustomType.Parameter("kubernetesControlsNames") @Nullable List<String> kubernetesControlsNames,
        @CustomType.Parameter("labels") List<String> labels,
        @CustomType.Parameter("malwareAction") String malwareAction,
        @CustomType.Parameter("maximumScore") Double maximumScore,
        @CustomType.Parameter("maximumScoreEnabled") Boolean maximumScoreEnabled,
        @CustomType.Parameter("maximumScoreExcludeNoFix") @Nullable Boolean maximumScoreExcludeNoFix,
        @CustomType.Parameter("monitoredMalwarePaths") List<String> monitoredMalwarePaths,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("onlyNoneRootUsers") Boolean onlyNoneRootUsers,
        @CustomType.Parameter("packagesBlackListEnabled") Boolean packagesBlackListEnabled,
        @CustomType.Parameter("packagesBlackLists") List<GetKubernetesAssurancePolicyPackagesBlackList> packagesBlackLists,
        @CustomType.Parameter("packagesWhiteListEnabled") Boolean packagesWhiteListEnabled,
        @CustomType.Parameter("packagesWhiteLists") List<GetKubernetesAssurancePolicyPackagesWhiteList> packagesWhiteLists,
        @CustomType.Parameter("partialResultsImageFail") Boolean partialResultsImageFail,
        @CustomType.Parameter("readOnly") Boolean readOnly,
        @CustomType.Parameter("registries") List<String> registries,
        @CustomType.Parameter("registry") String registry,
        @CustomType.Parameter("requiredLabels") List<GetKubernetesAssurancePolicyRequiredLabel> requiredLabels,
        @CustomType.Parameter("requiredLabelsEnabled") Boolean requiredLabelsEnabled,
        @CustomType.Parameter("scanNfsMounts") Boolean scanNfsMounts,
        @CustomType.Parameter("scanSensitiveData") Boolean scanSensitiveData,
        @CustomType.Parameter("scapEnabled") Boolean scapEnabled,
        @CustomType.Parameter("scapFiles") List<String> scapFiles,
        @CustomType.Parameter("scopes") List<GetKubernetesAssurancePolicyScope> scopes,
        @CustomType.Parameter("trustedBaseImages") List<GetKubernetesAssurancePolicyTrustedBaseImage> trustedBaseImages,
        @CustomType.Parameter("trustedBaseImagesEnabled") Boolean trustedBaseImagesEnabled,
        @CustomType.Parameter("whitelistedLicenses") List<String> whitelistedLicenses,
        @CustomType.Parameter("whitelistedLicensesEnabled") Boolean whitelistedLicensesEnabled) {
        this.allowedImages = allowedImages;
        this.applicationScopes = applicationScopes;
        this.assuranceType = assuranceType;
        this.auditOnFailure = auditOnFailure;
        this.author = author;
        this.autoScanConfigured = autoScanConfigured;
        this.autoScanEnabled = autoScanEnabled;
        this.autoScanTimes = autoScanTimes;
        this.blacklistPermissions = blacklistPermissions;
        this.blacklistPermissionsEnabled = blacklistPermissionsEnabled;
        this.blacklistedLicenses = blacklistedLicenses;
        this.blacklistedLicensesEnabled = blacklistedLicensesEnabled;
        this.blockFailed = blockFailed;
        this.controlExcludeNoFix = controlExcludeNoFix;
        this.customChecks = customChecks;
        this.customChecksEnabled = customChecksEnabled;
        this.customSeverityEnabled = customSeverityEnabled;
        this.cvesBlackListEnabled = cvesBlackListEnabled;
        this.cvesBlackLists = cvesBlackLists;
        this.cvesWhiteListEnabled = cvesWhiteListEnabled;
        this.cvesWhiteLists = cvesWhiteLists;
        this.cvssSeverity = cvssSeverity;
        this.cvssSeverityEnabled = cvssSeverityEnabled;
        this.cvssSeverityExcludeNoFix = cvssSeverityExcludeNoFix;
        this.description = description;
        this.disallowMalware = disallowMalware;
        this.dockerCisEnabled = dockerCisEnabled;
        this.domain = domain;
        this.domainName = domainName;
        this.dtaEnabled = dtaEnabled;
        this.dtaSeverity = dtaSeverity;
        this.enabled = enabled;
        this.enforce = enforce;
        this.enforceAfterDays = enforceAfterDays;
        this.enforceExcessivePermissions = enforceExcessivePermissions;
        this.exceptionalMonitoredMalwarePaths = exceptionalMonitoredMalwarePaths;
        this.failCicd = failCicd;
        this.forbiddenLabels = forbiddenLabels;
        this.forbiddenLabelsEnabled = forbiddenLabelsEnabled;
        this.forceMicroenforcer = forceMicroenforcer;
        this.functionIntegrityEnabled = functionIntegrityEnabled;
        this.id = id;
        this.ignoreRecentlyPublishedVln = ignoreRecentlyPublishedVln;
        this.ignoreRecentlyPublishedVlnPeriod = ignoreRecentlyPublishedVlnPeriod;
        this.ignoreRiskResourcesEnabled = ignoreRiskResourcesEnabled;
        this.ignoredRiskResources = ignoredRiskResources;
        this.images = images;
        this.kubeCisEnabled = kubeCisEnabled;
        this.kubernetesControlsNames = kubernetesControlsNames;
        this.labels = labels;
        this.malwareAction = malwareAction;
        this.maximumScore = maximumScore;
        this.maximumScoreEnabled = maximumScoreEnabled;
        this.maximumScoreExcludeNoFix = maximumScoreExcludeNoFix;
        this.monitoredMalwarePaths = monitoredMalwarePaths;
        this.name = name;
        this.onlyNoneRootUsers = onlyNoneRootUsers;
        this.packagesBlackListEnabled = packagesBlackListEnabled;
        this.packagesBlackLists = packagesBlackLists;
        this.packagesWhiteListEnabled = packagesWhiteListEnabled;
        this.packagesWhiteLists = packagesWhiteLists;
        this.partialResultsImageFail = partialResultsImageFail;
        this.readOnly = readOnly;
        this.registries = registries;
        this.registry = registry;
        this.requiredLabels = requiredLabels;
        this.requiredLabelsEnabled = requiredLabelsEnabled;
        this.scanNfsMounts = scanNfsMounts;
        this.scanSensitiveData = scanSensitiveData;
        this.scapEnabled = scapEnabled;
        this.scapFiles = scapFiles;
        this.scopes = scopes;
        this.trustedBaseImages = trustedBaseImages;
        this.trustedBaseImagesEnabled = trustedBaseImagesEnabled;
        this.whitelistedLicenses = whitelistedLicenses;
        this.whitelistedLicensesEnabled = whitelistedLicensesEnabled;
    }

    /**
     * @return List of explicitly allowed images.
     * 
     */
    public List<String> allowedImages() {
        return this.allowedImages;
    }
    public List<String> applicationScopes() {
        return this.applicationScopes;
    }
    /**
     * @return What type of assurance policy is described.
     * 
     */
    public String assuranceType() {
        return this.assuranceType;
    }
    /**
     * @return Indicates if auditing for failures.
     * 
     */
    public Boolean auditOnFailure() {
        return this.auditOnFailure;
    }
    /**
     * @return Name of user account that created the policy.
     * 
     */
    public String author() {
        return this.author;
    }
    public Boolean autoScanConfigured() {
        return this.autoScanConfigured;
    }
    public Boolean autoScanEnabled() {
        return this.autoScanEnabled;
    }
    public List<GetKubernetesAssurancePolicyAutoScanTime> autoScanTimes() {
        return this.autoScanTimes;
    }
    /**
     * @return List of function&#39;s forbidden permissions.
     * 
     */
    public List<String> blacklistPermissions() {
        return this.blacklistPermissions;
    }
    /**
     * @return Indicates if blacklist permissions is relevant.
     * 
     */
    public Boolean blacklistPermissionsEnabled() {
        return this.blacklistPermissionsEnabled;
    }
    /**
     * @return List of blacklisted licenses.
     * 
     */
    public List<String> blacklistedLicenses() {
        return this.blacklistedLicenses;
    }
    /**
     * @return Lndicates if license blacklist is relevant.
     * 
     */
    public Boolean blacklistedLicensesEnabled() {
        return this.blacklistedLicensesEnabled;
    }
    /**
     * @return Indicates if failed images are blocked.
     * 
     */
    public Boolean blockFailed() {
        return this.blockFailed;
    }
    public Boolean controlExcludeNoFix() {
        return this.controlExcludeNoFix;
    }
    /**
     * @return List of Custom user scripts for checks.
     * 
     */
    public List<GetKubernetesAssurancePolicyCustomCheck> customChecks() {
        return this.customChecks;
    }
    /**
     * @return Indicates if scanning should include custom checks.
     * 
     */
    public Boolean customChecksEnabled() {
        return this.customChecksEnabled;
    }
    public Boolean customSeverityEnabled() {
        return this.customSeverityEnabled;
    }
    /**
     * @return Indicates if cves blacklist is relevant.
     * 
     */
    public Boolean cvesBlackListEnabled() {
        return this.cvesBlackListEnabled;
    }
    /**
     * @return List of cves blacklisted items.
     * 
     */
    public List<String> cvesBlackLists() {
        return this.cvesBlackLists;
    }
    /**
     * @return Indicates if cves whitelist is relevant.
     * 
     */
    public Boolean cvesWhiteListEnabled() {
        return this.cvesWhiteListEnabled;
    }
    /**
     * @return List of cves whitelisted licenses
     * 
     */
    public List<String> cvesWhiteLists() {
        return this.cvesWhiteLists;
    }
    /**
     * @return Identifier of the cvss severity.
     * 
     */
    public String cvssSeverity() {
        return this.cvssSeverity;
    }
    /**
     * @return Indicates if the cvss severity is scanned.
     * 
     */
    public Boolean cvssSeverityEnabled() {
        return this.cvssSeverityEnabled;
    }
    /**
     * @return Indicates that policy should ignore cvss cases that do not have a known fix.
     * 
     */
    public Boolean cvssSeverityExcludeNoFix() {
        return this.cvssSeverityExcludeNoFix;
    }
    public String description() {
        return this.description;
    }
    /**
     * @return Indicates if malware should block the image.
     * 
     */
    public Boolean disallowMalware() {
        return this.disallowMalware;
    }
    public Boolean dockerCisEnabled() {
        return this.dockerCisEnabled;
    }
    /**
     * @return Name of the container image.
     * 
     */
    public String domain() {
        return this.domain;
    }
    public String domainName() {
        return this.domainName;
    }
    public Boolean dtaEnabled() {
        return this.dtaEnabled;
    }
    public String dtaSeverity() {
        return this.dtaSeverity;
    }
    public Boolean enabled() {
        return this.enabled;
    }
    public Boolean enforce() {
        return this.enforce;
    }
    public Integer enforceAfterDays() {
        return this.enforceAfterDays;
    }
    public Boolean enforceExcessivePermissions() {
        return this.enforceExcessivePermissions;
    }
    public List<String> exceptionalMonitoredMalwarePaths() {
        return this.exceptionalMonitoredMalwarePaths;
    }
    /**
     * @return Indicates if cicd failures will fail the image.
     * 
     */
    public Boolean failCicd() {
        return this.failCicd;
    }
    public List<GetKubernetesAssurancePolicyForbiddenLabel> forbiddenLabels() {
        return this.forbiddenLabels;
    }
    public Boolean forbiddenLabelsEnabled() {
        return this.forbiddenLabelsEnabled;
    }
    public Boolean forceMicroenforcer() {
        return this.forceMicroenforcer;
    }
    public Boolean functionIntegrityEnabled() {
        return this.functionIntegrityEnabled;
    }
    /**
     * @return The ID of this resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Boolean ignoreRecentlyPublishedVln() {
        return this.ignoreRecentlyPublishedVln;
    }
    public Integer ignoreRecentlyPublishedVlnPeriod() {
        return this.ignoreRecentlyPublishedVlnPeriod;
    }
    /**
     * @return Indicates if risk resources are ignored.
     * 
     */
    public Boolean ignoreRiskResourcesEnabled() {
        return this.ignoreRiskResourcesEnabled;
    }
    /**
     * @return List of ignored risk resources.
     * 
     */
    public List<String> ignoredRiskResources() {
        return this.ignoredRiskResources;
    }
    /**
     * @return List of images.
     * 
     */
    public List<String> images() {
        return this.images;
    }
    public Boolean kubeCisEnabled() {
        return this.kubeCisEnabled;
    }
    /**
     * @return List of kubernetes control names
     * 
     */
    public List<String> kubernetesControlsNames() {
        return this.kubernetesControlsNames == null ? List.of() : this.kubernetesControlsNames;
    }
    /**
     * @return List of labels.
     * 
     */
    public List<String> labels() {
        return this.labels;
    }
    public String malwareAction() {
        return this.malwareAction;
    }
    /**
     * @return Value of allowed maximum score.
     * 
     */
    public Double maximumScore() {
        return this.maximumScore;
    }
    /**
     * @return Indicates if exceeding the maximum score is scanned.
     * 
     */
    public Boolean maximumScoreEnabled() {
        return this.maximumScoreEnabled;
    }
    /**
     * @return Indicates that policy should ignore cases that do not have a known fix.
     * 
     */
    public Optional<Boolean> maximumScoreExcludeNoFix() {
        return Optional.ofNullable(this.maximumScoreExcludeNoFix);
    }
    public List<String> monitoredMalwarePaths() {
        return this.monitoredMalwarePaths;
    }
    public String name() {
        return this.name;
    }
    /**
     * @return Indicates if raise a warning for images that should only be run as root.
     * 
     */
    public Boolean onlyNoneRootUsers() {
        return this.onlyNoneRootUsers;
    }
    /**
     * @return Indicates if packages blacklist is relevant.
     * 
     */
    public Boolean packagesBlackListEnabled() {
        return this.packagesBlackListEnabled;
    }
    /**
     * @return List of backlisted images.
     * 
     */
    public List<GetKubernetesAssurancePolicyPackagesBlackList> packagesBlackLists() {
        return this.packagesBlackLists;
    }
    /**
     * @return Indicates if packages whitelist is relevant.
     * 
     */
    public Boolean packagesWhiteListEnabled() {
        return this.packagesWhiteListEnabled;
    }
    /**
     * @return List of whitelisted images.
     * 
     */
    public List<GetKubernetesAssurancePolicyPackagesWhiteList> packagesWhiteLists() {
        return this.packagesWhiteLists;
    }
    public Boolean partialResultsImageFail() {
        return this.partialResultsImageFail;
    }
    public Boolean readOnly() {
        return this.readOnly;
    }
    /**
     * @return List of registries.
     * 
     */
    public List<String> registries() {
        return this.registries;
    }
    public String registry() {
        return this.registry;
    }
    public List<GetKubernetesAssurancePolicyRequiredLabel> requiredLabels() {
        return this.requiredLabels;
    }
    public Boolean requiredLabelsEnabled() {
        return this.requiredLabelsEnabled;
    }
    public Boolean scanNfsMounts() {
        return this.scanNfsMounts;
    }
    /**
     * @return Indicates if scan should include sensitive data in the image.
     * 
     */
    public Boolean scanSensitiveData() {
        return this.scanSensitiveData;
    }
    /**
     * @return Indicates if scanning should include scap.
     * 
     */
    public Boolean scapEnabled() {
        return this.scapEnabled;
    }
    /**
     * @return List of SCAP user scripts for checks.
     * 
     */
    public List<String> scapFiles() {
        return this.scapFiles;
    }
    public List<GetKubernetesAssurancePolicyScope> scopes() {
        return this.scopes;
    }
    /**
     * @return List of trusted images.
     * 
     */
    public List<GetKubernetesAssurancePolicyTrustedBaseImage> trustedBaseImages() {
        return this.trustedBaseImages;
    }
    /**
     * @return Indicates if list of trusted base images is relevant.
     * 
     */
    public Boolean trustedBaseImagesEnabled() {
        return this.trustedBaseImagesEnabled;
    }
    /**
     * @return List of whitelisted licenses.
     * 
     */
    public List<String> whitelistedLicenses() {
        return this.whitelistedLicenses;
    }
    /**
     * @return Indicates if license blacklist is relevant.
     * 
     */
    public Boolean whitelistedLicensesEnabled() {
        return this.whitelistedLicensesEnabled;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetKubernetesAssurancePolicyResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<String> allowedImages;
        private List<String> applicationScopes;
        private String assuranceType;
        private Boolean auditOnFailure;
        private String author;
        private Boolean autoScanConfigured;
        private Boolean autoScanEnabled;
        private List<GetKubernetesAssurancePolicyAutoScanTime> autoScanTimes;
        private List<String> blacklistPermissions;
        private Boolean blacklistPermissionsEnabled;
        private List<String> blacklistedLicenses;
        private Boolean blacklistedLicensesEnabled;
        private Boolean blockFailed;
        private Boolean controlExcludeNoFix;
        private List<GetKubernetesAssurancePolicyCustomCheck> customChecks;
        private Boolean customChecksEnabled;
        private Boolean customSeverityEnabled;
        private Boolean cvesBlackListEnabled;
        private List<String> cvesBlackLists;
        private Boolean cvesWhiteListEnabled;
        private List<String> cvesWhiteLists;
        private String cvssSeverity;
        private Boolean cvssSeverityEnabled;
        private Boolean cvssSeverityExcludeNoFix;
        private String description;
        private Boolean disallowMalware;
        private Boolean dockerCisEnabled;
        private String domain;
        private String domainName;
        private Boolean dtaEnabled;
        private String dtaSeverity;
        private Boolean enabled;
        private Boolean enforce;
        private Integer enforceAfterDays;
        private Boolean enforceExcessivePermissions;
        private List<String> exceptionalMonitoredMalwarePaths;
        private Boolean failCicd;
        private List<GetKubernetesAssurancePolicyForbiddenLabel> forbiddenLabels;
        private Boolean forbiddenLabelsEnabled;
        private Boolean forceMicroenforcer;
        private Boolean functionIntegrityEnabled;
        private String id;
        private Boolean ignoreRecentlyPublishedVln;
        private Integer ignoreRecentlyPublishedVlnPeriod;
        private Boolean ignoreRiskResourcesEnabled;
        private List<String> ignoredRiskResources;
        private List<String> images;
        private Boolean kubeCisEnabled;
        private @Nullable List<String> kubernetesControlsNames;
        private List<String> labels;
        private String malwareAction;
        private Double maximumScore;
        private Boolean maximumScoreEnabled;
        private @Nullable Boolean maximumScoreExcludeNoFix;
        private List<String> monitoredMalwarePaths;
        private String name;
        private Boolean onlyNoneRootUsers;
        private Boolean packagesBlackListEnabled;
        private List<GetKubernetesAssurancePolicyPackagesBlackList> packagesBlackLists;
        private Boolean packagesWhiteListEnabled;
        private List<GetKubernetesAssurancePolicyPackagesWhiteList> packagesWhiteLists;
        private Boolean partialResultsImageFail;
        private Boolean readOnly;
        private List<String> registries;
        private String registry;
        private List<GetKubernetesAssurancePolicyRequiredLabel> requiredLabels;
        private Boolean requiredLabelsEnabled;
        private Boolean scanNfsMounts;
        private Boolean scanSensitiveData;
        private Boolean scapEnabled;
        private List<String> scapFiles;
        private List<GetKubernetesAssurancePolicyScope> scopes;
        private List<GetKubernetesAssurancePolicyTrustedBaseImage> trustedBaseImages;
        private Boolean trustedBaseImagesEnabled;
        private List<String> whitelistedLicenses;
        private Boolean whitelistedLicensesEnabled;

        public Builder() {
    	      // Empty
        }

        public Builder(GetKubernetesAssurancePolicyResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowedImages = defaults.allowedImages;
    	      this.applicationScopes = defaults.applicationScopes;
    	      this.assuranceType = defaults.assuranceType;
    	      this.auditOnFailure = defaults.auditOnFailure;
    	      this.author = defaults.author;
    	      this.autoScanConfigured = defaults.autoScanConfigured;
    	      this.autoScanEnabled = defaults.autoScanEnabled;
    	      this.autoScanTimes = defaults.autoScanTimes;
    	      this.blacklistPermissions = defaults.blacklistPermissions;
    	      this.blacklistPermissionsEnabled = defaults.blacklistPermissionsEnabled;
    	      this.blacklistedLicenses = defaults.blacklistedLicenses;
    	      this.blacklistedLicensesEnabled = defaults.blacklistedLicensesEnabled;
    	      this.blockFailed = defaults.blockFailed;
    	      this.controlExcludeNoFix = defaults.controlExcludeNoFix;
    	      this.customChecks = defaults.customChecks;
    	      this.customChecksEnabled = defaults.customChecksEnabled;
    	      this.customSeverityEnabled = defaults.customSeverityEnabled;
    	      this.cvesBlackListEnabled = defaults.cvesBlackListEnabled;
    	      this.cvesBlackLists = defaults.cvesBlackLists;
    	      this.cvesWhiteListEnabled = defaults.cvesWhiteListEnabled;
    	      this.cvesWhiteLists = defaults.cvesWhiteLists;
    	      this.cvssSeverity = defaults.cvssSeverity;
    	      this.cvssSeverityEnabled = defaults.cvssSeverityEnabled;
    	      this.cvssSeverityExcludeNoFix = defaults.cvssSeverityExcludeNoFix;
    	      this.description = defaults.description;
    	      this.disallowMalware = defaults.disallowMalware;
    	      this.dockerCisEnabled = defaults.dockerCisEnabled;
    	      this.domain = defaults.domain;
    	      this.domainName = defaults.domainName;
    	      this.dtaEnabled = defaults.dtaEnabled;
    	      this.dtaSeverity = defaults.dtaSeverity;
    	      this.enabled = defaults.enabled;
    	      this.enforce = defaults.enforce;
    	      this.enforceAfterDays = defaults.enforceAfterDays;
    	      this.enforceExcessivePermissions = defaults.enforceExcessivePermissions;
    	      this.exceptionalMonitoredMalwarePaths = defaults.exceptionalMonitoredMalwarePaths;
    	      this.failCicd = defaults.failCicd;
    	      this.forbiddenLabels = defaults.forbiddenLabels;
    	      this.forbiddenLabelsEnabled = defaults.forbiddenLabelsEnabled;
    	      this.forceMicroenforcer = defaults.forceMicroenforcer;
    	      this.functionIntegrityEnabled = defaults.functionIntegrityEnabled;
    	      this.id = defaults.id;
    	      this.ignoreRecentlyPublishedVln = defaults.ignoreRecentlyPublishedVln;
    	      this.ignoreRecentlyPublishedVlnPeriod = defaults.ignoreRecentlyPublishedVlnPeriod;
    	      this.ignoreRiskResourcesEnabled = defaults.ignoreRiskResourcesEnabled;
    	      this.ignoredRiskResources = defaults.ignoredRiskResources;
    	      this.images = defaults.images;
    	      this.kubeCisEnabled = defaults.kubeCisEnabled;
    	      this.kubernetesControlsNames = defaults.kubernetesControlsNames;
    	      this.labels = defaults.labels;
    	      this.malwareAction = defaults.malwareAction;
    	      this.maximumScore = defaults.maximumScore;
    	      this.maximumScoreEnabled = defaults.maximumScoreEnabled;
    	      this.maximumScoreExcludeNoFix = defaults.maximumScoreExcludeNoFix;
    	      this.monitoredMalwarePaths = defaults.monitoredMalwarePaths;
    	      this.name = defaults.name;
    	      this.onlyNoneRootUsers = defaults.onlyNoneRootUsers;
    	      this.packagesBlackListEnabled = defaults.packagesBlackListEnabled;
    	      this.packagesBlackLists = defaults.packagesBlackLists;
    	      this.packagesWhiteListEnabled = defaults.packagesWhiteListEnabled;
    	      this.packagesWhiteLists = defaults.packagesWhiteLists;
    	      this.partialResultsImageFail = defaults.partialResultsImageFail;
    	      this.readOnly = defaults.readOnly;
    	      this.registries = defaults.registries;
    	      this.registry = defaults.registry;
    	      this.requiredLabels = defaults.requiredLabels;
    	      this.requiredLabelsEnabled = defaults.requiredLabelsEnabled;
    	      this.scanNfsMounts = defaults.scanNfsMounts;
    	      this.scanSensitiveData = defaults.scanSensitiveData;
    	      this.scapEnabled = defaults.scapEnabled;
    	      this.scapFiles = defaults.scapFiles;
    	      this.scopes = defaults.scopes;
    	      this.trustedBaseImages = defaults.trustedBaseImages;
    	      this.trustedBaseImagesEnabled = defaults.trustedBaseImagesEnabled;
    	      this.whitelistedLicenses = defaults.whitelistedLicenses;
    	      this.whitelistedLicensesEnabled = defaults.whitelistedLicensesEnabled;
        }

        public Builder allowedImages(List<String> allowedImages) {
            this.allowedImages = Objects.requireNonNull(allowedImages);
            return this;
        }
        public Builder allowedImages(String... allowedImages) {
            return allowedImages(List.of(allowedImages));
        }
        public Builder applicationScopes(List<String> applicationScopes) {
            this.applicationScopes = Objects.requireNonNull(applicationScopes);
            return this;
        }
        public Builder applicationScopes(String... applicationScopes) {
            return applicationScopes(List.of(applicationScopes));
        }
        public Builder assuranceType(String assuranceType) {
            this.assuranceType = Objects.requireNonNull(assuranceType);
            return this;
        }
        public Builder auditOnFailure(Boolean auditOnFailure) {
            this.auditOnFailure = Objects.requireNonNull(auditOnFailure);
            return this;
        }
        public Builder author(String author) {
            this.author = Objects.requireNonNull(author);
            return this;
        }
        public Builder autoScanConfigured(Boolean autoScanConfigured) {
            this.autoScanConfigured = Objects.requireNonNull(autoScanConfigured);
            return this;
        }
        public Builder autoScanEnabled(Boolean autoScanEnabled) {
            this.autoScanEnabled = Objects.requireNonNull(autoScanEnabled);
            return this;
        }
        public Builder autoScanTimes(List<GetKubernetesAssurancePolicyAutoScanTime> autoScanTimes) {
            this.autoScanTimes = Objects.requireNonNull(autoScanTimes);
            return this;
        }
        public Builder autoScanTimes(GetKubernetesAssurancePolicyAutoScanTime... autoScanTimes) {
            return autoScanTimes(List.of(autoScanTimes));
        }
        public Builder blacklistPermissions(List<String> blacklistPermissions) {
            this.blacklistPermissions = Objects.requireNonNull(blacklistPermissions);
            return this;
        }
        public Builder blacklistPermissions(String... blacklistPermissions) {
            return blacklistPermissions(List.of(blacklistPermissions));
        }
        public Builder blacklistPermissionsEnabled(Boolean blacklistPermissionsEnabled) {
            this.blacklistPermissionsEnabled = Objects.requireNonNull(blacklistPermissionsEnabled);
            return this;
        }
        public Builder blacklistedLicenses(List<String> blacklistedLicenses) {
            this.blacklistedLicenses = Objects.requireNonNull(blacklistedLicenses);
            return this;
        }
        public Builder blacklistedLicenses(String... blacklistedLicenses) {
            return blacklistedLicenses(List.of(blacklistedLicenses));
        }
        public Builder blacklistedLicensesEnabled(Boolean blacklistedLicensesEnabled) {
            this.blacklistedLicensesEnabled = Objects.requireNonNull(blacklistedLicensesEnabled);
            return this;
        }
        public Builder blockFailed(Boolean blockFailed) {
            this.blockFailed = Objects.requireNonNull(blockFailed);
            return this;
        }
        public Builder controlExcludeNoFix(Boolean controlExcludeNoFix) {
            this.controlExcludeNoFix = Objects.requireNonNull(controlExcludeNoFix);
            return this;
        }
        public Builder customChecks(List<GetKubernetesAssurancePolicyCustomCheck> customChecks) {
            this.customChecks = Objects.requireNonNull(customChecks);
            return this;
        }
        public Builder customChecks(GetKubernetesAssurancePolicyCustomCheck... customChecks) {
            return customChecks(List.of(customChecks));
        }
        public Builder customChecksEnabled(Boolean customChecksEnabled) {
            this.customChecksEnabled = Objects.requireNonNull(customChecksEnabled);
            return this;
        }
        public Builder customSeverityEnabled(Boolean customSeverityEnabled) {
            this.customSeverityEnabled = Objects.requireNonNull(customSeverityEnabled);
            return this;
        }
        public Builder cvesBlackListEnabled(Boolean cvesBlackListEnabled) {
            this.cvesBlackListEnabled = Objects.requireNonNull(cvesBlackListEnabled);
            return this;
        }
        public Builder cvesBlackLists(List<String> cvesBlackLists) {
            this.cvesBlackLists = Objects.requireNonNull(cvesBlackLists);
            return this;
        }
        public Builder cvesBlackLists(String... cvesBlackLists) {
            return cvesBlackLists(List.of(cvesBlackLists));
        }
        public Builder cvesWhiteListEnabled(Boolean cvesWhiteListEnabled) {
            this.cvesWhiteListEnabled = Objects.requireNonNull(cvesWhiteListEnabled);
            return this;
        }
        public Builder cvesWhiteLists(List<String> cvesWhiteLists) {
            this.cvesWhiteLists = Objects.requireNonNull(cvesWhiteLists);
            return this;
        }
        public Builder cvesWhiteLists(String... cvesWhiteLists) {
            return cvesWhiteLists(List.of(cvesWhiteLists));
        }
        public Builder cvssSeverity(String cvssSeverity) {
            this.cvssSeverity = Objects.requireNonNull(cvssSeverity);
            return this;
        }
        public Builder cvssSeverityEnabled(Boolean cvssSeverityEnabled) {
            this.cvssSeverityEnabled = Objects.requireNonNull(cvssSeverityEnabled);
            return this;
        }
        public Builder cvssSeverityExcludeNoFix(Boolean cvssSeverityExcludeNoFix) {
            this.cvssSeverityExcludeNoFix = Objects.requireNonNull(cvssSeverityExcludeNoFix);
            return this;
        }
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        public Builder disallowMalware(Boolean disallowMalware) {
            this.disallowMalware = Objects.requireNonNull(disallowMalware);
            return this;
        }
        public Builder dockerCisEnabled(Boolean dockerCisEnabled) {
            this.dockerCisEnabled = Objects.requireNonNull(dockerCisEnabled);
            return this;
        }
        public Builder domain(String domain) {
            this.domain = Objects.requireNonNull(domain);
            return this;
        }
        public Builder domainName(String domainName) {
            this.domainName = Objects.requireNonNull(domainName);
            return this;
        }
        public Builder dtaEnabled(Boolean dtaEnabled) {
            this.dtaEnabled = Objects.requireNonNull(dtaEnabled);
            return this;
        }
        public Builder dtaSeverity(String dtaSeverity) {
            this.dtaSeverity = Objects.requireNonNull(dtaSeverity);
            return this;
        }
        public Builder enabled(Boolean enabled) {
            this.enabled = Objects.requireNonNull(enabled);
            return this;
        }
        public Builder enforce(Boolean enforce) {
            this.enforce = Objects.requireNonNull(enforce);
            return this;
        }
        public Builder enforceAfterDays(Integer enforceAfterDays) {
            this.enforceAfterDays = Objects.requireNonNull(enforceAfterDays);
            return this;
        }
        public Builder enforceExcessivePermissions(Boolean enforceExcessivePermissions) {
            this.enforceExcessivePermissions = Objects.requireNonNull(enforceExcessivePermissions);
            return this;
        }
        public Builder exceptionalMonitoredMalwarePaths(List<String> exceptionalMonitoredMalwarePaths) {
            this.exceptionalMonitoredMalwarePaths = Objects.requireNonNull(exceptionalMonitoredMalwarePaths);
            return this;
        }
        public Builder exceptionalMonitoredMalwarePaths(String... exceptionalMonitoredMalwarePaths) {
            return exceptionalMonitoredMalwarePaths(List.of(exceptionalMonitoredMalwarePaths));
        }
        public Builder failCicd(Boolean failCicd) {
            this.failCicd = Objects.requireNonNull(failCicd);
            return this;
        }
        public Builder forbiddenLabels(List<GetKubernetesAssurancePolicyForbiddenLabel> forbiddenLabels) {
            this.forbiddenLabels = Objects.requireNonNull(forbiddenLabels);
            return this;
        }
        public Builder forbiddenLabels(GetKubernetesAssurancePolicyForbiddenLabel... forbiddenLabels) {
            return forbiddenLabels(List.of(forbiddenLabels));
        }
        public Builder forbiddenLabelsEnabled(Boolean forbiddenLabelsEnabled) {
            this.forbiddenLabelsEnabled = Objects.requireNonNull(forbiddenLabelsEnabled);
            return this;
        }
        public Builder forceMicroenforcer(Boolean forceMicroenforcer) {
            this.forceMicroenforcer = Objects.requireNonNull(forceMicroenforcer);
            return this;
        }
        public Builder functionIntegrityEnabled(Boolean functionIntegrityEnabled) {
            this.functionIntegrityEnabled = Objects.requireNonNull(functionIntegrityEnabled);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder ignoreRecentlyPublishedVln(Boolean ignoreRecentlyPublishedVln) {
            this.ignoreRecentlyPublishedVln = Objects.requireNonNull(ignoreRecentlyPublishedVln);
            return this;
        }
        public Builder ignoreRecentlyPublishedVlnPeriod(Integer ignoreRecentlyPublishedVlnPeriod) {
            this.ignoreRecentlyPublishedVlnPeriod = Objects.requireNonNull(ignoreRecentlyPublishedVlnPeriod);
            return this;
        }
        public Builder ignoreRiskResourcesEnabled(Boolean ignoreRiskResourcesEnabled) {
            this.ignoreRiskResourcesEnabled = Objects.requireNonNull(ignoreRiskResourcesEnabled);
            return this;
        }
        public Builder ignoredRiskResources(List<String> ignoredRiskResources) {
            this.ignoredRiskResources = Objects.requireNonNull(ignoredRiskResources);
            return this;
        }
        public Builder ignoredRiskResources(String... ignoredRiskResources) {
            return ignoredRiskResources(List.of(ignoredRiskResources));
        }
        public Builder images(List<String> images) {
            this.images = Objects.requireNonNull(images);
            return this;
        }
        public Builder images(String... images) {
            return images(List.of(images));
        }
        public Builder kubeCisEnabled(Boolean kubeCisEnabled) {
            this.kubeCisEnabled = Objects.requireNonNull(kubeCisEnabled);
            return this;
        }
        public Builder kubernetesControlsNames(@Nullable List<String> kubernetesControlsNames) {
            this.kubernetesControlsNames = kubernetesControlsNames;
            return this;
        }
        public Builder kubernetesControlsNames(String... kubernetesControlsNames) {
            return kubernetesControlsNames(List.of(kubernetesControlsNames));
        }
        public Builder labels(List<String> labels) {
            this.labels = Objects.requireNonNull(labels);
            return this;
        }
        public Builder labels(String... labels) {
            return labels(List.of(labels));
        }
        public Builder malwareAction(String malwareAction) {
            this.malwareAction = Objects.requireNonNull(malwareAction);
            return this;
        }
        public Builder maximumScore(Double maximumScore) {
            this.maximumScore = Objects.requireNonNull(maximumScore);
            return this;
        }
        public Builder maximumScoreEnabled(Boolean maximumScoreEnabled) {
            this.maximumScoreEnabled = Objects.requireNonNull(maximumScoreEnabled);
            return this;
        }
        public Builder maximumScoreExcludeNoFix(@Nullable Boolean maximumScoreExcludeNoFix) {
            this.maximumScoreExcludeNoFix = maximumScoreExcludeNoFix;
            return this;
        }
        public Builder monitoredMalwarePaths(List<String> monitoredMalwarePaths) {
            this.monitoredMalwarePaths = Objects.requireNonNull(monitoredMalwarePaths);
            return this;
        }
        public Builder monitoredMalwarePaths(String... monitoredMalwarePaths) {
            return monitoredMalwarePaths(List.of(monitoredMalwarePaths));
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder onlyNoneRootUsers(Boolean onlyNoneRootUsers) {
            this.onlyNoneRootUsers = Objects.requireNonNull(onlyNoneRootUsers);
            return this;
        }
        public Builder packagesBlackListEnabled(Boolean packagesBlackListEnabled) {
            this.packagesBlackListEnabled = Objects.requireNonNull(packagesBlackListEnabled);
            return this;
        }
        public Builder packagesBlackLists(List<GetKubernetesAssurancePolicyPackagesBlackList> packagesBlackLists) {
            this.packagesBlackLists = Objects.requireNonNull(packagesBlackLists);
            return this;
        }
        public Builder packagesBlackLists(GetKubernetesAssurancePolicyPackagesBlackList... packagesBlackLists) {
            return packagesBlackLists(List.of(packagesBlackLists));
        }
        public Builder packagesWhiteListEnabled(Boolean packagesWhiteListEnabled) {
            this.packagesWhiteListEnabled = Objects.requireNonNull(packagesWhiteListEnabled);
            return this;
        }
        public Builder packagesWhiteLists(List<GetKubernetesAssurancePolicyPackagesWhiteList> packagesWhiteLists) {
            this.packagesWhiteLists = Objects.requireNonNull(packagesWhiteLists);
            return this;
        }
        public Builder packagesWhiteLists(GetKubernetesAssurancePolicyPackagesWhiteList... packagesWhiteLists) {
            return packagesWhiteLists(List.of(packagesWhiteLists));
        }
        public Builder partialResultsImageFail(Boolean partialResultsImageFail) {
            this.partialResultsImageFail = Objects.requireNonNull(partialResultsImageFail);
            return this;
        }
        public Builder readOnly(Boolean readOnly) {
            this.readOnly = Objects.requireNonNull(readOnly);
            return this;
        }
        public Builder registries(List<String> registries) {
            this.registries = Objects.requireNonNull(registries);
            return this;
        }
        public Builder registries(String... registries) {
            return registries(List.of(registries));
        }
        public Builder registry(String registry) {
            this.registry = Objects.requireNonNull(registry);
            return this;
        }
        public Builder requiredLabels(List<GetKubernetesAssurancePolicyRequiredLabel> requiredLabels) {
            this.requiredLabels = Objects.requireNonNull(requiredLabels);
            return this;
        }
        public Builder requiredLabels(GetKubernetesAssurancePolicyRequiredLabel... requiredLabels) {
            return requiredLabels(List.of(requiredLabels));
        }
        public Builder requiredLabelsEnabled(Boolean requiredLabelsEnabled) {
            this.requiredLabelsEnabled = Objects.requireNonNull(requiredLabelsEnabled);
            return this;
        }
        public Builder scanNfsMounts(Boolean scanNfsMounts) {
            this.scanNfsMounts = Objects.requireNonNull(scanNfsMounts);
            return this;
        }
        public Builder scanSensitiveData(Boolean scanSensitiveData) {
            this.scanSensitiveData = Objects.requireNonNull(scanSensitiveData);
            return this;
        }
        public Builder scapEnabled(Boolean scapEnabled) {
            this.scapEnabled = Objects.requireNonNull(scapEnabled);
            return this;
        }
        public Builder scapFiles(List<String> scapFiles) {
            this.scapFiles = Objects.requireNonNull(scapFiles);
            return this;
        }
        public Builder scapFiles(String... scapFiles) {
            return scapFiles(List.of(scapFiles));
        }
        public Builder scopes(List<GetKubernetesAssurancePolicyScope> scopes) {
            this.scopes = Objects.requireNonNull(scopes);
            return this;
        }
        public Builder scopes(GetKubernetesAssurancePolicyScope... scopes) {
            return scopes(List.of(scopes));
        }
        public Builder trustedBaseImages(List<GetKubernetesAssurancePolicyTrustedBaseImage> trustedBaseImages) {
            this.trustedBaseImages = Objects.requireNonNull(trustedBaseImages);
            return this;
        }
        public Builder trustedBaseImages(GetKubernetesAssurancePolicyTrustedBaseImage... trustedBaseImages) {
            return trustedBaseImages(List.of(trustedBaseImages));
        }
        public Builder trustedBaseImagesEnabled(Boolean trustedBaseImagesEnabled) {
            this.trustedBaseImagesEnabled = Objects.requireNonNull(trustedBaseImagesEnabled);
            return this;
        }
        public Builder whitelistedLicenses(List<String> whitelistedLicenses) {
            this.whitelistedLicenses = Objects.requireNonNull(whitelistedLicenses);
            return this;
        }
        public Builder whitelistedLicenses(String... whitelistedLicenses) {
            return whitelistedLicenses(List.of(whitelistedLicenses));
        }
        public Builder whitelistedLicensesEnabled(Boolean whitelistedLicensesEnabled) {
            this.whitelistedLicensesEnabled = Objects.requireNonNull(whitelistedLicensesEnabled);
            return this;
        }        public GetKubernetesAssurancePolicyResult build() {
            return new GetKubernetesAssurancePolicyResult(allowedImages, applicationScopes, assuranceType, auditOnFailure, author, autoScanConfigured, autoScanEnabled, autoScanTimes, blacklistPermissions, blacklistPermissionsEnabled, blacklistedLicenses, blacklistedLicensesEnabled, blockFailed, controlExcludeNoFix, customChecks, customChecksEnabled, customSeverityEnabled, cvesBlackListEnabled, cvesBlackLists, cvesWhiteListEnabled, cvesWhiteLists, cvssSeverity, cvssSeverityEnabled, cvssSeverityExcludeNoFix, description, disallowMalware, dockerCisEnabled, domain, domainName, dtaEnabled, dtaSeverity, enabled, enforce, enforceAfterDays, enforceExcessivePermissions, exceptionalMonitoredMalwarePaths, failCicd, forbiddenLabels, forbiddenLabelsEnabled, forceMicroenforcer, functionIntegrityEnabled, id, ignoreRecentlyPublishedVln, ignoreRecentlyPublishedVlnPeriod, ignoreRiskResourcesEnabled, ignoredRiskResources, images, kubeCisEnabled, kubernetesControlsNames, labels, malwareAction, maximumScore, maximumScoreEnabled, maximumScoreExcludeNoFix, monitoredMalwarePaths, name, onlyNoneRootUsers, packagesBlackListEnabled, packagesBlackLists, packagesWhiteListEnabled, packagesWhiteLists, partialResultsImageFail, readOnly, registries, registry, requiredLabels, requiredLabelsEnabled, scanNfsMounts, scanSensitiveData, scapEnabled, scapFiles, scopes, trustedBaseImages, trustedBaseImagesEnabled, whitelistedLicenses, whitelistedLicensesEnabled);
        }
    }
}
