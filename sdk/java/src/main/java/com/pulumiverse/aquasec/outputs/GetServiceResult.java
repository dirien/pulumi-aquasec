// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumiverse.aquasec.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumiverse.aquasec.outputs.GetServiceScopeVariable;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetServiceResult {
    /**
     * @return Indicates the application scope of the service.
     * 
     */
    private List<String> applicationScopes;
    /**
     * @return Username of the account that created the service.
     * 
     */
    private String author;
    /**
     * @return The number of containers associated with the service.
     * 
     */
    private Integer containersCount;
    /**
     * @return A textual description of the service record; maximum 500 characters.
     * 
     */
    private String description;
    /**
     * @return Enforcement status of the service.
     * 
     */
    private Boolean enforce;
    /**
     * @return Whether the service has been evaluated for security vulnerabilities.
     * 
     */
    private Boolean evaluated;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Indicates if registered or not.
     * 
     */
    private Boolean isRegistered;
    /**
     * @return Timestamp of the last update in Unix time format.
     * 
     */
    private Integer lastupdate;
    /**
     * @return Indicates if monitoring is enabled or not
     * 
     */
    private Boolean monitoring;
    /**
     * @return The name of the service. It is recommended not to use whitespace characters in the name.
     * 
     */
    private String name;
    /**
     * @return The number of container that are not evaluated.
     * 
     */
    private Integer notEvaluatedCount;
    /**
     * @return The service&#39;s policies; an array of container firewall policy names.
     * 
     */
    private List<String> policies;
    /**
     * @return Rules priority, must be between 1-100.
     * 
     */
    private Integer priority;
    /**
     * @return Logical expression of how to compute the dependency of the scope variables.
     * 
     */
    private String scopeExpression;
    /**
     * @return List of scope attributes.
     * 
     */
    private List<GetServiceScopeVariable> scopeVariables;
    /**
     * @return Type of the workload. container or host.
     * 
     */
    private String target;
    /**
     * @return The number of containers allocated to the service that are not registered.
     * 
     */
    private Integer unregisteredCount;
    /**
     * @return Number of high severity vulnerabilities.
     * 
     */
    private Integer vulnerabilitiesHigh;
    /**
     * @return Number of low severity vulnerabilities.
     * 
     */
    private Integer vulnerabilitiesLow;
    /**
     * @return Number of malware.
     * 
     */
    private Integer vulnerabilitiesMalware;
    /**
     * @return Number of medium severity vulnerabilities.
     * 
     */
    private Integer vulnerabilitiesMedium;
    /**
     * @return Number of negligible vulnerabilities.
     * 
     */
    private Integer vulnerabilitiesNegligible;
    /**
     * @return The CVSS average vulnerabilities score.
     * 
     */
    private Integer vulnerabilitiesScoreAverage;
    /**
     * @return Number of sensitive vulnerabilities.
     * 
     */
    private Integer vulnerabilitiesSensitive;
    /**
     * @return Total number of vulnerabilities.
     * 
     */
    private Integer vulnerabilitiesTotal;

    private GetServiceResult() {}
    /**
     * @return Indicates the application scope of the service.
     * 
     */
    public List<String> applicationScopes() {
        return this.applicationScopes;
    }
    /**
     * @return Username of the account that created the service.
     * 
     */
    public String author() {
        return this.author;
    }
    /**
     * @return The number of containers associated with the service.
     * 
     */
    public Integer containersCount() {
        return this.containersCount;
    }
    /**
     * @return A textual description of the service record; maximum 500 characters.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Enforcement status of the service.
     * 
     */
    public Boolean enforce() {
        return this.enforce;
    }
    /**
     * @return Whether the service has been evaluated for security vulnerabilities.
     * 
     */
    public Boolean evaluated() {
        return this.evaluated;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Indicates if registered or not.
     * 
     */
    public Boolean isRegistered() {
        return this.isRegistered;
    }
    /**
     * @return Timestamp of the last update in Unix time format.
     * 
     */
    public Integer lastupdate() {
        return this.lastupdate;
    }
    /**
     * @return Indicates if monitoring is enabled or not
     * 
     */
    public Boolean monitoring() {
        return this.monitoring;
    }
    /**
     * @return The name of the service. It is recommended not to use whitespace characters in the name.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The number of container that are not evaluated.
     * 
     */
    public Integer notEvaluatedCount() {
        return this.notEvaluatedCount;
    }
    /**
     * @return The service&#39;s policies; an array of container firewall policy names.
     * 
     */
    public List<String> policies() {
        return this.policies;
    }
    /**
     * @return Rules priority, must be between 1-100.
     * 
     */
    public Integer priority() {
        return this.priority;
    }
    /**
     * @return Logical expression of how to compute the dependency of the scope variables.
     * 
     */
    public String scopeExpression() {
        return this.scopeExpression;
    }
    /**
     * @return List of scope attributes.
     * 
     */
    public List<GetServiceScopeVariable> scopeVariables() {
        return this.scopeVariables;
    }
    /**
     * @return Type of the workload. container or host.
     * 
     */
    public String target() {
        return this.target;
    }
    /**
     * @return The number of containers allocated to the service that are not registered.
     * 
     */
    public Integer unregisteredCount() {
        return this.unregisteredCount;
    }
    /**
     * @return Number of high severity vulnerabilities.
     * 
     */
    public Integer vulnerabilitiesHigh() {
        return this.vulnerabilitiesHigh;
    }
    /**
     * @return Number of low severity vulnerabilities.
     * 
     */
    public Integer vulnerabilitiesLow() {
        return this.vulnerabilitiesLow;
    }
    /**
     * @return Number of malware.
     * 
     */
    public Integer vulnerabilitiesMalware() {
        return this.vulnerabilitiesMalware;
    }
    /**
     * @return Number of medium severity vulnerabilities.
     * 
     */
    public Integer vulnerabilitiesMedium() {
        return this.vulnerabilitiesMedium;
    }
    /**
     * @return Number of negligible vulnerabilities.
     * 
     */
    public Integer vulnerabilitiesNegligible() {
        return this.vulnerabilitiesNegligible;
    }
    /**
     * @return The CVSS average vulnerabilities score.
     * 
     */
    public Integer vulnerabilitiesScoreAverage() {
        return this.vulnerabilitiesScoreAverage;
    }
    /**
     * @return Number of sensitive vulnerabilities.
     * 
     */
    public Integer vulnerabilitiesSensitive() {
        return this.vulnerabilitiesSensitive;
    }
    /**
     * @return Total number of vulnerabilities.
     * 
     */
    public Integer vulnerabilitiesTotal() {
        return this.vulnerabilitiesTotal;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServiceResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> applicationScopes;
        private String author;
        private Integer containersCount;
        private String description;
        private Boolean enforce;
        private Boolean evaluated;
        private String id;
        private Boolean isRegistered;
        private Integer lastupdate;
        private Boolean monitoring;
        private String name;
        private Integer notEvaluatedCount;
        private List<String> policies;
        private Integer priority;
        private String scopeExpression;
        private List<GetServiceScopeVariable> scopeVariables;
        private String target;
        private Integer unregisteredCount;
        private Integer vulnerabilitiesHigh;
        private Integer vulnerabilitiesLow;
        private Integer vulnerabilitiesMalware;
        private Integer vulnerabilitiesMedium;
        private Integer vulnerabilitiesNegligible;
        private Integer vulnerabilitiesScoreAverage;
        private Integer vulnerabilitiesSensitive;
        private Integer vulnerabilitiesTotal;
        public Builder() {}
        public Builder(GetServiceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applicationScopes = defaults.applicationScopes;
    	      this.author = defaults.author;
    	      this.containersCount = defaults.containersCount;
    	      this.description = defaults.description;
    	      this.enforce = defaults.enforce;
    	      this.evaluated = defaults.evaluated;
    	      this.id = defaults.id;
    	      this.isRegistered = defaults.isRegistered;
    	      this.lastupdate = defaults.lastupdate;
    	      this.monitoring = defaults.monitoring;
    	      this.name = defaults.name;
    	      this.notEvaluatedCount = defaults.notEvaluatedCount;
    	      this.policies = defaults.policies;
    	      this.priority = defaults.priority;
    	      this.scopeExpression = defaults.scopeExpression;
    	      this.scopeVariables = defaults.scopeVariables;
    	      this.target = defaults.target;
    	      this.unregisteredCount = defaults.unregisteredCount;
    	      this.vulnerabilitiesHigh = defaults.vulnerabilitiesHigh;
    	      this.vulnerabilitiesLow = defaults.vulnerabilitiesLow;
    	      this.vulnerabilitiesMalware = defaults.vulnerabilitiesMalware;
    	      this.vulnerabilitiesMedium = defaults.vulnerabilitiesMedium;
    	      this.vulnerabilitiesNegligible = defaults.vulnerabilitiesNegligible;
    	      this.vulnerabilitiesScoreAverage = defaults.vulnerabilitiesScoreAverage;
    	      this.vulnerabilitiesSensitive = defaults.vulnerabilitiesSensitive;
    	      this.vulnerabilitiesTotal = defaults.vulnerabilitiesTotal;
        }

        @CustomType.Setter
        public Builder applicationScopes(List<String> applicationScopes) {
            this.applicationScopes = Objects.requireNonNull(applicationScopes);
            return this;
        }
        public Builder applicationScopes(String... applicationScopes) {
            return applicationScopes(List.of(applicationScopes));
        }
        @CustomType.Setter
        public Builder author(String author) {
            this.author = Objects.requireNonNull(author);
            return this;
        }
        @CustomType.Setter
        public Builder containersCount(Integer containersCount) {
            this.containersCount = Objects.requireNonNull(containersCount);
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder enforce(Boolean enforce) {
            this.enforce = Objects.requireNonNull(enforce);
            return this;
        }
        @CustomType.Setter
        public Builder evaluated(Boolean evaluated) {
            this.evaluated = Objects.requireNonNull(evaluated);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder isRegistered(Boolean isRegistered) {
            this.isRegistered = Objects.requireNonNull(isRegistered);
            return this;
        }
        @CustomType.Setter
        public Builder lastupdate(Integer lastupdate) {
            this.lastupdate = Objects.requireNonNull(lastupdate);
            return this;
        }
        @CustomType.Setter
        public Builder monitoring(Boolean monitoring) {
            this.monitoring = Objects.requireNonNull(monitoring);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder notEvaluatedCount(Integer notEvaluatedCount) {
            this.notEvaluatedCount = Objects.requireNonNull(notEvaluatedCount);
            return this;
        }
        @CustomType.Setter
        public Builder policies(List<String> policies) {
            this.policies = Objects.requireNonNull(policies);
            return this;
        }
        public Builder policies(String... policies) {
            return policies(List.of(policies));
        }
        @CustomType.Setter
        public Builder priority(Integer priority) {
            this.priority = Objects.requireNonNull(priority);
            return this;
        }
        @CustomType.Setter
        public Builder scopeExpression(String scopeExpression) {
            this.scopeExpression = Objects.requireNonNull(scopeExpression);
            return this;
        }
        @CustomType.Setter
        public Builder scopeVariables(List<GetServiceScopeVariable> scopeVariables) {
            this.scopeVariables = Objects.requireNonNull(scopeVariables);
            return this;
        }
        public Builder scopeVariables(GetServiceScopeVariable... scopeVariables) {
            return scopeVariables(List.of(scopeVariables));
        }
        @CustomType.Setter
        public Builder target(String target) {
            this.target = Objects.requireNonNull(target);
            return this;
        }
        @CustomType.Setter
        public Builder unregisteredCount(Integer unregisteredCount) {
            this.unregisteredCount = Objects.requireNonNull(unregisteredCount);
            return this;
        }
        @CustomType.Setter
        public Builder vulnerabilitiesHigh(Integer vulnerabilitiesHigh) {
            this.vulnerabilitiesHigh = Objects.requireNonNull(vulnerabilitiesHigh);
            return this;
        }
        @CustomType.Setter
        public Builder vulnerabilitiesLow(Integer vulnerabilitiesLow) {
            this.vulnerabilitiesLow = Objects.requireNonNull(vulnerabilitiesLow);
            return this;
        }
        @CustomType.Setter
        public Builder vulnerabilitiesMalware(Integer vulnerabilitiesMalware) {
            this.vulnerabilitiesMalware = Objects.requireNonNull(vulnerabilitiesMalware);
            return this;
        }
        @CustomType.Setter
        public Builder vulnerabilitiesMedium(Integer vulnerabilitiesMedium) {
            this.vulnerabilitiesMedium = Objects.requireNonNull(vulnerabilitiesMedium);
            return this;
        }
        @CustomType.Setter
        public Builder vulnerabilitiesNegligible(Integer vulnerabilitiesNegligible) {
            this.vulnerabilitiesNegligible = Objects.requireNonNull(vulnerabilitiesNegligible);
            return this;
        }
        @CustomType.Setter
        public Builder vulnerabilitiesScoreAverage(Integer vulnerabilitiesScoreAverage) {
            this.vulnerabilitiesScoreAverage = Objects.requireNonNull(vulnerabilitiesScoreAverage);
            return this;
        }
        @CustomType.Setter
        public Builder vulnerabilitiesSensitive(Integer vulnerabilitiesSensitive) {
            this.vulnerabilitiesSensitive = Objects.requireNonNull(vulnerabilitiesSensitive);
            return this;
        }
        @CustomType.Setter
        public Builder vulnerabilitiesTotal(Integer vulnerabilitiesTotal) {
            this.vulnerabilitiesTotal = Objects.requireNonNull(vulnerabilitiesTotal);
            return this;
        }
        public GetServiceResult build() {
            final var o = new GetServiceResult();
            o.applicationScopes = applicationScopes;
            o.author = author;
            o.containersCount = containersCount;
            o.description = description;
            o.enforce = enforce;
            o.evaluated = evaluated;
            o.id = id;
            o.isRegistered = isRegistered;
            o.lastupdate = lastupdate;
            o.monitoring = monitoring;
            o.name = name;
            o.notEvaluatedCount = notEvaluatedCount;
            o.policies = policies;
            o.priority = priority;
            o.scopeExpression = scopeExpression;
            o.scopeVariables = scopeVariables;
            o.target = target;
            o.unregisteredCount = unregisteredCount;
            o.vulnerabilitiesHigh = vulnerabilitiesHigh;
            o.vulnerabilitiesLow = vulnerabilitiesLow;
            o.vulnerabilitiesMalware = vulnerabilitiesMalware;
            o.vulnerabilitiesMedium = vulnerabilitiesMedium;
            o.vulnerabilitiesNegligible = vulnerabilitiesNegligible;
            o.vulnerabilitiesScoreAverage = vulnerabilitiesScoreAverage;
            o.vulnerabilitiesSensitive = vulnerabilitiesSensitive;
            o.vulnerabilitiesTotal = vulnerabilitiesTotal;
            return o;
        }
    }
}
