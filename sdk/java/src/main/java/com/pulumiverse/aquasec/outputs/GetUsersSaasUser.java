// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumiverse.aquasec.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumiverse.aquasec.outputs.GetUsersSaasUserGroup;
import com.pulumiverse.aquasec.outputs.GetUsersSaasUserLogin;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetUsersSaasUser {
    private final Boolean accountAdmin;
    private final Boolean confirmed;
    private final String created;
    private final List<String> cspRoles;
    private final Boolean dashboard;
    private final String email;
    private final List<GetUsersSaasUserGroup> groups;
    private final List<GetUsersSaasUserLogin> logins;
    private final Boolean multiaccount;
    private final Boolean passwordReset;
    private final String provider;
    private final Boolean sendAnnouncements;
    private final Boolean sendNewPlugins;
    private final Boolean sendNewRisks;
    private final Boolean sendScanResults;
    private final String userId;

    @CustomType.Constructor
    private GetUsersSaasUser(
        @CustomType.Parameter("accountAdmin") Boolean accountAdmin,
        @CustomType.Parameter("confirmed") Boolean confirmed,
        @CustomType.Parameter("created") String created,
        @CustomType.Parameter("cspRoles") List<String> cspRoles,
        @CustomType.Parameter("dashboard") Boolean dashboard,
        @CustomType.Parameter("email") String email,
        @CustomType.Parameter("groups") List<GetUsersSaasUserGroup> groups,
        @CustomType.Parameter("logins") List<GetUsersSaasUserLogin> logins,
        @CustomType.Parameter("multiaccount") Boolean multiaccount,
        @CustomType.Parameter("passwordReset") Boolean passwordReset,
        @CustomType.Parameter("provider") String provider,
        @CustomType.Parameter("sendAnnouncements") Boolean sendAnnouncements,
        @CustomType.Parameter("sendNewPlugins") Boolean sendNewPlugins,
        @CustomType.Parameter("sendNewRisks") Boolean sendNewRisks,
        @CustomType.Parameter("sendScanResults") Boolean sendScanResults,
        @CustomType.Parameter("userId") String userId) {
        this.accountAdmin = accountAdmin;
        this.confirmed = confirmed;
        this.created = created;
        this.cspRoles = cspRoles;
        this.dashboard = dashboard;
        this.email = email;
        this.groups = groups;
        this.logins = logins;
        this.multiaccount = multiaccount;
        this.passwordReset = passwordReset;
        this.provider = provider;
        this.sendAnnouncements = sendAnnouncements;
        this.sendNewPlugins = sendNewPlugins;
        this.sendNewRisks = sendNewRisks;
        this.sendScanResults = sendScanResults;
        this.userId = userId;
    }

    public Boolean accountAdmin() {
        return this.accountAdmin;
    }
    public Boolean confirmed() {
        return this.confirmed;
    }
    public String created() {
        return this.created;
    }
    public List<String> cspRoles() {
        return this.cspRoles;
    }
    public Boolean dashboard() {
        return this.dashboard;
    }
    public String email() {
        return this.email;
    }
    public List<GetUsersSaasUserGroup> groups() {
        return this.groups;
    }
    public List<GetUsersSaasUserLogin> logins() {
        return this.logins;
    }
    public Boolean multiaccount() {
        return this.multiaccount;
    }
    public Boolean passwordReset() {
        return this.passwordReset;
    }
    public String provider() {
        return this.provider;
    }
    public Boolean sendAnnouncements() {
        return this.sendAnnouncements;
    }
    public Boolean sendNewPlugins() {
        return this.sendNewPlugins;
    }
    public Boolean sendNewRisks() {
        return this.sendNewRisks;
    }
    public Boolean sendScanResults() {
        return this.sendScanResults;
    }
    public String userId() {
        return this.userId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetUsersSaasUser defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Boolean accountAdmin;
        private Boolean confirmed;
        private String created;
        private List<String> cspRoles;
        private Boolean dashboard;
        private String email;
        private List<GetUsersSaasUserGroup> groups;
        private List<GetUsersSaasUserLogin> logins;
        private Boolean multiaccount;
        private Boolean passwordReset;
        private String provider;
        private Boolean sendAnnouncements;
        private Boolean sendNewPlugins;
        private Boolean sendNewRisks;
        private Boolean sendScanResults;
        private String userId;

        public Builder() {
    	      // Empty
        }

        public Builder(GetUsersSaasUser defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountAdmin = defaults.accountAdmin;
    	      this.confirmed = defaults.confirmed;
    	      this.created = defaults.created;
    	      this.cspRoles = defaults.cspRoles;
    	      this.dashboard = defaults.dashboard;
    	      this.email = defaults.email;
    	      this.groups = defaults.groups;
    	      this.logins = defaults.logins;
    	      this.multiaccount = defaults.multiaccount;
    	      this.passwordReset = defaults.passwordReset;
    	      this.provider = defaults.provider;
    	      this.sendAnnouncements = defaults.sendAnnouncements;
    	      this.sendNewPlugins = defaults.sendNewPlugins;
    	      this.sendNewRisks = defaults.sendNewRisks;
    	      this.sendScanResults = defaults.sendScanResults;
    	      this.userId = defaults.userId;
        }

        public Builder accountAdmin(Boolean accountAdmin) {
            this.accountAdmin = Objects.requireNonNull(accountAdmin);
            return this;
        }
        public Builder confirmed(Boolean confirmed) {
            this.confirmed = Objects.requireNonNull(confirmed);
            return this;
        }
        public Builder created(String created) {
            this.created = Objects.requireNonNull(created);
            return this;
        }
        public Builder cspRoles(List<String> cspRoles) {
            this.cspRoles = Objects.requireNonNull(cspRoles);
            return this;
        }
        public Builder cspRoles(String... cspRoles) {
            return cspRoles(List.of(cspRoles));
        }
        public Builder dashboard(Boolean dashboard) {
            this.dashboard = Objects.requireNonNull(dashboard);
            return this;
        }
        public Builder email(String email) {
            this.email = Objects.requireNonNull(email);
            return this;
        }
        public Builder groups(List<GetUsersSaasUserGroup> groups) {
            this.groups = Objects.requireNonNull(groups);
            return this;
        }
        public Builder groups(GetUsersSaasUserGroup... groups) {
            return groups(List.of(groups));
        }
        public Builder logins(List<GetUsersSaasUserLogin> logins) {
            this.logins = Objects.requireNonNull(logins);
            return this;
        }
        public Builder logins(GetUsersSaasUserLogin... logins) {
            return logins(List.of(logins));
        }
        public Builder multiaccount(Boolean multiaccount) {
            this.multiaccount = Objects.requireNonNull(multiaccount);
            return this;
        }
        public Builder passwordReset(Boolean passwordReset) {
            this.passwordReset = Objects.requireNonNull(passwordReset);
            return this;
        }
        public Builder provider(String provider) {
            this.provider = Objects.requireNonNull(provider);
            return this;
        }
        public Builder sendAnnouncements(Boolean sendAnnouncements) {
            this.sendAnnouncements = Objects.requireNonNull(sendAnnouncements);
            return this;
        }
        public Builder sendNewPlugins(Boolean sendNewPlugins) {
            this.sendNewPlugins = Objects.requireNonNull(sendNewPlugins);
            return this;
        }
        public Builder sendNewRisks(Boolean sendNewRisks) {
            this.sendNewRisks = Objects.requireNonNull(sendNewRisks);
            return this;
        }
        public Builder sendScanResults(Boolean sendScanResults) {
            this.sendScanResults = Objects.requireNonNull(sendScanResults);
            return this;
        }
        public Builder userId(String userId) {
            this.userId = Objects.requireNonNull(userId);
            return this;
        }        public GetUsersSaasUser build() {
            return new GetUsersSaasUser(accountAdmin, confirmed, created, cspRoles, dashboard, email, groups, logins, multiaccount, passwordReset, provider, sendAnnouncements, sendNewPlugins, sendNewRisks, sendScanResults, userId);
        }
    }
}
