// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumiverse.aquasec.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ImageAssuranceChecksPerformed {
    private @Nullable String assuranceType;
    private @Nullable Boolean blocking;
    private @Nullable String control;
    /**
     * @return If DTA was skipped.
     * 
     */
    private @Nullable Boolean dtaSkipped;
    /**
     * @return The reason why DTA was skipped.
     * 
     */
    private @Nullable String dtaSkippedReason;
    private @Nullable Boolean failed;
    private @Nullable String policyName;

    private ImageAssuranceChecksPerformed() {}
    public Optional<String> assuranceType() {
        return Optional.ofNullable(this.assuranceType);
    }
    public Optional<Boolean> blocking() {
        return Optional.ofNullable(this.blocking);
    }
    public Optional<String> control() {
        return Optional.ofNullable(this.control);
    }
    /**
     * @return If DTA was skipped.
     * 
     */
    public Optional<Boolean> dtaSkipped() {
        return Optional.ofNullable(this.dtaSkipped);
    }
    /**
     * @return The reason why DTA was skipped.
     * 
     */
    public Optional<String> dtaSkippedReason() {
        return Optional.ofNullable(this.dtaSkippedReason);
    }
    public Optional<Boolean> failed() {
        return Optional.ofNullable(this.failed);
    }
    public Optional<String> policyName() {
        return Optional.ofNullable(this.policyName);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ImageAssuranceChecksPerformed defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String assuranceType;
        private @Nullable Boolean blocking;
        private @Nullable String control;
        private @Nullable Boolean dtaSkipped;
        private @Nullable String dtaSkippedReason;
        private @Nullable Boolean failed;
        private @Nullable String policyName;
        public Builder() {}
        public Builder(ImageAssuranceChecksPerformed defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.assuranceType = defaults.assuranceType;
    	      this.blocking = defaults.blocking;
    	      this.control = defaults.control;
    	      this.dtaSkipped = defaults.dtaSkipped;
    	      this.dtaSkippedReason = defaults.dtaSkippedReason;
    	      this.failed = defaults.failed;
    	      this.policyName = defaults.policyName;
        }

        @CustomType.Setter
        public Builder assuranceType(@Nullable String assuranceType) {
            this.assuranceType = assuranceType;
            return this;
        }
        @CustomType.Setter
        public Builder blocking(@Nullable Boolean blocking) {
            this.blocking = blocking;
            return this;
        }
        @CustomType.Setter
        public Builder control(@Nullable String control) {
            this.control = control;
            return this;
        }
        @CustomType.Setter
        public Builder dtaSkipped(@Nullable Boolean dtaSkipped) {
            this.dtaSkipped = dtaSkipped;
            return this;
        }
        @CustomType.Setter
        public Builder dtaSkippedReason(@Nullable String dtaSkippedReason) {
            this.dtaSkippedReason = dtaSkippedReason;
            return this;
        }
        @CustomType.Setter
        public Builder failed(@Nullable Boolean failed) {
            this.failed = failed;
            return this;
        }
        @CustomType.Setter
        public Builder policyName(@Nullable String policyName) {
            this.policyName = policyName;
            return this;
        }
        public ImageAssuranceChecksPerformed build() {
            final var o = new ImageAssuranceChecksPerformed();
            o.assuranceType = assuranceType;
            o.blocking = blocking;
            o.control = control;
            o.dtaSkipped = dtaSkipped;
            o.dtaSkippedReason = dtaSkippedReason;
            o.failed = failed;
            o.policyName = policyName;
            return o;
        }
    }
}
