// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class IntegrationRegistry extends pulumi.CustomResource {
    /**
     * Get an existing IntegrationRegistry resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IntegrationRegistryState, opts?: pulumi.CustomResourceOptions): IntegrationRegistry {
        return new IntegrationRegistry(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aquasec:index/integrationRegistry:IntegrationRegistry';

    /**
     * Returns true if the given object is an instance of IntegrationRegistry.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IntegrationRegistry {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IntegrationRegistry.__pulumiType;
    }

    /**
     * The username of the user who created or last modified the registry
     */
    public readonly author!: pulumi.Output<string>;
    /**
     * Whether to automatically pull images from the registry on creation and daily
     */
    public readonly autoPull!: pulumi.Output<boolean | undefined>;
    /**
     * The interval in days to start pulling new images from the registry, Defaults to 1
     */
    public readonly autoPullInterval!: pulumi.Output<number | undefined>;
    /**
     * Maximum number of repositories to pull every day, defaults to 100
     */
    public readonly autoPullMax!: pulumi.Output<number | undefined>;
    /**
     * The time of day to start pulling new images from the registry, in the format HH:MM (24-hour clock), defaults to 03:00
     */
    public readonly autoPullTime!: pulumi.Output<string | undefined>;
    /**
     * The last time the registry was modified in UNIX time
     */
    public readonly lastUpdated!: pulumi.Output<string>;
    /**
     * The name of the registry; string, required - this will be treated as the registry's ID, so choose a simple alphanumerical name without special signs and spaces
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The password for registry authentication
     */
    public readonly password!: pulumi.Output<string | undefined>;
    /**
     * List of possible prefixes to image names pulled from the registry
     */
    public readonly prefixes!: pulumi.Output<string[]>;
    /**
     * List of scanner names
     */
    public readonly scannerNames!: pulumi.Output<string[] | undefined>;
    /**
     * The Scanner type
     */
    public readonly scannerType!: pulumi.Output<string>;
    /**
     * Registry type (HUB / V1 / V2 / ENGINE / AWS / GCR).
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * The URL, address or region of the registry
     */
    public readonly url!: pulumi.Output<string>;
    /**
     * The username for registry authentication.
     */
    public readonly username!: pulumi.Output<string | undefined>;

    /**
     * Create a IntegrationRegistry resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IntegrationRegistryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IntegrationRegistryArgs | IntegrationRegistryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IntegrationRegistryState | undefined;
            resourceInputs["author"] = state ? state.author : undefined;
            resourceInputs["autoPull"] = state ? state.autoPull : undefined;
            resourceInputs["autoPullInterval"] = state ? state.autoPullInterval : undefined;
            resourceInputs["autoPullMax"] = state ? state.autoPullMax : undefined;
            resourceInputs["autoPullTime"] = state ? state.autoPullTime : undefined;
            resourceInputs["lastUpdated"] = state ? state.lastUpdated : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["prefixes"] = state ? state.prefixes : undefined;
            resourceInputs["scannerNames"] = state ? state.scannerNames : undefined;
            resourceInputs["scannerType"] = state ? state.scannerType : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as IntegrationRegistryArgs | undefined;
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["author"] = args ? args.author : undefined;
            resourceInputs["autoPull"] = args ? args.autoPull : undefined;
            resourceInputs["autoPullInterval"] = args ? args.autoPullInterval : undefined;
            resourceInputs["autoPullMax"] = args ? args.autoPullMax : undefined;
            resourceInputs["autoPullTime"] = args ? args.autoPullTime : undefined;
            resourceInputs["lastUpdated"] = args ? args.lastUpdated : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["password"] = args ? args.password : undefined;
            resourceInputs["prefixes"] = args ? args.prefixes : undefined;
            resourceInputs["scannerNames"] = args ? args.scannerNames : undefined;
            resourceInputs["scannerType"] = args ? args.scannerType : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["url"] = args ? args.url : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IntegrationRegistry.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering IntegrationRegistry resources.
 */
export interface IntegrationRegistryState {
    /**
     * The username of the user who created or last modified the registry
     */
    author?: pulumi.Input<string>;
    /**
     * Whether to automatically pull images from the registry on creation and daily
     */
    autoPull?: pulumi.Input<boolean>;
    /**
     * The interval in days to start pulling new images from the registry, Defaults to 1
     */
    autoPullInterval?: pulumi.Input<number>;
    /**
     * Maximum number of repositories to pull every day, defaults to 100
     */
    autoPullMax?: pulumi.Input<number>;
    /**
     * The time of day to start pulling new images from the registry, in the format HH:MM (24-hour clock), defaults to 03:00
     */
    autoPullTime?: pulumi.Input<string>;
    /**
     * The last time the registry was modified in UNIX time
     */
    lastUpdated?: pulumi.Input<string>;
    /**
     * The name of the registry; string, required - this will be treated as the registry's ID, so choose a simple alphanumerical name without special signs and spaces
     */
    name?: pulumi.Input<string>;
    /**
     * The password for registry authentication
     */
    password?: pulumi.Input<string>;
    /**
     * List of possible prefixes to image names pulled from the registry
     */
    prefixes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of scanner names
     */
    scannerNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The Scanner type
     */
    scannerType?: pulumi.Input<string>;
    /**
     * Registry type (HUB / V1 / V2 / ENGINE / AWS / GCR).
     */
    type?: pulumi.Input<string>;
    /**
     * The URL, address or region of the registry
     */
    url?: pulumi.Input<string>;
    /**
     * The username for registry authentication.
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a IntegrationRegistry resource.
 */
export interface IntegrationRegistryArgs {
    /**
     * The username of the user who created or last modified the registry
     */
    author?: pulumi.Input<string>;
    /**
     * Whether to automatically pull images from the registry on creation and daily
     */
    autoPull?: pulumi.Input<boolean>;
    /**
     * The interval in days to start pulling new images from the registry, Defaults to 1
     */
    autoPullInterval?: pulumi.Input<number>;
    /**
     * Maximum number of repositories to pull every day, defaults to 100
     */
    autoPullMax?: pulumi.Input<number>;
    /**
     * The time of day to start pulling new images from the registry, in the format HH:MM (24-hour clock), defaults to 03:00
     */
    autoPullTime?: pulumi.Input<string>;
    /**
     * The last time the registry was modified in UNIX time
     */
    lastUpdated?: pulumi.Input<string>;
    /**
     * The name of the registry; string, required - this will be treated as the registry's ID, so choose a simple alphanumerical name without special signs and spaces
     */
    name?: pulumi.Input<string>;
    /**
     * The password for registry authentication
     */
    password?: pulumi.Input<string>;
    /**
     * List of possible prefixes to image names pulled from the registry
     */
    prefixes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of scanner names
     */
    scannerNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The Scanner type
     */
    scannerType?: pulumi.Input<string>;
    /**
     * Registry type (HUB / V1 / V2 / ENGINE / AWS / GCR).
     */
    type: pulumi.Input<string>;
    /**
     * The URL, address or region of the registry
     */
    url?: pulumi.Input<string>;
    /**
     * The username for registry authentication.
     */
    username?: pulumi.Input<string>;
}
